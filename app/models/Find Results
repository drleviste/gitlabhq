Searching 26664 files for "ContributorsStatGraph"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/assets/javascripts/stat_graph_contributors.js.coffee:
    1: class window.ContributorsStatGraph
    2    init: (log) ->
    3:     @parsed_log = ContributorsStatGraphUtil.parse_log(log)
    4      @set_current_field("commits")
    5:     total_commits = ContributorsStatGraphUtil.get_total_data(@parsed_log, @field)
    6:     author_commits = ContributorsStatGraphUtil.get_author_data(@parsed_log, @field)
    7      @add_master_graph(total_commits)
    8      @add_authors_graph(author_commits)
    .
   59      list_item
   60    redraw_master: ->
   61:     total_data = ContributorsStatGraphUtil.get_total_data(@parsed_log, @field)
   62      @master_graph.set_data(total_data)
   63      @master_graph.redraw()
   ..
   65      $("ol").html("")
   66      x_domain = ContributorsGraph.prototype.x_domain
   67:     author_commits = ContributorsStatGraphUtil.get_author_data(@parsed_log, @field, x_domain)
   68      _.each(author_commits, (d) =>
   69        @redraw_author_commit_info(d)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/assets/javascripts/stat_graph_contributors_util.js.coffee:
    1: window.ContributorsStatGraphUtil =
    2    parse_log: (log) ->
    3      total = {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/views/projects/graphs/show.js.haml:
    1  - if @success
    2    :plain
    3:     controller = new ContributorsStatGraph
    4      controller.init(#{@log})
    5  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/spec/javascripts/stat_graph_contributors_util_spec.js:
    1: describe("ContributorsStatGraphUtil", function () {
    2  
    3    describe("#parse_log", function () {
    .
   25          ]
   26        }
   27:       expect(ContributorsStatGraphUtil.parse_log(fake_log)).toEqual(correct_parsed_log)
   28      })
   29    })
   ..
   36  
   37      it("calls #store_commits", function () {
   38:       spyOn(ContributorsStatGraphUtil, 'store_commits')
   39:       ContributorsStatGraphUtil.store_data(fake_entry, fake_total, fake_by_author)
   40:       expect(ContributorsStatGraphUtil.store_commits).toHaveBeenCalled()
   41      })
   42  
   43      it("calls #store_additions", function () {
   44:       spyOn(ContributorsStatGraphUtil, 'store_additions')
   45:       ContributorsStatGraphUtil.store_data(fake_entry, fake_total, fake_by_author)
   46:       expect(ContributorsStatGraphUtil.store_additions).toHaveBeenCalled()
   47      })
   48  
   49      it("calls #store_deletions", function () {
   50:       spyOn(ContributorsStatGraphUtil, 'store_deletions')
   51:       ContributorsStatGraphUtil.store_data(fake_entry, fake_total, fake_by_author)
   52:       expect(ContributorsStatGraphUtil.store_deletions).toHaveBeenCalled()
   53      })
   54  
   ..
   61  
   62      //it("calls #add twice with arguments fake_total and fake_by_author respectively", function () {
   63:       //spyOn(ContributorsStatGraphUtil, 'add')
   64:       //ContributorsStatGraphUtil.store_commits(fake_total, fake_by_author)
   65:       //expect(ContributorsStatGraphUtil.add.argsForCall).toEqual([["fake_total", "commits", 1], ["fake_by_author", "commits", 1]])
   66      //})
   67    //})
   ..
   70      it("adds 1 to current test_field in collection", function () {
   71        var fake_collection = {test_field: 10}
   72:       ContributorsStatGraphUtil.add(fake_collection, "test_field", 1)
   73        expect(fake_collection.test_field).toEqual(11)
   74      })
   ..
   76      it("inits and adds 1 if test_field in collection is not defined", function () {
   77        var fake_collection = {}
   78:       ContributorsStatGraphUtil.add(fake_collection, "test_field", 1)
   79        expect(fake_collection.test_field).toEqual(1)
   80      })
   ..
   87      //var fake_by_author = "fake_by_author"
   88      //it("calls #add twice with arguments fake_total and fake_by_author respectively", function () {
   89:       //spyOn(ContributorsStatGraphUtil, 'add')
   90:       //ContributorsStatGraphUtil.store_additions(fake_entry, fake_total, fake_by_author)
   91:       //expect(ContributorsStatGraphUtil.add.argsForCall).toEqual([["fake_total", "additions", 10], ["fake_by_author", "additions", 10]])
   92      //})
   93    //})
   ..
   99      //var fake_by_author = "fake_by_author"
  100      //it("calls #add twice with arguments fake_total and fake_by_author respectively", function () {
  101:       //spyOn(ContributorsStatGraphUtil, 'add')
  102:       //ContributorsStatGraphUtil.store_deletions(fake_entry, fake_total, fake_by_author)
  103:       //expect(ContributorsStatGraphUtil.add.argsForCall).toEqual([["fake_total", "deletions", 10], ["fake_by_author", "deletions", 10]])
  104      //})
  105    //})
  ...
  109        var fake_date = "2013-10-02"
  110        var fake_collection = {}
  111:       ContributorsStatGraphUtil.add_date(fake_date, fake_collection)
  112        expect(fake_collection[fake_date].date).toEqual("2013-10-02")
  113      })
  ...
  118        var fake_author = { author_name: "Author", author_email: 'fake@email.com' }
  119        var fake_collection = {}
  120:       ContributorsStatGraphUtil.add_author(fake_author, fake_collection)
  121        expect(fake_collection[fake_author.author_name].author_name).toEqual("Author")
  122      })
  ...
  140        var correct_total_data = [{date: "2013-05-08", commits: 3},
  141        {date: "2013-05-09", commits: 1}];
  142:       expect(ContributorsStatGraphUtil.get_total_data(fake_parsed_log, "commits")).toEqual(correct_total_data)
  143      })
  144    })
  ...
  148        var fake_parsed_log_total = [{date: "2013-05-09", additions: 471, deletions: 0, commits: 1},
  149        {date: "2013-05-08", additions: 54, deletions: 7, commits: 3}];
  150:       ContributorsStatGraphUtil.pick_field(fake_parsed_log_total, "commits")
  151        var correct_pick_field_data = [{date: "2013-05-09", commits: 1},{date: "2013-05-08", commits: 3}];
  152:       expect(ContributorsStatGraphUtil.pick_field(fake_parsed_log_total, "commits")).toEqual(correct_pick_field_data)
  153      })
  154    })
  ...
  176          {author_name:"Karlo Soriano",author_email:"karlo@email.com",dates:{"2013-05-09":1},deletions:0,additions:471,commits:1}
  177        ]
  178:       expect(ContributorsStatGraphUtil.get_author_data(fake_parsed_log, "commits")).toEqual(correct_author_data)
  179      })
  180    })
  ...
  186        }
  187        var correct_parsed_log = {author_name:"Karlo Soriano",author_email:"karlo@email.com",dates:{"2013-05-09":1},deletions:0,additions:471,commits:1}
  188:       expect(ContributorsStatGraphUtil.parse_log_entry(fake_log_entry, 'commits', null)).toEqual(correct_parsed_log)
  189      })
  190    })
  ...
  193      var date = "2013-05-09"
  194      it("returns true if date_range is null", function () {
  195:       expect(ContributorsStatGraphUtil.in_range(date, null)).toEqual(true)
  196      })
  197      it("returns true if date is in range", function () {
  198        var date_range = [new Date("2013-01-01"), new Date("2013-12-12")]
  199:       expect(ContributorsStatGraphUtil.in_range(date, date_range)).toEqual(true)
  200      })
  201      it("returns false if date is not in range", function () {
  202        var date_range = [new Date("1999-12-01"), new Date("2000-12-01")]
  203:       expect(ContributorsStatGraphUtil.in_range(date, date_range)).toEqual(false)
  204      })
  205    })

40 matches across 4 files


Searching 26668 files for ".ui-box"



Searching 54 files for ".ui-box"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/assets/stylesheets/generic/ui_box.scss:
    6   *
    7   * Classes:
    8:  *   .ui-box   - for any block & widgets
    9:  *   .ui-box.ui-box-small - same but with smaller title
   10:  *   .ui-box.ui-box-danger - with red title
   11   *
   12   * Ex. 1: List
   13:  *   .ui-box
   14   *     .title
   15   *       # title here
   ..
   18   *
   19   * Ex. 2: Block data
   20:  *   .ui-box
   21   *     .title
   22   *       # title here
   ..
   26   */
   27  
   28: .ui-box {
   29    background: #FFF;
   30    margin-bottom: 20px;
   ..
  133   * Small box
  134   */
  135: .ui-box.ui-box-small {
  136    margin-bottom: 10px;
  137  
  ...
  152   * Danger box
  153   */
  154: .ui-box.ui-box-danger {
  155    background: #f7f7f7;
  156    border: none;
  ...
  168   */
  169  .tab-pane {
  170:   .ui-box {
  171      margin: 3px 3px 25px 3px;
  172    }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/assets/stylesheets/sections/dashboard.scss:
    1  .dashboard {
    2    .side {
    3:     .ui-box {
    4        margin: 0px;
    5        box-shadow: none;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/assets/stylesheets/sections/profile.scss:
    1: .ui-box{ 
    2      overflow: auto; //for scrolling the contributions graph
    3  }

15 matches across 3 files


Searching 141 files for "cache"

0 matches across 0 files


Searching 728 files for "cache"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/application_controller.rb:
  150    end
  151  
  152:   def no_cache_headers
  153:     response.headers["Cache-Control"] = "no-cache, no-store, max-age=0, must-revalidate"
  154:     response.headers["Pragma"] = "no-cache"
  155      response.headers["Expires"] = "Fri, 01 Jan 1990 00:00:00 GMT"
  156    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/profiles/avatars_controller.rb:
    7  
    8      @user.save
    9:     @user.reset_events_cache
   10  
   11      redirect_to profile_path

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/merge_requests_controller.rb:
  204  
  205      # Get commits from repository
  206:     # or from cache if already merged
  207      @commits = @merge_request.commits
  208  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/notes_controller.rb:
   32    def update
   33      note.update_attributes(params[:note])
   34:     note.reset_events_cache
   35  
   36      respond_to do |format|
   ..
   42    def destroy
   43      note.destroy
   44:     note.reset_events_cache
   45  
   46      respond_to do |format|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/tree_controller.rb:
    6      respond_to do |format|
    7        format.html
    8:       # Disable cache so browser history works
    9:       format.js { no_cache_headers }
   10      end
   11    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/issue.rb:
   58    end
   59  
   60:   # Reset issue events cache
   61    #
   62:   # Since we do cache @event we need to reset cache in special cases:
   63    # * when an issue is updated
   64:   # Events cache stored like  events/23-20130109142513.
   65:   # The cache key includes updated_at timestamp.
   66    # Thus it will automatically generate a new fragment
   67    # when the event is updated because the key changes.
   68:   def reset_events_cache
   69      Event.where(target_id: self.id, target_type: 'Issue').
   70        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/merge_request.rb:
  266    end
  267  
  268:   # Reset merge request events cache
  269    #
  270:   # Since we do cache @event we need to reset cache in special cases:
  271    # * when a merge request is updated
  272:   # Events cache stored like  events/23-20130109142513.
  273:   # The cache key includes updated_at timestamp.
  274    # Thus it will automatically generate a new fragment
  275    # when the event is updated because the key changes.
  276:   def reset_events_cache
  277      Event.where(target_id: self.id, target_type: 'MergeRequest').
  278          order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/note.rb:
  287    end
  288  
  289:   # Reset notes events cache
  290    #
  291:   # Since we do cache @event we need to reset cache in special cases:
  292    # * when a note is updated
  293    # * when a note is removed
  294:   # Events cache stored like  events/23-20130109142513.
  295:   # The cache key includes updated_at timestamp.
  296    # Thus it will automatically generate a new fragment
  297    # when the event is updated because the key changes.
  298:   def reset_events_cache
  299      Event.where(target_id: self.id, target_type: 'Note').
  300        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/project.rb:
  503          ensure_satellite_exists
  504          send_move_instructions
  505:         reset_events_cache
  506        rescue
  507          # Returning false does not rollback after_* transaction but gives
  ...
  516    end
  517  
  518:   # Reset events cache related to this project
  519    #
  520:   # Since we do cache @event we need to reset cache in special cases:
  521    # * when project was moved
  522    # * when project was renamed
  523:   # Events cache stored like  events/23-20130109142513.
  524:   # The cache key includes updated_at timestamp.
  525    # Thus it will automatically generate a new fragment
  526    # when the event is updated because the key changes.
  527:   def reset_events_cache
  528      Event.where(project_id: self.id).
  529        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/repository.rb:
   63  
   64    def add_branch(branch_name, ref)
   65:     Rails.cache.delete(cache_key(:branch_names))
   66  
   67      gitlab_shell.add_branch(path_with_namespace, branch_name, ref)
   ..
   69  
   70    def add_tag(tag_name, ref)
   71:     Rails.cache.delete(cache_key(:tag_names))
   72  
   73      gitlab_shell.add_tag(path_with_namespace, tag_name, ref)
   ..
   75  
   76    def rm_branch(branch_name)
   77:     Rails.cache.delete(cache_key(:branch_names))
   78  
   79      gitlab_shell.rm_branch(path_with_namespace, branch_name)
   ..
   81  
   82    def rm_tag(tag_name)
   83:     Rails.cache.delete(cache_key(:tag_names))
   84  
   85      gitlab_shell.rm_tag(path_with_namespace, tag_name)
   ..
   99  
  100    def branch_names
  101:     Rails.cache.fetch(cache_key(:branch_names)) do
  102        raw_repository.branch_names
  103      end
  ...
  105  
  106    def tag_names
  107:     Rails.cache.fetch(cache_key(:tag_names)) do
  108        raw_repository.tag_names
  109      end
  ...
  111  
  112    def commit_count
  113:     Rails.cache.fetch(cache_key(:commit_count)) do
  114        begin
  115          raw_repository.raw.commit_count
  ...
  121  
  122    # Return repo size in megabytes
  123:   # Cached in redis
  124    def size
  125:     Rails.cache.fetch(cache_key(:size)) do
  126        raw_repository.size
  127      end
  128    end
  129  
  130:   def expire_cache
  131:     Rails.cache.delete(cache_key(:size))
  132:     Rails.cache.delete(cache_key(:branch_names))
  133:     Rails.cache.delete(cache_key(:tag_names))
  134:     Rails.cache.delete(cache_key(:commit_count))
  135:     Rails.cache.delete(cache_key(:graph_log))
  136:     Rails.cache.delete(cache_key(:readme))
  137:     Rails.cache.delete(cache_key(:contribution_guide))
  138    end
  139  
  140    def graph_log
  141:     Rails.cache.fetch(cache_key(:graph_log)) do
  142        stats = Gitlab::Git::GitStats.new(raw, root_ref)
  143        stats.parsed_log
  ...
  146  
  147  
  148:   def cache_key(type)
  149      "#{type}:#{path_with_namespace}"
  150    end
  ...
  165  
  166    def readme
  167:     Rails.cache.fetch(cache_key(:readme)) do
  168        tree(:head).readme
  169      end
  ...
  171  
  172    def contribution_guide
  173:     Rails.cache.fetch(cache_key(:contribution_guide)) do
  174        tree(:head).contribution_guide
  175      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/user.rb:
  442    end
  443  
  444:   # Reset project events cache related to this user
  445    #
  446:   # Since we do cache @event we need to reset cache in special cases:
  447    # * when the user changes their avatar
  448:   # Events cache stored like  events/23-20130109142513.
  449:   # The cache key includes updated_at timestamp.
  450    # Thus it will automatically generate a new fragment
  451    # when the event is updated because the key changes.
  452:   def reset_events_cache
  453      Event.where(author_id: self.id).
  454        order('id DESC').limit(1000).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/observers/project_activity_cache_observer.rb:
    1: class ProjectActivityCacheObserver < BaseObserver
    2    observe :event
    3  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/observers/project_observer.rb:
   10  
   11    def before_destroy(project)
   12:     project.repository.expire_cache unless project.empty_repo?
   13    end
   14  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/git_push_service.rb:
   25  
   26      project.ensure_satellite_exists
   27:     project.repository.expire_cache
   28      project.update_repository_size
   29  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/git_tag_push_service.rb:
    7  
    8      create_push_event
    9:     project.repository.expire_cache
   10      project.execute_hooks(@push_data.dup, :tag_push_hooks)
   11    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/issues/update_service.rb:
   12  
   13        if params.present? && issue.update_attributes(params)
   14:         issue.reset_events_cache
   15  
   16          if issue.previous_changes.include?('assignee_id')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/merge_requests/update_service.rb:
   21  
   22        if params.present? && merge_request.update_attributes(params)
   23:         merge_request.reset_events_cache
   24  
   25          if merge_request.previous_changes.include?('assignee_id')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/project_transfer_service.rb:
   37        Project.find(project.id).ensure_satellite_exists
   38  
   39:       # clear project cached events
   40:       project.reset_events_cache
   41  
   42        true

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/uploaders/attachment_uploader.rb:
    4    storage :file
    5  
    6:   after :store, :reset_events_cache
    7  
    8    def store_dir
    .
   31    end
   32  
   33:   def reset_events_cache(file)
   34:     model.reset_events_cache if model.is_a?(User)
   35    end
   36  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/views/events/_event.html.haml:
    4        #{time_ago_with_tooltip(event.created_at)}
    5  
    6:     = cache event do
    7        = image_tag avatar_icon(event.author_email, 24), class: "avatar s24", alt:''
    8  

92 matches across 20 files


Searching 26642 files for "cache"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/ace.js:
 5543              this.bgTokenizer.setDocument(this.getDocument());
 5544  
 5545:         this.resetCaches();
 5546      };
 5547      this.getDocument = function() {
 5548          return this.doc;
 5549      };
 5550:     this.$resetRowCache = function(docRow) {
 5551          if (!docRow) {
 5552:             this.$docRowCache = [];
 5553:             this.$screenRowCache = [];
 5554              return;
 5555          }
 5556:         var l = this.$docRowCache.length;
 5557:         var i = this.$getRowCacheIndex(this.$docRowCache, docRow) + 1;
 5558          if (l > i) {
 5559:             this.$docRowCache.splice(i, l);
 5560:             this.$screenRowCache.splice(i, l);
 5561          }
 5562      };
 5563  
 5564:     this.$getRowCacheIndex = function(cacheArray, val) {
 5565          var low = 0;
 5566:         var hi = cacheArray.length - 1;
 5567  
 5568          while (low <= hi) {
 5569              var mid = (low + hi) >> 1;
 5570:             var c = cacheArray[mid];
 5571  
 5572              if (val > c)
 ....
 5581      };
 5582  
 5583:     this.resetCaches = function() {
 5584          this.$modified = true;
 5585          this.$wrapData = [];
 5586:         this.$rowLengthCache = [];
 5587:         this.$resetRowCache(0);
 5588          if (this.bgTokenizer)
 5589              this.bgTokenizer.start(0);
 ....
 5592      this.onChangeFold = function(e) {
 5593          var fold = e.data;
 5594:         this.$resetRowCache(fold.start.row);
 5595      };
 5596  
 ....
 5599          this.$modified = true;
 5600  
 5601:         this.$resetRowCache(delta.range.start.row);
 5602  
 5603          var removedFolds = this.$updateInternalDataOnChange(e);
 ....
 5622          this.selection.clearSelection();
 5623  
 5624:         this.$resetRowCache(0);
 5625          this.$deltas = [];
 5626          this.$deltasDoc = [];
 ....
 6092  
 6093              var lines = this.doc.getAllLines();
 6094:             var cache = this.$rowLengthCache;
 6095              var longestScreenLine = 0;
 6096              var foldIndex = 0;
 ....
 6108                  }
 6109  
 6110:                 if (cache[i] == null)
 6111:                     cache[i] = this.$getStringScreenWidth(lines[i])[0];
 6112  
 6113:                 if (cache[i] > longestScreenLine)
 6114:                     longestScreenLine = cache[i];
 6115              }
 6116              this.screenWidth = longestScreenLine;
 ....
 6422              this.$useWrapMode = useWrapMode;
 6423              this.$modified = true;
 6424:             this.$resetRowCache(0);
 6425              if (useWrapMode) {
 6426                  var len = this.getLength();
 ....
 6458              if (this.$useWrapMode) {
 6459                  this.$updateWrapData(0, this.getLength() - 1);
 6460:                 this.$resetRowCache(0);
 6461                  this._emit("changeWrapLimit");
 6462              }
 ....
 6512          if (len != 0) {
 6513              if (action.indexOf("remove") != -1) {
 6514:                 this[useWrapMode ? "$wrapData" : "$rowLengthCache"].splice(firstRow, len);
 6515  
 6516                  var foldLines = this.$foldData;
 ....
 6549                      args = Array(len);
 6550                      args.unshift(firstRow, 0);
 6551:                     this.$rowLengthCache.splice.apply(this.$rowLengthCache, args);
 6552                  }
 6553                  var foldLines = this.$foldData;
 ....
 6598              this.$updateWrapData(firstRow, lastRow);
 6599          else
 6600:             this.$updateRowLengthCache(firstRow, lastRow);
 6601  
 6602          return removedFolds;
 6603      };
 6604  
 6605:     this.$updateRowLengthCache = function(firstRow, lastRow, b) {
 6606:         this.$rowLengthCache[firstRow] = null;
 6607:         this.$rowLengthCache[lastRow] = null;
 6608      };
 6609  
 ....
 6857          var rowLength = 0;
 6858  
 6859:         var rowCache = this.$screenRowCache;
 6860:         var i = this.$getRowCacheIndex(rowCache, screenRow);
 6861:         var l = rowCache.length;
 6862          if (l && i >= 0) {
 6863:             var row = rowCache[i];
 6864:             var docRow = this.$docRowCache[i];
 6865:             var doCache = screenRow > rowCache[l - 1];
 6866          } else {
 6867:             var doCache = !l;
 6868          }
 6869  
 ....
 6886              }
 6887  
 6888:             if (doCache) {
 6889:                 this.$docRowCache.push(docRow);
 6890:                 this.$screenRowCache.push(row);
 6891              }
 6892          }
 ....
 6947  
 6948  
 6949:         var rowCache = this.$docRowCache;
 6950:         var i = this.$getRowCacheIndex(rowCache, docRow);
 6951:         var l = rowCache.length;
 6952          if (l && i >= 0) {
 6953:             var row = rowCache[i];
 6954:             var screenRow = this.$screenRowCache[i];
 6955:             var doCache = docRow > rowCache[l - 1];
 6956          } else {
 6957:             var doCache = !l;
 6958          }
 6959  
 ....
 6976              row = rowEnd;
 6977  
 6978:             if (doCache) {
 6979:                 this.$docRowCache.push(row);
 6980:                 this.$screenRowCache.push(screenRow);
 6981              }
 6982          }
 ....
 7130                  if (this.$useWrapMode) {
 7131                      this.$modified = true;
 7132:                     this.$resetRowCache(0);
 7133                      this.$updateWrapData(0, this.getLength() - 1);
 7134                  }
 ....
 7157  
 7158              this.$modified = true;
 7159:             this.$rowLengthCache = [];
 7160              this.$tabSize = tabSize;
 7161              this._emit("changeTabSize");
 ....
 9696              return;
 9697          this.regExp = regExp;
 9698:         this.cache = [];
 9699      };
 9700  
 ....
 9705  
 9706          for (var i = start; i <= end; i++) {
 9707:             var ranges = this.cache[i];
 9708              if (ranges == null) {
 9709                  ranges = lang.getMatchOffsets(session.getLine(i), this.regExp);
 ....
 9713                      return new Range(i, match.offset, i, match.offset + match.length);
 9714                  });
 9715:                 this.cache[i] = ranges.length ? ranges : "";
 9716              }
 9717  
 ....
 9981              this.$updateWrapData(foldLine.start.row, foldLine.start.row);
 9982          else
 9983:             this.$updateRowLengthCache(foldLine.start.row, foldLine.start.row);
 9984          this.$modified = true;
 9985          this._emit("changeFold", { data: fold, action: "add" });
 ....
 10029                  this.$updateWrapData(startRow, endRow);
 10030              else
 10031:                 this.$updateRowLengthCache(startRow, endRow);
 10032          }
 10033          this.$modified = true;
 .....
 12940          if (!width)
 12941              width = el.clientWidth || el.scrollWidth;
 12942:         var changes = this.$updateCachedSize(force, gutterWidth, width, height);
 12943          
 12944          if (!this.$size.scrollerHeight || (!width && !height))
 .....
 12957      };
 12958      
 12959:     this.$updateCachedSize = function(force, gutterWidth, width, height) {
 12960          height -= (this.$extraHeight || 0);
 12961          var changes = 0;
 .....
 13013          var gutterWidth = this.$showGutter ? this.$gutter.offsetWidth : 0;
 13014          if (gutterWidth != this.gutterWidth)
 13015:             this.$changes |= this.$updateCachedSize(true, gutterWidth, this.$size.width, this.$size.height);
 13016  
 13017          if (this.session.getUseWrapMode() && this.adjustWrapLimit()) {
 .....
 13342              var w = this.container.clientWidth;
 13343              this.container.style.height = desiredHeight + "px";
 13344:             this.$updateCachedSize(true, this.$gutterWidth, w, desiredHeight);
 13345              this.desiredHeight = desiredHeight;
 13346          }
 .....
 13415          var changes = 0;
 13416          if (hScrollChanged || vScrollChanged) {
 13417:             changes = this.$updateCachedSize(true, this.gutterWidth, this.$size.width, this.$size.height);
 13418              this._signal("scrollbarVisibilityChanged");
 13419              if (vScrollChanged)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/ext-static_highlight.js:
  109  highlight.render = function(input, mode, theme, lineStart, disableGutter, callback) {
  110      var waiting = 0;
  111:     var modeCache = EditSession.prototype.$modes;
  112      if (typeof theme == "string") {
  113          waiting++;
  ...
  121          waiting++;
  122          config.loadModule(['mode', mode], function(m) {
  123:             if (!modeCache[mode]) modeCache[mode] = new m.Mode();
  124:             mode = modeCache[mode];
  125              --waiting || done();
  126          });

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/ext-whitespace.js:
  135      var lines = doc.getAllLines();
  136  
  137:     var cache = {};
  138:     var spaceCache = {};
  139      for (var i = 0, l=lines.length; i < l; i++) {
  140          var line = lines[i];
  ...
  144              var tabCount = Math.floor(w/oldLen);
  145              var reminder = w%oldLen;
  146:             var toInsert = cache[tabCount] || (cache[tabCount] = lang.stringRepeat(tab, tabCount));
  147:             toInsert += spaceCache[reminder] || (spaceCache[reminder] = lang.stringRepeat(" ", reminder));
  148  
  149              if (toInsert != match) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-actionscript.js:
   70             regex: '\\b(?:R(?:ecordset|DBMSResolver|adioButton(?:Group)?)|X(?:ML(?:Socket|Node|Connector)?|UpdateResolverDataHolder)|M(?:M(?:Save|Execute)|icrophoneMicrophone|o(?:use|vieClip(?:Loader)?)|e(?:nu(?:Bar)?|dia(?:Controller|Display|Playback))|ath)|B(?:yName|inding|utton)|S(?:haredObject|ystem|crollPane|t(?:yleSheet|age|ream)|ound|e(?:ndEvent|rviceObject)|OAPCall|lide)|N(?:umericStepper|et(?:stream|S(?:tream|ervices)|Connection|Debug(?:Config)?))|C(?:heckBox|o(?:ntextMenu(?:Item)?|okie|lor|m(?:ponentMixins|boBox))|ustomActions|lient|amera)|T(?:ypedValue|ext(?:Snapshot|Input|F(?:ield|ormat)|Area)|ree|AB)|Object|D(?:ownload|elta(?:Item|Packet)?|at(?:e(?:Chooser|Field)?|a(?:G(?:lue|rid)|Set|Type)))|U(?:RL|TC|IScrollBar)|P(?:opUpManager|endingCall|r(?:intJob|o(?:duct|gressBar)))|E(?:ndPoint|rror)|Video|Key|F(?:RadioButton|GridColumn|MessageBox|BarChart|S(?:croll(?:Bar|Pane)|tyleFormat|plitView)|orm|C(?:heckbox|omboBox|alendar)|unction|T(?:icker|ooltip(?:Lite)?|ree(?:Node)?)|IconButton|D(?:ataGrid|raggablePane)|P(?:ieChart|ushButton|ro(?:gressBar|mptBox))|L(?:i(?:stBox|neChart)|oadingBox)|AdvancedMessageBox)|W(?:indow|SDLURL|ebService(?:Connector)?)|L(?:ist|o(?:calConnection|ad(?:er|Vars)|g)|a(?:unch|bel))|A(?:sBroadcaster|cc(?:ordion|essibility)|S(?:Set(?:Native|PropFlags)|N(?:ew|ative)|C(?:onstructor|lamp(?:2)?)|InstanceOf)|pplication|lert|rray))\\b' },
   71           { token: 'support.function.actionscript.2',
   72:            regex: '\\b(?:s(?:h(?:ift|ow(?:GridLines|Menu|Border|Settings|Headers|ColumnHeaders|Today|Preferences)?|ad(?:ow|ePane))|c(?:hema|ale(?:X|Mode|Y|Content)|r(?:oll(?:Track|Drag)?|een(?:Resolution|Color|DPI)))|t(?:yleSheet|op(?:Drag|A(?:nimation|llSounds|gent))?|epSize|a(?:tus|rt(?:Drag|A(?:nimation|gent))?))|i(?:n|ze|lence(?:TimeOut|Level))|o(?:ngname|urce|rt(?:Items(?:By)?|On(?:HeaderRelease)?|able(?:Columns)?)?)|u(?:ppressInvalidCalls|bstr(?:ing)?)|p(?:li(?:ce|t)|aceCol(?:umnsEqually|lumnsEqually))|e(?:nd(?:DefaultPushButtonEvent|AndLoad)?|curity|t(?:R(?:GB|o(?:otNode|w(?:Height|Count))|esizable(?:Columns)?|a(?:nge|te))|G(?:ain|roupName)|X(?:AxisTitle)?|M(?:i(?:n(?:imum|utes)|lliseconds)|o(?:nth(?:Names)?|tionLevel|de)|ultilineMode|e(?:ssage|nu(?:ItemEnabled(?:At)?|EnabledAt)|dia)|a(?:sk|ximum))|B(?:u(?:tton(?:s|Width)|fferTime)|a(?:seTabIndex|ndwidthLimit|ckground))|S(?:howAsDisabled|croll(?:ing|Speed|Content|Target|P(?:osition|roperties)|barState|Location)|t(?:yle(?:Property)?|opOnFocus|at(?:us|e))|i(?:ze|lenceLevel)|ort(?:able(?:Columns)?|Function)|p(?:litterBarPosition|acing)|e(?:conds|lect(?:Multiple|ion(?:Required|Type)?|Style|Color|ed(?:Node(?:s)?|Cell|I(?:nd(?:ices|ex)|tem(?:s)?))?|able))|kin|m(?:oothness|allScroll))|H(?:ighlight(?:s|Color)|Scroll|o(?:urs|rizontal)|eader(?:Symbol|Height|Text|Property|Format|Width|Location)?|as(?:Shader|CloseBox))|Y(?:ear|AxisTitle)?|N(?:ode(?:Properties|ExpansionHandler)|ewTextFormat)|C(?:h(?:ildNodes|a(?:ngeHandler|rt(?:Title|EventHandler)))|o(?:ntent(?:Size)?|okie|lumns)|ell(?:Symbol|Data)|l(?:i(?:ckHandler|pboard)|oseHandler)|redentials)|T(?:ype(?:dVaule)?|i(?:tle(?:barHeight)?|p(?:Target|Offset)?|me(?:out(?:Handler)?)?)|oggle|extFormat|ransform)|I(?:s(?:Branch|Open)|n(?:terval|putProperty)|con(?:SymbolName)?|te(?:rator|m(?:ByKey|Symbol)))|Orientation|D(?:i(?:splay(?:Range|Graphics|Mode|Clip|Text|edMonth)|rection)|uration|e(?:pth(?:Below|To|Above)|fault(?:GatewayURL|Mappings|NodeIconSymbolName)|l(?:iveryMode|ay)|bug(?:ID)?)|a(?:yOfWeekNames|t(?:e(?:Filter)?|a(?:Mapping(?:s)?|Item(?:Text|Property|Format)|Provider|All(?:Height|Property|Format|Width))?))|ra(?:wConnectors|gContent))|U(?:se(?:Shadow|HandCursor|EchoSuppression|rInput|Fade)|TC(?:M(?:i(?:nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear))|P(?:osition|ercentComplete|an(?:e(?:M(?:inimumSize|aximumSize)|Size|Title))?|ro(?:pert(?:y(?:Data)?|iesAt)|gress))|E(?:nabled|dit(?:Handler|able)|xpand(?:NodeTrigger|erSymbolName))|V(?:Scroll|olume|alue(?:Source)?)|KeyFrameInterval|Quality|F(?:i(?:eld|rst(?:DayOfWeek|VisibleNode))|ocus|ullYear|ps|ade(?:InLength|OutLength)|rame(?:Color|Width))|Width|L(?:ine(?:Color|Weight)|o(?:opback|adTarget)|a(?:rgeScroll|bel(?:Source|Placement)?))|A(?:s(?:Boolean|String|Number)|n(?:yTypedValue|imation)|ctiv(?:e(?:State(?:Handler)?|Handler)|ateHandler)|utoH(?:ideScrollBar|eight)))?|paratorBefore|ek|lect(?:ion(?:Disabled|Unfocused)?|ed(?:Node(?:s)?|Child|I(?:nd(?:ices|ex)|tem(?:s)?)|Dat(?:e|a))?|able(?:Ranges)?)|rver(?:String)?)|kip|qrt|wapDepths|lice|aveToSharedObj|moothing)|h(?:scroll(?:Policy)?|tml(?:Text)?|i(?:t(?:Test(?:TextNearPos)?|Area)|de(?:BuiltInItems|Child)?|ghlight(?:2D|3D)?)|orizontal|e(?:ight|ader(?:Re(?:nderer|lease)|Height|Text))|P(?:osition|ageScrollSize)|a(?:s(?:childNodes|MP3|S(?:creen(?:Broadcast|Playback)|treaming(?:Video|Audio)|ort)|Next|OwnProperty|Pr(?:inting|evious)|EmbeddedVideo|VideoEncoder|A(?:ccesibility|udio(?:Encoder)?))|ndlerName)|LineScrollSize)|ye(?:sLabel|ar)|n(?:o(?:t|de(?:Name|Close|Type|Open|Value)|Label)|u(?:llValue|mChild(?:S(?:creens|lides)|ren|Forms))|e(?:w(?:Item|line|Value|LocationDialog)|xt(?:S(?:cene|ibling|lide)|TabIndex|Value|Frame)?)?|ame(?:s)?)|c(?:h(?:ildNodes|eck|a(?:nge(?:sPending)?|r(?:CodeAt|At))|r)|o(?:s|n(?:st(?:ant|ructor)|nect|c(?:urrency|at)|t(?:ent(?:Type|Path)?|ains|rol(?:Placement|lerPolicy))|denseWhite|version)|py|l(?:or|umn(?:Stretch|Name(?:s)?|Count))|m(?:p(?:onent|lete)|ment))|u(?:stomItems|ePoint(?:s)?|r(?:veTo|Value|rent(?:Slide|ChildSlide|Item|F(?:ocused(?:S(?:creen|lide)|Form)|ps))))|e(?:il|ll(?:Renderer|Press|Edit|Focus(?:In|Out)))|l(?:i(?:ck|ents)|o(?:se(?:Button|Pane)?|ne(?:Node)?)|ear(?:S(?:haredObjects|treams)|Timeout|Interval)?)|a(?:ncelLabel|tch|p(?:tion|abilities)|l(?:cFields|l(?:e(?:e|r))?))|reate(?:GatewayConnection|Menu|Se(?:rver|gment)|C(?:hild(?:AtDepth)?|l(?:ient|ass(?:ChildAtDepth|Object(?:AtDepth)?))|all)|Text(?:Node|Field)|Item|Object(?:AtDepth)?|PopUp|E(?:lement|mptyMovieClip)))|t(?:h(?:is|row)|ype(?:of|Name)?|i(?:tle(?:StyleDeclaration)?|me(?:out)?)|o(?:talTime|String|olTipText|p|UpperCase|ggle(?:HighQuality)?|Lo(?:caleString|werCase))|e(?:st|llTarget|xt(?:RightMargin|Bold|S(?:ize|elected)|Height|Color|I(?:ndent|talic)|Disabled|Underline|F(?:ield|ont)|Width|LeftMargin|Align)?)|a(?:n|rget(?:Path)?|b(?:Stops|Children|Index|Enabled|leName))|r(?:y|igger|ac(?:e|k(?:AsMenu)?)))|i(?:s(?:Running|Branch|NaN|Con(?:soleOpen|nected)|Toggled|Installed|Open|D(?:own|ebugger)|P(?:urchased|ro(?:totypeOf|pertyEnumerable))|Empty|F(?:inite|ullyPopulated)|Local|Active)|n(?:s(?:tall|ertBefore)|cludeDeltaPacketInfo|t|it(?:ialize|Component|Pod|A(?:pplication|gent))?|de(?:nt|terminate|x(?:InParent(?:Slide|Form)?|Of)?)|put|validate|finity|LocalInternetCache)?|con(?:F(?:ield|unction))?|t(?:e(?:ratorScrolled|m(?:s|RollO(?:ut|ver)|ClassName))|alic)|d3|p|fFrameLoaded|gnore(?:Case|White))|o(?:s|n(?:R(?:ollO(?:ut|ver)|e(?:s(?:ize|ult)|l(?:ease(?:Outside)?|aseOutside)))|XML|Mouse(?:Move|Down|Up|Wheel)|S(?:ync|croller|tatus|oundComplete|e(?:tFocus|lect(?:edItem)?))|N(?:oticeEvent|etworkChange)|C(?:hanged|onnect|l(?:ipEvent|ose))|ID3|D(?:isconnect|eactivate|ata|ragO(?:ut|ver))|Un(?:install|load)|P(?:aymentResult|ress)|EnterFrame|K(?:illFocus|ey(?:Down|Up))|Fault|Lo(?:ad|g)|A(?:ctiv(?:ity|ate)|ppSt(?:op|art)))?|pe(?:n|ration)|verLayChildren|kLabel|ldValue|r(?:d)?)|d(?:i(?:s(?:connect|play(?:Normal|ed(?:Month|Year)|Full)|able(?:Shader|d(?:Ranges|Days)|CloseBox|Events))|rection)|o(?:cTypeDecl|tall|Decoding|main|LazyDecoding)|u(?:plicateMovieClip|ration)|e(?:stroy(?:ChildAt|Object)|code|fault(?:PushButton(?:Enabled)?|KeydownHandler)?|l(?:ta(?:Packet(?:Changed)?)?|ete(?:PopUp|All)?)|blocking)|a(?:shBoardSave|yNames|ta(?:Provider)?|rkshadow)|r(?:opdown(?:Width)?|a(?:w|gO(?:ut|ver))))|u(?:se(?:Sort|HandCursor|Codepage|EchoSuppression)|n(?:shift|install|derline|escape|format|watch|lo(?:ck|ad(?:Movie(?:Num)?)?))|pdate(?:Results|Mode|I(?:nputProperties|tem(?:ByIndex)?)|P(?:acket|roperties)|View|AfterEvent)|rl)|join|p(?:ixelAspectRatio|o(?:sition|p|w)|u(?:sh|rge|blish)|ercen(?:tComplete|Loaded)|lay(?:head(?:Change|Time)|ing|Hidden|erType)?|a(?:ssword|use|r(?:se(?:XML|CSS|Int|Float)|ent(?:Node|Is(?:S(?:creen|lide)|Form))|ams))|r(?:int(?:Num|AsBitmap(?:Num)?)?|o(?:to(?:type)?|pert(?:y|ies)|gress)|e(?:ss|v(?:ious(?:S(?:ibling|lide)|Value)?|Scene|Frame)|ferred(?:Height|Width))))|e(?:scape|n(?:code(?:r)?|ter(?:Frame)?|dFill|able(?:Shader|d|CloseBox|Events))|dit(?:able|Field|LocationDialog)|v(?:ent|al(?:uate)?)|q|x(?:tended|p|ec(?:ute)?|actSettings)|m(?:phasized(?:StyleDeclaration)?|bedFonts))|v(?:i(?:sible|ewPod)|ScrollPolicy|o(?:id|lume)|ersion|P(?:osition|ageScrollSize)|a(?:l(?:idat(?:ionError|e(?:Property|ActivationKey)?)|ue(?:Of)?)|riable)|LineScrollSize)|k(?:ind|ey(?:Down|Up|Press|FrameInterval))|q(?:sort|uality)|f(?:scommand|i(?:n(?:d(?:Text|First|Last)?|ally)|eldInfo|lter(?:ed|Func)?|rst(?:Slide|Child|DayOfWeek|VisibleNode)?)|o(?:nt|cus(?:In|edCell|Out|Enabled)|r(?:egroundDisabled|mat(?:ter)?))|unctionName|ps|l(?:oor|ush)|ace|romCharCode)|w(?:i(?:th|dth)|ordWrap|atch|riteAccess)|l(?:t|i(?:st(?:Owner)?|ne(?:Style|To))|o(?:c(?:k|a(?:t(?:ion|eByld)|l(?:ToGlobal|FileReadDisable)))|opback|ad(?:Movie(?:Num)?|S(?:crollContent|ound)|ed|Variables(?:Num)?|Application)?|g(?:Changes)?)|e(?:ngth|ft(?:Margin)?|ading)?|a(?:st(?:Slide|Child|Index(?:Of)?)?|nguage|b(?:el(?:Placement|F(?:ield|unction))?|leField)))|a(?:s(?:scociate(?:Controller|Display)|in|pectRatio|function)|nd|c(?:ceptConnection|tiv(?:ityLevel|ePlayControl)|os)|t(?:t(?:ach(?:Movie|Sound|Video|Audio)|ributes)|an(?:2)?)|dd(?:header|RequestHeader|Menu(?:Item(?:At)?|At)?|Sort|Header|No(?:tice|de(?:At)?)|C(?:olumn(?:At)?|uePoint)|T(?:oLocalInternetCache|reeNode(?:At)?)|I(?:con|tem(?:s(?:At)?|At)?)|DeltaItem|P(?:od|age|roperty)|EventListener|View|FieldInfo|Listener|Animation)?|uto(?:Size|Play|KeyNav|Load)|pp(?:endChild|ly(?:Changes|Updates)?)|vHardwareDisable|fterLoaded|l(?:ternateRowColors|ign|l(?:ow(?:InsecureDomain|Domain)|Transitions(?:InDone|OutDone))|bum)|r(?:tist|row|g(?:uments|List))|gent|bs)|r(?:ight(?:Margin)?|o(?:ot(?:S(?:creen|lide)|Form)|und|w(?:Height|Count)|llO(?:ut|ver))|e(?:s(?:yncDepth|t(?:orePane|artAnimation|rict)|iz(?:e|able(?:Columns)?)|olveDelta|ult(?:s)?|ponse)|c(?:o(?:ncile(?:Results|Updates)|rd)|eive(?:Video|Audio))|draw|jectConnection|place(?:Sel|ItemAt|AllItems)?|ve(?:al(?:Child)?|rse)|quest(?:SizeChange|Payment)?|f(?:errer|resh(?:ScrollContent|Destinations|Pane|FromSources)?)|lease(?:Outside)?|ad(?:Only|Access)|gister(?:SkinElement|C(?:olor(?:Style|Name)|lass)|InheritingStyle|Proxy)|move(?:Range|M(?:ovieClip|enu(?:Item(?:At)?|At))|Background|Sort|No(?:tice|de(?:sAt|At)?)|C(?:olum(?:nAt|At)|uePoints)|T(?:extField|reeNode(?:At)?)|Item(?:At)?|Pod|EventListener|FromLocalInternetCache|Listener|All(?:C(?:olumns|uePoints)|Items)?))|a(?:ndom|te|dioDot))|g(?:t|oto(?:Slide|NextSlide|PreviousSlide|FirstSlide|LastSlide|And(?:Stop|Play))|e(?:nre|t(?:R(?:GB|o(?:otNode|wCount)|e(?:sizable|mote))|X(?:AxisTitle)?|M(?:i(?:n(?:imum(?:Size)?|utes)|lliseconds)|onth(?:Names)?|ultilineMode|e(?:ssage|nu(?:ItemAt|EnabledAt|At))|aximum(?:Size)?)|B(?:ytes(?:Total|Loaded)|ounds|utton(?:s|Width)|eginIndex|a(?:ndwidthLimit|ckground))|S(?:howAsDisabled|croll(?:ing|Speed|Content|Position|barState|Location)|t(?:yle(?:Names)?|opOnFocus|ate)|ize|o(?:urce|rtState)|p(?:litterBarPosition|acing)|e(?:conds|lect(?:Multiple|ion(?:Required|Type)|Style|ed(?:Node(?:s)?|Cell|Text|I(?:nd(?:ices|ex)|tem(?:s)?))?)|rvice)|moothness|WFVersion)|H(?:ighlight(?:s|Color)|ours|e(?:ight|ader(?:Height|Text|Property|Format|Width|Location)?)|as(?:Shader|CloseBox))|Y(?:ear|AxisTitle)?|N(?:o(?:tices|de(?:DisplayedAt|At))|um(?:Children|berAvailable)|e(?:wTextFormat|xtHighestDepth))|C(?:h(?:ild(?:S(?:creen|lide)|Nodes|Form|At)|artTitle)|o(?:n(?:tent|figInfo)|okie|de|unt|lumn(?:Names|Count|Index|At))|uePoint|ellIndex|loseHandler|a(?:ll|retIndex))|T(?:ypedValue|i(?:tle(?:barHeight)?|p(?:Target|Offset)?|me(?:stamp|zoneOffset|out(?:State|Handler)|r)?)|oggle|ext(?:Extent|Format)?|r(?:ee(?:NodeAt|Length)|ans(?:form|actionId)))|I(?:s(?:Branch|Open)|n(?:stanceAtDepth|d(?:icesByKey|exByKey))|con(?:SymbolName)?|te(?:rator|m(?:sByKey|By(?:Name|Key)|id|ID|At))|d)|O(?:utput(?:Parameter(?:s|ByName)?|Value(?:s)?)|peration|ri(?:entation|ginalCellData))|D(?:i(?:s(?:play(?:Range|Mode|Clip|Index|edMonth)|kUsage)|rection)|uration|e(?:pth|faultNodeIconSymbolName|l(?:taPacket|ay)|bug(?:Config|ID)?)|a(?:y(?:OfWeekNames)?|t(?:e|a(?:Mapping(?:s)?|Item(?:Text|Property|Format)|Label|All(?:Height|Property|Format|Width))?))|rawConnectors)|U(?:se(?:Shadow|HandCursor|rInput|Fade)|RL|TC(?:M(?:i(?:nutes|lliseconds)|onth)|Seconds|Hours|Da(?:y|te)|FullYear))|P(?:o(?:sition|ds)|ercentComplete|a(?:n(?:e(?:M(?:inimums|aximums)|Height|Title|Width))?|rentNode)|r(?:operty(?:Name|Data)?|efer(?:ences|red(?:Height|Width))))|E(?:n(?:dIndex|abled)|ditingData|x(?:panderSymbolName|andNodeTrigger))|V(?:iewed(?:Pods|Applications)|olume|ersion|alue(?:Source)?)|F(?:i(?:eld|rst(?:DayOfWeek|VisibleNode))|o(?:ntList|cus)|ullYear|ade(?:InLength|OutLength)|rame(?:Color|Width))|Width|L(?:ine(?:Color|Weight)|o(?:cal|adTarget)|ength|a(?:stTabIndex|bel(?:Source)?))|A(?:s(?:cii|Boolean|String|Number)|n(?:yTypedValue|imation)|ctiv(?:eState(?:Handler)?|ateHandler)|utoH(?:ideScrollBar|eight)|llItems|gent))?)?|lobal(?:StyleFormat|ToLocal)?|ain|roupName)|x(?:updatePackety|mlDecl)?|m(?:y(?:MethodName|Call)|in(?:imum)?|o(?:nthNames|tion(?:TimeOut|Level)|de(?:lChanged)?|use(?:Move|O(?:ut|ver)|Down(?:Somewhere|Outside)?|Up(?:Somewhere)?|WheelEnabled)|ve(?:To)?)|u(?:ted|lti(?:pleS(?:imultaneousAllowed|elections)|line))|e(?:ssage|nu(?:Show|Hide)?|th(?:od)?|diaType)|a(?:nufacturer|tch|x(?:scroll|hscroll|imum|HPosition|Chars|VPosition)?)|b(?:substring|chr|ord|length))|b(?:ytes(?:Total|Loaded)|indFormat(?:Strings|Function)|o(?:ttom(?:Scroll)?|ld|rder(?:Color)?)|u(?:tton(?:Height|Width)|iltInItems|ffer(?:Time|Length)|llet)|e(?:foreApplyUpdates|gin(?:GradientFill|Fill))|lockIndent|a(?:ndwidth|ckground(?:Style|Color|Disabled)?)|roadcastMessage)|onHTTPStatus)\\b' },
   73           { token: 'support.constant.actionscript.2',
   74             regex: '\\b(?:__proto__|__resolve|_accProps|_alpha|_changed|_currentframe|_droptarget|_flash|_focusrect|_framesloaded|_global|_height|_highquality|_level|_listeners|_lockroot|_name|_parent|_quality|_root|_rotation|_soundbuftime|_target|_totalframes|_url|_visible|_width|_x|_xmouse|_xscale|_y|_ymouse|_yscale)\\b' },

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-ejs.js:
 2570          "authenticate_or_request_with_http_basic|authenticate_or_request_with_http_digest|" +
 2571          "filter_parameter_logging|match|get|post|resources|redirect|scope|assert_routing|" +
 2572:         "translate|localize|extract_locale_from_tld|caches_page|expire_page|caches_action|expire_action|" +
 2573:         "cache|expire_fragment|expire_cache_for|observe|cache_sweeper|" +
 2574          "has_many|has_one|belongs_to|has_and_belongs_to_many"
 2575      );

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-haml.js:
  251          "authenticate_or_request_with_http_basic|authenticate_or_request_with_http_digest|" +
  252          "filter_parameter_logging|match|get|post|resources|redirect|scope|assert_routing|" +
  253:         "translate|localize|extract_locale_from_tld|caches_page|expire_page|caches_action|expire_action|" +
  254:         "cache|expire_fragment|expire_cache_for|observe|cache_sweeper|" +
  255          "has_many|has_one|belongs_to|has_and_belongs_to_many"
  256      );

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-html_ruby.js:
 1028          "authenticate_or_request_with_http_basic|authenticate_or_request_with_http_digest|" +
 1029          "filter_parameter_logging|match|get|post|resources|redirect|scope|assert_routing|" +
 1030:         "translate|localize|extract_locale_from_tld|caches_page|expire_page|caches_action|expire_action|" +
 1031:         "cache|expire_fragment|expire_cache_for|observe|cache_sweeper|" +
 1032          "has_many|has_one|belongs_to|has_and_belongs_to_many"
 1033      );

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-jsoniq.js:
  340      
  341      if(this.tokens[row] !== undefined) {
  342:       var cachedLine = this.lines[row];
  343:       var begin = sharedStart([line, cachedLine]);
  344:       var diff = cachedLine.length - line.length;
  345        var idx = 0;
  346        var col = 0;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-lsl.js:
  141              "ESTATE_ACCESS_BANNED_AGENT_ADD|ESTATE_ACCESS_BANNED_AGENT_REMOVE|FORCE_DIRECT_PATH|" +
  142              "FRICTION|GCNP_RADIUS|GCNP_STATIC|GRAVITY_MULTIPLIER|HORIZONTAL|HTTP_BODY_MAXLENGTH|" +
  143:             "HTTP_BODY_TRUNCATED|HTTP_CUSTOM_HEADER|HTTP_METHOD|HTTP_MIMETYPE|HTTP_PRAGMA_NO_CACHE|" +
  144              "HTTP_VERBOSE_THROTTLE|HTTP_VERIFY_CERT|INVENTORY_ALL|INVENTORY_ANIMATION|" +
  145              "INVENTORY_BODYPART|INVENTORY_CLOTHING|INVENTORY_GESTURE|INVENTORY_LANDMARK|" +

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-matlab.js:
   79  		"camlookat|camorbit|campan|campos|camproj|camroll|camtarget|camup|camva|camzoom|cart2pol|cart2sph|cast|cat|caxis|cd|cdf2rdf|cdfepoch|cdfinfo|cdflib(?:\.(?:close|closeVar|"+
   80  		"computeEpoch|computeEpoch16|create|createAttr|createVar|delete|deleteAttr|deleteAttrEntry|deleteAttrgEntry|deleteVar|deleteVarRecords|epoch16Breakdown|epochBreakdown|getAttrEntry|"+
   81: 		"getAttrgEntry|getAttrMaxEntry|getAttrMaxgEntry|getAttrName|getAttrNum|getAttrScope|getCacheSize|getChecksum|getCompression|getCompressionCacheSize|getConstantNames|"+
   82  		"getConstantValue|getCopyright|getFileBackward|getFormat|getLibraryCopyright|getLibraryVersion|getMajority|getName|getNumAttrEntries|getNumAttrgEntries|getNumAttributes|"+
   83: 		"getNumgAttributes|getReadOnlyMode|getStageCacheSize|getValidate|getVarAllocRecords|getVarBlockingFactor|getVarCacheSize|getVarCompression|getVarData|getVarMaxAllocRecNum|"+
   84  		"getVarMaxWrittenRecNum|getVarName|getVarNum|getVarNumRecsWritten|getVarPadValue|getVarRecordData|getVarReservePercent|getVarsMaxWrittenRecNum|getVarSparseRecords|getVersion|"+
   85  		"hyperGetVarData|hyperPutVarData|inquire|inquireAttr|inquireAttrEntry|inquireAttrgEntry|inquireVar|open|putAttrEntry|putAttrgEntry|putVarData|putVarRecordData|renameAttr|"+
   86: 		"renameVar|setCacheSize|setChecksum|setCompression|setCompressionCacheSize|setFileBackward|setFormat|setMajority|setReadOnlyMode|setStageCacheSize|setValidate|"+
   87: 		"setVarAllocBlockRecords|setVarBlockingFactor|setVarCacheSize|setVarCompression|setVarInitialRecs|setVarPadValue|SetVarReservePercent|setVarsCacheSize|setVarSparseRecords))?|"+
   88  		"cdfread|cdfwrite|ceil|cell2mat|cell2struct|celldisp|cellfun|cellplot|cellstr|cgs|checkcode|checkin|checkout|chol|cholinc|cholupdate|circshift|cla|clabel|class|clc|clear|"+
   89  		"clearvars|clf|clipboard|clock|close|closereq|cmopts|cmpermute|cmunique|colamd|colon|colorbar|colordef|colormap|colormapeditor|colperm|Combine|comet|comet3|commandhistory|"+
   ..
  117  		"ncwriteschema|ndgrid|ndims|ne|NET(?:\.(?:addAssembly|Assembly|convertArray|createArray|createGeneric|disableAutoRelease|enableAutoRelease|GenericClass|invokeGenericMethod|"+
  118  		"NetException|setStaticProperty))?|netcdf\.(?:abort|close|copyAtt|create|defDim|defGrp|defVar|defVarChunking|defVarDeflate|defVarFill|defVarFletcher32|delAtt|endDef|getAtt|"+
  119: 		"getChunkCache|getConstant|getConstantNames|getVar|inq|inqAtt|inqAttID|inqAttName|inqDim|inqDimID|inqDimIDs|inqFormat|inqGrpName|inqGrpNameFull|inqGrpParent|inqGrps|"+
  120  		"inqLibVers|inqNcid|inqUnlimDims|inqVar|inqVarChunking|inqVarDeflate|inqVarFill|inqVarFletcher32|inqVarID|inqVarIDs|open|putAtt|putVar|reDef|renameAtt|renameDim|renameVar|"+
  121: 		"setChunkCache|setDefaultFormat|setFill|sync)|newplot|nextpow2|nnz|noanimate|nonzeros|norm|normest|not|notebook|now|nthroot|null|num2cell|num2hex|num2str|numel|nzmax|"+
  122  		"ode(?:113|15i|15s|23|23s|23t|23tb|45)|odeget|odeset|odextend|onCleanup|ones|open|openfig|opengl|openvar|optimget|optimset|or|ordeig|orderfields|ordqz|ordschur|orient|"+
  123  		"orth|pack|padecoef|pagesetupdlg|pan|pareto|parseSoapResponse|pascal|patch|path|path2rc|pathsep|pathtool|pause|pbaspect|pcg|pchip|pcode|pcolor|pdepe|pdeval|peaks|perl|perms|"+

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-mysql.js:
   61  var MysqlHighlightRules = function() {
   62  
   63:     var mySqlKeywords = /*sql*/ "alter|and|as|asc|between|count|create|delete|desc|distinct|drop|from|having|in|insert|into|is|join|like|not|on|or|order|select|set|table|union|update|values|where" + "|accessible|action|add|after|algorithm|all|analyze|asensitive|at|authors|auto_increment|autocommit|avg|avg_row_length|before|binary|binlog|both|btree|cache|call|cascade|cascaded|case|catalog_name|chain|change|changed|character|check|checkpoint|checksum|class_origin|client_statistics|close|coalesce|code|collate|collation|collations|column|columns|comment|commit|committed|completion|concurrent|condition|connection|consistent|constraint|contains|continue|contributors|convert|cross|current_date|current_time|current_timestamp|current_user|cursor|data|database|databases|day_hour|day_microsecond|day_minute|day_second|deallocate|dec|declare|default|delay_key_write|delayed|delimiter|des_key_file|describe|deterministic|dev_pop|dev_samp|deviance|directory|disable|discard|distinctrow|div|dual|dumpfile|each|elseif|enable|enclosed|end|ends|engine|engines|enum|errors|escape|escaped|even|event|events|every|execute|exists|exit|explain|extended|fast|fetch|field|fields|first|flush|for|force|foreign|found_rows|full|fulltext|function|general|global|grant|grants|group|groupby_concat|handler|hash|help|high_priority|hosts|hour_microsecond|hour_minute|hour_second|if|ignore|ignore_server_ids|import|index|index_statistics|infile|inner|innodb|inout|insensitive|insert_method|install|interval|invoker|isolation|iterate|key|keys|kill|language|last|leading|leave|left|level|limit|linear|lines|list|load|local|localtime|localtimestamp|lock|logs|low_priority|master|master_heartbeat_period|master_ssl_verify_server_cert|masters|match|max|max_rows|maxvalue|message_text|middleint|migrate|min|min_rows|minute_microsecond|minute_second|mod|mode|modifies|modify|mutex|mysql_errno|natural|next|no|no_write_to_binlog|offline|offset|one|online|open|optimize|option|optionally|out|outer|outfile|pack_keys|parser|partition|partitions|password|phase|plugin|plugins|prepare|preserve|prev|primary|privileges|procedure|processlist|profile|profiles|purge|query|quick|range|read|read_write|reads|real|rebuild|recover|references|regexp|relaylog|release|remove|rename|reorganize|repair|repeatable|replace|require|resignal|restrict|resume|return|returns|revoke|right|rlike|rollback|rollup|row|row_format|rtree|savepoint|schedule|schema|schema_name|schemas|second_microsecond|security|sensitive|separator|serializable|server|session|share|show|signal|slave|slow|smallint|snapshot|soname|spatial|specific|sql|sql_big_result|sql_buffer_result|sql_cache|sql_calc_found_rows|sql_no_cache|sql_small_result|sqlexception|sqlstate|sqlwarning|ssl|start|starting|starts|status|std|stddev|stddev_pop|stddev_samp|storage|straight_join|subclass_origin|sum|suspend|table_name|table_statistics|tables|tablespace|temporary|terminated|to|trailing|transaction|trigger|triggers|truncate|uncommitted|undo|uninstall|unique|unlock|upgrade|usage|use|use_frm|user|user_resources|user_statistics|using|utc_date|utc_time|utc_timestamp|value|variables|varying|view|views|warnings|when|while|with|work|write|xa|xor|year_month|zerofill|begin|do|then|else|loop|repeat";
   64      var builtins = "by|bool|boolean|bit|blob|decimal|double|enum|float|long|longblob|longtext|medium|mediumblob|mediumint|mediumtext|time|timestamp|tinyblob|tinyint|tinytext|text|bigint|int|int1|int2|int3|int4|int8|integer|float|float4|float8|double|char|varbinary|varchar|varcharacter|precision|date|datetime|year|unsigned|signed|numeric"
   65      var variable = "charset|clear|connect|edit|ego|exit|go|help|nopager|notee|nowarning|pager|print|prompt|quit|rehash|source|status|system|tee"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-objectivec.js:
  213          {
  214              token: ["support.constant.cocoa"],
  215:             regex: "(?:\\b)(NS(?:R(?:GB(?:ModeColorPanel|ColorSpaceModel)|ight(?:Mouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|T(?:ext(?:Movement|Alignment)|ab(?:sBezelBorder|StopType))|ArrowFunctionKey)|ound(?:RectBezelStyle|Bankers|ed(?:BezelStyle|TokenStyle|DisclosureBezelStyle)|Down|Up|Plain|Line(?:CapStyle|JoinStyle))|un(?:StoppedResponse|ContinuesResponse|AbortedResponse)|e(?:s(?:izableWindowMask|et(?:CursorRectsRunLoopOrdering|FunctionKey))|ce(?:ssedBezelStyle|iver(?:sCantHandleCommandScriptError|EvaluationScriptError))|turnTextMovement|doFunctionKey|quiredArgumentsMissingScriptError|l(?:evancyLevelIndicatorStyle|ative(?:Before|After))|gular(?:SquareBezelStyle|ControlSize)|moveTraitFontAction)|a(?:n(?:domSubelement|geDateMode)|tingLevelIndicatorStyle|dio(?:ModeMatrix|Button)))|G(?:IFFileType|lyph(?:Below|Inscribe(?:B(?:elow|ase)|Over(?:strike|Below)|Above)|Layout(?:WithPrevious|A(?:tAPoint|gainstAPoint))|A(?:ttribute(?:BidiLevel|Soft|Inscribe|Elastic)|bove))|r(?:ooveBorder|eaterThan(?:Comparison|OrEqualTo(?:Comparison|PredicateOperatorType)|PredicateOperatorType)|a(?:y(?:ModeColorPanel|ColorSpaceModel)|dient(?:None|Con(?:cave(?:Strong|Weak)|vex(?:Strong|Weak)))|phiteControlTint)))|XML(?:N(?:o(?:tationDeclarationKind|de(?:CompactEmptyElement|IsCDATA|OptionsNone|Use(?:SingleQuotes|DoubleQuotes)|Pre(?:serve(?:NamespaceOrder|C(?:haracterReferences|DATA)|DTD|Prefixes|E(?:ntities|mptyElements)|Quotes|Whitespace|A(?:ttributeOrder|ll))|ttyPrint)|ExpandEmptyElement))|amespaceKind)|CommentKind|TextKind|InvalidKind|D(?:ocument(?:X(?:MLKind|HTMLKind|Include)|HTMLKind|T(?:idy(?:XML|HTML)|extKind)|IncludeContentTypeDeclaration|Validate|Kind)|TDKind)|P(?:arser(?:GTRequiredError|XMLDeclNot(?:StartedError|FinishedError)|Mi(?:splaced(?:XMLDeclarationError|CDATAEndStringError)|xedContentDeclNot(?:StartedError|FinishedError))|S(?:t(?:andaloneValueError|ringNot(?:StartedError|ClosedError))|paceRequiredError|eparatorRequiredError)|N(?:MTOKENRequiredError|o(?:t(?:ationNot(?:StartedError|FinishedError)|WellBalancedError)|DTDError)|amespaceDeclarationError|AMERequiredError)|C(?:haracterRef(?:In(?:DTDError|PrologError|EpilogError)|AtEOFError)|o(?:nditionalSectionNot(?:StartedError|FinishedError)|mment(?:NotFinishedError|ContainsDoubleHyphenError))|DATANotFinishedError)|TagNameMismatchError|In(?:ternalError|valid(?:HexCharacterRefError|C(?:haracter(?:RefError|InEntityError|Error)|onditionalSectionError)|DecimalCharacterRefError|URIError|Encoding(?:NameError|Error)))|OutOfMemoryError|D(?:ocumentStartError|elegateAbortedParseError|OCTYPEDeclNotFinishedError)|U(?:RI(?:RequiredError|FragmentError)|n(?:declaredEntityError|parsedEntityError|knownEncodingError|finishedTagError))|P(?:CDATARequiredError|ublicIdentifierRequiredError|arsedEntityRef(?:MissingSemiError|NoNameError|In(?:Internal(?:SubsetError|Error)|PrologError|EpilogError)|AtEOFError)|r(?:ocessingInstructionNot(?:StartedError|FinishedError)|ematureDocumentEndError))|E(?:n(?:codingNotSupportedError|tity(?:Ref(?:In(?:DTDError|PrologError|EpilogError)|erence(?:MissingSemiError|WithoutNameError)|LoopError|AtEOFError)|BoundaryError|Not(?:StartedError|FinishedError)|Is(?:ParameterError|ExternalError)|ValueRequiredError))|qualExpectedError|lementContentDeclNot(?:StartedError|FinishedError)|xt(?:ernalS(?:tandaloneEntityError|ubsetNotFinishedError)|raContentError)|mptyDocumentError)|L(?:iteralNot(?:StartedError|FinishedError)|T(?:RequiredError|SlashRequiredError)|essThanSymbolInAttributeError)|Attribute(?:RedefinedError|HasNoValueError|Not(?:StartedError|FinishedError)|ListNot(?:StartedError|FinishedError)))|rocessingInstructionKind)|E(?:ntity(?:GeneralKind|DeclarationKind|UnparsedKind|P(?:ar(?:sedKind|ameterKind)|redefined))|lement(?:Declaration(?:MixedKind|UndefinedKind|E(?:lementKind|mptyKind)|Kind|AnyKind)|Kind))|Attribute(?:N(?:MToken(?:sKind|Kind)|otationKind)|CDATAKind|ID(?:Ref(?:sKind|Kind)|Kind)|DeclarationKind|En(?:tit(?:yKind|iesKind)|umerationKind)|Kind))|M(?:i(?:n(?:XEdge|iaturizableWindowMask|YEdge|uteCalendarUnit)|terLineJoinStyle|ddleSubelement|xedState)|o(?:nthCalendarUnit|deSwitchFunctionKey|use(?:Moved(?:Mask)?|E(?:ntered(?:Mask)?|ventSubtype|xited(?:Mask)?))|veToBezierPathElement|mentary(?:ChangeButton|Push(?:Button|InButton)|Light(?:Button)?))|enuFunctionKey|a(?:c(?:intoshInterfaceStyle|OSRomanStringEncoding)|tchesPredicateOperatorType|ppedRead|x(?:XEdge|YEdge))|ACHOperatingSystem)|B(?:MPFileType|o(?:ttomTabsBezelBorder|ldFontMask|rderlessWindowMask|x(?:Se(?:condary|parator)|OldStyle|Primary))|uttLineCapStyle|e(?:zelBorder|velLineJoinStyle|low(?:Bottom|Top)|gin(?:sWith(?:Comparison|PredicateOperatorType)|FunctionKey))|lueControlTint|ack(?:spaceCharacter|tabTextMovement|ingStore(?:Retained|Buffered|Nonretained)|TabCharacter|wardsSearch|groundTab)|r(?:owser(?:NoColumnResizing|UserColumnResizing|AutoColumnResizing)|eakFunctionKey))|S(?:h(?:ift(?:JISStringEncoding|KeyMask)|ow(?:ControlGlyphs|InvisibleGlyphs)|adowlessSquareBezelStyle)|y(?:s(?:ReqFunctionKey|tem(?:D(?:omainMask|efined(?:Mask)?)|FunctionKey))|mbolStringEncoding)|c(?:a(?:nnedOption|le(?:None|ToFit|Proportionally))|r(?:oll(?:er(?:NoPart|Increment(?:Page|Line|Arrow)|Decrement(?:Page|Line|Arrow)|Knob(?:Slot)?|Arrows(?:M(?:inEnd|axEnd)|None|DefaultSetting))|Wheel(?:Mask)?|LockFunctionKey)|eenChangedEventType))|t(?:opFunctionKey|r(?:ingDrawing(?:OneShot|DisableScreenFontSubstitution|Uses(?:DeviceMetrics|FontLeading|LineFragmentOrigin))|eam(?:Status(?:Reading|NotOpen|Closed|Open(?:ing)?|Error|Writing|AtEnd)|Event(?:Has(?:BytesAvailable|SpaceAvailable)|None|OpenCompleted|E(?:ndEncountered|rrorOccurred)))))|i(?:ngle(?:DateMode|UnderlineStyle)|ze(?:DownFontAction|UpFontAction))|olarisOperatingSystem|unOSOperatingSystem|pecialPageOrder|e(?:condCalendarUnit|lect(?:By(?:Character|Paragraph|Word)|i(?:ng(?:Next|Previous)|onAffinity(?:Downstream|Upstream))|edTab|FunctionKey)|gmentSwitchTracking(?:Momentary|Select(?:One|Any)))|quareLineCapStyle|witchButton|ave(?:ToOperation|Op(?:tions(?:Yes|No|Ask)|eration)|AsOperation)|mall(?:SquareBezelStyle|C(?:ontrolSize|apsFontMask)|IconButtonBezelStyle))|H(?:ighlightModeMatrix|SBModeColorPanel|o(?:ur(?:Minute(?:SecondDatePickerElementFlag|DatePickerElementFlag)|CalendarUnit)|rizontalRuler|meFunctionKey)|TTPCookieAcceptPolicy(?:Never|OnlyFromMainDocumentDomain|Always)|e(?:lp(?:ButtonBezelStyle|KeyMask|FunctionKey)|avierFontAction)|PUXOperatingSystem)|Year(?:MonthDa(?:yDatePickerElementFlag|tePickerElementFlag)|CalendarUnit)|N(?:o(?:n(?:StandardCharacterSetFontMask|ZeroWindingRule|activatingPanelMask|LossyASCIIStringEncoding)|Border|t(?:ification(?:SuspensionBehavior(?:Hold|Coalesce|D(?:eliverImmediately|rop))|NoCoalescing|CoalescingOn(?:Sender|Name)|DeliverImmediately|PostToAllSessions)|PredicateType|EqualToPredicateOperatorType)|S(?:cr(?:iptError|ollerParts)|ubelement|pecifierError)|CellMask|T(?:itle|opLevelContainersSpecifierError|abs(?:BezelBorder|NoBorder|LineBorder))|I(?:nterfaceStyle|mage)|UnderlineStyle|FontChangeAction)|u(?:ll(?:Glyph|CellType)|m(?:eric(?:Search|PadKeyMask)|berFormatter(?:Round(?:Half(?:Down|Up|Even)|Ceiling|Down|Up|Floor)|Behavior(?:10|Default)|S(?:cientificStyle|pellOutStyle)|NoStyle|CurrencyStyle|DecimalStyle|P(?:ercentStyle|ad(?:Before(?:Suffix|Prefix)|After(?:Suffix|Prefix))))))|e(?:t(?:Services(?:BadArgumentError|NotFoundError|C(?:ollisionError|ancelledError)|TimeoutError|InvalidError|UnknownError|ActivityInProgress)|workDomainMask)|wlineCharacter|xt(?:StepInterfaceStyle|FunctionKey))|EXTSTEPStringEncoding|a(?:t(?:iveShortGlyphPacking|uralTextAlignment)|rrowFontMask))|C(?:hange(?:ReadOtherContents|GrayCell(?:Mask)?|BackgroundCell(?:Mask)?|Cleared|Done|Undone|Autosaved)|MYK(?:ModeColorPanel|ColorSpaceModel)|ircular(?:BezelStyle|Slider)|o(?:n(?:stantValueExpressionType|t(?:inuousCapacityLevelIndicatorStyle|entsCellMask|ain(?:sComparison|erSpecifierError)|rol(?:Glyph|KeyMask))|densedFontMask)|lor(?:Panel(?:RGBModeMask|GrayModeMask|HSBModeMask|C(?:MYKModeMask|olorListModeMask|ustomPaletteModeMask|rayonModeMask)|WheelModeMask|AllModesMask)|ListModeColorPanel)|reServiceDirectory|m(?:p(?:osite(?:XOR|Source(?:In|O(?:ut|ver)|Atop)|Highlight|C(?:opy|lear)|Destination(?:In|O(?:ut|ver)|Atop)|Plus(?:Darker|Lighter))|ressedFontMask)|mandKeyMask))|u(?:stom(?:SelectorPredicateOperatorType|PaletteModeColorPanel)|r(?:sor(?:Update(?:Mask)?|PointingDevice)|veToBezierPathElement))|e(?:nterT(?:extAlignment|abStopType)|ll(?:State|H(?:ighlighted|as(?:Image(?:Horizontal|OnLeftOrBottom)|OverlappingImage))|ChangesContents|Is(?:Bordered|InsetButton)|Disabled|Editable|LightsBy(?:Gray|Background|Contents)|AllowsMixedState))|l(?:ipPagination|o(?:s(?:ePathBezierPathElement|ableWindowMask)|ckAndCalendarDatePickerStyle)|ear(?:ControlTint|DisplayFunctionKey|LineFunctionKey))|a(?:seInsensitive(?:Search|PredicateOption)|n(?:notCreateScriptCommandError|cel(?:Button|TextMovement))|chesDirectory|lculation(?:NoError|Overflow|DivideByZero|Underflow|LossOfPrecision)|rriageReturnCharacter)|r(?:itical(?:Request|AlertStyle)|ayonModeColorPanel))|T(?:hick(?:SquareBezelStyle|erSquareBezelStyle)|ypesetter(?:Behavior|HorizontalTabAction|ContainerBreakAction|ZeroAdvancementAction|OriginalBehavior|ParagraphBreakAction|WhitespaceAction|L(?:ineBreakAction|atestBehavior))|i(?:ckMark(?:Right|Below|Left|Above)|tledWindowMask|meZoneDatePickerElementFlag)|o(?:olbarItemVisibilityPriority(?:Standard|High|User|Low)|pTabsBezelBorder|ggleButton)|IFF(?:Compression(?:N(?:one|EXT)|CCITTFAX(?:3|4)|OldJPEG|JPEG|PackBits|LZW)|FileType)|e(?:rminate(?:Now|Cancel|Later)|xt(?:Read(?:InapplicableDocumentTypeError|WriteErrorM(?:inimum|aximum))|Block(?:M(?:i(?:nimum(?:Height|Width)|ddleAlignment)|a(?:rgin|ximum(?:Height|Width)))|B(?:o(?:ttomAlignment|rder)|aselineAlignment)|Height|TopAlignment|P(?:ercentageValueType|adding)|Width|AbsoluteValueType)|StorageEdited(?:Characters|Attributes)|CellType|ured(?:RoundedBezelStyle|BackgroundWindowMask|SquareBezelStyle)|Table(?:FixedLayoutAlgorithm|AutomaticLayoutAlgorithm)|Field(?:RoundedBezel|SquareBezel|AndStepperDatePickerStyle)|WriteInapplicableDocumentTypeError|ListPrependEnclosingMarker))|woByteGlyphPacking|ab(?:Character|TextMovement|le(?:tP(?:oint(?:Mask|EventSubtype)?|roximity(?:Mask|EventSubtype)?)|Column(?:NoResizing|UserResizingMask|AutoresizingMask)|View(?:ReverseSequentialColumnAutoresizingStyle|GridNone|S(?:olid(?:HorizontalGridLineMask|VerticalGridLineMask)|equentialColumnAutoresizingStyle)|NoColumnAutoresizing|UniformColumnAutoresizingStyle|FirstColumnOnlyAutoresizingStyle|LastColumnOnlyAutoresizingStyle)))|rackModeMatrix)|I(?:n(?:sert(?:CharFunctionKey|FunctionKey|LineFunctionKey)|t(?:Type|ernalS(?:criptError|pecifierError))|dexSubelement|validIndexSpecifierError|formational(?:Request|AlertStyle)|PredicateOperatorType)|talicFontMask|SO(?:2022JPStringEncoding|Latin(?:1StringEncoding|2StringEncoding))|dentityMappingCharacterCollection|llegalTextMovement|mage(?:R(?:ight|ep(?:MatchesDevice|LoadStatus(?:ReadingHeader|Completed|InvalidData|Un(?:expectedEOF|knownType)|WillNeedAllData)))|Below|C(?:ellType|ache(?:BySize|Never|Default|Always))|Interpolation(?:High|None|Default|Low)|O(?:nly|verlaps)|Frame(?:Gr(?:oove|ayBezel)|Button|None|Photo)|L(?:oadStatus(?:ReadError|C(?:ompleted|ancelled)|InvalidData|UnexpectedEOF)|eft)|A(?:lign(?:Right|Bottom(?:Right|Left)?|Center|Top(?:Right|Left)?|Left)|bove)))|O(?:n(?:State|eByteGlyphPacking|OffButton|lyScrollerArrows)|ther(?:Mouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|TextMovement)|SF1OperatingSystem|pe(?:n(?:GL(?:GO(?:Re(?:setLibrary|tainRenderers)|ClearFormatCache|FormatCacheSize)|PFA(?:R(?:obust|endererID)|M(?:inimumPolicy|ulti(?:sample|Screen)|PSafe|aximumPolicy)|BackingStore|S(?:creenMask|te(?:ncilSize|reo)|ingleRenderer|upersample|ample(?:s|Buffers|Alpha))|NoRecovery|C(?:o(?:lor(?:Size|Float)|mpliant)|losestPolicy)|OffScreen|D(?:oubleBuffer|epthSize)|PixelBuffer|VirtualScreenCount|FullScreen|Window|A(?:cc(?:umSize|elerated)|ux(?:Buffers|DepthStencil)|l(?:phaSize|lRenderers))))|StepUnicodeReservedBase)|rationNotSupportedForKeyS(?:criptError|pecifierError))|ffState|KButton|rPredicateType|bjC(?:B(?:itfield|oolType)|S(?:hortType|tr(?:ingType|uctType)|electorType)|NoType|CharType|ObjectType|DoubleType|UnionType|PointerType|VoidType|FloatType|Long(?:Type|longType)|ArrayType))|D(?:i(?:s(?:c(?:losureBezelStyle|reteCapacityLevelIndicatorStyle)|playWindowRunLoopOrdering)|acriticInsensitivePredicateOption|rect(?:Selection|PredicateModifier))|o(?:c(?:ModalWindowMask|ument(?:Directory|ationDirectory))|ubleType|wn(?:TextMovement|ArrowFunctionKey))|e(?:s(?:cendingPageOrder|ktopDirectory)|cimalTabStopType|v(?:ice(?:NColorSpaceModel|IndependentModifierFlagsMask)|eloper(?:Directory|ApplicationDirectory))|fault(?:ControlTint|TokenStyle)|lete(?:Char(?:acter|FunctionKey)|FunctionKey|LineFunctionKey)|moApplicationDirectory)|a(?:yCalendarUnit|teFormatter(?:MediumStyle|Behavior(?:10|Default)|ShortStyle|NoStyle|FullStyle|LongStyle))|ra(?:wer(?:Clos(?:ingState|edState)|Open(?:ingState|State))|gOperation(?:Generic|Move|None|Copy|Delete|Private|Every|Link|All)))|U(?:ser(?:CancelledError|D(?:irectory|omainMask)|FunctionKey)|RL(?:Handle(?:NotLoaded|Load(?:Succeeded|InProgress|Failed))|CredentialPersistence(?:None|Permanent|ForSession))|n(?:scaledWindowMask|cachedRead|i(?:codeStringEncoding|talicFontMask|fiedTitleAndToolbarWindowMask)|d(?:o(?:CloseGroupingRunLoopOrdering|FunctionKey)|e(?:finedDateComponent|rline(?:Style(?:Single|None|Thick|Double)|Pattern(?:Solid|D(?:ot|ash(?:Dot(?:Dot)?)?)))))|known(?:ColorSpaceModel|P(?:ointingDevice|ageOrder)|KeyS(?:criptError|pecifierError))|boldFontMask)|tilityWindowMask|TF8StringEncoding|p(?:dateWindowsRunLoopOrdering|TextMovement|ArrowFunctionKey))|J(?:ustifiedTextAlignment|PEG(?:2000FileType|FileType)|apaneseEUC(?:GlyphPacking|StringEncoding))|P(?:o(?:s(?:t(?:Now|erFontMask|WhenIdle|ASAP)|iti(?:on(?:Replace|Be(?:fore|ginning)|End|After)|ve(?:IntType|DoubleType|FloatType)))|pUp(?:NoArrow|ArrowAt(?:Bottom|Center))|werOffEventType|rtraitOrientation)|NGFileType|ush(?:InCell(?:Mask)?|OnPushOffButton)|e(?:n(?:TipMask|UpperSideMask|PointingDevice|LowerSideMask)|riodic(?:Mask)?)|P(?:S(?:caleField|tatus(?:Title|Field)|aveButton)|N(?:ote(?:Title|Field)|ame(?:Title|Field))|CopiesField|TitleField|ImageButton|OptionsButton|P(?:a(?:perFeedButton|ge(?:Range(?:To|From)|ChoiceMatrix))|reviewButton)|LayoutButton)|lainTextTokenStyle|a(?:useFunctionKey|ragraphSeparatorCharacter|ge(?:DownFunctionKey|UpFunctionKey))|r(?:int(?:ing(?:ReplyLater|Success|Cancelled|Failure)|ScreenFunctionKey|erTable(?:NotFound|OK|Error)|FunctionKey)|o(?:p(?:ertyList(?:XMLFormat|MutableContainers(?:AndLeaves)?|BinaryFormat|Immutable|OpenStepFormat)|rietaryStringEncoding)|gressIndicator(?:BarStyle|SpinningStyle|Preferred(?:SmallThickness|Thickness|LargeThickness|AquaThickness)))|e(?:ssedTab|vFunctionKey))|L(?:HeightForm|CancelButton|TitleField|ImageButton|O(?:KButton|rientationMatrix)|UnitsButton|PaperNameButton|WidthForm))|E(?:n(?:terCharacter|d(?:sWith(?:Comparison|PredicateOperatorType)|FunctionKey))|v(?:e(?:nOddWindingRule|rySubelement)|aluatedObjectExpressionType)|qualTo(?:Comparison|PredicateOperatorType)|ra(?:serPointingDevice|CalendarUnit|DatePickerElementFlag)|x(?:clude(?:10|QuickDrawElementsIconCreationOption)|pandedFontMask|ecuteFunctionKey))|V(?:i(?:ew(?:M(?:in(?:XMargin|YMargin)|ax(?:XMargin|YMargin))|HeightSizable|NotSizable|WidthSizable)|aPanelFontAction)|erticalRuler|a(?:lidationErrorM(?:inimum|aximum)|riableExpressionType))|Key(?:SpecifierEvaluationScriptError|Down(?:Mask)?|Up(?:Mask)?|PathExpressionType|Value(?:MinusSetMutation|SetSetMutation|Change(?:Re(?:placement|moval)|Setting|Insertion)|IntersectSetMutation|ObservingOption(?:New|Old)|UnionSetMutation|ValidationError))|QTMovie(?:NormalPlayback|Looping(?:BackAndForthPlayback|Playback))|F(?:1(?:1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|7FunctionKey|i(?:nd(?:PanelAction(?:Replace(?:A(?:ndFind|ll(?:InSelection)?))?|S(?:howFindPanel|e(?:tFindString|lectAll(?:InSelection)?))|Next|Previous)|FunctionKey)|tPagination|le(?:Read(?:No(?:SuchFileError|PermissionError)|CorruptFileError|In(?:validFileNameError|applicableStringEncodingError)|Un(?:supportedSchemeError|knownError))|HandlingPanel(?:CancelButton|OKButton)|NoSuchFileError|ErrorM(?:inimum|aximum)|Write(?:NoPermissionError|In(?:validFileNameError|applicableStringEncodingError)|OutOfSpaceError|Un(?:supportedSchemeError|knownError))|LockingError)|xedPitchFontMask)|2(?:1FunctionKey|7FunctionKey|2FunctionKey|8FunctionKey|3FunctionKey|9FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey|6FunctionKey)|o(?:nt(?:Mo(?:noSpaceTrait|dernSerifsClass)|BoldTrait|S(?:ymbolicClass|criptsClass|labSerifsClass|ansSerifClass)|C(?:o(?:ndensedTrait|llectionApplicationOnlyMask)|larendonSerifsClass)|TransitionalSerifsClass|I(?:ntegerAdvancementsRenderingMode|talicTrait)|O(?:ldStyleSerifsClass|rnamentalsClass)|DefaultRenderingMode|U(?:nknownClass|IOptimizedTrait)|Panel(?:S(?:hadowEffectModeMask|t(?:andardModesMask|rikethroughEffectModeMask)|izeModeMask)|CollectionModeMask|TextColorEffectModeMask|DocumentColorEffectModeMask|UnderlineEffectModeMask|FaceModeMask|All(?:ModesMask|EffectsModeMask))|ExpandedTrait|VerticalTrait|F(?:amilyClassMask|reeformSerifsClass)|Antialiased(?:RenderingMode|IntegerAdvancementsRenderingMode))|cusRing(?:Below|Type(?:None|Default|Exterior)|Only|Above)|urByteGlyphPacking|rm(?:attingError(?:M(?:inimum|aximum))?|FeedCharacter))|8FunctionKey|unction(?:ExpressionType|KeyMask)|3(?:1FunctionKey|2FunctionKey|3FunctionKey|4FunctionKey|5FunctionKey|FunctionKey|0FunctionKey)|9FunctionKey|4FunctionKey|P(?:RevertButton|S(?:ize(?:Title|Field)|etButton)|CurrentField|Preview(?:Button|Field))|l(?:oat(?:ingPointSamplesBitmapFormat|Type)|agsChanged(?:Mask)?)|axButton|5FunctionKey|6FunctionKey)|W(?:heelModeColorPanel|indow(?:s(?:NTOperatingSystem|CP125(?:1StringEncoding|2StringEncoding|3StringEncoding|4StringEncoding|0StringEncoding)|95(?:InterfaceStyle|OperatingSystem))|M(?:iniaturizeButton|ovedEventType)|Below|CloseButton|ToolbarButton|ZoomButton|Out|DocumentIconButton|ExposedEventType|Above)|orkspaceLaunch(?:NewInstance|InhibitingBackgroundOnly|Default|PreferringClassic|WithoutA(?:ctivation|ddingToRecents)|A(?:sync|nd(?:Hide(?:Others)?|Print)|llowingClassicStartup))|eek(?:day(?:CalendarUnit|OrdinalCalendarUnit)|CalendarUnit)|a(?:ntsBidiLevels|rningAlertStyle)|r(?:itingDirection(?:RightToLeft|Natural|LeftToRight)|apCalendarComponents))|L(?:i(?:stModeMatrix|ne(?:Moves(?:Right|Down|Up|Left)|B(?:order|reakBy(?:C(?:harWrapping|lipping)|Truncating(?:Middle|Head|Tail)|WordWrapping))|S(?:eparatorCharacter|weep(?:Right|Down|Up|Left))|ToBezierPathElement|DoesntMove|arSlider)|teralSearch|kePredicateOperatorType|ghterFontAction|braryDirectory)|ocalDomainMask|e(?:ssThan(?:Comparison|OrEqualTo(?:Comparison|PredicateOperatorType)|PredicateOperatorType)|ft(?:Mouse(?:D(?:own(?:Mask)?|ragged(?:Mask)?)|Up(?:Mask)?)|T(?:ext(?:Movement|Alignment)|ab(?:sBezelBorder|StopType))|ArrowFunctionKey))|a(?:yout(?:RightToLeft|NotDone|CantFit|OutOfGlyphs|Done|LeftToRight)|ndscapeOrientation)|ABColorSpaceModel)|A(?:sc(?:iiWithDoubleByteEUCGlyphPacking|endingPageOrder)|n(?:y(?:Type|PredicateModifier|EventMask)|choredSearch|imation(?:Blocking|Nonblocking(?:Threaded)?|E(?:ffect(?:DisappearingItemDefault|Poof)|ase(?:In(?:Out)?|Out))|Linear)|dPredicateType)|t(?:Bottom|tachmentCharacter|omicWrite|Top)|SCIIStringEncoding|d(?:obe(?:GB1CharacterCollection|CNS1CharacterCollection|Japan(?:1CharacterCollection|2CharacterCollection)|Korea1CharacterCollection)|dTraitFontAction|minApplicationDirectory)|uto(?:saveOperation|Pagination)|pp(?:lication(?:SupportDirectory|D(?:irectory|e(?:fined(?:Mask)?|legateReply(?:Success|Cancel|Failure)|activatedEventType))|ActivatedEventType)|KitDefined(?:Mask)?)|l(?:ternateKeyMask|pha(?:ShiftKeyMask|NonpremultipliedBitmapFormat|FirstBitmapFormat)|ert(?:SecondButtonReturn|ThirdButtonReturn|OtherReturn|DefaultReturn|ErrorReturn|FirstButtonReturn|AlternateReturn)|l(?:ScrollerParts|DomainsMask|PredicateModifier|LibrariesDirectory|ApplicationsDirectory))|rgument(?:sWrongScriptError|EvaluationScriptError)|bove(?:Bottom|Top)|WTEventType)))(?:\\b)"
  216          },
  217          {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-pgsql.js:
   76          "analyse|analyze|and|any|anyarray|anyelement|anyenum|anynonarray|anyrange|array|as|asc|" +
   77          "assertion|assignment|asymmetric|at|attribute|authorization|backward|before|begin|between|" +
   78:         "bigint|binary|bit|bool|boolean|both|box|bpchar|by|bytea|cache|called|cascade|cascaded|case|cast|" +
   79          "catalog|chain|char|character|characteristics|check|checkpoint|cid|cidr|circle|class|close|" +
   80          "cluster|coalesce|collate|collation|column|comment|comments|commit|committed|concurrently|" +

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-php.js:
  155          'apache_child_terminate|apache_get_modules|apache_get_version|apache_getenv|apache_lookup_uri|apache_note|apache_request_headers|' +
  156          'apache_reset_timeout|apache_response_headers|apache_setenv|apc_add|apc_bin_dump|apc_bin_dumpfile|apc_bin_load|apc_bin_loadfile|' +
  157:         'apc_cache_info|apc_cas|apc_clear_cache|apc_compile_file|apc_dec|apc_define_constants|apc_delete|apc_delete_file|apc_exists|apc_fetch|' +
  158          'apc_inc|apc_load_constants|apc_sma_info|apc_store|apciterator|apd_breakpoint|apd_callstack|apd_clunk|apd_continue|apd_croak|' +
  159          'apd_dump_function_table|apd_dump_persistent_resources|apd_dump_regular_resources|apd_echo|apd_get_active_symbols|apd_set_pprof_trace|' +
  ...
  201          'chdb|chdb_create|chdir|checkdate|checkdnsrr|chgrp|chmod|chop|chown|chr|chroot|chunk_split|class_alias|class_exists|class_implements|' +
  202          'class_parents|classkit_import|classkit_method_add|classkit_method_copy|classkit_method_redefine|classkit_method_remove|' +
  203:         'classkit_method_rename|clearstatcache|clone|closedir|closelog|collator|com|com_addref|com_create_guid|com_event_sink|com_get|' +
  204          'com_get_active_object|com_invoke|com_isenum|com_load|com_load_typelib|com_message_pump|com_print_typeinfo|com_propget|com_propput|' +
  205          'com_propset|com_release|com_set|compact|connection_aborted|connection_status|connection_timeout|constant|construct|construct|construct|' +
  ...
  354          'header_register_callback|header_remove|headers_list|headers_sent|hebrev|hebrevc|hex2bin|hexdec|highlight_file|highlight_string|' +
  355          'html_entity_decode|htmlentities|htmlspecialchars|htmlspecialchars_decode|http_build_cookie|http_build_query|http_build_str|http_build_url|' +
  356:         'http_cache_etag|http_cache_last_modified|http_chunked_decode|http_date|http_deflate|http_get|http_get_request_body|' +
  357          'http_get_request_body_stream|http_get_request_headers|http_head|http_inflate|http_match_etag|http_match_modified|' +
  358          'http_match_request_header|http_negotiate_charset|http_negotiate_content_type|http_negotiate_language|http_parse_cookie|http_parse_headers|' +
  ...
  384          'httprequestpool_destruct|httprequestpool_detach|httprequestpool_getattachedrequests|httprequestpool_getfinishedrequests|' +
  385          'httprequestpool_reset|httprequestpool_send|httprequestpool_socketperform|httprequestpool_socketselect|httpresponse|httpresponse_capture|' +
  386:         'httpresponse_getbuffersize|httpresponse_getcache|httpresponse_getcachecontrol|httpresponse_getcontentdisposition|' +
  387          'httpresponse_getcontenttype|httpresponse_getdata|httpresponse_getetag|httpresponse_getfile|httpresponse_getgzip|httpresponse_getheader|' +
  388          'httpresponse_getlastmodified|httpresponse_getrequestbody|httpresponse_getrequestbodystream|httpresponse_getrequestheaders|' +
  389          'httpresponse_getstream|httpresponse_getthrottledelay|httpresponse_guesscontenttype|httpresponse_redirect|httpresponse_send|' +
  390:         'httpresponse_setbuffersize|httpresponse_setcache|httpresponse_setcachecontrol|httpresponse_setcontentdisposition|' +
  391          'httpresponse_setcontenttype|httpresponse_setdata|httpresponse_setetag|httpresponse_setfile|httpresponse_setgzip|httpresponse_setheader|' +
  392          'httpresponse_setlastmodified|httpresponse_setstream|httpresponse_setthrottledelay|httpresponse_status|hw_array2objrec|hw_changeobject|' +
  ...
  591          'mcrypt_module_get_algo_block_size|mcrypt_module_get_algo_key_size|mcrypt_module_get_supported_key_sizes|mcrypt_module_is_block_algorithm|' +
  592          'mcrypt_module_is_block_algorithm_mode|mcrypt_module_is_block_mode|mcrypt_module_open|mcrypt_module_self_test|mcrypt_ofb|md5|md5_file|' +
  593:         'mdecrypt_generic|memcache|memcache_debug|memcached|memory_get_peak_usage|memory_get_usage|messageformatter|metaphone|method_exists|mhash|' +
  594          'mhash_count|mhash_get_block_size|mhash_get_hash_name|mhash_keygen_s2k|microtime|mime_content_type|min|ming_keypress|' +
  595          'ming_setcubicthreshold|ming_setscale|ming_setswfcompression|ming_useconstants|ming_useswfversion|mkdir|mktime|money_format|mongo|' +
  ...
  621          'mysqli_master_query|mysqli_param_count|mysqli_report|mysqli_result|mysqli_rpl_parse_enabled|mysqli_rpl_probe|mysqli_rpl_query_type|' +
  622          'mysqli_send_long_data|mysqli_send_query|mysqli_set_opt|mysqli_slave_query|mysqli_stmt|mysqli_warning|mysqlnd_ms_get_stats|' +
  623:         'mysqlnd_ms_query_is_select|mysqlnd_ms_set_user_pick_server|mysqlnd_qc_change_handler|mysqlnd_qc_clear_cache|mysqlnd_qc_get_cache_info|' +
  624          'mysqlnd_qc_get_core_stats|mysqlnd_qc_get_handler|mysqlnd_qc_get_query_trace_log|mysqlnd_qc_set_user_handlers|natcasesort|natsort|' +
  625          'ncurses_addch|ncurses_addchnstr|ncurses_addchstr|ncurses_addnstr|ncurses_addstr|ncurses_assume_default_colors|ncurses_attroff|' +
  ...
  769          'radius_demangle|radius_demangle_mppe_key|radius_get_attr|radius_get_vendor_attr|radius_put_addr|radius_put_attr|radius_put_int|' +
  770          'radius_put_string|radius_put_vendor_addr|radius_put_vendor_attr|radius_put_vendor_int|radius_put_vendor_string|' +
  771:         'radius_request_authenticator|radius_send_request|radius_server_secret|radius_strerror|rand|range|rangeexception|rar_wrapper_cache_stats|' +
  772          'rararchive|rarentry|rarexception|rawurldecode|rawurlencode|read_exif_data|readdir|readfile|readgzfile|readline|readline_add_history|' +
  773          'readline_callback_handler_install|readline_callback_handler_remove|readline_callback_read_char|readline_clear_history|' +
  774          'readline_completion_function|readline_info|readline_list_history|readline_on_new_line|readline_read_history|readline_redisplay|' +
  775:         'readline_write_history|readlink|realpath|realpath_cache_get|realpath_cache_size|recode|recode_file|recode_string|recursivearrayiterator|' +
  776          'recursivecachingiterator|recursivecallbackfilteriterator|recursivedirectoryiterator|recursivefilteriterator|recursiveiterator|' +
  777          'recursiveiteratoriterator|recursiveregexiterator|recursivetreeiterator|reflection|reflectionclass|reflectionexception|reflectionextension|' +
  ...
  806          'sdo_model_type_getproperties|sdo_model_type_getproperty|sdo_model_type_isabstracttype|sdo_model_type_isdatatype|sdo_model_type_isinstance|' +
  807          'sdo_model_type_isopentype|sdo_model_type_issequencedtype|sdo_sequence_getproperty|sdo_sequence_insert|sdo_sequence_move|seekableiterator|' +
  808:         'sem_acquire|sem_get|sem_release|sem_remove|serializable|serialize|session_cache_expire|session_cache_limiter|session_commit|' +
  809          'session_decode|session_destroy|session_encode|session_get_cookie_params|session_id|session_is_registered|session_module_name|session_name|' +
  810          'session_pgsql_add_error|session_pgsql_get_error|session_pgsql_get_field|session_pgsql_reset|session_pgsql_set_field|session_pgsql_status|' +
  ...
  903          'wddx_packet_start|wddx_serialize_value|wddx_serialize_vars|win32_continue_service|win32_create_service|win32_delete_service|' +
  904          'win32_get_last_control_message|win32_pause_service|win32_ps_list_procs|win32_ps_stat_mem|win32_ps_stat_proc|win32_query_service_status|' +
  905:         'win32_set_service_status|win32_start_service|win32_start_service_ctrl_dispatcher|win32_stop_service|wincache_fcache_fileinfo|' +
  906:         'wincache_fcache_meminfo|wincache_lock|wincache_ocache_fileinfo|wincache_ocache_meminfo|wincache_refresh_if_changed|' +
  907:         'wincache_rplist_fileinfo|wincache_rplist_meminfo|wincache_scache_info|wincache_scache_meminfo|wincache_ucache_add|wincache_ucache_cas|' +
  908:         'wincache_ucache_clear|wincache_ucache_dec|wincache_ucache_delete|wincache_ucache_exists|wincache_ucache_get|wincache_ucache_inc|' +
  909:         'wincache_ucache_info|wincache_ucache_meminfo|wincache_ucache_set|wincache_unlock|wordwrap|xattr_get|xattr_list|xattr_remove|xattr_set|' +
  910          'xattr_supported|xdiff_file_bdiff|xdiff_file_bdiff_size|xdiff_file_bpatch|xdiff_file_diff|xdiff_file_diff_binary|xdiff_file_merge3|' +
  911          'xdiff_file_patch|xdiff_file_patch_binary|xdiff_file_rabdiff|xdiff_string_bdiff|xdiff_string_bdiff_size|xdiff_string_bpatch|' +

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-ruby.js:
  157          "authenticate_or_request_with_http_basic|authenticate_or_request_with_http_digest|" +
  158          "filter_parameter_logging|match|get|post|resources|redirect|scope|assert_routing|" +
  159:         "translate|localize|extract_locale_from_tld|caches_page|expire_page|caches_action|expire_action|" +
  160:         "cache|expire_fragment|expire_cache_for|observe|cache_sweeper|" +
  161          "has_many|has_one|belongs_to|has_and_belongs_to_many"
  162      );

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-vbscript.js:
  147          {
  148              token: "support.constant.asp",
  149:             regex: "\\b(?:TotalBytes|Buffer|CacheControl|Charset|ContentType|Expires|ExpiresAbsolute|IsClientConnected|PICS|Status|ScriptTimeout|CodePage|LCID|SessionID|Timeout)\\b"
  150          },
  151          {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/mode-xquery.js:
  374      
  375      if(this.tokens[row] !== undefined) {
  376:       var cachedLine = this.lines[row];
  377:       var begin = sharedStart([line, cachedLine]);
  378:       var diff = cachedLine.length - line.length;
  379        var idx = 0;
  380        var col = 0;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/worker-coffee.js:
 4452      };
 4453  
 4454:     Base.prototype.cache = function(o, level, reused) {
 4455        var ref, sub;
 4456        if (!this.isComplex()) {
 ....
 4468      };
 4469  
 4470:     Base.prototype.cacheToCodeFragments = function(cacheValues) {
 4471:       return [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])];
 4472      };
 4473  
 ....
 5117      };
 5118  
 5119:     Value.prototype.cacheReference = function(o) {
 5120        var base, bref, name, nref;
 5121        name = last(this.properties);
 ....
 5271              return ifn;
 5272            }
 5273:           _ref2 = new Value(this.variable).cacheReference(o), left = _ref2[0], rite = _ref2[1];
 5274          } else {
 5275            left = new Literal(this.superReference(o));
 ....
 5470          top: true
 5471        });
 5472:       _ref2 = this.cacheToCodeFragments(this.from.cache(o, LEVEL_LIST)), this.fromC = _ref2[0], this.fromVar = _ref2[1];
 5473:       _ref3 = this.cacheToCodeFragments(this.to.cache(o, LEVEL_LIST)), this.toC = _ref3[0], this.toVar = _ref3[1];
 5474        if (step = del(o, 'step')) {
 5475:         _ref4 = this.cacheToCodeFragments(step.cache(o, LEVEL_LIST)), this.step = _ref4[0], this.stepVar = _ref4[1];
 5476        }
 5477        _ref5 = [this.fromVar.match(NUMBER), this.toVar.match(NUMBER)], this.fromNum = _ref5[0], this.toNum = _ref5[1];
 ....
 6028            } else {
 6029              if (obj.base instanceof Parens) {
 6030:               _ref7 = new Value(obj.unwrapAll()).cacheReference(o), obj = _ref7[0], idx = _ref7[1];
 6031              } else {
 6032                idx = obj["this"] ? obj.properties[0].name : obj;
 ....
 6080      Assign.prototype.compileConditional = function(o) {
 6081        var fragments, left, right, _ref2;
 6082:       _ref2 = this.variable.cacheReference(o), left = _ref2[0], right = _ref2[1];
 6083        if (!left.properties.length && left.base instanceof Literal && left.base.value !== "this" && !o.scope.check(left.base.value)) {
 6084          this.variable.error("the variable \"" + left.base.value + "\" can't be assigned with " + this.context + " because it has not been declared before");
 ....
 6104        name = this.variable.compile(o);
 6105        if (from) {
 6106:         _ref3 = this.cacheToCodeFragments(from.cache(o, LEVEL_OP)), fromDecl = _ref3[0], fromRef = _ref3[1];
 6107        } else {
 6108          fromDecl = fromRef = '0';
 ....
 6123          to = "9e9";
 6124        }
 6125:       _ref4 = this.value.cache(o, LEVEL_LIST), valDef = _ref4[0], valRef = _ref4[1];
 6126        answer = [].concat(this.makeCode("[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat("), valDef, this.makeCode(")), "), valRef);
 6127        if (o.level > LEVEL_TOP) {
 ....
 6686      Op.prototype.compileChain = function(o) {
 6687        var fragments, fst, shared, _ref2;
 6688:       _ref2 = this.first.second.cache(o), this.first.second = _ref2[0], shared = _ref2[1];
 6689        fst = this.first.compileToFragments(o, LEVEL_OP);
 6690        fragments = fst.concat(this.makeCode(" " + (this.invert ? '&&' : '||') + " "), shared.compileToFragments(o), this.makeCode(" " + this.operator + " "), this.second.compileToFragments(o, LEVEL_OP));
 ....
 6776          return [this.makeCode("" + (!!this.negated))];
 6777        }
 6778:       _ref2 = this.object.cache(o, LEVEL_OP), sub = _ref2[0], ref = _ref2[1];
 6779        _ref3 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = _ref3[0], cnj = _ref3[1];
 6780        tests = [];
 ....
 6796      In.prototype.compileLoopTest = function(o) {
 6797        var fragments, ref, sub, _ref2;
 6798:       _ref2 = this.object.cache(o, LEVEL_LIST), sub = _ref2[0], ref = _ref2[1];
 6799        fragments = [].concat(this.makeCode(utility('indexOf') + ".call("), this.array.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), ref, this.makeCode(") " + (this.negated ? '< 0' : '>= 0')));
 6800        if (fragmentsToText(sub) === fragmentsToText(ref)) {
 ....
 7002        kvarAssign = kvar !== ivar ? "" + kvar + " = " : "";
 7003        if (this.step && !this.range) {
 7004:         _ref3 = this.cacheToCodeFragments(this.step.cache(o, LEVEL_LIST)), step = _ref3[0], stepVar = _ref3[1];
 7005          stepNum = stepVar.match(NUMBER);
 7006        }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/worker-css.js:
 2259      this._ltIndex = 0;
 2260      
 2261:     this._ltIndexCache = [];
 2262  }
 2263  TokenStreamBase.createTokenData = function(tokens){
 ....
 2354              if ((info.channel === undefined || channel === info.channel) &&
 2355                      this._ltIndex <= this._lt.length){
 2356:                 this._ltIndexCache.push(i);
 2357                  return this._token.type;
 2358              }
 ....
 2363              this._token = token;
 2364              this._lt.push(token);
 2365:             this._ltIndexCache.push(this._lt.length - this._ltIndex + i);  
 2366              if (this._lt.length > 5){
 2367                  this._lt.shift();                
 2368              }
 2369:             if (this._ltIndexCache.length > 5){
 2370:                 this._ltIndexCache.shift();
 2371              }
 2372              this._ltIndex = this._lt.length;
 ....
 2432      },      
 2433      unget: function(){
 2434:         if (this._ltIndexCache.length){
 2435:             this._ltIndex -= this._ltIndexCache.pop();//--;
 2436              this._token = this._lt[this._ltIndex - 1];
 2437          } else {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ace-rails-ap-2.0.1/vendor/assets/javascripts/ace/worker-javascript.js:
 3275  	Blob                 : false,
 3276  	addEventListener     : false,
 3277: 	applicationCache     : false,
 3278  	atob                 : false,
 3279  	blur                 : false,
 ....
 5114  			return val;
 5115  		}
 5116: 		if (prop && !api.getCache("displayed:I002")) {
 5117: 			api.setCache("displayed:I002", true);
 5118  			warning("I002");
 5119  		}
 ....
 7953  			},
 7954  
 7955: 			getCache: function (name) {
 7956: 				return state.cache[name];
 7957  			},
 7958  
 7959: 			setCache: function (name, value) {
 7960: 				state.cache[name] = value;
 7961  			},
 7962  
 ....
 9716  		this.lines = [];
 9717  		this.tab = "";
 9718: 		this.cache = {}; // Node.JS doesn't have Map. Sniff.
 9719  	}
 9720  };
 ....
 9810  
 9811  		if (quotmark === true) {
 9812: 			if (!linter.getCache("quotmark")) {
 9813: 				linter.setCache("quotmark", data.quote);
 9814  			}
 9815  
 9816: 			if (linter.getCache("quotmark") !== data.quote) {
 9817  				code = "W110";
 9818  			}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/CHANGELOG.md:
   13  *   Escape the unit value provided to number_to_currency Fixes CVE-2013-6415
   14  
   15: *   Only use valid mime type symbols as cache keys CVE-2013-6414
   16  
   17  
   ..
  113      *Piotr Niełacny*
  114  
  115: *   Only cache template digests if `config.cache_template_loading` is true.
  116  
  117      *Josh Lauer*, *Justin Ridgewell*
  ...
  269      *José Valim*
  270  
  271: *   Fix an issue where partials with a number in the filename weren't being digested for cache dependencies.
  272  
  273      *Bryan Ricker*
  ...
  624      *Yves Senn*
  625  
  626: *   Added view_cache_dependency API for declaring dependencies that affect
  627:     cache digest computation.
  628  
  629      *Jamis Buck*
  ...
  735      *DHH*
  736  
  737: *   Add `cache_if` and `cache_unless` for conditional fragment caching:
  738  
  739      Example:
  740  
  741:         <%= cache_if condition, project do %>
  742            <b>All the topics on this project</b>
  743            <%= render project.topics %>
  ...
  746          # and
  747  
  748:         <%= cache_unless condition, project do %>
  749            <b>All the topics on this project</b>
  750            <%= render project.topics %>
  ...
  779      *Rafael Mendonça França*
  780  
  781: *   Add option flag to `CacheHelper#cache` to manually bypass automatic template digests:
  782  
  783:         <% cache project, skip_digest: true do %>
  784            ...
  785          <% end %>
  ...
  897      *Yves Senn*
  898  
  899: *   The `Rack::Cache` middleware is now disabled by default. To enable it,
  900:     set `config.action_dispatch.rack_cache = true` and add `gem rack-cache` to your Gemfile.
  901  
  902      *Guillermo Iguaran*
  903  
  904: *   `ActionController::Base.page_cache_extension` option is deprecated
  905      in favour of `ActionController::Base.default_static_extension`.
  906  
  ...
  999      *Guillermo Iguaran*
 1000  
 1001: *   `ActionDispatch::Session::MemCacheStore` now uses `dalli` instead of the deprecated
 1002:     `memcache-client` gem.
 1003  
 1004      *Arun Agrawal + Guillermo Iguaran*
 ....
 1043          end
 1044  
 1045: *   Add automatic template digests to all `CacheHelper#cache` calls (originally spiked in the `cache_digests` plugin) *DHH*
 1046  
 1047  *   When building a URL fails, add missing keys provided by Journey. Failed URL
 ....
 1385  
 1386  *   `expires_in` accepts a `must_revalidate` flag. If true, "must-revalidate"
 1387:     is added to the Cache-Control header. *fxn*
 1388  
 1389  *   Add `date_field` and `date_field_tag` helpers which render an `input[type="date"]` tag *Olek Janiszewski*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/abstract_controller/base.rb:
   91        end
   92  
   93:       # action_methods are cached and there is sometimes need to refresh
   94        # them. clear_action_methods! allows you to do that, so next time
   95        # you run action_methods, they will be recalculated
   ..
  108        end
  109  
  110:       # Refresh the cached action_methods when a new action_method is added.
  111        def method_added(name)
  112          super

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/abstract_controller/rendering.rb:
   12  
   13    # This is a class to fix I18n global state. Whenever you provide I18n.locale during a request,
   14:   # it will trigger the lookup_context and consequently expire the cache.
   15    class I18nProxy < ::I18n::Config #:nodoc:
   16      attr_reader :original_config, :lookup_context

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/base.rb:
   67    # Sessions allow you to store objects in between requests. This is useful for objects that are not yet ready to be persisted,
   68    # such as a Signup object constructed in a multi-paged process, or objects that don't change much and are needed all the time, such
   69:   # as a User object for a system that requires login. The session should not be used, however, as a cache for objects where it's likely
   70    # they could be changed unknowingly. It's usually too much work to keep it all synchronized -- something databases already excel at.
   71    #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/caching.rb:
   14    # == \Caching stores
   15    #
   16:   # All the caching stores from ActiveSupport::Cache are available to be used as backends
   17    # for Action Controller caching.
   18    #
   19    # Configuration examples (MemoryStore is the default):
   20    #
   21:   #   config.action_controller.cache_store = :memory_store
   22:   #   config.action_controller.cache_store = :file_store, '/path/to/cache/directory'
   23:   #   config.action_controller.cache_store = :mem_cache_store, 'localhost'
   24:   #   config.action_controller.cache_store = :mem_cache_store, Memcached::Rails.new('localhost:11211')
   25:   #   config.action_controller.cache_store = MyOwnStore.new('parameter')
   26    module Caching
   27      extend ActiveSupport::Concern
   ..
   33  
   34      module ConfigMethods
   35:       def cache_store
   36:         config.cache_store
   37        end
   38  
   39:       def cache_store=(store)
   40:         config.cache_store = ActiveSupport::Cache.lookup_store(store)
   41        end
   42  
   43        private
   44:         def cache_configured?
   45:           perform_caching && cache_store
   46          end
   47      end
   ..
   59        self.default_static_extension ||= '.html'
   60  
   61:       def self.page_cache_extension=(extension)
   62:         ActiveSupport::Deprecation.deprecation_warning(:page_cache_extension, :default_static_extension)
   63          self.default_static_extension = extension
   64        end
   65  
   66:       def self.page_cache_extension
   67:         ActiveSupport::Deprecation.deprecation_warning(:page_cache_extension, :default_static_extension)
   68          default_static_extension
   69        end
   ..
   72        self.perform_caching = true if perform_caching.nil?
   73  
   74:       class_attribute :_view_cache_dependencies
   75:       self._view_cache_dependencies = []
   76:       helper_method :view_cache_dependencies if respond_to?(:helper_method)
   77      end
   78  
   79      module ClassMethods
   80:       def view_cache_dependency(&dependency)
   81:         self._view_cache_dependencies += [dependency]
   82        end
   83      end
   84  
   85:     def view_cache_dependencies
   86:       self.class._view_cache_dependencies.map { |dep| instance_exec(&dep) }.compact
   87      end
   88  
   89      protected
   90        # Convenience accessor.
   91:       def cache(key, options = {}, &block)
   92:         if cache_configured?
   93:           cache_store.fetch(ActiveSupport::Cache.expand_cache_key(key, :controller), options, &block)
   94          else
   95            yield

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/caching/fragments.rb:
    6      # depend on complicated state while other parts rarely change or
    7      # can be shared amongst multiple parties. The caching is done using
    8:     # the +cache+ helper available in the Action View. See
    9:     # ActionView::Helpers::CacheHelper for more information.
   10      #
   11:     # While it's strongly recommended that you use key-based cache
   12:     # expiration (see links in CacheHelper for more information),
   13:     # it is also possible to manually expire caches. For example:
   14      #
   15:     #   expire_fragment('name_of_cache')
   16      module Fragments
   17        # Given a key (as described in +expire_fragment+), returns
   18        # a key suitable for use in reading, writing, or expiring a
   19:       # cached fragment. All keys are prefixed with <tt>views/</tt> and uses
   20:       # ActiveSupport::Cache.expand_cache_key for the expansion.
   21:       def fragment_cache_key(key)
   22:         ActiveSupport::Cache.expand_cache_key(key.is_a?(Hash) ? url_for(key).split("://").last : key, :views)
   23        end
   24  
   ..
   26        # +key+ (see +expire_fragment+ for acceptable formats).
   27        def write_fragment(key, content, options = nil)
   28:         return content unless cache_configured?
   29  
   30:         key = fragment_cache_key(key)
   31:         instrument_fragment_cache :write_fragment, key do
   32            content = content.to_str
   33:           cache_store.write(key, content, options)
   34          end
   35          content
   36        end
   37  
   38:       # Reads a cached fragment from the location signified by +key+
   39        # (see +expire_fragment+ for acceptable formats).
   40        def read_fragment(key, options = nil)
   41:         return unless cache_configured?
   42  
   43:         key = fragment_cache_key(key)
   44:         instrument_fragment_cache :read_fragment, key do
   45:           result = cache_store.read(key, options)
   46            result.respond_to?(:html_safe) ? result.html_safe : result
   47          end
   48        end
   49  
   50:       # Check if a cached fragment from the location signified by
   51        # +key+ exists (see +expire_fragment+ for acceptable formats).
   52        def fragment_exist?(key, options = nil)
   53:         return unless cache_configured?
   54:         key = fragment_cache_key(key)
   55  
   56:         instrument_fragment_cache :exist_fragment?, key do
   57:           cache_store.exist?(key, options)
   58          end
   59        end
   60  
   61:       # Removes fragments from the cache.
   62        #
   63        # +key+ can take one of three forms:
   ..
   71        #   don't use anchors in the regex (<tt>^</tt> or <tt>$</tt>) because
   72        #   the actual filename matched looks like
   73:       #   <tt>./cache/filename/path.cache</tt>. Note: Regexp expiration is
   74:       #   only supported on caches that can iterate over all keys (unlike
   75:       #   memcached).
   76        #
   77:       # +options+ is passed through to the cache store's +delete+
   78        # method (or <tt>delete_matched</tt>, for Regexp keys).
   79        def expire_fragment(key, options = nil)
   80:         return unless cache_configured?
   81:         key = fragment_cache_key(key) unless key.is_a?(Regexp)
   82  
   83:         instrument_fragment_cache :expire_fragment, key do
   84            if key.is_a?(Regexp)
   85:             cache_store.delete_matched(key, options)
   86            else
   87:             cache_store.delete(key, options)
   88            end
   89          end
   90        end
   91  
   92:       def instrument_fragment_cache(name, key) # :nodoc:
   93          ActiveSupport::Notifications.instrument("#{name}.action_controller", :key => key){ yield }
   94        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/metal/conditional_get.rb:
   17        # For example, if you serve pages tailored depending on who's logged in at the moment, you
   18        # may want to add the current user id to be part of the etag to prevent authorized displaying
   19:       # of cached pages.
   20        #
   21        #   class InvoicesController < ApplicationController
   ..
   40      # * <tt>:etag</tt>.
   41      # * <tt>:last_modified</tt>.
   42:     # * <tt>:public</tt> By default the Cache-Control header is private, set this to
   43:     #   +true+ if you want your application to be cachable by other devices (proxy caches).
   44      #
   45      # === Example:
   ..
   78        response.etag          = combine_etags(options[:etag]) if options[:etag]
   79        response.last_modified = options[:last_modified]       if options[:last_modified]
   80:       response.cache_control[:public] = true                 if options[:public]
   81  
   82        head :not_modified if request.fresh?(response)
   ..
   92      # * <tt>:etag</tt>.
   93      # * <tt>:last_modified</tt>.
   94:     # * <tt>:public</tt> By default the Cache-Control header is private, set this to
   95:     #   +true+ if you want your application to be cachable by other devices (proxy caches).
   96      #
   97      # === Example:
   ..
  139      end
  140  
  141:     # Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a +private+
  142:     # instruction, so that intermediate caches must not cache the response.
  143      #
  144      #   expires_in 20.minutes
  ...
  146      #   expires_in 3.hours, public: true, must_revalidate: true
  147      #
  148:     # This method will overwrite an existing Cache-Control header.
  149      # See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html for more possibilities.
  150      #
  151      # The method will also ensure a HTTP Date header for client compatibility.
  152      def expires_in(seconds, options = {})
  153:       response.cache_control.merge!(
  154          :max_age         => seconds,
  155          :public          => options.delete(:public),
  ...
  158        options.delete(:private)
  159  
  160:       response.cache_control[:extras] = options.map {|k,v| "#{k}=#{v}"}
  161        response.date = Time.now unless response.date?
  162      end
  163  
  164:     # Sets a HTTP 1.1 Cache-Control header of <tt>no-cache</tt> so no caching should
  165:     # occur by the browser or intermediate caches (like caching proxy servers).
  166      def expires_now
  167:       response.cache_control.replace(:no_cache => true)
  168      end
  169  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/metal/data_streaming.rb:
   58        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11.
   59        #
   60:       # Also be aware that the document may be cached by proxies and browsers.
   61:       # The Pragma and Cache-Control headers declare how the file may be cached
   62        # by intermediaries. They default to require clients to validate with
   63:       # the server before releasing cached responses. See
   64:       # http://www.mnot.net/cache_docs/ for an overview of web caching and
   65        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9
   66:       # for the Cache-Control header spec.
   67        def send_file(path, options = {}) #:doc:
   68          raise MissingFile, "Cannot read file #{path}" unless File.file?(path) and File.readable?(path)
   ..
  161  
  162          # Fix a problem with IE 6.0 on opening downloaded files:
  163:         # If Cache-Control: no-cache is set (which Rails does by default),
  164:         # IE removes the file it just downloaded from its cache immediately
  165          # after it displays the "open/save" dialog, which means that if you
  166          # hit "open" the file isn't there anymore when the application that
  167          # is called for handling the download is run, so let's workaround that
  168:         response.cache_control[:public] ||= false
  169        end
  170    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/metal/live.rb:
   41        def write(string)
   42          unless @response.committed?
   43:           @response.headers["Cache-Control"] = "no-cache"
   44            @response.headers.delete "Content-Length"
   45          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/metal/streaming.rb:
  145    # needs to inject contents in the HTML body.
  146    #
  147:   # Also <tt>Rack::Cache</tt> won't work with streaming as it does not support
  148:   # streaming bodies yet. Whenever streaming Cache-Control is automatically
  149:   # set to "no-cache".
  150    #
  151    # == Errors
  ...
  198      protected
  199  
  200:     # Set proper cache control and transfer encoding when streaming
  201      def _process_options(options) #:nodoc:
  202        super
  ...
  205            options.delete(:stream)
  206          else
  207:           headers["Cache-Control"] ||= "no-cache"
  208            headers["Transfer-Encoding"] = "chunked"
  209            headers.delete("Content-Length")

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_controller/railtie.rb:
   34  
   35        options.logger      ||= Rails.logger
   36:       options.cache_store ||= Rails.cache
   37  
   38        options.javascripts_dir ||= paths["public/javascripts"].first

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch.rb:
   70      extend ActiveSupport::Autoload
   71  
   72:     autoload :Cache
   73      autoload :Headers
   74      autoload :MimeNegotiation
   ..
   85      autoload :AbstractStore, 'action_dispatch/middleware/session/abstract_store'
   86      autoload :CookieStore,   'action_dispatch/middleware/session/cookie_store'
   87:     autoload :MemCacheStore, 'action_dispatch/middleware/session/mem_cache_store'
   88:     autoload :CacheStore,    'action_dispatch/middleware/session/cache_store'
   89    end
   90  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/http/cache.rb:
    2  module ActionDispatch
    3    module Http
    4:     module Cache
    5        module Request
    6  
    .
   52  
   53        module Response
   54:         attr_reader :cache_control, :etag
   55          alias :etag? :etag
   56  
   ..
   84  
   85          def etag=(etag)
   86:           key = ActiveSupport::Cache.expand_cache_key(etag)
   87            @etag = self[ETAG] = %("#{Digest::MD5.hexdigest(key)}")
   88          end
   ..
   92          LAST_MODIFIED = "Last-Modified".freeze
   93          ETAG          = "ETag".freeze
   94:         CACHE_CONTROL = "Cache-Control".freeze
   95:         SPECIAL_KEYS  = %w[extras no-cache max-age public must-revalidate]
   96  
   97:         def cache_control_segments
   98:           if cache_control = self[CACHE_CONTROL]
   99:             cache_control.delete(' ').split(',')
  100            else
  101              []
  ...
  103          end
  104  
  105:         def cache_control_headers
  106:           cache_control = {}
  107  
  108:           cache_control_segments.each do |segment|
  109              directive, argument = segment.split('=', 2)
  110  
  111              if SPECIAL_KEYS.include? directive
  112                key = directive.tr('-', '_')
  113:               cache_control[key.to_sym] = argument || true
  114              else
  115:               cache_control[:extras] ||= []
  116:               cache_control[:extras] << segment
  117              end
  118            end
  119  
  120:           cache_control
  121          end
  122  
  123:         def prepare_cache_control!
  124:           @cache_control = cache_control_headers
  125            @etag = self[ETAG]
  126          end
  127  
  128          def handle_conditional_get!
  129:           if etag? || last_modified? || !@cache_control.empty?
  130:             set_conditional_cache_control!
  131            end
  132          end
  133  
  134:         DEFAULT_CACHE_CONTROL = "max-age=0, private, must-revalidate".freeze
  135:         NO_CACHE              = "no-cache".freeze
  136          PUBLIC                = "public".freeze
  137          PRIVATE               = "private".freeze
  138          MUST_REVALIDATE       = "must-revalidate".freeze
  139  
  140:         def set_conditional_cache_control!
  141            control = {}
  142:           cc_headers = cache_control_headers
  143            if extras = cc_headers.delete(:extras)
  144:             @cache_control[:extras] ||= []
  145:             @cache_control[:extras] += extras
  146:             @cache_control[:extras].uniq!
  147            end
  148  
  149            control.merge! cc_headers
  150:           control.merge! @cache_control
  151  
  152            if control.empty?
  153:             headers[CACHE_CONTROL] = DEFAULT_CACHE_CONTROL
  154:           elsif control[:no_cache]
  155:             headers[CACHE_CONTROL] = NO_CACHE
  156              if control[:extras]
  157:               headers[CACHE_CONTROL] += ", #{control[:extras].join(', ')}"
  158              end
  159            else
  ...
  167              options.concat(extras) if extras
  168  
  169:             headers[CACHE_CONTROL] = options.join(", ")
  170            end
  171          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/http/rack_cache.rb:
    1: require "rack/cache"
    2: require "rack/cache/context"
    3: require "active_support/cache"
    4  
    5  module ActionDispatch
    6:   class RailsMetaStore < Rack::Cache::MetaStore
    7      def self.resolve(uri)
    8        new
    9      end
   10  
   11:     def initialize(store = Rails.cache)
   12        @store = store
   13      end
   ..
   25      end
   26  
   27:     ::Rack::Cache::MetaStore::RAILS = self
   28    end
   29  
   30:   class RailsEntityStore < Rack::Cache::EntityStore
   31      def self.resolve(uri)
   32        new
   33      end
   34  
   35:     def initialize(store = Rails.cache)
   36        @store = store
   37      end
   ..
   57      end
   58  
   59:     ::Rack::Cache::EntityStore::RAILS = self
   60    end
   61  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/http/request.rb:
    5  require 'action_controller/metal/exceptions'
    6  require 'rack/request'
    7: require 'action_dispatch/http/cache'
    8  require 'action_dispatch/http/mime_negotiation'
    9  require 'action_dispatch/http/parameters'
   ..
   15  module ActionDispatch
   16    class Request < Rack::Request
   17:     include ActionDispatch::Http::Cache::Request
   18      include ActionDispatch::Http::MimeNegotiation
   19      include ActionDispatch::Http::Parameters
   ..
   32  
   33          HTTP_ACCEPT HTTP_ACCEPT_CHARSET HTTP_ACCEPT_ENCODING
   34:         HTTP_ACCEPT_LANGUAGE HTTP_CACHE_CONTROL HTTP_FROM
   35          HTTP_NEGOTIATE HTTP_PRAGMA ].freeze
   36  
   ..
   78      HTTP_METHOD_LOOKUP = {}
   79  
   80:     # Populate the HTTP method lookup cache
   81      HTTP_METHODS.each { |method|
   82        HTTP_METHOD_LOOKUP[method] = method.underscore.to_sym

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/http/response.rb:
   63      include Rack::Response::Helpers
   64      include ActionDispatch::Http::FilterRedirect
   65:     include ActionDispatch::Http::Cache::Response
   66      include MonitorMixin
   67  
   ..
  116        end
  117  
  118:       prepare_cache_control!
  119  
  120        yield self if block_given?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/journey/formatter.rb:
   10        def initialize(routes)
   11          @routes = routes
   12:         @cache  = nil
   13        end
   14  
   ..
   41  
   42        def clear
   43:         @cache = nil
   44        end
   45  
   ..
   75              yield named_routes[name]
   76            else
   77:             routes = non_recursive(cache, options.to_a)
   78  
   79              hash = routes.group_by { |_, r| r.score(options) }
   ..
   89          end
   90  
   91:         def non_recursive(cache, options)
   92            routes = []
   93:           stack  = [cache]
   94  
   95            while stack.any?
   ..
  119          end
  120  
  121:         def possibles(cache, options, depth = 0)
  122:           cache.fetch(:___routes) { [] } + options.find_all { |pair|
  123:             cache.key?(pair)
  124            }.map { |pair|
  125:             possibles(cache[pair], options, depth + 1)
  126            }.flatten(1)
  127          end
  ...
  132          end
  133  
  134:         def build_cache
  135            root = { ___routes: [] }
  136            routes.each_with_index do |route, i|
  ...
  143          end
  144  
  145:         def cache
  146:           @cache ||= build_cache
  147          end
  148      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/journey/routes.rb:
   61          routes << route
   62          named_routes[name] = route if name && !named_routes[name]
   63:         clear_cache!
   64          route
   65        end
   ..
   67        private
   68  
   69:         def clear_cache!
   70            @ast                = nil
   71            @partitioned_routes = nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/journey/visitors.rb:
    7      module Visitors # :nodoc:
    8        class Visitor # :nodoc:
    9:         DISPATCH_CACHE = ThreadSafe::Cache.new { |h,k|
   10            h[k] = :"visit_#{k}"
   11          }
   ..
   18  
   19            def visit node
   20:             send(DISPATCH_CACHE[node.type], node)
   21            end
   22  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/middleware/reloader.rb:
   19    #
   20    # By default, ActionDispatch::Reloader is included in the middleware stack
   21:   # only in the development environment; specifically, when +config.cache_classes+
   22    # is false. Callbacks may be registered even when it is not included in the
   23    # middleware stack, but are executed only when <tt>ActionDispatch::Reloader.prepare!</tt>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/middleware/session/cache_store.rb:
    3  module ActionDispatch
    4    module Session
    5:     # Session store that uses an ActiveSupport::Cache::Store to store the sessions. This store is most useful
    6      # if you don't store critical data in your sessions and you don't need them to live for extended periods
    7      # of time.
    8:     class CacheStore < AbstractStore
    9:       # Create a new store. The cache to use can be passed in the <tt>:cache</tt> option. If it is
   10:       # not specified, <tt>Rails.cache</tt> will be used.
   11        def initialize(app, options = {})
   12:         @cache = options[:cache] || Rails.cache
   13:         options[:expire_after] ||= @cache.options[:expires_in]
   14          super
   15        end
   16  
   17:       # Get a session from the cache.
   18        def get_session(env, sid)
   19          sid ||= generate_sid
   20:         session = @cache.read(cache_key(sid))
   21          session ||= {}
   22          [sid, session]
   23        end
   24  
   25:       # Set a session in the cache.
   26        def set_session(env, sid, session, options)
   27:         key = cache_key(sid)
   28          if session
   29:           @cache.write(key, session, :expires_in => options[:expire_after])
   30          else
   31:           @cache.delete(key)
   32          end
   33          sid
   34        end
   35  
   36:       # Remove a session from the cache.
   37        def destroy_session(env, sid, options)
   38:         @cache.delete(cache_key(sid))
   39          generate_sid
   40        end
   41  
   42        private
   43:         # Turn the session id into a cache key.
   44:         def cache_key(sid)
   45            "_session_id:#{sid}"
   46          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/middleware/session/mem_cache_store.rb:
    9  module ActionDispatch
   10    module Session
   11:     class MemCacheStore < Rack::Session::Dalli
   12        include Compatibility
   13        include StaleSessionCheck

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/middleware/stack.rb:
    5    class MiddlewareStack
    6      class Middleware
    7:       attr_reader :args, :block, :name, :classcache
    8  
    9        def initialize(klass_or_name, *args, &block)
   ..
   17          end
   18  
   19:         @classcache = ActiveSupport::Dependencies::Reference
   20          @args, @block = args, block
   21        end
   22  
   23        def klass
   24:         @klass || classcache[@name]
   25        end
   26  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/middleware/static.rb:
    4  module ActionDispatch
    5    class FileHandler
    6:     def initialize(root, cache_control)
    7        @root          = root.chomp('/')
    8        @compiled_root = /^#{Regexp.escape(root)}/
    9:       headers = cache_control && { 'Cache-Control' => cache_control }
   10        @file_server   = ::Rack::File.new(@root, headers)
   11      end
   ..
   47  
   48    class Static
   49:     def initialize(app, path, cache_control=nil)
   50        @app = app
   51:       @file_handler = FileHandler.new(path, cache_control)
   52      end
   53  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/railtie.rb:
   12      config.action_dispatch.rescue_responses = { }
   13      config.action_dispatch.default_charset = nil
   14:     config.action_dispatch.rack_cache = false
   15      config.action_dispatch.http_auth_salt = 'http authentication'
   16      config.action_dispatch.signed_cookie_salt = 'signed cookie'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/routing/route_set.rb:
   23            @defaults = options[:defaults]
   24            @glob_param = options.delete(:glob)
   25:           @controller_class_names = ThreadSafe::Cache.new
   26          end
   27  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_dispatch/testing/assertions/routing.rb:
  148            # and AV::Base which requires having the URL helpers in both AC and AV.
  149            # To do this safely at runtime for tests, we need to bump up the helper serial
  150:           # to that the old AV subclass isn't cached.
  151            #
  152            # TODO: Make this unnecessary

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/base.rb:
  156        delegate :erb_trim_mode=, :to => 'ActionView::Template::Handlers::ERB'
  157  
  158:       def cache_template_loading
  159          ActionView::Resolver.caching?
  160        end
  161  
  162:       def cache_template_loading=(value)
  163          ActionView::Resolver.caching = value
  164        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/dependency_tracker.rb:
    3  module ActionView
    4    class DependencyTracker
    5:     @trackers = ThreadSafe::Cache.new
    6  
    7      def self.find_dependencies(name, template)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/digestor.rb:
    5  module ActionView
    6    class Digestor
    7:     cattr_reader(:cache)
    8:     @@cache          = ThreadSafe::Cache.new
    9      @@digest_monitor = Monitor.new
   10  
   11      class << self
   12        def digest(name, format, finder, options = {})
   13:         cache_key = ([name, format] + Array.wrap(options[:dependencies])).join('.')
   14          # this is a correctly done double-checked locking idiom
   15:         # (ThreadSafe::Cache's lookups have volatile semantics)
   16:         @@cache[cache_key] || @@digest_monitor.synchronize do
   17:           @@cache.fetch(cache_key) do # re-check under lock
   18:             compute_and_store_digest(cache_key, name, format, finder, options)
   19            end
   20          end
   ..
   22  
   23        private
   24:       def compute_and_store_digest(cache_key, name, format, finder, options) # called under @@digest_monitor lock
   25          klass = if options[:partial] || name.include?("/_")
   26            # Prevent re-entry or else recursive templates will blow the stack.
   27            # There is no need to worry about other threads seeing the +false+ value,
   28            # as they will then have to wait for this thread to let go of the @@digest_monitor lock.
   29:           pre_stored = @@cache.put_if_absent(cache_key, false).nil? # put_if_absent returns nil on insertion
   30            PartialDigestor
   31          else
   ..
   34  
   35          digest = klass.new(name, format, finder, options).digest
   36:         # Store the actual digest if config.cache_template_loading is true
   37:         @@cache[cache_key] = stored_digest = digest if ActionView::Resolver.caching?
   38          digest
   39        ensure
   40:         # something went wrong or ActionView::Resolver.caching? is false, make sure not to corrupt the @@cache
   41:         @@cache.delete_pair(cache_key, false) if pre_stored && !stored_digest 
   42        end
   43      end
   ..
   51      def digest
   52        Digest::MD5.hexdigest("#{source}-#{dependency_digest}").tap do |digest|
   53:         logger.try :info, "Cache digest for #{name}.#{format}: #{digest}"
   54        end
   55      rescue ActionView::MissingTemplate

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/helpers.rb:
    9      autoload :AssetUrlHelper
   10      autoload :AtomFeedHelper
   11:     autoload :CacheHelper
   12      autoload :CaptureHelper
   13      autoload :ControllerHelper
   ..
   36      include AssetUrlHelper
   37      include AtomFeedHelper
   38:     include CacheHelper
   39      include CaptureHelper
   40      include ControllerHelper

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/helpers/cache_helper.rb:
    1  module ActionView
    2:   # = Action View Cache Helper
    3    module Helpers
    4:     module CacheHelper
    5        # This helper exposes a method for caching fragments of a view
    6        # rather than an entire action or page. This technique is useful
    7        # caching pieces like menus, lists of newstopics, static HTML
    8        # fragments, and so on. This method takes a block that contains
    9:       # the content you wish to cache.
   10        #
   11:       # The best way to use this is by doing key-based cache expiration
   12:       # on top of a cache store like Memcached that'll automatically
   13        # kick out old entries. For more on key-based expiration, see:
   14:       # http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works
   15        #
   16:       # When using this method, you list the cache dependency as the name of the cache, like so:
   17        #
   18:       #   <% cache project do %>
   19        #     <b>All the topics on this project</b>
   20        #     <%= render project.topics %>
   ..
   22        #
   23        # This approach will assume that when a new topic is added, you'll touch
   24:       # the project. The cache key generated from this call will be something like:
   25        #
   26        #   views/projects/123-20120806214154/7a1156131a6928cb0026877f8b749ac9
   27        #         ^class   ^id ^updated_at    ^template tree digest
   28        #
   29:       # The cache is thus automatically bumped whenever the project updated_at is touched.
   30        #
   31:       # If your template cache depends on multiple sources (try to avoid this to keep things simple),
   32        # you can name all these dependencies as part of an array:
   33        #
   34:       #   <% cache [ project, current_user ] do %>
   35        #     <b>All the topics on this project</b>
   36        #     <%= render project.topics %>
   37        #   <% end %>
   38        #
   39:       # This will include both records as part of the cache key and updating either of them will
   40:       # expire the cache.
   41        #
   42        # ==== Template digest
   43        #
   44:       # The template digest that's added to the cache key is computed by taking an md5 of the
   45:       # contents of the entire template file. This ensures that your caches will automatically
   46        # expire when you change the template file.
   47        #
   48        # Note that the md5 is taken of the entire template file, not just what's within the
   49:       # cache do/end call. So it's possible that changing something outside of that call will
   50:       # still expire the cache.
   51        #
   52        # Additionally, the digestor will automatically look through your template file for
   53        # explicit and implicit dependencies, and include those as part of the digest.
   54        #
   55:       # The digestor can be bypassed by passing skip_digest: true as an option to the cache call:
   56        #
   57:       #   <% cache project, skip_digest: true do %>
   58        #     <b>All the topics on this project</b>
   59        #     <%= render project.topics %>
   ..
   63        #
   64        # Most template dependencies can be derived from calls to render in the template itself.
   65:       # Here are some examples of render calls that Cache Digests knows how to decode:
   66        #
   67        #   render partial: "comments/comment", collection: commentable.comments
   ..
  103        # === External dependencies
  104        #
  105:       # If you use a helper method, for example, inside of a cached block and you then update that helper,
  106:       # you'll have to bump the cache as well. It doesn't really matter how you do it, but the md5 of the template file
  107        # must change. One recommendation is to simply be explicit in a comment, like:
  108        #
  ...
  111        #
  112        # Now all you'll have to do is change that timestamp when the helper method changes.
  113:       def cache(name = {}, options = nil, &block)
  114          if controller.perform_caching
  115:           safe_concat(fragment_for(cache_fragment_name(name, options), options, &block))
  116          else
  117            yield
  ...
  121        end
  122  
  123:       # Cache fragments of a view if +condition+ is true
  124        #
  125:       #   <%= cache_if admin?, project do %>
  126        #     <b>All the topics on this project</b>
  127        #     <%= render project.topics %>
  128        #   <% end %>
  129:       def cache_if(condition, name = {}, options = nil, &block)
  130          if condition
  131:           cache(name, options, &block)
  132          else
  133            yield
  ...
  137        end
  138  
  139:       # Cache fragments of a view unless +condition+ is true
  140        #
  141:       #   <%= cache_unless admin?, project do %>
  142        #     <b>All the topics on this project</b>
  143        #     <%= render project.topics %>
  144        #   <% end %>
  145:       def cache_unless(condition, name = {}, options = nil, &block)
  146:         cache_if !condition, name, options, &block
  147        end
  148  
  149:       # This helper returns the name of a cache key for a given fragment cache
  150:       # call. By supplying skip_digest: true to cache, the digestion of cache
  151:       # fragments can be manually bypassed. This is useful when cache fragments
  152        # cannot be manually expired unless you know the exact key which is the
  153:       # case when using memcached.
  154:       def cache_fragment_name(name = {}, options = nil)
  155          skip_digest = options && options[:skip_digest]
  156  
  ...
  168            [
  169              *Array(name.is_a?(Hash) ? controller.url_for(name).split("://").last : name),
  170:             Digestor.digest(@virtual_path, formats.last.to_sym, lookup_context, dependencies: view_cache_dependencies)
  171            ]
  172          else

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/helpers/capture_helper.rb:
  145        #   <% content_for :script, javascript_include_tag(:defaults) %>
  146        #
  147:       # WARNING: content_for is ignored in caches. So you shouldn't use it for elements that will be fragment cached.
  148        def content_for(name, content = nil, options = {}, &block)
  149          if content || block_given?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/helpers/debug_helper.rb:
   23        #   &nbsp; password: xyz
   24        #   &nbsp; created_at:
   25:       #   attributes_cache: {}
   26        #
   27        #   new_record: true

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/lookup_context.rb:
    8    # LookupContext is the object responsible to hold all information required to lookup
    9    # templates, i.e. view paths and details. The LookupContext is also responsible to
   10:   # generate a key, given to view paths, used in the resolver cache lookup. Since
   11:   # this key is generated just once during the request, it speeds up all cache accesses.
   12    class LookupContext #:nodoc:
   13      attr_accessor :prefixes, :rendered_format
   ..
   60  
   61        attr_reader :hash
   62:       @details_keys = ThreadSafe::Cache.new
   63  
   64        def self.get(details)
   ..
   83  
   84      # Add caching behavior on top of Details.
   85:     module DetailsCache
   86:       attr_accessor :cache
   87  
   88        # Calculate the details key. Remove the handlers from calculation to improve performance
   89        # since the user cannot modify it explicitly.
   90        def details_key #:nodoc:
   91:         @details_key ||= DetailsKey.get(@details) if @cache
   92        end
   93  
   94        # Temporary skip passing the details_key forward.
   95:       def disable_cache
   96:         old_value, @cache = @cache, false
   97          yield
   98        ensure
   99:         @cache = old_value
  100        end
  101  
  ...
  180  
  181      include Accessors
  182:     include DetailsCache
  183      include ViewPaths
  184  
  ...
  186        @details, @details_key = {}, nil
  187        @skip_default_locale = false
  188:       @cache = true
  189        @prefixes = prefixes
  190        @rendered_format = nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/railtie.rb:
   31      initializer "action_view.caching" do |app|
   32        ActiveSupport.on_load(:action_view) do
   33:         if app.config.action_view.cache_template_loading.nil?
   34:           ActionView::Resolver.caching = app.config.cache_classes
   35          end
   36        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/renderer/partial_renderer.rb:
  250    #   <% end %>
  251    class PartialRenderer < AbstractRenderer
  252:     PREFIXED_PARTIAL_NAMES = ThreadSafe::Cache.new do |h, k|
  253:       h[k] = ThreadSafe::Cache.new
  254      end
  255  
  ...
  405      def collection_without_template
  406        view, locals, collection_data = @view, @locals, @collection_data
  407:       cache = {}
  408        keys  = @locals.keys
  409  
  ...
  416          locals[counter] = index
  417  
  418:         template = (cache[path] ||= find_template(path, keys + [as, counter]))
  419          template.render(view, locals)
  420        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/renderer/streaming_template_renderer.rb:
    6    # * Support streaming from child templates, partials and so on.
    7    # * Integrate exceptions with exceptron
    8:   # * Rack::Cache needs to support streaming bodies
    9    class StreamingTemplateRenderer < TemplateRenderer #:nodoc:
   10      # A valid Rack::Body (i.e. it responds to each).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/tasks/dependencies.rake:
    1: namespace :cache_digests do
    2    desc 'Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)'
    3    task :nested_dependencies => :environment do

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/template.rb:
  171        name    = pieces.pop
  172        partial = !!name.sub!(/^_/, "")
  173:       lookup.disable_cache do
  174          lookup.find_template(name, [ pieces.join('/') ], partial, @locals)
  175        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/actionpack-4.0.3/lib/action_view/template/resolver.rb:
   34      end
   35  
   36:     # Threadsafe template cache
   37:     class Cache #:nodoc:
   38:       class SmallCache < ThreadSafe::Cache
   39          def initialize(options = {})
   40            super(options.merge(:initial_capacity => 2))
   ..
   43  
   44        # preallocate all the default blocks for performance/memory consumption reasons
   45:       PARTIAL_BLOCK = lambda {|cache, partial| cache[partial] = SmallCache.new}
   46:       PREFIX_BLOCK  = lambda {|cache, prefix|  cache[prefix]  = SmallCache.new(&PARTIAL_BLOCK)}
   47:       NAME_BLOCK    = lambda {|cache, name|    cache[name]    = SmallCache.new(&PREFIX_BLOCK)}
   48:       KEY_BLOCK     = lambda {|cache, key|     cache[key]     = SmallCache.new(&NAME_BLOCK)}
   49  
   50        # usually a majority of template look ups return nothing, use this canonical preallocated array to save memory
   ..
   52  
   53        def initialize
   54:         @data = SmallCache.new(&KEY_BLOCK)
   55        end
   56  
   57:       # Cache the templates returned by the block
   58:       def cache(key, name, prefix, partial, locals)
   59          if Resolver.caching?
   60            @data[key][name][prefix][partial][locals] ||= canonical_no_templates(yield)
   61          else
   62            fresh_templates  = yield
   63:           cached_templates = @data[key][name][prefix][partial][locals]
   64  
   65:           if templates_have_changed?(cached_templates, fresh_templates)
   66              @data[key][name][prefix][partial][locals] = canonical_no_templates(fresh_templates)
   67            else
   68:             cached_templates || NO_TEMPLATES
   69            end
   70          end
   ..
   81        end
   82  
   83:       def templates_have_changed?(cached_templates, fresh_templates)
   84          # if either the old or new template list is empty, we don't need to (and can't)
   85          # compare modification times, and instead just check whether the lists are different
   86:         if cached_templates.blank? || fresh_templates.blank?
   87:           return fresh_templates.blank? != cached_templates.blank?
   88          end
   89  
   90:         cached_templates_max_updated_at = cached_templates.map(&:updated_at).max
   91  
   92:         # if a template has changed, it will be now be newer than all the cached templates
   93:         fresh_templates.any? { |t| t.updated_at > cached_templates_max_updated_at }
   94        end
   95      end
   ..
  103  
  104      def initialize
  105:       @cache = Cache.new
  106      end
  107  
  108:     def clear_cache
  109:       @cache.clear
  110      end
  111  
  112      # Normalizes the arguments and passes it on to find_templates.
  113      def find_all(name, prefix=nil, partial=false, details={}, key=nil, locals=[])
  114:       cached(key, [name, prefix, partial], details, locals) do
  115          find_templates(name, prefix, partial, details)
  116        end
  ...
  134  
  135      # Handles templates caching. If a key is given and caching is on
  136:     # always check the cache before hitting the resolver. Otherwise,
  137      # it always hits the resolver but if the key is present, check if the
  138      # resolver is fresher before returning it.
  139:     def cached(key, path_info, details, locals) #:nodoc:
  140        name, prefix, partial = path_info
  141        locals = locals.map { |x| x.to_s }.sort!
  142  
  143        if key
  144:         @cache.cache(key, name, prefix, partial, locals) do
  145            decorate(yield, path_info, details, locals)
  146          end
  ...
  152      # Ensures all the resolver information is set in the template.
  153      def decorate(templates, path_info, details, locals) #:nodoc:
  154:       cached = nil
  155        templates.each do |t|
  156          t.locals         = locals
  157          t.formats        = details[:formats] || [:html] if t.formats.empty?
  158:         t.virtual_path ||= (cached ||= build_path(*path_info))
  159        end
  160      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activemodel-4.0.3/lib/active_model/attribute_methods.rb:
  291            end
  292          end
  293:         attribute_method_matchers_cache.clear
  294        end
  295  
  ...
  321            instance_methods.each { |m| undef_method(m) }
  322          end
  323:         attribute_method_matchers_cache.clear
  324        end
  325  
  ...
  342          # array doing regular expression matches, which results in a lot of
  343          # object creations. Most of the times it returns a +nil+ match. As the
  344:         # match result is always the same given a +method_name+, this cache is
  345          # used to alleviate the GC, which ultimately also speeds up the app
  346          # significantly (in our case our test suite finishes 10% faster with
  347:         # this cache).
  348:         def attribute_method_matchers_cache #:nodoc:
  349:           @attribute_method_matchers_cache ||= ThreadSafe::Cache.new(:initial_capacity => 4)
  350          end
  351  
  352          def attribute_method_matcher(method_name) #:nodoc:
  353:           attribute_method_matchers_cache.compute_if_absent(method_name) do
  354              # Must try to match prefixes/suffixes first, or else the matcher with no prefix/suffix
  355              # will match every time.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activemodel-4.0.3/lib/active_model/conversion.rb:
   80  
   81      module ClassMethods #:nodoc:
   82:       # Provide a class level cache for #to_partial_path. This is an
   83        # internal method and should not be accessed directly.
   84        def _to_partial_path #:nodoc:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activemodel-4.0.3/lib/active_model/naming.rb:
   10        :name
   11  
   12:     alias_method :cache_key, :collection
   13  
   14      ##

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/CHANGELOG.md:
  305      *Neeraj Singh*
  306  
  307: *   Confirm a record has not already been destroyed before decrementing counter cache.
  308  
  309      *Ben Tucker*
  ...
  402      *Dan Erikson & kennyj*
  403  
  404: *   Fix for a regression bug in which counter cache columns were not being updated
  405      when record was pushed into a has_many association. For example:
  406  
  ...
  432      *kennyj*
  433  
  434: *   Added Statement Cache to allow the caching of a single statement. The cache works by
  435      duping the relation returned from yielding a statement, which allows skipping the AST
  436:     building phase for following executes. The cache returns results in array format.
  437  
  438      Example:
  439  
  440:         cache = ActiveRecord::StatementCache.new do
  441            Book.where(name: "my book").limit(100)
  442          end
  443  
  444:         books = cache.execute
  445  
  446      The solution attempts to get closer to the speed of `find_by_sql` but still maintaining
  ...
  588      *Dmitry Vorotilin*
  589  
  590: *   Models with multiple counter cache associations now update correctly on destroy.
  591      See #7706.
  592  
  ...
  622      *Xavier Noria*
  623  
  624: *   Counter caches on associations will now stay valid when attributes are
  625      updated (not just when records are created or destroyed), for example,
  626      when calling `update_attributes`. The following code now works:
  627  
  628          class Comment < ActiveRecord::Base
  629:           belongs_to :post, counter_cache: true
  630          end
  631  
  ...
  794      *Neeraj Singh* and *Jon Leighton*
  795  
  796: *   Expand `#cache_key` to consult all relevant updated timestamps.
  797  
  798      Previously only `updated_at` column was checked, now it will
  ...
  967      Example:
  968  
  969:         after_commit :update_cache on: [:create, :update]
  970  
  971      *Yves Senn*
  ...
 1061  
 1062  *   Preloading `has_many :through` associations with conditions won't
 1063:     cache the `:through` association. This will prevent invalid
 1064:     subsets to be cached.
 1065      Fixes #8423.
 1066  
 ....
 1292      *Matthew M. Boedicker*
 1293  
 1294: *   Fix counter cache columns not updated when replacing `has_many :through`
 1295      associations.
 1296  
 ....
 1302      *Yves Senn*
 1303  
 1304: *   Add `ActiveRecord::Base.cache_timestamp_format` class attribute to control
 1305:     the format of the timestamp value in the cache key. Defaults to `:nsec`.
 1306      Fixes #8195.
 1307  
 ....
 1446      *Bogdan Gusiev*
 1447  
 1448: *   `:counter_cache` option for `has_many` associations to support custom named counter caches.
 1449      Fixes #7993.
 1450  
 ....
 1470      *Nikita Afanasenko*
 1471  
 1472: *   Use query cache/uncache when using `DATABASE_URL`.
 1473      Fixes #6951.
 1474  
 ....
 1826  
 1827  *   Fix `reset_counters` when there are multiple `belongs_to` association with the
 1828:     same foreign key and one of them have a counter cache.
 1829      Fixes #5200.
 1830  
 ....
 2308      *Carlos Antonio da Silva*
 2309  
 2310: *   Added the schema cache dump feature.
 2311  
 2312:     `Schema cache dump` feature was implemented. This feature can dump/load internal state of `SchemaCache` instance
 2313      because we want to boot rails more quickly when we have many models.
 2314  
 ....
 2316  
 2317        1) execute rake task.
 2318:       RAILS_ENV=production bundle exec rake db:schema:cache:dump
 2319:       => generate db/schema_cache.dump
 2320  
 2321:       2) add config.active_record.use_schema_cache_dump = true in config/production.rb. BTW, true is default.
 2322  
 2323        3) boot rails.
 2324        RAILS_ENV=production bundle exec rails server
 2325:       => use db/schema_cache.dump
 2326  
 2327:       4) If you remove clear dumped cache, execute rake task.
 2328:       RAILS_ENV=production bundle exec rake db:schema:cache:clear
 2329:       => remove db/schema_cache.dump
 2330  
 2331      *kennyj*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record.rb:
   37    autoload :Core
   38    autoload :ConnectionHandling
   39:   autoload :CounterCache
   40    autoload :DynamicMatchers
   41    autoload :Explain
   ..
   47    autoload :NestedAttributes
   48    autoload :Persistence
   49:   autoload :QueryCache
   50    autoload :Querying
   51    autoload :ReadonlyAttributes
   ..
   58    autoload :Scoping
   59    autoload :Serialization
   60:   autoload :StatementCache
   61    autoload :Store
   62    autoload :Timestamp

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/aggregations.rb:
    4      extend ActiveSupport::Concern
    5  
    6:     def clear_aggregation_cache #:nodoc:
    7:       @aggregation_cache.clear if persisted?
    8      end
    9  
   ..
   90      #   customer.address_street = "Vesterbrogade"
   91      #   customer.address        # => Address.new("Hyancintvej", "Copenhagen")
   92:     #   customer.clear_aggregation_cache
   93      #   customer.address        # => Address.new("Vesterbrogade", "Copenhagen")
   94      #
   ..
  230          def reader_method(name, class_name, mapping, allow_nil, constructor)
  231            define_method(name) do
  232:             if @aggregation_cache[name].nil? && (!allow_nil || mapping.any? {|pair| !read_attribute(pair.first).nil? })
  233                attrs = mapping.collect {|pair| read_attribute(pair.first)}
  234                object = constructor.respond_to?(:call) ?
  235                  constructor.call(*attrs) :
  236                  class_name.constantize.send(constructor, *attrs)
  237:               @aggregation_cache[name] = object
  238              end
  239:             @aggregation_cache[name]
  240            end
  241          end
  ...
  250              if part.nil? && allow_nil
  251                mapping.each { |pair| self[pair.first] = nil }
  252:               @aggregation_cache[name] = nil
  253              else
  254                mapping.each { |pair| self[pair.first] = part.send(pair.last) }
  255:               @aggregation_cache[name] = part.freeze
  256              end
  257            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations.rb:
  141      end
  142  
  143:     # Clears out the association cache.
  144:     def clear_association_cache #:nodoc:
  145:       @association_cache.clear if persisted?
  146      end
  147  
  148      # :nodoc:
  149:     attr_reader :association_cache
  150  
  151      # Returns the association instance for the given name, instantiating it if it doesn't already exist
  ...
  165        # Returns the specified association instance if it responds to :loaded?, nil otherwise.
  166        def association_instance_get(name)
  167:         @association_cache[name.to_sym]
  168        end
  169  
  170        # Set the specified association instance.
  171        def association_instance_set(name, association)
  172:         @association_cache[name] = association
  173        end
  174  
  ...
  677      #
  678      # All of the methods are built on a simple caching principle that will keep the result
  679:     # of the last query around unless specifically instructed not to. The cache is even
  680      # shared across methods to make it even cheaper to use the macro-added methods without
  681      # worrying too much about performance at the first go.
  682      #
  683      #   project.milestones             # fetches milestones from the database
  684:     #   project.milestones.size        # uses the milestone cache
  685:     #   project.milestones.empty?      # uses the milestone cache
  686      #   project.milestones(true).size  # fetches milestones from the database
  687:     #   project.milestones             # uses the milestone cache
  688      #
  689      # == Eager loading of associations
  ...
 1129        #   a +belongs_to+, and the records which get deleted are the join records, rather than
 1130        #   the associated records.
 1131:       # [:counter_cache]
 1132:       #   This option can be used to configure a custom named <tt>:counter_cache.</tt> You only need this option,
 1133:       #   when you customized the name of your <tt>:counter_cache</tt> on the <tt>belongs_to</tt> association.
 1134        # [:as]
 1135        #   Specifies a polymorphic interface (See <tt>belongs_to</tt>).
 ....
 1352        #   a <tt>has_many</tt> relationship on another class because of the potential to leave
 1353        #   orphaned records behind.
 1354:       # [:counter_cache]
 1355:       #   Caches the number of belonging objects on the associate class through the use of +increment_counter+
 1356:       #   and +decrement_counter+. The counter cache is incremented when an object of this
 1357        #   class is created and decremented when it's destroyed. This requires that a column
 1358        #   named <tt>#{table_name}_count</tt> (such as +comments_count+ for a belonging Comment class)
 1359        #   is used on the associate class (such as a Post class) - that is the migration for
 1360        #   <tt>#{table_name}_count</tt> is created on the associate class (such that Post.comments_count will
 1361:       #   return the count cached, see note below). You can also specify a custom counter
 1362:       #   cache column by providing a column name instead of a +true+/+false+ value to this
 1363:       #   option (e.g., <tt>counter_cache: :my_custom_counter</tt>.)
 1364:       #   Note: Specifying a counter cache will add it to that model's list of readonly attributes
 1365        #   using +attr_readonly+.
 1366        # [:polymorphic]
 1367        #   Specify this association is a polymorphic association by passing +true+.
 1368:       #   Note: If you've enabled the counter cache, then you may want to add the counter cache attribute
 1369        #   to the +attr_readonly+ list in the associated classes (e.g. <tt>class Post; attr_readonly :comments_count; end</tt>).
 1370        # [:validate]
 ....
 1395        #   belongs_to :attachable, polymorphic: true
 1396        #   belongs_to :project, readonly: true
 1397:       #   belongs_to :post, counter_cache: true
 1398        #   belongs_to :company, touch: true
 1399        #   belongs_to :company, touch: :employees_last_updated_at

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/association_scope.rb:
   23  
   24        def column_for(table_name, column_name)
   25:         columns = alias_tracker.connection.schema_cache.columns_hash(table_name)
   26          columns[column_name]
   27        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/belongs_to_association.rb:
   36  
   37          def update_counters(record)
   38:           counter_cache_name = reflection.counter_cache_column
   39  
   40:           if counter_cache_name && owner.persisted? && different_target?(record)
   41              if record
   42:               record.class.increment_counter(counter_cache_name, record.id)
   43              end
   44  
   45              if foreign_key_present?
   46:               klass.decrement_counter(counter_cache_name, target_id)
   47              end
   48            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/builder/belongs_to.rb:
   15      def build
   16        reflection = super
   17:       add_counter_cache_callbacks(reflection) if options[:counter_cache]
   18        add_touch_callbacks(reflection)         if options[:touch]
   19        reflection
   20      end
   21  
   22:     def add_counter_cache_callbacks(reflection)
   23:       cache_column = reflection.counter_cache_column
   24        foreign_key = reflection.foreign_key
   25  
   26        mixin.class_eval <<-CODE, __FILE__, __LINE__ + 1
   27:         def belongs_to_counter_cache_after_create_for_#{name}
   28            if record = #{name}
   29:             record.class.increment_counter(:#{cache_column}, record.id)
   30              @_after_create_counter_called = true
   31            end
   32          end
   33  
   34:         def belongs_to_counter_cache_before_destroy_for_#{name}
   35            unless destroyed_by_association && destroyed_by_association.foreign_key.to_sym == #{foreign_key.to_sym.inspect}
   36              record = #{name}
   37              if record && !self.destroyed?
   38:               record.class.decrement_counter(:#{cache_column}, record.id)
   39              end
   40            end
   41          end
   42  
   43:         def belongs_to_counter_cache_after_update_for_#{name}
   44            if (@_after_create_counter_called ||= false)
   45              @_after_create_counter_called = false
   ..
   50  
   51              if foreign_key && model.respond_to?(:increment_counter)
   52:               model.increment_counter(:#{cache_column}, foreign_key)
   53              end
   54              if foreign_key_was && model.respond_to?(:decrement_counter)
   55:               model.decrement_counter(:#{cache_column}, foreign_key_was)
   56              end
   57            end
   ..
   59        CODE
   60  
   61:       model.after_create   "belongs_to_counter_cache_after_create_for_#{name}"
   62:       model.before_destroy "belongs_to_counter_cache_before_destroy_for_#{name}"
   63:       model.after_update   "belongs_to_counter_cache_after_update_for_#{name}"
   64  
   65        klass = reflection.class_name.safe_constantize
   66:       klass.attr_readonly cache_column if klass && klass.respond_to?(:attr_readonly)
   67      end
   68  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/builder/has_many.rb:
    6  
    7      def valid_options
    8:       super + [:primary_key, :dependent, :as, :through, :source, :source_type, :inverse_of, :counter_cache]
    9      end
   10  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/builder/singular_association.rb:
    2    class SingularAssociation < Association #:nodoc:
    3      def valid_options
    4:       super + [:remote, :dependent, :counter_cache, :primary_key, :inverse_of]
    5      end
    6  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/collection_association.rb:
   30        def reader(force_reload = false)
   31          if force_reload
   32:           klass.uncached { reload }
   33          elsif stale_target?
   34            reload

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/collection_proxy.rb:
  968        #   # => [#<Pet id: 1, name: "Snoop", group: "dogs", person_id: 1>]
  969        #
  970:       #   person.pets # uses the pets cache
  971        #   # => [#<Pet id: 1, name: "Snoop", group: "dogs", person_id: 1>]
  972        #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/has_many_association.rb:
   46          # Returns the number of records in this collection.
   47          #
   48:         # If the association has a counter cache it gets that value. Otherwise
   49          # it will attempt to do a count via SQL, bounded to <tt>:limit</tt> if
   50          # there's one. Some configuration options like :group make it impossible
   ..
   58          # the loaded flag is set to true as well.
   59          def count_records
   60:           count = if has_cached_counter?
   61:             owner.send(:read_attribute, cached_counter_attribute_name)
   62            elsif options[:counter_sql] || options[:finder_sql]
   63              reflection.klass.count_by_sql(custom_counter_sql)
   ..
   74          end
   75  
   76:         def has_cached_counter?(reflection = reflection)
   77:           owner.attribute_present?(cached_counter_attribute_name(reflection))
   78          end
   79  
   80:         def cached_counter_attribute_name(reflection = reflection)
   81:           options[:counter_cache] || "#{reflection.name}_count"
   82          end
   83  
   84          def update_counter(difference, reflection = reflection)
   85:           if has_cached_counter?(reflection)
   86:             counter = cached_counter_attribute_name(reflection)
   87              owner.class.update_counters(owner.id, counter => difference)
   88              owner[counter] += difference
   ..
   95          #   * An associated record is deleted via record.destroy
   96          #   * Hence the callbacks run, and they find a belongs_to on the record with a
   97:         #     :counter_cache options which points back at our owner. So they update the
   98:         #     counter cache.
   99:         #   * In which case, we must make sure to *not* update the counter cache, or else
  100          #     it will be decremented twice.
  101          #
  102          # Hence this method.
  103:         def inverse_updates_counter_cache?(reflection = reflection)
  104:           counter_name = cached_counter_attribute_name(reflection)
  105            reflection.klass.reflect_on_all_associations(:belongs_to).any? { |inverse_reflection|
  106:             inverse_reflection.counter_cache_column == counter_name
  107            }
  108          end
  ...
  112            if method == :destroy
  113              records.each { |r| r.destroy }
  114:             update_counter(-records.length) unless inverse_updates_counter_cache?
  115            else
  116              if records == :all

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/has_many_through_association.rb:
   18        # SELECT query if you use #length.
   19        def size
   20:         if has_cached_counter?
   21:           owner.send(:read_attribute, cached_counter_attribute_name)
   22          elsif loaded?
   23            target.size
   ..
   74          end
   75  
   76:         # We temporarily cache through record that has been build, because if we build a
   77          # through record in build_record and then subsequently call insert_record, then we
   78          # want to use the exact same object.
   79          #
   80:         # However, after insert_record has been called, we clear the cache entry because
   81          # we want it to be possible to have multiple instances of the same record in an
   82          # association
   ..
  121            case method
  122            when :destroy
  123:             !inverse_updates_counter_cache?(through_reflection)
  124            when :nullify
  125              false
  ...
  150            delete_through_records(records)
  151  
  152:           if source_reflection.options[:counter_cache]
  153:             counter = source_reflection.counter_cache_column
  154              klass.decrement_counter counter, records.map(&:id)
  155            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/join_dependency.rb:
  112        end
  113  
  114:       def cache_joined_association(association)
  115          associations = []
  116          parent = association.parent
  ...
  137              join_association.join_type = join_type
  138              @join_parts << join_association
  139:             cache_joined_association(join_association)
  140            end
  141            join_association
  ...
  206          macro = join_part.reflection.macro
  207          if macro == :has_one
  208:           return record.association(join_part.reflection.name).target if record.association_cache.key?(join_part.reflection.name)
  209            association = join_part.instantiate(row) unless row[join_part.aliased_primary_key].nil?
  210            set_target_and_inverse(join_part, association, record)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/join_dependency/join_part.rb:
   18          def initialize(base_klass)
   19            @base_klass = base_klass
   20:           @cached_record = {}
   21            @column_names_with_alias = nil
   22          end
   ..
   84  
   85          def instantiate(row)
   86:           @cached_record[record_id(row)] ||= base_klass.instantiate(extract_record(row))
   87          end
   88        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/preloader/through_association.rb:
   31              through_records = Array.wrap(owner.send(through_reflection.name))
   32  
   33:             # Dont cache the association - we would only be caching a subset
   34              if (through_scope != through_reflection.klass.unscoped) ||
   35                 (reflection.options[:source_type] && through_reflection.collection?)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/associations/singular_association.rb:
    5        def reader(force_reload = false)
    6          if force_reload
    7:           klass.uncached { reload }
    8          elsif !loaded? || stale_target?
    9            reload

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/attribute_methods.rb:
   31  
   32            const_set :AttrNames, Module.new {
   33:             def self.set_name_cache(name, value)
   34                const_name = "ATTR_#{name}"
   35                unless const_defined? const_name

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/attribute_methods/primary_key.rb:
   91            else
   92              if ActiveRecord::Base != self && table_exists?
   93:               connection.schema_cache.primary_keys(table_name)
   94              else
   95                'id'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/attribute_methods/read.rb:
    4        extend ActiveSupport::Concern
    5  
    6:       ATTRIBUTE_TYPES_CACHED_BY_DEFAULT = [:datetime, :timestamp, :time, :date]
    7  
    8        included do
    9:         class_attribute :attribute_types_cached_by_default, instance_writer: false
   10:         self.attribute_types_cached_by_default = ATTRIBUTE_TYPES_CACHED_BY_DEFAULT
   11        end
   12  
   13        module ClassMethods
   14:         # +cache_attributes+ allows you to declare which converted attribute
   15:         # values should be cached. Usually caching only pays off for attributes
   16          # with expensive conversion methods, like time related columns (e.g.
   17          # +created_at+, +updated_at+).
   18:         def cache_attributes(*attribute_names)
   19:           cached_attributes.merge attribute_names.map { |attr| attr.to_s }
   20          end
   21  
   22:         # Returns the attributes which are cached. By default time related columns
   23:         # with datatype <tt>:datetime, :timestamp, :time, :date</tt> are cached.
   24:         def cached_attributes
   25:           @cached_attributes ||= columns.select { |c| cacheable_column?(c) }.map { |col| col.name }.to_set
   26          end
   27  
   28:         # Returns +true+ if the provided attribute is being cached.
   29:         def cache_attribute?(attr_name)
   30:           cached_attributes.include?(attr_name)
   31          end
   32  
   ..
   36          # define_method, because define_method is slower on dispatch.
   37          # Evaluating many similar methods may use more memory as the instruction
   38:         # sequences are duplicated and cached (in MRI).  define_method may
   39          # be slower on dispatch, but if you're careful about the closure
   40          # created, then define_method will consume much less memory.
   ..
   50          # to allocate an object on each call to the attribute method.
   51          # Making it frozen means that it doesn't get duped when used to
   52:         # key the @attributes_cache in read_attribute.
   53          def define_method_attribute(name)
   54            safe_name = name.unpack('h*').first
   55:           generated_attribute_methods::AttrNames.set_name_cache safe_name, name
   56  
   57            generated_attribute_methods.module_eval <<-STR, __FILE__, __LINE__ + 1
   ..
   66          private
   67  
   68:         def cacheable_column?(column)
   69:           if attribute_types_cached_by_default == ATTRIBUTE_TYPES_CACHED_BY_DEFAULT
   70              ! serialized_attributes.include? column.name
   71            else
   72:             attribute_types_cached_by_default.include?(column.type)
   73            end
   74          end
   ..
   79        # to a date object, like Date.new(2004, 12, 12)).
   80        def read_attribute(attr_name)
   81:         # If it's cached, just return it
   82          # We use #[] first as a perf optimization for non-nil values. See https://gist.github.com/jonleighton/3552829.
   83          name = attr_name.to_s
   84:         @attributes_cache[name] || @attributes_cache.fetch(name) {
   85            column = @column_types_override[name] if @column_types_override
   86            column ||= @column_types[name]
   ..
   96            }
   97  
   98:           if self.class.cache_attribute?(name)
   99:             @attributes_cache[name] = column.type_cast(value)
  100            else
  101              column.type_cast value

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/attribute_methods/time_zone_conversion.rb:
   39                  write_attribute(:#{attr_name}, time)
   40                  #{attr_name}_will_change! if previous_time != time_with_zone
   41:                 @attributes_cache["#{attr_name}"] = time_with_zone
   42                end
   43              EOV

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/attribute_methods/write.rb:
   15          def define_method_attribute=(name)
   16            safe_name = name.unpack('h*').first
   17:           generated_attribute_methods::AttrNames.set_name_cache safe_name, name
   18  
   19            generated_attribute_methods.module_eval <<-STR, __FILE__, __LINE__ + 1
   ..
   33          attr_name = attr_name.to_s
   34          attr_name = self.class.primary_key if attr_name == 'id' && self.class.primary_key
   35:         @attributes_cache.delete(attr_name)
   36          column = column_for_attribute(attr_name)
   37  
   38:         # If we're dealing with a binary column, write the data to the cache
   39          # so we don't attempt to typecast multiple times.
   40          if column && column.binary?
   41:           @attributes_cache[attr_name] = value
   42          end
   43  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/autosave_association.rb:
  242      # Returns the association for the parent being destroyed.
  243      #
  244:     # Used to avoid updating the counter cache unnecessarily.
  245      def destroyed_by_association
  246        @destroyed_by_association

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/base.rb:
  286  
  287      extend ConnectionHandling
  288:     extend QueryCache::ClassMethods
  289      extend Querying
  290      extend Translation
  ...
  302      include Integration
  303      include Validations
  304:     include CounterCache
  305      include Locking::Optimistic
  306      include Locking::Pessimistic

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:
  245          @size = (spec.config[:pool] && spec.config[:pool].to_i) || 5
  246  
  247:         # The cache of reserved connections mapped to threads
  248:         @reserved_connections = ThreadSafe::Cache.new(:initial_capacity => @size)
  249  
  250          @connections         = []
  ...
  261        def connection
  262          # this is correctly done double-checked locking
  263:         # (ThreadSafe::Cache's lookups have volatile semantics)
  264          @reserved_connections[current_connection_id] || synchronize do
  265            @reserved_connections[current_connection_id] ||= checkout
  ...
  315        end
  316  
  317:       # Clears the cache which maps classes.
  318        def clear_reloadable_connections!
  319          synchronize do
  ...
  333        end
  334  
  335:       def clear_stale_cached_connections! # :nodoc:
  336          reap
  337        end
  338:       deprecate :clear_stale_cached_connections! => "Please use #reap instead"
  339  
  340        # Check-out a database connection from the pool, indicating that you want
  ...
  487      class ConnectionHandler
  488        def initialize
  489:         # These caches are keyed by klass.name, NOT klass. Keying them by klass
  490          # alone would lead to memory leaks in development mode as all previous
  491          # instances of the class would stay in memory.
  492:         @owner_to_pool = ThreadSafe::Cache.new(:initial_capacity => 2) do |h,k|
  493:           h[k] = ThreadSafe::Cache.new(:initial_capacity => 2)
  494          end
  495:         @class_to_pool = ThreadSafe::Cache.new(:initial_capacity => 2) do |h,k|
  496:           h[k] = ThreadSafe::Cache.new
  497          end
  498        end
  ...
  523  
  524        # Returns any connections in use by the current thread back to the pool,
  525:       # and also returns connections to the pool cached by threads that are no
  526        # longer alive.
  527        def clear_active_connections!
  ...
  529        end
  530  
  531:       # Clears the cache which maps classes.
  532        def clear_reloadable_connections!
  533          connection_pool_list.each(&:clear_reloadable_connections!)
  ...
  567        end
  568  
  569:       # Retrieving the connection pool happens a lot so we cache it in @class_to_pool.
  570        # This makes retrieving the connection pool O(1) once the process is warm.
  571:       # When a connection is established or removed, we invalidate the cache.
  572        #
  573        # Ideally we would use #fetch here, as class_to_pool[klass] may sometimes be nil.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/abstract/database_statements.rb:
  110        # Returns +true+ when the connection adapter supports prepared statement
  111        # caching, otherwise returns +false+
  112:       def supports_statement_cache?
  113          false
  114        end
  ...
  289        # something beyond a simple insert (eg. Oracle).
  290        def insert_fixture(fixture, table_name)
  291:         columns = schema_cache.columns_hash(table_name)
  292  
  293          key_list   = []

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/abstract/query_cache.rb:
    1  module ActiveRecord
    2    module ConnectionAdapters # :nodoc:
    3:     module QueryCache
    4        class << self
    5          def included(base) #:nodoc:
    6:           dirties_query_cache base, :insert, :update, :delete
    7          end
    8  
    9:         def dirties_query_cache(base, *method_names)
   10            method_names.each do |method_name|
   11              base.class_eval <<-end_code, __FILE__, __LINE__ + 1
   12                def #{method_name}(*)                         # def update_with_query_dirty(*)
   13:                 clear_query_cache if @query_cache_enabled   #   clear_query_cache if @query_cache_enabled
   14                  super                                       #   super
   15                end                                           # end
   ..
   19        end
   20  
   21:       attr_reader :query_cache, :query_cache_enabled
   22  
   23:       # Enable the query cache within the block.
   24:       def cache
   25:         old, @query_cache_enabled = @query_cache_enabled, true
   26          yield
   27        ensure
   28:         clear_query_cache
   29:         @query_cache_enabled = old
   30        end
   31  
   32:       def enable_query_cache!
   33:         @query_cache_enabled = true
   34        end
   35  
   36:       def disable_query_cache!
   37:         @query_cache_enabled = false
   38        end
   39  
   40:       # Disable the query cache within the block.
   41:       def uncached
   42:         old, @query_cache_enabled = @query_cache_enabled, false
   43          yield
   44        ensure
   45:         @query_cache_enabled = old
   46        end
   47  
   48:       # Clears the query cache.
   49        #
   50        # One reason you may wish to call this method explicitly is between queries
   51:       # that ask the database to randomize results. Otherwise the cache would see
   52        # the same SQL query and repeatedly return the same result each time, silently
   53        # undermining the randomness you were expecting.
   54:       def clear_query_cache
   55:         @query_cache.clear
   56        end
   57  
   58        def select_all(arel, name = nil, binds = [])
   59:         if @query_cache_enabled && !locked?(arel)
   60            sql = to_sql(arel, binds)
   61:           cache_sql(sql, binds) { super(sql, name, binds) }
   62          else
   63            super
   ..
   67        private
   68  
   69:       def cache_sql(sql, binds)
   70          result =
   71:           if @query_cache[sql].key?(binds)
   72              ActiveSupport::Notifications.instrument("sql.active_record",
   73:               :sql => sql, :binds => binds, :name => "CACHE", :connection_id => object_id)
   74:             @query_cache[sql][binds]
   75            else
   76:             @query_cache[sql][binds] = yield
   77            end
   78  
   79:         # FIXME: we should guarantee that all cached items are Result
   80          # objects.  Then we can avoid this conditional
   81          if ActiveRecord::Result === result
   ..
   87  
   88        # If arel is locked this is a SELECT ... FOR UPDATE or somesuch. Such
   89:       # queries should not be cached.
   90        def locked?(arel)
   91          arel.respond_to?(:locked) && arel.locked

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/abstract_adapter.rb:
    3  require 'bigdecimal/util'
    4  require 'active_support/core_ext/benchmark'
    5: require 'active_record/connection_adapters/schema_cache'
    6  require 'active_record/connection_adapters/abstract/schema_dumper'
    7  require 'monitor'
    .
   33        autoload :Quoting
   34        autoload :ConnectionPool
   35:       autoload :QueryCache
   36      end
   37  
   ..
   58        include Quoting, DatabaseStatements, SchemaStatements
   59        include DatabaseLimits
   60:       include QueryCache
   61        include ActiveSupport::Callbacks
   62        include MonitorMixin
   ..
   68  
   69        attr_accessor :visitor, :pool
   70:       attr_reader :schema_cache, :last_use, :in_use, :logger
   71        alias :in_use? :in_use
   72  
   ..
   96          @logger              = logger
   97          @pool                = pool
   98:         @query_cache         = Hash.new { |h,sql| h[sql] = {} }
   99:         @query_cache_enabled = false
  100:         @schema_cache        = SchemaCache.new self
  101          @visitor             = nil
  102          @prepared_statements = false
  ...
  110          def initialize(conn)
  111            @conn  = conn
  112:           @cache = {}
  113          end
  114  
  115          def accept(o)
  116:           m = @cache[o.class] ||= "visit_#{o.class.name.split('::').last}"
  117            send m, o
  118          end
  ...
  185        end
  186  
  187:       def schema_cache=(cache)
  188:         cache.connection = self
  189:         @schema_cache = cache
  190        end
  191  
  ...
  330        # override the default implementation.
  331        def reconnect!
  332:         clear_cache!
  333          reset_transaction
  334        end
  ...
  337        # method does nothing.
  338        def disconnect!
  339:         clear_cache!
  340          reset_transaction
  341        end
  ...
  353        ###
  354        # Clear any caching the database adapter may be doing, for example
  355:       # clearing the prepared statement cache. This is database specific.
  356:       def clear_cache!
  357          # this should be overridden by concrete adapters
  358        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/mysql2_adapter.rb:
  178        end
  179  
  180:       # FIXME: re-enable the following once a "better" query_cache solution is in core
  181        #
  182        # The overrides below perform much better than the originals in AbstractAdapter

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/mysql_adapter.rb:
   95          def initialize(connection, max = 1000)
   96            super
   97:           @cache = Hash.new { |h,pid| h[pid] = {} }
   98          end
   99  
  100:         def each(&block); cache.each(&block); end
  101:         def key?(key);    cache.key?(key); end
  102:         def [](key);      cache[key]; end
  103:         def length;       cache.length; end
  104:         def delete(key);  cache.delete(key); end
  105  
  106          def []=(sql, key)
  107:           while @max <= cache.size
  108:             cache.shift.last[:stmt].close
  109            end
  110:           cache[sql] = key
  111          end
  112  
  113          def clear
  114:           cache.values.each do |hash|
  115              hash[:stmt].close
  116            end
  117:           cache.clear
  118          end
  119  
  120          private
  121:         def cache
  122:           @cache[Process.pid]
  123          end
  124        end
  ...
  134        # Returns true, since this connection adapter supports prepared statement
  135        # caching.
  136:       def supports_statement_cache?
  137          true
  138        end
  ...
  221        end
  222  
  223:       # Clears the prepared statements cache.
  224:       def clear_cache!
  225          @statements.clear
  226        end
  ...
  476  
  477        def exec_stmt(sql, name, binds)
  478:         cache = {}
  479          log(sql, name, binds) do
  480            if binds.empty?
  481              stmt = @connection.prepare(sql)
  482            else
  483:             cache = @statements[sql] ||= {
  484                :stmt => @connection.prepare(sql)
  485              }
  486:             stmt = cache[:stmt]
  487            end
  488  
  ...
  493              # place when an error occurs. To support older mysql versions, we
  494              # need to close the statement and delete the statement from the
  495:             # cache.
  496              stmt.close
  497              @statements.delete sql
  ...
  501            cols = nil
  502            if metadata = stmt.result_metadata
  503:             cols = cache[:cols] ||= metadata.fetch_fields.map { |field|
  504                field.name
  505              }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/postgresql/database_statements.rb:
  136          def exec_query(sql, name = 'SQL', binds = [])
  137            log(sql, name, binds) do
  138:             result = without_prepared_statement?(binds) ? exec_no_cache(sql, binds) :
  139:                                                           exec_cache(sql, binds)
  140  
  141              types = {}
  ...
  158          def exec_delete(sql, name = 'SQL', binds = [])
  159            log(sql, name, binds) do
  160:             result = without_prepared_statement?(binds) ? exec_no_cache(sql, binds) :
  161:                                                           exec_cache(sql, binds)
  162              affected = result.cmd_tuples
  163              result.clear

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/postgresql/schema_statements.rb:
  363          #   rename_table('octopuses', 'octopi')
  364          def rename_table(table_name, new_name)
  365:           clear_cache!
  366            execute "ALTER TABLE #{quote_table_name(table_name)} RENAME TO #{quote_table_name(new_name)}"
  367            pk, seq = pk_and_sequence_for(new_name)
  ...
  377          # See TableDefinition#column for details of the options you can use.
  378          def add_column(table_name, column_name, type, options = {})
  379:           clear_cache!
  380            super
  381          end
  ...
  383          # Changes the column of a table.
  384          def change_column(table_name, column_name, type, options = {})
  385:           clear_cache!
  386            quoted_table_name = quote_table_name(table_name)
  387            sql_type = type_to_sql(type, options[:limit], options[:precision], options[:scale])
  ...
  395          # Changes the default value of a table column.
  396          def change_column_default(table_name, column_name, default)
  397:           clear_cache!
  398            execute "ALTER TABLE #{quote_table_name(table_name)} ALTER COLUMN #{quote_column_name(column_name)} SET DEFAULT #{quote(default)}"
  399          end
  400  
  401          def change_column_null(table_name, column_name, null, default = nil)
  402:           clear_cache!
  403            unless null || default.nil?
  404              execute("UPDATE #{quote_table_name(table_name)} SET #{quote_column_name(column_name)}=#{quote(default)} WHERE #{quote_column_name(column_name)} IS NULL")
  ...
  409          # Renames a column in a table.
  410          def rename_column(table_name, column_name, new_column_name)
  411:           clear_cache!
  412            execute "ALTER TABLE #{quote_table_name(table_name)} RENAME COLUMN #{quote_column_name(column_name)} TO #{quote_column_name(new_column_name)}"
  413            rename_column_indexes(table_name, column_name, new_column_name)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/postgresql_adapter.rb:
  452        # Returns +true+, since this connection adapter supports prepared statement
  453        # caching.
  454:       def supports_statement_cache?
  455          true
  456        end
  ...
  476            super
  477            @counter = 0
  478:           @cache   = Hash.new { |h,pid| h[pid] = {} }
  479          end
  480  
  481:         def each(&block); cache.each(&block); end
  482:         def key?(key);    cache.key?(key); end
  483:         def [](key);      cache[key]; end
  484:         def length;       cache.length; end
  485  
  486          def next_key
  ...
  489  
  490          def []=(sql, key)
  491:           while @max <= cache.size
  492:             dealloc(cache.shift.last)
  493            end
  494            @counter += 1
  495:           cache[sql] = key
  496          end
  497  
  498          def clear
  499:           cache.each_value do |stmt_key|
  500              dealloc stmt_key
  501            end
  502:           cache.clear
  503          end
  504  
  505          def delete(sql_key)
  506:           dealloc cache[sql_key]
  507:           cache.delete sql_key
  508          end
  509  
  510          private
  511  
  512:           def cache
  513:             @cache[Process.pid]
  514            end
  515  
  ...
  559        end
  560  
  561:       # Clears the prepared statements cache.
  562:       def clear_cache!
  563          @statements.clear
  564        end
  ...
  579  
  580        def reset!
  581:         clear_cache!
  582          super
  583        end
  ...
  676        # Set the authorized user for this session
  677        def session_auth=(user)
  678:         clear_cache!
  679          exec_query "SET SESSION AUTHORIZATION #{user}"
  680        end
  ...
  771          FEATURE_NOT_SUPPORTED = "0A000" # :nodoc:
  772  
  773:         def exec_no_cache(sql, binds)
  774            @connection.async_exec(sql)
  775          end
  776  
  777:         def exec_cache(sql, binds)
  778            stmt_key = prepare_statement sql
  779  
  ...
  789            # prepared statements whose return value may have changed is
  790            # FEATURE_NOT_SUPPORTED.  Check here for more details:
  791:           # http://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/cache/plancache.c#l573
  792            begin
  793              code = e.result.result_error_field(PGresult::PG_DIAG_SQLSTATE)
  ...
  803          end
  804  
  805:         # Returns the statement identifier for the client side cache
  806          # of statements
  807          def sql_key(sql)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/schema_cache.rb:
    3  module ActiveRecord
    4    module ConnectionAdapters
    5:     class SchemaCache
    6        attr_reader :version
    7        attr_accessor :connection
    .
   26        end
   27  
   28:       # A cached lookup for table existence.
   29        def table_exists?(name)
   30          return @tables[name] if @tables.key? name
   ..
   33        end
   34  
   35:       # Add internal cache for table with +table_name+.
   36        def add(table_name)
   37          if table_exists?(table_name)
   ..
   72        end
   73  
   74:       # Clears out internal caches
   75        def clear!
   76          @columns.clear
   ..
   87        end
   88  
   89:       # Clear out internal caches for table with +table_name+.
   90:       def clear_table_cache!(table_name)
   91          @columns.delete table_name
   92          @columns_hash.delete table_name

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_adapters/sqlite3_adapter.rb:
   69          def initialize(connection, max)
   70            super
   71:           @cache = Hash.new { |h,pid| h[pid] = {} }
   72          end
   73  
   74:         def each(&block); cache.each(&block); end
   75:         def key?(key);    cache.key?(key); end
   76:         def [](key);      cache[key]; end
   77:         def length;       cache.length; end
   78  
   79          def []=(sql, key)
   80:           while @max <= cache.size
   81:             dealloc(cache.shift.last[:stmt])
   82            end
   83:           cache[sql] = key
   84          end
   85  
   86          def clear
   87:           cache.values.each do |hash|
   88              dealloc hash[:stmt]
   89            end
   90:           cache.clear
   91          end
   92  
   93          private
   94:         def cache
   95:           @cache[$$]
   96          end
   97  
   ..
  137        # Returns true, since this connection adapter supports prepared statement
  138        # caching.
  139:       def supports_statement_cache?
  140          true
  141        end
  ...
  172        end
  173  
  174:       # Clears the prepared statements cache.
  175:       def clear_cache!
  176          @statements.clear
  177        end
  ...
  295          log(sql, name, binds) do
  296  
  297:           # Don't cache statements if they are not prepared
  298            if without_prepared_statement?(binds)
  299              stmt    = @connection.prepare(sql)
  ...
  303              stmt = records
  304            else
  305:             cache = @statements[sql] ||= {
  306                :stmt => @connection.prepare(sql)
  307              }
  308:             stmt = cache[:stmt]
  309:             cols = cache[:cols] ||= stmt.columns
  310              stmt.reset!
  311              stmt.bind_params binds.map { |col, val|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_handling.rb:
   89      end
   90  
   91:     def clear_cache! # :nodoc:
   92:       connection.schema_cache.clear!
   93      end
   94  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/core.rb:
  253        init_changed_attributes
  254  
  255:       @aggregation_cache = {}
  256:       @association_cache = {}
  257:       @attributes_cache  = {}
  258  
  259        @new_record  = true
  ...
  430        @attributes[pk] = nil unless @attributes.key?(pk)
  431  
  432:       @aggregation_cache        = {}
  433:       @association_cache        = {}
  434:       @attributes_cache         = {}
  435        @previously_changed       = {}
  436        @changed_attributes       = {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/counter_cache.rb:
    1  module ActiveRecord
    2:   # = Active Record Counter Cache
    3:   module CounterCache
    4      extend ActiveSupport::Concern
    5  
    6      module ClassMethods
    7:       # Resets one or more counter caches to their correct value using an SQL
    8:       # count query. This is useful when adding new counter caches, or if the
    9        # counter has been corrupted or modified directly by SQL.
   10        #
   ..
   31            child_class  = has_many_association.klass
   32            belongs_to   = child_class.reflect_on_all_associations(:belongs_to)
   33:           reflection   = belongs_to.find { |e| e.foreign_key.to_s == foreign_key && e.options[:counter_cache].present? }
   34:           counter_name = reflection.counter_cache_column
   35  
   36            stmt = unscoped.where(arel_table[primary_key].eq(object.id)).arel.compile_update({
   ..
   83        # Increment a numeric field by one, via a direct SQL update.
   84        #
   85:       # This method is used primarily for maintaining counter_cache columns used to
   86:       # store aggregate values. For example, a DiscussionBoard may cache posts_count
   87        # and comments_count to avoid running an SQL query to calculate the number of
   88        # posts and comments there are each time it is displayed.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/explain_subscriber.rb:
   18      #
   19      # On the other hand, we want to monitor the performance of our real database
   20:     # queries, not the performance of the access to the query cache.
   21:     IGNORED_PAYLOADS = %w(SCHEMA EXPLAIN CACHE)
   22      EXPLAINED_SQLS = /\A\s*(select|update|delete|insert)\b/i
   23      def ignore_payload?(payload)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/fixtures.rb:
  378      MAX_ID = 2 ** 30 - 1
  379  
  380:     @@all_cached_fixtures = Hash.new { |h,k| h[k] = {} }
  381  
  382      def self.find_table_name(fixture_set_name) # :nodoc:
  ...
  398      end
  399  
  400:     def self.reset_cache
  401:       @@all_cached_fixtures.clear
  402      end
  403  
  404:     def self.cache_for_connection(connection)
  405:       @@all_cached_fixtures[connection]
  406      end
  407  
  408:     def self.fixture_is_cached?(connection, table_name)
  409:       cache_for_connection(connection)[table_name]
  410      end
  411  
  412:     def self.cached_fixtures(connection, keys_to_fetch = nil)
  413        if keys_to_fetch
  414:         cache_for_connection(connection).values_at(*keys_to_fetch)
  415        else
  416:         cache_for_connection(connection).values
  417        end
  418      end
  419  
  420:     def self.cache_fixtures(connection, fixtures_map)
  421:       cache_for_connection(connection).update(fixtures_map)
  422      end
  423  
  ...
  451  
  452        files_to_read = fixture_set_names.reject { |fs_name|
  453:         fixture_is_cached?(connection, fs_name)
  454        }
  455  
  ...
  492            end
  493  
  494:           cache_fixtures(connection, fixtures_map)
  495          end
  496        end
  497:       cached_fixtures(connection, fixture_set_names)
  498      end
  499  
  ...
  804                force_reload = fixture_names.pop if fixture_names.last == true || fixture_names.last == :reload
  805  
  806:               @fixture_cache[fs_name] ||= {}
  807  
  808                instances = fixture_names.map do |f_name|
  809                  f_name = f_name.to_s
  810:                 @fixture_cache[fs_name].delete(f_name) if force_reload
  811  
  812                  if @loaded_fixtures[fs_name][f_name]
  813:                   @fixture_cache[fs_name][f_name] ||= @loaded_fixtures[fs_name][f_name].find
  814                  else
  815                    raise StandardError, "No fixture named '#{f_name}' found for fixture set '#{fs_name}'"
  ...
  848        end
  849  
  850:       @fixture_cache = {}
  851        @fixture_connections = []
  852        @@already_loaded_fixtures ||= {}
  ...
  866        # Load fixtures for every test.
  867        else
  868:         ActiveRecord::FixtureSet.reset_cache
  869          @@already_loaded_fixtures[self.class] = nil
  870          @loaded_fixtures = load_fixtures
  ...
  885          @fixture_connections.clear
  886        else
  887:         ActiveRecord::FixtureSet.reset_cache
  888        end
  889  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/integration.rb:
    6        ##
    7        # :singleton-method:
    8:       # Indicates the format used to generate the timestamp in the cache key.
    9        # Accepts any of the symbols in <tt>Time::DATE_FORMATS</tt>.
   10        #
   11        # This is +:nsec+, by default.
   12:       class_attribute :cache_timestamp_format, :instance_writer => false
   13:       self.cache_timestamp_format = :nsec
   14      end
   15  
   ..
   41      end
   42  
   43:     # Returns a cache key that can be used to identify this record.
   44      #
   45:     #   Product.new.cache_key     # => "products/new"
   46:     #   Product.find(5).cache_key # => "products/5" (updated_at not available)
   47:     #   Person.find(5).cache_key  # => "people/5-20071224150000" (updated_at available)
   48:     def cache_key
   49        case
   50        when new_record?
   51:         "#{self.class.model_name.cache_key}/new"
   52        when timestamp = max_updated_column_timestamp
   53:         timestamp = timestamp.utc.to_s(cache_timestamp_format)
   54:         "#{self.class.model_name.cache_key}/#{id}-#{timestamp}"
   55        else
   56:         "#{self.class.model_name.cache_key}/#{id}"
   57        end
   58      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/model_schema.rb:
  201        # Indicates whether the table associated with this class exists
  202        def table_exists?
  203:         connection.schema_cache.table_exists?(table_name)
  204        end
  205  
  206        # Returns an array of column objects for the table associated with this class.
  207        def columns
  208:         @columns ||= connection.schema_cache.columns(table_name).map do |col|
  209            col = col.dup
  210            col.primary = (col.name == primary_key)
  ...
  274        end
  275  
  276:       # Resets all the cached information about columns, which will cause them
  277        # to be reloaded on the next request.
  278        #
  ...
  301        #  end
  302        def reset_column_information
  303:         connection.clear_cache!
  304          undefine_attribute_methods
  305:         connection.schema_cache.clear_table_cache!(table_name) if table_exists?
  306  
  307          @arel_engine             = nil
  ...
  317          @serialized_column_names = nil
  318          @time_zone_column_names  = nil
  319:         @cached_time_zone        = nil
  320        end
  321  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/persistence.rb:
  184        became = klass.new
  185        became.instance_variable_set("@attributes", @attributes)
  186:       became.instance_variable_set("@attributes_cache", @attributes_cache)
  187        became.instance_variable_set("@new_record", new_record?)
  188        became.instance_variable_set("@destroyed", destroyed?)
  ...
  346      #   # => #<Account id: 1, email: 'account@example.com'>
  347      #
  348:     # Attributes are updated, and caches busted, in particular the associations cache.
  349      #
  350      # If the record no longer exists in the database <tt>ActiveRecord::RecordNotFound</tt>
  ...
  382      #
  383      def reload(options = nil)
  384:       clear_aggregation_cache
  385:       clear_association_cache
  386  
  387        fresh_object =
  ...
  396        @column_types           = self.class.column_types
  397        @column_types_override  = fresh_object.instance_variable_get('@column_types_override')
  398:       @attributes_cache       = {}
  399        self
  400      end
  ...
  487        else
  488          klass = self.class
  489:         column_hash = klass.connection.schema_cache.columns_hash klass.table_name
  490          db_columns_with_values = attributes_with_values.map { |attr,value|
  491            real_column = column_hash[attr.name]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/query_cache.rb:
    1  
    2  module ActiveRecord
    3:   # = Active Record Query Cache
    4:   class QueryCache
    5      module ClassMethods
    6:       # Enable the query cache within the block if Active Record is configured.
    7        # If it's not, it will execute the given block.
    8:       def cache(&block)
    9          if ActiveRecord::Base.connected?
   10:           connection.cache(&block)
   11          else
   12            yield
   ..
   14        end
   15  
   16:       # Disable the query cache within the block if Active Record is configured.
   17        # If it's not, it will execute the given block.
   18:       def uncached(&block)
   19          if ActiveRecord::Base.connected?
   20:           connection.uncached(&block)
   21          else
   22            yield
   ..
   30  
   31      def call(env)
   32:       enabled       = ActiveRecord::Base.connection.query_cache_enabled
   33        connection_id = ActiveRecord::Base.connection_id
   34:       ActiveRecord::Base.connection.enable_query_cache!
   35  
   36        response = @app.call(env)
   37        response[2] = Rack::BodyProxy.new(response[2]) do
   38:         restore_query_cache_settings(connection_id, enabled)
   39        end
   40  
   41        response
   42      rescue Exception => e
   43:       restore_query_cache_settings(connection_id, enabled)
   44        raise e
   45      end
   ..
   47      private
   48  
   49:     def restore_query_cache_settings(connection_id, enabled)
   50        ActiveRecord::Base.connection_id = connection_id
   51:       ActiveRecord::Base.connection.clear_query_cache
   52:       ActiveRecord::Base.connection.disable_query_cache! unless enabled
   53      end
   54  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/railtie.rb:
   18  
   19      config.app_middleware.insert_after "::ActionDispatch::Callbacks",
   20:       "ActiveRecord::QueryCache"
   21  
   22      config.app_middleware.insert_after "::ActionDispatch::Callbacks",
   ..
   31  
   32  
   33:     config.active_record.use_schema_cache_dump = true
   34  
   35      config.eager_load_namespaces << ActiveRecord
   ..
   92      end
   93  
   94:     initializer "active_record.check_schema_cache_dump" do
   95:       if config.active_record.delete(:use_schema_cache_dump)
   96          config.after_initialize do |app|
   97            ActiveSupport.on_load(:active_record) do
   98:             filename = File.join(app.config.paths["db"].first, "schema_cache.dump")
   99  
  100              if File.file?(filename)
  101:               cache = Marshal.load File.binread filename
  102:               if cache.version == ActiveRecord::Migrator.current_version
  103:                 self.connection.schema_cache = cache
  104                else
  105:                 warn "Ignoring db/schema_cache.dump because it has expired. The current schema version is #{ActiveRecord::Migrator.current_version}, but the one in the cache is #{cache.version}."
  106                end
  107              end
  ...
  193            if ActiveRecord::Base.connected?
  194              ActiveRecord::Base.clear_reloadable_connections!
  195:             ActiveRecord::Base.clear_cache!
  196            end
  197          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/railties/databases.rake:
  261      end
  262  
  263:     namespace :cache do
  264:       desc 'Create a db/schema_cache.dump file.'
  265        task :dump => [:environment, :load_config] do
  266          con = ActiveRecord::Base.connection
  267:         filename = File.join(ActiveRecord::Tasks::DatabaseTasks.db_dir, "schema_cache.dump")
  268  
  269:         con.schema_cache.clear!
  270:         con.tables.each { |table| con.schema_cache.add(table) }
  271:         open(filename, 'wb') { |f| f.write(Marshal.dump(con.schema_cache)) }
  272        end
  273  
  274:       desc 'Clear a db/schema_cache.dump file.'
  275        task :clear => [:environment, :load_config] do
  276:         filename = File.join(ActiveRecord::Tasks::DatabaseTasks.db_dir, "schema_cache.dump")
  277          FileUtils.rm(filename) if File.exists?(filename)
  278        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/reflection.rb:
  231        end
  232  
  233:       def counter_cache_column
  234:         if options[:counter_cache] == true
  235            "#{active_record.name.demodulize.underscore.pluralize}_count"
  236:         elsif options[:counter_cache]
  237:           options[:counter_cache].to_s
  238          end
  239        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/relation/delegation.rb:
   72  
   73      module ClassMethods # :nodoc:
   74:       @@subclasses = ThreadSafe::Cache.new(:initial_capacity => 2)
   75  
   76        def new(klass, *args)
   ..
   87  
   88        private
   89:       # Cache the constants in @@subclasses because looking them up via const_get
   90        # make instantiation significantly slower.
   91        def relation_class_for(klass)
   92          if klass && (klass_name = klass.name)
   93:           my_cache = @@subclasses.compute_if_absent(self) { ThreadSafe::Cache.new }
   94            # This hash is keyed by klass.name to avoid memory leaks in development mode
   95:           my_cache.compute_if_absent(klass_name) do
   96:             # Cache#compute_if_absent guarantees that the block will only executed once for the given klass_name
   97              const_get("#{name.gsub('::', '_')}_#{klass_name.gsub('::', '_')}", false)
   98            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/statement_cache.rb:
    1  module ActiveRecord
    2  
    3:   # Statement cache is used to cache a single statement in order to avoid creating the AST again.
    4:   # Initializing the cache is done by passing the statement in the initialization block:
    5    #
    6:   #   cache = ActiveRecord::StatementCache.new do
    7    #     Book.where(name: "my book").limit(100)
    8    #   end
    9    #
   10:   # The cached statement is executed by using the +execute+ method:
   11    #
   12:   #   cache.execute
   13    #
   14:   # The relation returned by the block is cached, and for each +execute+ call the cached relation gets duped.
   15    # Database is queried when +to_a+ is called on the relation.
   16:   class StatementCache
   17      def initialize
   18        @relation = yield

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/test_case.rb:
   85  
   86        # FIXME: this seems bad. we should probably have a better way to indicate
   87:       # the query was cached
   88:       return if 'CACHE' == values[:name]
   89  
   90        self.class.log_all << sql

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/transactions.rb:
  182      # These callbacks are useful for interacting with other systems since you will be guaranteed
  183      # that the callback is only executed when the database is in a permanent state. For example,
  184:     # +after_commit+ is a good spot to put in a hook to clearing a cache since clearing it from
  185:     # within a transaction could trigger the cache to be regenerated before the database is updated.
  186      #
  187      # === Caveats
  ...
  370            else
  371              @attributes.delete(self.class.primary_key)
  372:             @attributes_cache.delete(self.class.primary_key)
  373            end
  374            @attributes.freeze if was_frozen

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/CHANGELOG.md:
    6      *Bogdan Gusiev*
    7  
    8: *   Fix `ActiveSupport::Cache::FileStore#cleanup` to no longer rely on missing `each_key` method.
    9  
   10      *Murray Steele*
   ..
   27      *Xavier Noria*
   28  
   29: *   Improve `ActiveSupport::Cache::MemoryStore` cache size calculation.
   30:     The memory used by a key/entry pair is calculated via `#cached_size`:
   31  
   32:         def cached_size(key, entry)
   33            key.to_s.bytesize + entry.size + PER_ENTRY_OVERHEAD
   34          end
   ..
  110      *Yves Senn*
  111  
  112: *   Fix deletion of empty directories in `ActiveSupport::Cache::FileStore`.
  113  
  114      *Charles Jones*
  ...
  258  
  259  *   Patched `Marshal#load` to work with constant autoloading. Fixes autoloading
  260:     with cache stores that rely on `Marshal` (`MemCacheStore` and `FileStore`).
  261      Fixes #8167.
  262  
  ...
  267  *   Add `DateTime#seconds_until_end_of_day` and `Time#seconds_until_end_of_day`
  268      as a complement for `seconds_from_midnight`; useful when setting expiration
  269:     times for caches, e.g.:
  270  
  271:         <% cache('dashboard', expires_in: Date.current.seconds_until_end_of_day) do %>
  272            ...
  273  
  ...
  332      *Mikhail Dieterle*
  333  
  334: *   Optimize `ActiveSupport::Cache::Entry` to reduce memory and processing overhead. *Brian Durand*
  335  
  336  *   Tests tag the Rails log with the current test class and test case:
  ...
  464      *Akira Matsuda*
  465  
  466: *   Replace deprecated `memcache-client` gem with `dalli` in `ActiveSupport::Cache::MemCacheStore`.
  467  
  468      *Guillermo Iguaran*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support.rb:
   43      autoload :ProxyObject
   44      autoload :Benchmarkable
   45:     autoload :Cache
   46      autoload :Callbacks
   47      autoload :Configurable

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache.rb:
   11  
   12  module ActiveSupport
   13:   # See ActiveSupport::Cache::Store for documentation.
   14:   module Cache
   15:     autoload :FileStore, 'active_support/cache/file_store'
   16:     autoload :MemoryStore, 'active_support/cache/memory_store'
   17:     autoload :MemCacheStore, 'active_support/cache/mem_cache_store'
   18:     autoload :NullStore, 'active_support/cache/null_store'
   19  
   20:     # These options mean something to all cache implementations. Individual cache
   21      # implementations may support additional options.
   22      UNIVERSAL_OPTIONS = [:namespace, :compress, :compress_threshold, :expires_in, :race_condition_ttl]
   23  
   24      module Strategy
   25:       autoload :LocalCache, 'active_support/cache/strategy/local_cache'
   26      end
   27  
   28      class << self
   29:       # Creates a new CacheStore object according to the given options.
   30        #
   31        # If no arguments are passed to this method, then a new
   32:       # ActiveSupport::Cache::MemoryStore object will be returned.
   33        #
   34:       # If you pass a Symbol as the first argument, then a corresponding cache
   35:       # store class under the ActiveSupport::Cache namespace will be created.
   36        # For example:
   37        #
   38:       #   ActiveSupport::Cache.lookup_store(:memory_store)
   39:       #   # => returns a new ActiveSupport::Cache::MemoryStore object
   40        #
   41:       #   ActiveSupport::Cache.lookup_store(:mem_cache_store)
   42:       #   # => returns a new ActiveSupport::Cache::MemCacheStore object
   43        #
   44:       # Any additional arguments will be passed to the corresponding cache store
   45        # class's constructor:
   46        #
   47:       #   ActiveSupport::Cache.lookup_store(:file_store, '/tmp/cache')
   48:       #   # => same as: ActiveSupport::Cache::FileStore.new('/tmp/cache')
   49        #
   50        # If the first argument is not a Symbol, then it will simply be returned:
   51        #
   52:       #   ActiveSupport::Cache.lookup_store(MyOwnCacheStore.new)
   53:       #   # => returns MyOwnCacheStore.new
   54        def lookup_store(*store_option)
   55          store, *parameters = *Array.wrap(store_option).flatten
   ..
   59            retrieve_store_class(store).new(*parameters)
   60          when nil
   61:           ActiveSupport::Cache::MemoryStore.new
   62          else
   63            store
   ..
   66  
   67        # Expands out the +key+ argument into a key that can be used for the
   68:       # cache store. Optionally accepts a namespace, and all keys will be
   69        # scoped within that namespace.
   70        #
   ..
   73        # concatenated into a single key. For example:
   74        #
   75:       #   expand_cache_key([:foo, :bar])               # => "foo/bar"
   76:       #   expand_cache_key([:foo, :bar], "namespace")  # => "namespace/foo/bar"
   77        #
   78:       # The +key+ argument can also respond to +cache_key+ or +to_param+.
   79:       def expand_cache_key(key, namespace = nil)
   80:         expanded_cache_key = namespace ? "#{namespace}/" : ""
   81  
   82:         if prefix = ENV["RAILS_CACHE_ID"] || ENV["RAILS_APP_VERSION"]
   83:           expanded_cache_key << "#{prefix}/"
   84          end
   85  
   86:         expanded_cache_key << retrieve_cache_key(key)
   87:         expanded_cache_key
   88        end
   89  
   90        private
   91  
   92:       def retrieve_cache_key(key)
   93          case
   94:         when key.respond_to?(:cache_key) then key.cache_key
   95:         when key.is_a?(Array)            then key.map { |element| retrieve_cache_key(element) }.to_param
   96:         when key.respond_to?(:to_a)      then retrieve_cache_key(key.to_a)
   97          else                                  key.to_param
   98          end.to_s
   99        end
  100  
  101:       # Obtains the specified cache store class, given the name of the +store+.
  102        # Raises an error when the store class cannot be found.
  103        def retrieve_store_class(store)
  104:         require "active_support/cache/#{store}"
  105        rescue LoadError => e
  106:         raise "Could not find cache store adapter for #{store} (#{e})"
  107        else
  108:         ActiveSupport::Cache.const_get(store.to_s.camelize)
  109        end
  110      end
  111  
  112:     # An abstract cache store class. There are multiple cache store
  113      # implementations, each having its own additional features. See the classes
  114:     # under the ActiveSupport::Cache module, e.g.
  115:     # ActiveSupport::Cache::MemCacheStore. MemCacheStore is currently the most
  116:     # popular cache store for large production websites.
  117      #
  118:     # Some implementations may not support all methods beyond the basic cache
  119      # methods of +fetch+, +write+, +read+, +exist?+, and +delete+.
  120      #
  121:     # ActiveSupport::Cache::Store can store any serializable Ruby object.
  122      #
  123:     #   cache = ActiveSupport::Cache::MemoryStore.new
  124      #
  125:     #   cache.read('city')   # => nil
  126:     #   cache.write('city', "Duckburgh")
  127:     #   cache.read('city')   # => "Duckburgh"
  128      #
  129      # Keys are always translated into Strings and are case sensitive. When an
  130:     # object is specified as a key and has a +cache_key+ method defined, this
  131      # method will be called to define the key.  Otherwise, the +to_param+
  132      # method will be called. Hashes and Arrays can also be used as keys. The
  ...
  134      # will be sorted by key so they are consistent.
  135      #
  136:     #   cache.read('city') == cache.read(:city)   # => true
  137      #
  138:     # Nil values can be cached.
  139      #
  140:     # If your cache is on a shared infrastructure, you can define a namespace
  141:     # for your cache entries. If a namespace is defined, it will be prefixed on
  142      # to every key. The namespace can be either a static value or a Proc. If it
  143      # is a Proc, it will be invoked when each key is evaluated so that you can
  144      # use application logic to invalidate keys.
  145      #
  146:     #   cache.namespace = -> { @last_mod_time }  # Set the namespace to a variable
  147:     #   @last_mod_time = Time.now  # Invalidate the entire cache by changing namespace
  148      #
  149:     # Caches can also store values in a compressed format to save space and
  150      # reduce time spent sending data. Since there is overhead, values must be
  151      # large enough to warrant compression. To turn on compression either pass
  ...
  160        alias :silence? :silence
  161  
  162:       # Create a new cache. The options will be passed to any write method calls
  163        # except for <tt>:namespace</tt> which can be used to set the global
  164:       # namespace for the cache.
  165        def initialize(options = nil)
  166          @options = options ? options.dup : {}
  ...
  181        end
  182  
  183:       # Set to +true+ if cache stores should be instrumented.
  184        # Default is +false+.
  185        def self.instrument=(boolean)
  186:         Thread.current[:instrument_cache_store] = boolean
  187        end
  188  
  189        def self.instrument
  190:         Thread.current[:instrument_cache_store] || false
  191        end
  192  
  193:       # Fetches data from the cache, using the given key. If there is data in
  194:       # the cache with the given key, then that data is returned.
  195        #
  196:       # If there is no such data in the cache (a cache miss), then +nil+ will be
  197        # returned. However, if a block has been passed, that block will be passed
  198:       # the key and executed in the event of a cache miss. The return value of the
  199:       # block will be written to the cache under the given cache key, and that
  200        # return value will be returned.
  201        #
  202:       #   cache.write('today', 'Monday')
  203:       #   cache.fetch('today')  # => "Monday"
  204        #
  205:       #   cache.fetch('city')   # => nil
  206:       #   cache.fetch('city') do
  207        #     'Duckburgh'
  208        #   end
  209:       #   cache.fetch('city')   # => "Duckburgh"
  210        #
  211        # You may also specify additional options via the +options+ argument.
  212:       # Setting <tt>force: true</tt> will force a cache miss:
  213        #
  214:       #   cache.write('today', 'Monday')
  215:       #   cache.fetch('today', force: true)  # => nil
  216        #
  217:       # Setting <tt>:compress</tt> will store a large cache entry set by the call
  218        # in a compressed format.
  219        #
  220:       # Setting <tt>:expires_in</tt> will set an expiration time on the cache.
  221:       # All caches support auto-expiring content after a specified number of
  222        # seconds. This value can be specified as an option to the constructor
  223        # (in which case all entries will be affected), or it can be supplied to
  224        # the +fetch+ or +write+ method to effect just one entry.
  225        #
  226:       #   cache = ActiveSupport::Cache::MemoryStore.new(expires_in: 5.minutes)
  227:       #   cache.write(key, value, expires_in: 1.minute) # Set a lower value for one entry
  228        #
  229        # Setting <tt>:race_condition_ttl</tt> is very useful in situations where
  230:       # a cache entry is used very frequently and is under heavy load. If a
  231:       # cache expires and due to heavy load seven different processes will try
  232:       # to read data natively and then they all will try to write to cache. To
  233:       # avoid that case the first process to find an expired cache entry will
  234:       # bump the cache expiration time by the value set in <tt>:race_condition_ttl</tt>.
  235        # Yes, this process is extending the time for a stale value by another few
  236:       # seconds. Because of extended life of the previous cache, other processes
  237        # will continue to use slightly stale data for a just a bit longer. In the
  238:       # meantime that first process will go ahead and will write into cache the
  239        # new value. After that all the processes will start getting new value.
  240        # The key is to keep <tt>:race_condition_ttl</tt> small.
  ...
  242        # If the process regenerating the entry errors out, the entry will be
  243        # regenerated after the specified number of seconds. Also note that the
  244:       # life of stale cache is extended only if it expired recently. Otherwise
  245        # a new value is generated and <tt>:race_condition_ttl</tt> does not play
  246        # any role.
  247        #
  248        #   # Set all values to expire after one minute.
  249:       #   cache = ActiveSupport::Cache::MemoryStore.new(expires_in: 1.minute)
  250        #
  251:       #   cache.write('foo', 'original value')
  252        #   val_1 = nil
  253        #   val_2 = nil
  ...
  255        #
  256        #   Thread.new do
  257:       #     val_1 = cache.fetch('foo', race_condition_ttl: 10) do
  258        #       sleep 1
  259        #       'new value 1'
  ...
  262        #
  263        #   Thread.new do
  264:       #     val_2 = cache.fetch('foo', race_condition_ttl: 10) do
  265        #       'new value 2'
  266        #     end
  ...
  269        #   # val_1 => "new value 1"
  270        #   # val_2 => "original value"
  271:       #   # sleep 10 # First thread extend the life of cache by another 10 seconds
  272:       #   # cache.fetch('foo') => "new value 1"
  273        #
  274:       # Other options will be handled by the specific cache store implementation.
  275:       # Internally, #fetch calls #read_entry, and calls #write_entry on a cache
  276        # miss. +options+ will be passed to the #read and #write calls.
  277        #
  278:       # For example, MemCacheStore's #write method supports the +:raw+
  279:       # option, which tells the memcached server to store all values as strings.
  280        # We can use this option with #fetch too:
  281        #
  282:       #   cache = ActiveSupport::Cache::MemCacheStore.new
  283:       #   cache.fetch("foo", force: true, raw: true) do
  284        #     :bar
  285        #   end
  286:       #   cache.fetch('foo') # => "bar"
  287        def fetch(name, options = nil)
  288          if block_given?
  ...
  290            key = namespaced_key(name, options)
  291  
  292:           cached_entry = find_cached_entry(key, name, options) unless options[:force]
  293:           entry = handle_expired_entry(cached_entry, key, options)
  294  
  295            if entry
  296              get_entry_value(entry, name, options)
  297            else
  298:             save_block_result_to_cache(name, options) { |_name| yield _name }
  299            end
  300          else
  ...
  303        end
  304  
  305:       # Fetches data from the cache, using the given key. If there is data in
  306:       # the cache with the given key, then that data is returned. Otherwise,
  307        # +nil+ is returned.
  308        #
  309:       # Options are passed to the underlying cache implementation.
  310        def read(name, options = nil)
  311          options = merged_options(options)
  ...
  329        end
  330  
  331:       # Read multiple values at once from the cache. Options can be passed
  332        # in the last argument.
  333        #
  334:       # Some cache implementation may optimize this method.
  335        #
  336        # Returns a hash mapping the names provided to the values found.
  ...
  353        end
  354  
  355:       # Writes the value to the cache, with the key.
  356        #
  357:       # Options are passed to the underlying cache implementation.
  358        def write(name, value, options = nil)
  359          options = merged_options(options)
  ...
  364        end
  365  
  366:       # Deletes an entry in the cache. Returns +true+ if an entry is deleted.
  367        #
  368:       # Options are passed to the underlying cache implementation.
  369        def delete(name, options = nil)
  370          options = merged_options(options)
  ...
  374        end
  375  
  376:       # Return +true+ if the cache contains an entry for the given key.
  377        #
  378:       # Options are passed to the underlying cache implementation.
  379        def exist?(name, options = nil)
  380          options = merged_options(options)
  ...
  387        # Delete all entries with keys matching the pattern.
  388        #
  389:       # Options are passed to the underlying cache implementation.
  390        #
  391        # All implementations may not support this method.
  ...
  394        end
  395  
  396:       # Increment an integer value in the cache.
  397        #
  398:       # Options are passed to the underlying cache implementation.
  399        #
  400        # All implementations may not support this method.
  ...
  403        end
  404  
  405:       # Decrement an integer value in the cache.
  406        #
  407:       # Options are passed to the underlying cache implementation.
  408        #
  409        # All implementations may not support this method.
  ...
  412        end
  413  
  414:       # Cleanup the cache by removing expired entries.
  415        #
  416:       # Options are passed to the underlying cache implementation.
  417        #
  418        # All implementations may not support this method.
  ...
  421        end
  422  
  423:       # Clear the entire cache. Be careful with this method since it could
  424:       # affect other processes if shared cache is being used.
  425        #
  426:       # Options are passed to the underlying cache implementation.
  427        #
  428        # All implementations may not support this method.
  ...
  451          end
  452  
  453:         # Read an entry from the cache implementation. Subclasses must implement
  454          # this method.
  455          def read_entry(key, options) # :nodoc:
  ...
  457          end
  458  
  459:         # Write an entry to the cache implementation. Subclasses must implement
  460          # this method.
  461          def write_entry(key, entry, options) # :nodoc:
  ...
  463          end
  464  
  465:         # Delete an entry from the cache implementation. Subclasses must
  466          # implement this method.
  467          def delete_entry(key, options) # :nodoc:
  ...
  479          end
  480  
  481:         # Expand key to be a consistent string value. Invoke +cache_key+ if
  482:         # object responds to +cache_key+. Otherwise, +to_param+ method will be
  483          # called. If the key is a Hash, then keys will be sorted alphabetically.
  484          def expanded_key(key) # :nodoc:
  485:           return key.cache_key.to_s if key.respond_to?(:cache_key)
  486  
  487            case key
  ...
  515              payload = { :key => key }
  516              payload.merge!(options) if options.is_a?(Hash)
  517:             ActiveSupport::Notifications.instrument("cache_#{operation}.active_support", payload){ yield(payload) }
  518            else
  519              yield(nil)
  ...
  523          def log(operation, key, options = nil)
  524            return unless logger && logger.debug? && !silence?
  525:           logger.debug("Cache #{operation}: #{key}#{options.blank? ? "" : " (#{options.inspect})"}")
  526          end
  527  
  528:         def find_cached_entry(key, name, options)
  529            instrument(:read, name, options) do |payload|
  530              payload[:super_operation] = :fetch if payload
  ...
  537              race_ttl = options[:race_condition_ttl].to_i
  538              if race_ttl && (Time.now.to_f - entry.expires_at <= race_ttl)
  539:               # When an entry has :race_condition_ttl defined, put the stale entry back into the cache
  540                # for a brief period while the entry is begin recalculated.
  541                entry.expires_at = Time.now + race_ttl
  ...
  554          end
  555  
  556:         def save_block_result_to_cache(name, options)
  557            result = instrument(:generate, name, options) do |payload|
  558              yield(name)
  ...
  563      end
  564  
  565:     # This class is used to represent cache entries. Cache entries have a value and an optional
  566      # expiration time. The expiration time is used to support the :race_condition_ttl option
  567:     # on the cache.
  568      #
  569:     # Since cache entries in most instances will be serialized, the internals of this class are highly optimized
  570      # using short instance variable names that are lazily defined.
  571      class Entry # :nodoc:
  572        DEFAULT_COMPRESS_LIMIT = 16.kilobytes
  573  
  574:       # Create a new cache entry for the specified value. Options supported are
  575        # +:compress+, +:compress_threshold+, and +:expires_in+.
  576        def initialize(value, options = {})
  ...
  610        end
  611  
  612:       # Returns the size of the cached value. This could be less than
  613        # <tt>value.size</tt> if the data is compressed.
  614        def size
  ...
  627        end
  628  
  629:       # Duplicate the value in a class. This is used by cache implementations that don't natively
  630:       # serialize entries to protect against accidental cache modifications.
  631        def dup_value!
  632          convert_version_4beta1_entry! if defined?(@v)
  ...
  663  
  664          # The internals of this method changed between Rails 3.x and 4.0. This method provides the glue
  665:         # to ensure that cache entries created under the old version still work with the new class definition.
  666          def convert_version_4beta1_entry!
  667            if defined?(@v)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache/file_store.rb:
    5  
    6  module ActiveSupport
    7:   module Cache
    8:     # A cache store implementation which stores everything on the filesystem.
    9      #
   10:     # FileStore implements the Strategy::LocalCache strategy which implements
   11:     # an in-memory cache inside of a block.
   12      class FileStore < Store
   13:       attr_reader :cache_path
   14  
   15        DIR_FORMATTER = "%03X"
   ..
   17        EXCLUDED_DIRS = ['.', '..'].freeze
   18  
   19:       def initialize(cache_path, options = nil)
   20          super(options)
   21:         @cache_path = cache_path.to_s
   22:         extend Strategy::LocalCache
   23        end
   24  
   25        def clear(options = nil)
   26:         root_dirs = Dir.entries(cache_path).reject {|f| (EXCLUDED_DIRS + [".gitkeep"]).include?(f)}
   27:         FileUtils.rm_r(root_dirs.collect{|f| File.join(cache_path, f)})
   28        end
   29  
   30        def cleanup(options = nil)
   31          options = merged_options(options)
   32:         search_dir(cache_path) do |fname|
   33            key = file_path_key(fname)
   34            entry = read_entry(key, options)
   ..
   69          instrument(:delete_matched, matcher.inspect) do
   70            matcher = key_matcher(matcher, options)
   71:           search_dir(cache_path) do |path|
   72              key = file_path_key(path)
   73              delete_entry(key, options) if key.match(matcher)
   ..
   90          def write_entry(key, entry, options)
   91            file_name = key_file_path(key)
   92:           ensure_cache_path(File.dirname(file_name))
   93:           File.atomic_write(file_name, cache_path) {|f| Marshal.dump(entry, f)}
   94            true
   95          end
   ..
  141            end until fname.blank?
  142  
  143:           File.join(cache_path, DIR_FORMATTER % dir_1, DIR_FORMATTER % dir_2, *fname_paths)
  144          end
  145  
  146          # Translate a file path into a key.
  147          def file_path_key(path)
  148:           fname = path[cache_path.to_s.size..-1].split(File::SEPARATOR, 4).last
  149            URI.decode_www_form_component(fname, Encoding::UTF_8)
  150          end
  151  
  152:         # Delete empty directories in the cache.
  153          def delete_empty_directories(dir)
  154:           return if File.realpath(dir) == File.realpath(cache_path)
  155            if Dir.entries(dir).reject {|f| EXCLUDED_DIRS.include?(f)}.empty?
  156              Dir.delete(dir) rescue nil
  ...
  160  
  161          # Make sure a file path's directories exist.
  162:         def ensure_cache_path(path)
  163            FileUtils.makedirs(path) unless File.exist?(path)
  164          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache/mem_cache_store.rb:
   11  
   12  module ActiveSupport
   13:   module Cache
   14:     # A cache store implementation which stores data in Memcached:
   15:     # http://memcached.org/
   16      #
   17:     # This is currently the most popular cache store for production websites.
   18      #
   19      # Special features:
   20:     # - Clustering and load balancing. One can specify multiple memcached servers,
   21:     #   and MemCacheStore will load balance between all available servers. If a
   22:     #   server goes down, then MemCacheStore will ignore it until it comes back up.
   23      #
   24:     # MemCacheStore implements the Strategy::LocalCache strategy which implements
   25:     # an in-memory cache inside of a block.
   26:     class MemCacheStore < Store
   27        ESCAPE_KEY_CHARS = /[\x00-\x20%\x7F-\xFF]/n
   28  
   29:       def self.build_mem_cache(*addresses)
   30          addresses = addresses.flatten
   31          options = addresses.extract_options!
   ..
   34        end
   35  
   36:       # Creates a new MemCacheStore object, with the given memcached server
   37        # addresses. Each address is either a host name, or a host-with-port string
   38        # in the form of "host_name:port". For example:
   39        #
   40:       #   ActiveSupport::Cache::MemCacheStore.new("localhost", "server-downstairs.localnetwork:8229")
   41        #
   42:       # If no addresses are specified, then MemCacheStore will connect to
   43:       # localhost port 11211 (the default memcached port).
   44        #
   45:       # Instead of addresses one can pass in a MemCache-like object. For example:
   46        #
   47:       #   require 'memcached' # gem install memcached; uses C bindings to libmemcached
   48:       #   ActiveSupport::Cache::MemCacheStore.new(Memcached::Rails.new("localhost:11211"))
   49        def initialize(*addresses)
   50          addresses = addresses.flatten
   ..
   55            @data = addresses.first
   56          else
   57:           mem_cache_options = options.dup
   58:           UNIVERSAL_OPTIONS.each{|name| mem_cache_options.delete(name)}
   59:           @data = self.class.build_mem_cache(*(addresses + [mem_cache_options]))
   60          end
   61  
   62:         extend Strategy::LocalCache
   63:         extend LocalCacheWithRaw
   64        end
   65  
   66:       # Reads multiple values from the cache using a single call to the
   67        # servers for all keys. Options can be passed in the last argument.
   68        def read_multi(*names)
   ..
   79        end
   80  
   81:       # Increment a cached value. This method uses the memcached incr atomic
   82        # operator and can only be used on values written with the :raw option.
   83        # Calling it on a value not stored with :raw will initialize that value
   ..
   93        end
   94  
   95:       # Decrement a cached value. This method uses the memcached decr atomic
   96        # operator and can only be used on values written with the :raw option.
   97        # Calling it on a value not stored with :raw will initialize that value
   ..
  107        end
  108  
  109:       # Clear the entire cache on all memcached servers. This method should
  110:       # be used with care when shared cache is being used.
  111        def clear(options = nil)
  112          @data.flush_all
  ...
  116        end
  117  
  118:       # Get the statistics from the memcached servers.
  119        def stats
  120          @data.stats
  ...
  122  
  123        protected
  124:         # Read an entry from the cache.
  125          def read_entry(key, options) # :nodoc:
  126            deserialize_entry(@data.get(escape_key(key), options))
  ...
  130          end
  131  
  132:         # Write an entry to the cache.
  133          def write_entry(key, entry, options) # :nodoc:
  134            method = options && options[:unless_exist] ? :add : :set
  ...
  136            expires_in = options[:expires_in].to_i
  137            if expires_in > 0 && !options[:raw]
  138:             # Set the memcache expire a few minutes in the future to support race condition ttls on read
  139              expires_in += 5.minutes
  140            end
  ...
  145          end
  146  
  147:         # Delete an entry from the cache.
  148          def delete_entry(key, options) # :nodoc:
  149            @data.delete(escape_key(key))
  ...
  155        private
  156  
  157:         # Memcache keys are binaries. So we need to force their encoding to binary
  158          # before applying the regular expression to ensure we are escaping all
  159          # characters properly.
  ...
  175          end
  176  
  177:       # Provide support for raw values in the local cache strategy.
  178:       module LocalCacheWithRaw # :nodoc:
  179          protected
  180            def read_entry(key, options)
  181              entry = super
  182:             if options[:raw] && local_cache && entry
  183                 entry = deserialize_entry(entry.value)
  184              end
  ...
  188            def write_entry(key, entry, options) # :nodoc:
  189              retval = super
  190:             if options[:raw] && local_cache && retval
  191                raw_entry = Entry.new(entry.value.to_s)
  192                raw_entry.expires_at = entry.expires_at
  193:               local_cache.write_entry(key, raw_entry, options)
  194              end
  195              retval

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache/memory_store.rb:
    2  
    3  module ActiveSupport
    4:   module Cache
    5:     # A cache store implementation which stores everything into memory in the
    6      # same process. If you're running multiple Ruby on Rails server processes
    7      # (which is the case if you're using mongrel_cluster or Phusion Passenger),
    8      # then this means that Rails server process instances won't be able
    9:     # to share cache data with each other and this may not be the most
   10:     # appropriate cache in that scenario.
   11      #
   12:     # This cache has a bounded size specified by the :size options to the
   13:     # initializer (default is 32Mb). When the cache exceeds the allotted size,
   14:     # a cleanup will occur which tries to prune the cache down to three quarters
   15      # of the maximum size by removing the least recently used entries.
   16      #
   ..
   24          @max_size = options[:size] || 32.megabytes
   25          @max_prune_time = options[:max_prune_time] || 2
   26:         @cache_size = 0
   27          @monitor = Monitor.new
   28          @pruning = false
   ..
   33            @data.clear
   34            @key_access.clear
   35:           @cache_size = 0
   36          end
   37        end
   ..
   48        end
   49  
   50:       # To ensure entries fit within the specified memory prune the cache by removing the least
   51        # recently accessed entries.
   52        def prune(target_size, max_time = nil)
   ..
   56            start_time = Time.now
   57            cleanup
   58:           instrument(:prune, target_size, :from => @cache_size) do
   59              keys = synchronize{ @key_access.keys.sort{|a,b| @key_access[a].to_f <=> @key_access[b].to_f} }
   60              keys.each do |key|
   61                delete_entry(key, options)
   62:               return if @cache_size <= target_size || (max_time && Time.now - start_time > max_time)
   63              end
   64            end
   ..
   68        end
   69  
   70:       # Returns true if the cache is currently being pruned.
   71        def pruning?
   72          @pruning
   73        end
   74  
   75:       # Increment an integer value in the cache.
   76        def increment(name, amount = 1, options = nil)
   77          synchronize do
   ..
   87        end
   88  
   89:       # Decrement an integer value in the cache.
   90        def decrement(name, amount = 1, options = nil)
   91          synchronize do
   ..
  113  
  114        def inspect # :nodoc:
  115:         "<##{self.class.name} entries=#{@data.size}, size=#{@cache_size}, options=#{@options.inspect}>"
  116        end
  117  
  118:       # Synchronize calls to the cache. This should be called wherever the underlying cache implementation
  119        # is not thread safe.
  120        def synchronize(&block) # :nodoc:
  ...
  126          PER_ENTRY_OVERHEAD = 240
  127  
  128:         def cached_size(key, entry)
  129            key.to_s.bytesize + entry.size + PER_ENTRY_OVERHEAD
  130          end
  ...
  148              return false if @data.key?(key) && options[:unless_exist]
  149              if old_entry
  150:               @cache_size -= (old_entry.size - entry.size)
  151              else
  152:               @cache_size += cached_size(key, entry)
  153              end
  154              @key_access[key] = Time.now.to_f
  155              @data[key] = entry
  156:             prune(@max_size * 0.75, @max_prune_time) if @cache_size > @max_size
  157              true
  158            end
  ...
  163              @key_access.delete(key)
  164              entry = @data.delete(key)
  165:             @cache_size -= cached_size(key, entry) if entry
  166              !!entry
  167            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache/null_store.rb:
    1  module ActiveSupport
    2:   module Cache
    3:     # A cache store implementation which doesn't actually store anything. Useful in
    4      # development and test environments where you don't want caching turned on but
    5      # need to go through the caching interface.
    6      #
    7:     # This cache does implement the local cache strategy, so values will actually
    8:     # be cached inside blocks that utilize this strategy. See
    9:     # ActiveSupport::Cache::Strategy::LocalCache for more details.
   10      class NullStore < Store
   11        def initialize(options = nil)
   12          super(options)
   13:         extend Strategy::LocalCache
   14        end
   15  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/cache/strategy/local_cache.rb:
    3  
    4  module ActiveSupport
    5:   module Cache
    6      module Strategy
    7:       # Caches that implement LocalCache will be backed by an in-memory cache for the
    8:       # duration of a block. Repeated calls to the cache for the same key will hit the
    9:       # in-memory cache for faster access.
   10:       module LocalCache
   11:         # Class for storing and registering the local caches.
   12:         class LocalCacheRegistry # :nodoc:
   13            extend ActiveSupport::PerThreadRegistry
   14  
   ..
   17            end
   18  
   19:           def cache_for(local_cache_key)
   20:             @registry[local_cache_key]
   21            end
   22  
   23:           def set_cache_for(local_cache_key, value)
   24:             @registry[local_cache_key] = value
   25            end
   26          end
   27  
   28:         # Simple memory backed cache. This cache is not thread safe and is intended only
   29:         # for serving as a temporary memory cache for a single thread.
   30          class LocalStore < Store
   31            def initialize
   ..
   57          end
   58  
   59:         # Use a local cache for the duration of block.
   60:         def with_local_cache
   61:           use_temporary_local_cache(LocalStore.new) { yield }
   62          end
   63  
   ..
   66          # construct them.
   67          class Middleware # :nodoc:
   68:           attr_reader :name, :local_cache_key
   69  
   70:           def initialize(name, local_cache_key)
   71              @name             = name
   72:             @local_cache_key = local_cache_key
   73              @app              = nil
   74            end
   ..
   80  
   81            def call(env)
   82:             LocalCacheRegistry.set_cache_for(local_cache_key, LocalStore.new)
   83              @app.call(env)
   84            ensure
   85:             LocalCacheRegistry.set_cache_for(local_cache_key, nil)
   86            end
   87          end
   88  
   89:         # Middleware class can be inserted as a Rack handler to be local cache for the
   90          # duration of request.
   91          def middleware
   92            @middleware ||= Middleware.new(
   93:             "ActiveSupport::Cache::Strategy::LocalCache",
   94:             local_cache_key)
   95          end
   96  
   97          def clear(options = nil) # :nodoc:
   98:           local_cache.clear(options) if local_cache
   99            super
  100          end
  101  
  102          def cleanup(options = nil) # :nodoc:
  103:           local_cache.clear(options) if local_cache
  104            super
  105          end
  106  
  107          def increment(name, amount = 1, options = nil) # :nodoc:
  108:           value = bypass_local_cache{super}
  109            increment_or_decrement(value, name, amount, options)
  110            value
  ...
  112  
  113          def decrement(name, amount = 1, options = nil) # :nodoc:
  114:           value = bypass_local_cache{super}
  115            increment_or_decrement(value, name, amount, options)
  116            value
  ...
  119          protected
  120            def read_entry(key, options) # :nodoc:
  121:             if local_cache
  122:               entry = local_cache.read_entry(key, options)
  123                unless entry
  124                  entry = super
  125:                 local_cache.write_entry(key, entry, options)
  126                end
  127                entry
  ...
  132  
  133            def write_entry(key, entry, options) # :nodoc:
  134:             local_cache.write_entry(key, entry, options) if local_cache
  135              super
  136            end
  137  
  138            def delete_entry(key, options) # :nodoc:
  139:             local_cache.delete_entry(key, options) if local_cache
  140              super
  141            end
  ...
  143          private
  144            def increment_or_decrement(value, name, amount, options)
  145:             if local_cache
  146:               local_cache.mute do
  147                  if value
  148:                   local_cache.write(name, value, options)
  149                  else
  150:                   local_cache.delete(name, options)
  151                  end
  152                end
  ...
  154            end
  155  
  156:           def local_cache_key
  157:             @local_cache_key ||= "#{self.class.name.underscore}_local_cache_#{object_id}".gsub(/[\/-]/, '_').to_sym
  158            end
  159  
  160:           def local_cache
  161:             LocalCacheRegistry.cache_for(local_cache_key)
  162            end
  163  
  164:           def bypass_local_cache
  165:             use_temporary_local_cache(nil) { yield }
  166            end
  167  
  168:           def use_temporary_local_cache(temporary_cache)
  169:             save_cache = LocalCacheRegistry.cache_for(local_cache_key)
  170              begin
  171:               LocalCacheRegistry.set_cache_for(local_cache_key, temporary_cache)
  172                yield
  173              ensure
  174:               LocalCacheRegistry.set_cache_for(local_cache_key, save_cache)
  175              end
  176            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/callbacks.rb:
  381        end
  382  
  383:       def __callback_runner_name_cache
  384:         @__callback_runner_name_cache ||= ThreadSafe::Cache.new {|cache, kind| cache[kind] = __generate_callback_runner_name(kind) }
  385        end
  386  
  ...
  390  
  391        def __callback_runner_name(kind)
  392:         __callback_runner_name_cache[kind]
  393        end
  394  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/dependencies.rb:
  508      # to its class/module if it implements +before_remove_const+.
  509      #
  510:     # The callback implementation should be restricted to cleaning up caches, etc.
  511      # as the environment will be in an inconsistent state, e.g. other constants
  512      # may have already been unloaded and not accessible.
  ...
  518      end
  519  
  520:     class ClassCache
  521        def initialize
  522:         @store = ThreadSafe::Cache.new
  523        end
  524  
  ...
  544        def store(klass)
  545          return self unless klass.respond_to?(:name)
  546:         raise(ArgumentError, 'anonymous classes cannot be cached') if klass.name.empty?
  547          @store[klass.name] = klass
  548          self
  ...
  554      end
  555  
  556:     Reference = ClassCache.new
  557  
  558      # Store a reference to a class +klass+.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/dependencies/autoload.rb:
   16    #
   17    #     eager_autoload do
   18:   #       autoload :Cache
   19    #     end
   20    #   end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/file_update_checker.rb:
   49  
   50      # Check if any of the entries were updated. If so, the watched and/or
   51:     # updated_at values are cached until the block is executed via +execute+
   52      # or +execute_if_updated+.
   53      def updated?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/inflector/inflections.rb:
   26      # before any of the rules that may already have been loaded.
   27      class Inflections
   28:       @__instance__ = ThreadSafe::Cache.new
   29  
   30        def self.instance(locale = :en)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/key_generator.rb:
   29      def initialize(key_generator)
   30        @key_generator = key_generator
   31:       @cache_keys = ThreadSafe::Cache.new
   32      end
   33  
   ..
   36      # i.e. OpenSSL::Digest::SHA1#block_length
   37      def generate_key(salt, key_size=64)
   38:       @cache_keys["#{salt}#{key_size}"] ||= @key_generator.generate_key(salt, key_size)
   39      end
   40    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/notifications.rb:
  112    #
  113    # WARNING: The instrumentation framework is designed for long-running subscribers,
  114:   # use this feature sparingly because it wipes some internal caches and that has
  115    # a negative impact on performance.
  116    #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/notifications/fanout.rb:
   13        def initialize
   14          @subscribers = []
   15:         @listeners_for = ThreadSafe::Cache.new
   16          super
   17        end
   ..
   46  
   47        def listeners_for(name)
   48:         # this is correctly done double-checked locking (ThreadSafe::Cache's lookups have volatile semantics)
   49          @listeners_for[name] || synchronize do
   50            # use synchronisation when accessing @subscribers

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/activesupport-4.0.3/lib/active_support/per_thread_registry.rb:
   36  
   37        def method_missing(name, *args, &block) # :nodoc:
   38:         # Caches the method definition as a singleton method of the receiver.
   39          define_singleton_method(name) do |*a, &b|
   40            per_thread_registry_instance.public_send(name, *a, &b)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts-as-taggable-on.rb:
   40  require "acts_as_taggable_on/acts_as_taggable_on/core"
   41  require "acts_as_taggable_on/acts_as_taggable_on/collection"
   42: require "acts_as_taggable_on/acts_as_taggable_on/cache"
   43  require "acts_as_taggable_on/acts_as_taggable_on/ownership"
   44  require "acts_as_taggable_on/acts_as_taggable_on/related"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/acts_as_taggable_on/cache.rb:
    1  module ActsAsTaggableOn::Taggable
    2:   module Cache
    3      def self.included(base)
    4:       # Skip adding caching capabilities if table not exists or no cache columns exist
    5:       return unless base.table_exists? && base.tag_types.any? { |context| base.column_names.include?("cached_#{context.to_s.singularize}_list") }
    6  
    7:       base.send :include, ActsAsTaggableOn::Taggable::Cache::InstanceMethods
    8:       base.extend ActsAsTaggableOn::Taggable::Cache::ClassMethods
    9        
   10        base.class_eval do
   11:         before_save :save_cached_tag_list        
   12        end
   13        
   14:       base.initialize_acts_as_taggable_on_cache
   15      end
   16      
   17      module ClassMethods
   18:       def initialize_acts_as_taggable_on_cache      
   19          tag_types.map(&:to_s).each do |tag_type|
   20            class_eval <<-RUBY, __FILE__, __LINE__ + 1
   ..
   28        def acts_as_taggable_on(*args)
   29          super(*args)
   30:         initialize_acts_as_taggable_on_cache
   31        end
   32        
   33        def caching_tag_list_on?(context)
   34:         column_names.include?("cached_#{context.to_s.singularize}_list")
   35        end
   36      end
   37      
   38      module InstanceMethods      
   39:       def save_cached_tag_list
   40          tag_types.map(&:to_s).each do |tag_type|
   41            if self.class.send("caching_#{tag_type.singularize}_list?")
   42:             if tag_list_cache_set_on(tag_type)
   43:               list = tag_list_cache_on(tag_type).to_a.flatten.compact.join(', ')
   44:               self["cached_#{tag_type.singularize}_list"] = list
   45              end
   46            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/acts_as_taggable_on/core.rb:
  235        end
  236  
  237:       def cached_tag_list_on(context)
  238:         self["cached_#{context.to_s.singularize}_list"]
  239        end
  240  
  241:       def tag_list_cache_set_on(context)
  242          variable_name = "@#{context.to_s.singularize}_list"
  243          instance_variable_defined?(variable_name) && !instance_variable_get(variable_name).nil?
  244        end
  245  
  246:       def tag_list_cache_on(context)
  247          variable_name = "@#{context.to_s.singularize}_list"
  248          return instance_variable_get(variable_name) if instance_variable_defined?(variable_name) && instance_variable_get(variable_name)
  ...
  252        def tag_list_on(context)
  253          add_custom_context(context)
  254:         tag_list_cache_on(context)
  255        end
  256  
  ...
  327        def save_tags
  328          tagging_contexts.each do |context|
  329:           next unless tag_list_cache_set_on(context)
  330            # List of currently assigned tag names
  331:           tag_list = tag_list_cache_on(context).uniq
  332  
  333            # Find existing tags or create non-existing tags:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/acts_as_taggable_on/ownership.rb:
   48        end
   49  
   50:       def cached_owned_tag_list_on(context)
   51          variable_name = "@owned_#{context}_list"
   52:         cache = (instance_variable_defined?(variable_name) && instance_variable_get(variable_name)) || instance_variable_set(variable_name, {})
   53        end
   54        
   ..
   56          add_custom_context(context)
   57  
   58:         cache = cached_owned_tag_list_on(context)
   59          
   60:         cache[owner] ||= ActsAsTaggableOn::TagList.new(*owner_tags_on(owner, context).map(&:name))
   61        end
   62        
   ..
   64          add_custom_context(context)
   65          
   66:         cache = cached_owned_tag_list_on(context)
   67  
   68:         cache[owner] = ActsAsTaggableOn::TagList.from(new_list)
   69        end
   70        
   ..
   79        def save_owned_tags
   80          tagging_contexts.each do |context|
   81:           cached_owned_tag_list_on(context).each do |owner, tag_list|
   82              
   83              # Find existing tags or create non-existing tags:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/taggable.rb:
   96          include ActsAsTaggableOn::Taggable::Core
   97          include ActsAsTaggableOn::Taggable::Collection
   98:         include ActsAsTaggableOn::Taggable::Cache
   99          include ActsAsTaggableOn::Taggable::Ownership
  100          include ActsAsTaggableOn::Taggable::Related

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/spec/acts_as_taggable_on/acts_as_taggable_on_spec.rb:
  171    describe 'Caching' do
  172      before(:each) do
  173:       @taggable = CachedModel.new(:name => "Bob Jones")
  174:       @another_taggable = OtherCachedModel.new(:name => "John Smith")
  175      end
  176  
  177:     it "should add saving of tag lists and cached tag lists to the instance" do
  178:       @taggable.should respond_to(:save_cached_tag_list)
  179:       @another_taggable.should respond_to(:save_cached_tag_list)
  180  
  181        @taggable.should respond_to(:save_tags)
  182      end
  183  
  184:     it "should add cached tag lists to the instance if cached column is not present" do
  185:       TaggableModel.new(:name => "Art Kram").should_not respond_to(:save_cached_tag_list)
  186      end
  187  
  188:     it "should generate a cached column checker for each tag type" do
  189:       CachedModel.should respond_to(:caching_tag_list?)
  190:       OtherCachedModel.should respond_to(:caching_language_list?)
  191      end
  192  
  193:     it 'should not have cached tags' do
  194:       @taggable.cached_tag_list.should be_blank
  195:       @another_taggable.cached_language_list.should be_blank
  196      end
  197  
  198:     it 'should cache tags' do
  199        @taggable.update_attributes(:tag_list => 'awesome, epic')
  200:       @taggable.cached_tag_list.should == 'awesome, epic'
  201  
  202        @another_taggable.update_attributes(:language_list => 'ruby, .net')
  203:       @another_taggable.cached_language_list.should == 'ruby, .net'
  204      end
  205  
  206:     it 'should keep the cache' do
  207        @taggable.update_attributes(:tag_list => 'awesome, epic')
  208:       @taggable = CachedModel.find(@taggable)
  209        @taggable.save!
  210:       @taggable.cached_tag_list.should == 'awesome, epic'
  211      end
  212  
  213:     it 'should update the cache' do
  214        @taggable.update_attributes(:tag_list => 'awesome, epic')
  215        @taggable.update_attributes(:tag_list => 'awesome')
  216:       @taggable.cached_tag_list.should == 'awesome'
  217      end
  218  
  219:     it 'should remove the cache' do
  220        @taggable.update_attributes(:tag_list => 'awesome, epic')
  221        @taggable.update_attributes(:tag_list => '')
  222:       @taggable.cached_tag_list.should be_blank
  223      end
  224  
  225      it 'should have a tag list' do
  226        @taggable.update_attributes(:tag_list => 'awesome, epic')
  227:       @taggable = CachedModel.find(@taggable.id)
  228        @taggable.tag_list.sort.should == %w(awesome epic).sort
  229      end
  ...
  231      it 'should keep the tag list' do
  232        @taggable.update_attributes(:tag_list => 'awesome, epic')
  233:       @taggable = CachedModel.find(@taggable.id)
  234        @taggable.save!
  235        @taggable.tag_list.sort.should == %w(awesome epic).sort
  ...
  239    context 'when tagging context ends in an "s" when singular (ex. "status", "glass", etc.)' do
  240     describe 'caching' do
  241:      before  { @taggable = OtherCachedModel.new(:name => "John Smith") }
  242       subject { @taggable }
  243  
  244:      it { should respond_to(:save_cached_tag_list) }
  245:      its(:cached_language_list) { should be_blank }
  246:      its(:cached_status_list)   { should be_blank }
  247:      its(:cached_glass_list)    { should be_blank }
  248  
  249:      context 'language taggings cache after update' do
  250         before  { @taggable.update_attributes(:language_list => 'ruby, .net') }
  251         subject { @taggable }
  252  
  253         its(:language_list)        { should == ['ruby', '.net']}
  254:        its(:cached_language_list) { should == 'ruby, .net' }           # passes
  255         its(:instance_variables)   { should     include((RUBY_VERSION < '1.9' ? '@language_list' : :@language_list)) }
  256       end
  257  
  258:      context 'status taggings cache after update' do
  259         before  { @taggable.update_attributes(:status_list => 'happy, married') }
  260         subject { @taggable }
  261  
  262         its(:status_list)        { should     == ['happy', 'married'] }
  263:        its(:cached_status_list) { should     == 'happy, married'     } # fails
  264:        its(:cached_status_list) { should_not == ''                   } # fails, is blank
  265         its(:instance_variables) { should     include((RUBY_VERSION < '1.9' ? '@status_list' : :@status_list)) }
  266         its(:instance_variables) { should_not include((RUBY_VERSION < '1.9' ? '@statu_list' : :@statu_list))  } # fails, note: one "s"
  ...
  268       end
  269  
  270:      context 'glass taggings cache after update' do
  271         before do
  272           @taggable.update_attributes(:glass_list => 'rectangle, aviator')
  ...
  275         subject { @taggable }
  276         its(:glass_list)         { should     == ['rectangle', 'aviator'] }
  277:        its(:cached_glass_list)  { should     == 'rectangle, aviator'     } # fails
  278:        its(:cached_glass_list)  { should_not == ''                       } # fails, is blank
  279         if RUBY_VERSION < '1.9'
  280           its(:instance_variables) { should     include('@glass_list')      }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/spec/acts_as_taggable_on/taggable_spec.rb:
  164    it "should be able to create tags through the tag list directly" do
  165      @taggable.tag_list_on(:test).add("hello")
  166:     @taggable.tag_list_cache_on(:test).should_not be_empty
  167      @taggable.tag_list_on(:test).should == ["hello"]
  168  
  ...
  511      it "should be able to create tags through the tag list directly" do
  512        @taggable.tag_list_on(:test).add("hello")
  513:       @taggable.tag_list_cache_on(:test).should_not be_empty
  514        @taggable.tag_list_on(:test).should == ["hello"]
  515  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/spec/bm.rb:
   36        t.column :name, :string
   37        t.column :type, :string
   38:       t.column :cached_tag_list, :string
   39      end
   40    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/spec/models.rb:
   13  end
   14  
   15: class CachedModel < ActiveRecord::Base
   16    acts_as_taggable
   17  end
   18  
   19: class OtherCachedModel < ActiveRecord::Base
   20    acts_as_taggable_on :languages, :statuses, :glasses
   21  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/spec/schema.rb:
   32    end
   33    
   34:   create_table :cached_models, :force => true do |t|
   35      t.column :name, :string
   36      t.column :type, :string
   37:     t.column :cached_tag_list, :string
   38    end
   39    
   40:   create_table :other_cached_models, :force => true do |t|
   41      t.column :name, :string
   42      t.column :type, :string
   43:     t.column :cached_language_list, :string    
   44:     t.column :cached_status_list, :string
   45:     t.column :cached_glass_list, :string
   46    end
   47    

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/addressable-2.3.5/lib/addressable/uri.rb:
 1982      # specifications, and also to deal with caching issues since several
 1983      # different URIs may represent the same resource and should not be
 1984:     # cached multiple times.
 1985      #
 1986      # @return [Addressable::URI] The normalized URI.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/arel-4.0.2/History.txt:
   10  * Enhancements
   11  
   12:   * Cache visitor dispatch on a per-visitor basis
   13    * Improve performance of #uniq across a large number of nodes
   14  
   ..
   30  * Bug Fixes
   31  
   32:   * The database connection caches visitors for generating SQL.
   33    * FALSE and TRUE nodes can be constructed.
   34    * Fixed ORDER BY / LIMIT clauses for UPDATE statements in Oracle.
   ..
   51  * Bug Fixes
   52  
   53:   * Visitors can define their own cache strategy so caches are not shared.
   54      Fixes #57
   55    * Informix support fixed.  Thanks Khronos.
   ..
  104    replacement.
  105  
  106:   * Arel::Table.table_cache is deprecated and will be removed in 3.0.0 with no
  107    replacement.
  108  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/arel-4.0.2/lib/arel/table.rb:
  150      end
  151  
  152:     @@table_cache = nil
  153:     def self.table_cache engine # :nodoc:
  154        if $VERBOSE
  155          warn <<-eowarn
  156: (#{caller.first}) Arel::Table.table_cache is deprecated and will be removed in
  157  Arel 4.0.0 with no replacement.  PEW PEW PEW!!!
  158          eowarn
  159        end
  160:       @@table_cache ||= Hash[engine.connection.tables.map { |x| [x,true] }]
  161      end
  162    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/arel-4.0.2/lib/arel/visitors/to_sql.rb:
   34        #  0000 trace            8
   35        #  0002 trace            1
   36:       #  0004 getinlinecache   11, <ic:0>
   37        #  0007 getconstant      :BAR
   38:       #  0009 setinlinecache   <ic:0>
   39        #  0011 trace            16
   40        #  0013 leave
   ..
   56        def initialize connection
   57          @connection     = connection
   58:         @schema_cache   = connection.schema_cache
   59          @quoted_tables  = {}
   60          @quoted_columns = {}
   ..
  132  
  133        def table_exists? name
  134:         @schema_cache.table_exists? name
  135        end
  136  
  ...
  142          return nil unless table_exists? table
  143  
  144:         column_cache(table)[name]
  145        end
  146  
  147:       def column_cache(table)
  148:         @schema_cache.columns_hash(table)
  149        end
  150  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/arel-4.0.2/test/support/fake_record.rb:
   56      end
   57  
   58:     def schema_cache
   59        self
   60      end
   ..
  105      end
  106  
  107:     def schema_cache
  108        connection
  109      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/CHANGELOG.adoc:
  117    * emit message that tilt gem is required to use custom backends if missing (#433)
  118    * use attributes for version and last updated messages in footer (#596)
  119:   * added a basic template cache (#438)
  120    * include line info in several of the warnings (for lists and tables)
  121    * print warning/error messages using warn (#556)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/lib/asciidoctor/document.rb:
  732      end
  733      
  734:     render_options[:template_cache] = @options.fetch(:template_cache, true)
  735      render_options[:backend] = @attributes.fetch('backend', 'html5')
  736      render_options[:template_engine] = @options[:template_engine]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/lib/asciidoctor/extensions.rb:
   68        @postprocessors = []
   69        @include_processors = []
   70:       @include_processor_cache = {}
   71        @block_delimiters = {}
   72        @blocks = {}
   73:       @block_processor_cache = {}
   74        @block_macros = {}
   75:       @block_macro_processor_cache = {}
   76        @inline_macros = {}
   77:       @inline_macro_processor_cache = {}
   78  
   79        Extensions.registered.each do |extension|
   ..
  168          processor.new(*args)
  169        end
  170:       # QUESTION do we need/want the cache?
  171        #@include_processors.map do |processor|
  172:       #  @include_processor_cache[processor] ||= processor.new(*args)
  173        #end
  174      end
  ...
  210  
  211      def load_block_processor name, *args
  212:       @block_processor_cache[name] ||= @blocks[name].new(name.to_sym, *args)
  213      end
  214  
  ...
  231  
  232      def load_block_macro_processor name, *args
  233:       @block_macro_processor_cache[name] ||= @block_macros[name].new(name, *args)
  234      end
  235  
  ...
  249  
  250      def load_inline_macro_processor name, *args
  251:       @inline_macro_processor_cache[name] ||= @inline_macros[name].new(name, *args)
  252      end
  253  
  ...
  271  
  272      def reset
  273:       @block_processor_cache = {}
  274:       @block_macro_processor_cache = {}
  275:       @inline_macro_processor_cache = {}
  276      end
  277    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/lib/asciidoctor/reader.rb:
  105    #
  106    # If a previous call to this method resulted in a value of false,
  107:   # immediately returned the cached value. Otherwise, delegate to
  108    # peek_line to determine if there is a next line available.
  109    #
  ...
  827          target_type = :uri
  828          include_file = path = target
  829:         if @document.attributes.has_key? 'cache-uri'
  830:           # caching requires the open-uri-cached gem to be installed
  831            # processing will be automatically aborted if these libraries can't be opened
  832:           Helpers.require_library 'open-uri/cached', 'open-uri-cached'
  833          else
  834            Helpers.require_library 'open-uri'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/lib/asciidoctor/renderer.rb:
    9  
   10    attr_reader :compact
   11:   attr_reader :cache
   12  
   13:   @@global_cache = nil
   14  
   15    # Public: Initialize an Asciidoctor::Renderer object.
   ..
   20      @views = {}
   21      @compact = options[:compact]
   22:     @cache = nil
   23  
   24      backend = options[:backend]
   ..
   45        Helpers.require_library 'tilt', true
   46  
   47:       if (template_cache = options[:template_cache]) === true
   48:         # FIXME probably want to use our own cache object for more control
   49:         @cache = (@@global_cache ||= TemplateCache.new)
   50:       elsif template_cache
   51:         @cache = template_cache
   52        end
   53  
   ..
   85  
   86          # skip scanning folder if we've already done it for same backend/engine
   87:         if @cache && @cache.cached?(:scan, template_dir, template_glob)
   88:           @views.update(@cache.fetch :scan, template_dir, template_glob)
   89            next
   90          end
   ..
  110            next unless Tilt.registered? ext_name
  111            opts = view_opts[ext_name.to_sym]
  112:           if @cache
  113:             @views[view_name] = scan_result[view_name] = @cache.fetch(:view, template) {
  114                Tilt.new(template, nil, opts)
  115              }
  ...
  120  
  121          require helpers unless helpers.nil?
  122:         @cache.store(scan_result, :scan, template_dir, template_glob) if @cache
  123        end
  124      end
  ...
  145  
  146    def register_view(view_name, tilt_template)
  147:     # TODO need to figure out how to cache this
  148      @views[view_name] = tilt_template
  149    end
  ...
  169  
  170    # TODO better name for this method (and/or field)
  171:   def self.global_cache
  172:     @@global_cache
  173    end
  174  
  175    # TODO better name for this method (and/or field)
  176:   def self.reset_global_cache
  177:     @@global_cache.clear if @@global_cache
  178    end
  179  
  ...
  224  end
  225  
  226: class TemplateCache
  227:   attr_reader :cache
  228  
  229    def initialize
  230:     @cache = {}
  231    end
  232  
  233:   # check if a key is available in the cache
  234:   def cached? *key
  235:     @cache.has_key? key
  236    end
  237  
  238:   # retrieves an item from the cache stored in the cache key
  239    # if a block is given, the block is called and the return
  240:   # value stored in the cache under the specified key
  241    def fetch(*key)
  242      if block_given?
  243:       @cache[key] ||= yield
  244      else
  245:       @cache[key]
  246      end
  247    end
  248  
  249:   # stores an item in the cache under the specified key
  250    def store(value, *key)
  251:     @cache[key] = value
  252    end
  253  
  254:   # Clears the cache
  255    def clear
  256:     @cache = {}
  257    end
  258  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/README.adoc:
  449    * emit message that tilt gem is required to use custom backends if missing (#433)
  450    * use attributes for version and last updated messages in footer (#596)
  451:   * added a basic template cache (#438)
  452    * include line info in several of the warnings (for lists and tables)
  453    * print warning/error messages using warn (#556)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/asciidoctor-0.1.4/test/renderer_test.rb:
   26    context 'View options' do
   27      test 'should set Haml format to html5 for html5 backend' do
   28:       doc = Asciidoctor::Document.new [], :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'), :template_cache => false
   29        assert doc.renderer.views['block_paragraph'].is_a? Tilt::HamlTemplate
   30        assert_equal :html5, doc.renderer.views['block_paragraph'].options[:format]
   ..
   32  
   33      test 'should set Haml format to xhtml for docbook backend' do
   34:       doc = Asciidoctor::Document.new [], :backend => 'docbook45', :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'), :template_cache => false
   35        assert doc.renderer.views['block_paragraph'].is_a? Tilt::HamlTemplate
   36        assert_equal :xhtml, doc.renderer.views['block_paragraph'].options[:format]
   ..
   40    context 'Custom backends' do
   41      test 'should load Haml templates for default backend' do
   42:       doc = Asciidoctor::Document.new [], :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'), :template_cache => false
   43        assert doc.renderer.views['block_paragraph'].is_a? Tilt::HamlTemplate
   44        assert doc.renderer.views['block_paragraph'].file.end_with? 'block_paragraph.html.haml'
   ..
   48  
   49      test 'should load Haml templates for docbook45 backend' do
   50:       doc = Asciidoctor::Document.new [], :backend => 'docbook45', :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'), :template_cache => false
   51        assert doc.renderer.views['block_paragraph'].is_a? Tilt::HamlTemplate
   52        assert doc.renderer.views['block_paragraph'].file.end_with? 'block_paragraph.xml.haml'
   ..
   68        EOS
   69  
   70:       output = render_embedded_string input, :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'), :template_cache => false
   71        assert_xpath '/*[@class="sect1"]/*[@class="sectionbody"]/p', output, 1
   72        assert_xpath '//aside', output, 1
   ..
   76      end
   77  
   78:     test 'should use built-in global cache to cache templates' do
   79:       # clear out any cache, just to be sure
   80:       Asciidoctor::Renderer.reset_global_cache
   81  
   82        template_dir = File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml')
   83        doc = Asciidoctor::Document.new [], :template_dir => template_dir
   84        doc.renderer
   85:       template_cache = Asciidoctor::Renderer.global_cache
   86:       assert template_cache.is_a? Asciidoctor::TemplateCache
   87:       cache = template_cache.cache
   88:       assert_not_nil cache
   89:       assert cache.size > 0
   90  
   91:       # ensure we don't scan a second time (using the view option hash to mark the cached view object)
   92        template_path = Asciidoctor::PathResolver.new.system_path(File.join(template_dir, 'html5', 'block_paragraph.html.haml'), nil)
   93:       view = template_cache.fetch(:view, template_path)
   94        view.options[:foo] = 'bar'
   95        doc = Asciidoctor::Document.new [], :template_dir => template_dir
   96        doc.renderer
   97:       template_cache = Asciidoctor::Renderer.global_cache
   98:       view = template_cache.fetch(:view, template_path)
   99        assert_equal 'bar', view.options[:foo]
  100  
  101        # clean up
  102:       Asciidoctor::Renderer.reset_global_cache
  103      end
  104  
  105:     test 'should use custom cache to cache templates' do
  106        template_dir = File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml')
  107        template_path = Asciidoctor::PathResolver.new.system_path(File.join(template_dir, 'html5', 'block_paragraph.html.haml'), nil)
  108        doc = Asciidoctor::Document.new [], :template_dir => template_dir,
  109:           :template_cache => Asciidoctor::TemplateCache.new
  110:       template_cache = doc.renderer.cache
  111:       assert_not_nil template_cache
  112:       cache = template_cache.cache
  113:       assert_not_nil cache
  114:       assert cache.size > 0
  115:       view = template_cache.fetch(:view, template_path)
  116        assert view.is_a? Tilt::HamlTemplate
  117      end
  118  
  119:     test 'should be able to disable template cache' do
  120        doc = Asciidoctor::Document.new [], :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'haml'),
  121:           :template_cache => false
  122:       assert_nil doc.renderer.cache
  123      end
  124  
  125      test 'should load Slim templates for default backend' do
  126:       doc = Asciidoctor::Document.new [], :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'slim'), :template_cache => false
  127        assert doc.renderer.views['block_paragraph'].is_a? Slim::Template
  128        assert doc.renderer.views['block_paragraph'].file.end_with? 'block_paragraph.html.slim'
  ...
  132  
  133      test 'should load Slim templates for docbook45 backend' do
  134:       doc = Asciidoctor::Document.new [], :backend => 'docbook45', :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'slim'), :template_cache => false
  135        assert doc.renderer.views['block_paragraph'].is_a? Slim::Template
  136        assert doc.renderer.views['block_paragraph'].file.end_with? 'block_paragraph.xml.slim'
  ...
  152        EOS
  153  
  154:       output = render_embedded_string input, :template_dir => File.join(File.dirname(__FILE__), 'fixtures', 'custom-backends', 'slim'), :template_cache => false
  155        assert_xpath '/*[@class="sect1"]/*[@class="sectionbody"]/p', output, 1
  156        assert_xpath '//aside', output, 1

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/axiom-types-0.0.5/lib/axiom/types.rb:
   22      Contradiction = ->(_value) { true }.freeze
   23  
   24:     # Cache the type inference lookup by object
   25:     @inference_cache = Hash.new do |cache, object|
   26        type = nil
   27        Type.descendants.detect do |descendant|
   28          type = descendant.infer(object)
   29        end
   30:       cache[object] = type
   31      end
   32  
   ..
   43      # @api public
   44      def self.infer(object)
   45:       @inference_cache[object]
   46      end
   47  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/axiom-types-0.0.5/spec/spec_helper.rb:
   39    config.after do
   40      Axiom::Types::Type.descendants.replace(@original_descendants)
   41:     Axiom::Types.instance_variable_get(:@inference_cache).clear
   42    end
   43  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/192/iseq.h:
   79      struct iseq_compile_data_ensure_node_stack *ensure_node_stack;
   80      int loopval_popped;	/* used by NODE_BREAK */
   81:     int cached_const;
   82      struct iseq_compile_data_storage *storage_head;
   83      struct iseq_compile_data_storage *storage_current;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/192/method.h:
   92  rb_method_entry_t *rb_method_entry(VALUE klass, ID id);
   93  
   94: rb_method_entry_t *rb_method_entry_get_without_cache(VALUE klass, ID id);
   95  rb_method_entry_t *rb_method_entry_set(VALUE klass, ID mid, const rb_method_entry_t *, rb_method_flag_t noex);
   96  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/192/vm_core.h:
  124  
  125  typedef struct rb_compile_option_struct {
  126:     int inline_const_cache;
  127      int peephole_optimization;
  128      int tailcall_optimization;
  ...
  135  } rb_compile_option_t;
  136  
  137: struct iseq_inline_cache_entry {
  138      VALUE ic_vmstat;
  139      VALUE ic_class;
  ...
  184      int local_size;
  185  
  186:     struct iseq_inline_cache_entry *ic_entries;
  187      int ic_size;
  188  
  ...
  241       * NODE *node;
  242       * void *special_block_builder;
  243:      * void *cached_special_block_builder;
  244:      * VALUE cached_special_block;
  245       */
  246  
  ...
  365  };
  366  
  367: #define RUBY_VM_VALUE_CACHE_SIZE 0x1000
  368: #define USE_VALUE_CACHE 0
  369  
  370  struct rb_unblock_callback {
  ...
  438      /* storage */
  439      st_table *local_storage;
  440: #if USE_VALUE_CACHE
  441:     VALUE value_cache[RUBY_VM_VALUE_CACHE_SIZE + 1];
  442:     VALUE *value_cache_ptr;
  443  #endif
  444  
  ...
  571    (VM_FRAME_TYPE(cfp) == VM_FRAME_MAGIC_CFUNC)
  572  
  573: /* inline cache */
  574: typedef struct iseq_inline_cache_entry *IC;
  575  
  576  extern VALUE ruby_vm_global_state_version;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/192/vm_insnhelper.h:
  138  #define SET_GLOBAL(entry, val)  rb_gvar_set((struct rb_global_entry*)entry, val)
  139  
  140: #define GET_CONST_INLINE_CACHE(dst) ((IC) * (GET_PC() + (dst) + 2))
  141  
  142  /**********************************************************/

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/192/vm_opts.h:
   23  #define OPT_PEEPHOLE_OPTIMIZATION    1
   24  #define OPT_SPECIALISED_INSTRUCTION  1
   25: #define OPT_INLINE_CONST_CACHE       1
   26  
   27  
   ..
   37  /* VM running option */
   38  #define OPT_CHECKED_RUN              1
   39: #define OPT_INLINE_METHOD_CACHE      1
   40  #define OPT_BLOCKINLINING            0
   41  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/193/iseq.h:
   33  
   34  struct rb_compile_option_struct {
   35:     int inline_const_cache;
   36      int peephole_optimization;
   37      int tailcall_optimization;
   ..
   90      struct iseq_compile_data_ensure_node_stack *ensure_node_stack;
   91      int loopval_popped;	/* used by NODE_BREAK */
   92:     int cached_const;
   93      struct iseq_compile_data_storage *storage_head;
   94      struct iseq_compile_data_storage *storage_current;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/193/method.h:
   92  rb_method_entry_t *rb_method_entry(VALUE klass, ID id);
   93  
   94: rb_method_entry_t *rb_method_entry_get_without_cache(VALUE klass, ID id);
   95  rb_method_entry_t *rb_method_entry_set(VALUE klass, ID mid, const rb_method_entry_t *, rb_method_flag_t noex);
   96  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/193/vm_core.h:
  126  typedef struct rb_compile_option_struct rb_compile_option_t;
  127  
  128: struct iseq_inline_cache_entry {
  129      VALUE ic_vmstat;
  130      VALUE ic_class;
  ...
  186      int local_size;
  187  
  188:     struct iseq_inline_cache_entry *ic_entries;
  189      int ic_size;
  190  
  ...
  243       * NODE *node;
  244       * void *special_block_builder;
  245:      * void *cached_special_block_builder;
  246:      * VALUE cached_special_block;
  247       */
  248  
  ...
  590    (VM_FRAME_TYPE(cfp) == VM_FRAME_MAGIC_CFUNC)
  591  
  592: /* inline cache */
  593: typedef struct iseq_inline_cache_entry *IC;
  594  
  595  void rb_vm_change_state(void);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/193/vm_insnhelper.h:
  138  #define SET_GLOBAL(entry, val)  rb_gvar_set((struct rb_global_entry*)(entry), (val))
  139  
  140: #define GET_CONST_INLINE_CACHE(dst) ((IC) * (GET_PC() + (dst) + 2))
  141  
  142  /**********************************************************/
  ...
  214  #define INC_VM_STATE_VERSION() do { \
  215      ruby_vm_global_state_version = (ruby_vm_global_state_version + 1); \
  216:     if (ruby_vm_global_state_version == 0) vm_clear_all_cache(); \
  217  } while (0)
  218: static void vm_clear_all_cache(void);
  219  
  220  #endif /* RUBY_INSNHELPER_H */

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/binding_of_caller-0.7.2/ext/binding_of_caller/ruby_headers/193/vm_opts.h:
   23  #define OPT_PEEPHOLE_OPTIMIZATION    1
   24  #define OPT_SPECIALISED_INSTRUCTION  1
   25: #define OPT_INLINE_CONST_CACHE       1
   26  
   27  
   ..
   37  /* VM running option */
   38  #define OPT_CHECKED_RUN              1
   39: #define OPT_INLINE_METHOD_CACHE      1
   40  #define OPT_BLOCKINLINING            0
   41  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/.gitignore:
    1  *.gem
    2: .sass-cache
    3  bootstrap.css
    4  bootstrap-responsive.css
    .
    9  # Ignore bundler config
   10  /.bundle
   11: /vendor/cache
   12  /vendor/bundle
   13  tmp/

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/tasks/converter.rb:
   47                      fonts: 'vendor/assets/fonts/bootstrap' }
   48      @save_at.each { |_,v| FileUtils.mkdir_p(v) }
   49:     @cache_path = 'tmp/converter-cache'
   50:     @logger     = Logger.new(repo: @repo_url, branch: @branch, branch_sha: @branch_sha, save_at: @save_at, cache_path: @cache_path)
   51    end
   52  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/tasks/converter/logger.rb:
    9        puts " branch : #{env[:branch]} #{dark "#{env[:repo]}/tree/#{env[:branch_sha]}"}"
   10        puts " save to: #{@env[:save_at].to_json}"
   11:       puts " twbs cache: #{@env[:cache_path]}"
   12        puts dark "-" * 60
   13      end
   ..
   33      end
   34  
   35:     def log_http_get_file(url, cached = false)
   36:       s = "  #{'CACHED ' if cached}GET #{url}..."
   37:       if cached
   38          puts dark green s
   39        else
   ..
   42      end
   43  
   44:     def log_http_get_files(files, from, cached = false)
   45:       s = "  #{'CACHED ' if cached}GET #{files.length} files from #{from} #{files * ' '}..."
   46:       if cached
   47          puts dark green s
   48        else

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/tasks/converter/network.rb:
   36      def read_files(path, files)
   37        full_path = "#{@git_raw_host}/#@repo/#@branch_sha/#{path}"
   38:       if (contents = read_cached_files(path, files))
   39          log_http_get_files files, full_path, true
   40        else
   ..
   47            }
   48          end.each(&:join)
   49:         write_cached_files path, contents
   50        end
   51        contents
   52      end
   53  
   54:     def read_cached_files(path, files)
   55:       full_path = "#@cache_path/#@branch_sha/#{path}"
   56        contents  = {}
   57        if File.directory?(full_path)
   ..
   63      end
   64  
   65:     def write_cached_files(path, files)
   66:       full_path = "./#@cache_path/#@branch_sha/#{path}"
   67        FileUtils.mkdir_p full_path
   68        files.each do |name, content|
   ..
   73  
   74      def get_file(url)
   75:       cache_path = "./#@cache_path#{URI(url).path}"
   76:       FileUtils.mkdir_p File.dirname(cache_path)
   77:       if File.exists?(cache_path)
   78          log_http_get_file url, true
   79:         File.read(cache_path, mode: 'rb')
   80        else
   81          log_http_get_file url, false
   82          content = open(url).read
   83:         File.open(cache_path, 'wb') { |f| f.write content }
   84          content
   85        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/test/dummy/config/environments/development.rb:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Do not eager load code on boot.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/test/dummy/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests.
    5:   config.cache_classes = true
    6  
    7    # Eager load code on boot. This eager loads most of Rails and
    .
   15    config.action_controller.perform_caching = true
   16  
   17:   # Enable Rack::Cache to put a simple HTTP cache in front of your application
   18:   # Add `rack-cache` to your Gemfile before enabling this.
   19    # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
   20:   # config.action_dispatch.rack_cache = true
   21  
   22    # Disable Rails's static asset server (Apache or nginx will already do this).
   ..
   52    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   53  
   54:   # Use a different cache store in production.
   55:   # config.cache_store = :mem_cache_store
   56  
   57    # Enable serving of images, stylesheets, and JavaScripts from an asset server.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/test/dummy/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Do not eager load code on boot. This avoids loading your whole application
   ..
   13    config.eager_load = false
   14  
   15:   # Configure static asset server for tests with Cache-Control for performance.
   16    config.serve_static_assets  = true
   17:   config.static_cache_control = "public, max-age=3600"
   18  
   19    # Show full error reports and disable caching.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/bootstrap-sass-3.0.3.0/test/support/integration_test.rb:
    5    def setup
    6      super
    7:     %x[rm -rf test/dummy/tmp/cache]
    8    end
    9  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/builder-3.1.4/lib/builder/xmlbase.rb:
   13  
   14      class << self
   15:       attr_accessor :cache_method_calls
   16      end
   17  
   ..
   83      # Create XML markup based on the name of the method.  This method
   84      # is never invoked directly, but is called for each markup method
   85:     # in the markup block that isn't cached.
   86      def method_missing(sym, *args, &block)
   87:       cache_method_call(sym) if ::Builder::XmlBase.cache_method_calls
   88        tag!(sym, *args, &block)
   89      end
   ..
  173      end
  174  
  175:     # If XmlBase.cache_method_calls = true, we dynamicly create the method
  176      # missed as an instance method on the XMLBase object. Because XML
  177      # documents are usually very repetative in nature, the next node will
  ...
  179      # method_missing is very slow, this speeds up document generation
  180      # significantly.
  181:     def cache_method_call(sym)
  182        class << self; self; end.class_eval do
  183          define_method(sym) do |*args, &block|
  ...
  188    end
  189  
  190:   XmlBase.cache_method_calls = true
  191  
  192  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/builder-3.1.4/test/test_method_caching.rb:
   16  class TestMethodCaching < Test::Unit::TestCase
   17  
   18:   # We can directly ask if xml object responds to the cache_me or
   19:   # do_not_cache_me methods because xml is derived from BasicObject
   20    # (and repond_to? is not defined in BasicObject).
   21    #
   ..
   26    def teardown
   27      super
   28:     Builder::XmlBase.cache_method_calls = true
   29    end
   30  
   ..
   37    def test_method_call_caching
   38      xml = Builder::XmlMarkup.new
   39:     xml.cache_me
   40  
   41      def xml.method_missing(*args)
   ..
   43      end
   44      assert_nothing_raised do
   45:       xml.cache_me
   46      end
   47    end
   48  
   49    def test_method_call_caching_disabled
   50:     Builder::XmlBase.cache_method_calls = false
   51      xml = Builder::XmlMarkup.new
   52:     xml.do_not_cache_me
   53  
   54      def xml.method_missing(*args)
   ..
   56      end
   57      assert_raise(StandardError, /SHOULD BE CALLED/) do
   58:       xml.do_not_cache_me
   59      end
   60    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/capybara-2.1.0/lib/capybara/rack_test/browser.rb:
   56      @current_port = new_uri.port
   57  
   58:     reset_cache!
   59      send(method, new_uri.to_s, attributes, env.merge(options[:headers] || {}))
   60    end
   ..
   73    end
   74  
   75:   def reset_cache!
   76      @dom = nil
   77    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/capybara-2.1.0/lib/capybara/spec/public/jquery-ui.js:
   82  "original"&&!/^(?:r|a|f)/.test(this.element.css("position")))this.element[0].style.position="relative";this.options.addClasses&&this.element.addClass("ui-draggable");this.options.disabled&&this.element.addClass("ui-draggable-disabled");this._mouseInit()},destroy:function(){if(this.element.data("draggable")){this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");this._mouseDestroy();return this}},_mouseCapture:function(a){var b=
   83  this.options;if(this.helper||b.disabled||d(a.target).is(".ui-resizable-handle"))return false;this.handle=this._getHandle(a);if(!this.handle)return false;if(b.iframeFix)d(b.iframeFix===true?"iframe":b.iframeFix).each(function(){d('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1E3}).css(d(this).offset()).appendTo("body")});return true},_mouseStart:function(a){var b=this.options;
   84: this.helper=this._createHelper(a);this._cacheHelperProportions();if(d.ui.ddmanager)d.ui.ddmanager.current=this;this._cacheMargins();this.cssPosition=this.helper.css("position");this.scrollParent=this.helper.scrollParent();this.offset=this.positionAbs=this.element.offset();this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left};d.extend(this.offset,{click:{left:a.pageX-this.offset.left,top:a.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});
   85: this.originalPosition=this.position=this._generatePosition(a);this.originalPageX=a.pageX;this.originalPageY=a.pageY;b.cursorAt&&this._adjustOffsetFromHelper(b.cursorAt);b.containment&&this._setContainment();if(this._trigger("start",a)===false){this._clear();return false}this._cacheHelperProportions();d.ui.ddmanager&&!b.dropBehaviour&&d.ui.ddmanager.prepareOffsets(this,a);this.helper.addClass("ui-draggable-dragging");this._mouseDrag(a,true);d.ui.ddmanager&&d.ui.ddmanager.dragStart(this,a);return true},
   86  _mouseDrag:function(a,b){this.position=this._generatePosition(a);this.positionAbs=this._convertPositionTo("absolute");if(!b){b=this._uiHash();if(this._trigger("drag",a,b)===false){this._mouseUp({});return false}this.position=b.position}if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";d.ui.ddmanager&&d.ui.ddmanager.drag(this,a);return false},_mouseStop:function(a){var b=
   87  false;if(d.ui.ddmanager&&!this.options.dropBehaviour)b=d.ui.ddmanager.drop(this,a);if(this.dropped){b=this.dropped;this.dropped=false}if((!this.element[0]||!this.element[0].parentNode)&&this.options.helper=="original")return false;if(this.options.revert=="invalid"&&!b||this.options.revert=="valid"&&b||this.options.revert===true||d.isFunction(this.options.revert)&&this.options.revert.call(this.element,b)){var c=this;d(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,
   ..
   90  a.css("position","absolute");return a},_adjustOffsetFromHelper:function(a){if(typeof a=="string")a=a.split(" ");if(d.isArray(a))a={left:+a[0],top:+a[1]||0};if("left"in a)this.offset.click.left=a.left+this.margins.left;if("right"in a)this.offset.click.left=this.helperProportions.width-a.right+this.margins.left;if("top"in a)this.offset.click.top=a.top+this.margins.top;if("bottom"in a)this.offset.click.top=this.helperProportions.height-a.bottom+this.margins.top},_getParentOffset:function(){this.offsetParent=
   91  this.helper.offsetParent();var a=this.offsetParent.offset();if(this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0])){a.left+=this.scrollParent.scrollLeft();a.top+=this.scrollParent.scrollTop()}if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&d.browser.msie)a={top:0,left:0};return{top:a.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:a.left+(parseInt(this.offsetParent.css("borderLeftWidth"),
   92: 10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.element.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}else return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),
   93: 10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var a=this.options;if(a.containment=="parent")a.containment=this.helper[0].parentNode;if(a.containment=="document"||a.containment=="window")this.containment=[a.containment=="document"?0:d(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,a.containment=="document"?0:d(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,
   94  (a.containment=="document"?0:d(window).scrollLeft())+d(a.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(a.containment=="document"?0:d(window).scrollTop())+(d(a.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(a.containment)&&a.containment.constructor!=Array){a=d(a.containment);var b=a[0];if(b){a.offset();var c=d(b).css("overflow")!=
   95  "hidden";this.containment=[(parseInt(d(b).css("borderLeftWidth"),10)||0)+(parseInt(d(b).css("paddingLeft"),10)||0),(parseInt(d(b).css("borderTopWidth"),10)||0)+(parseInt(d(b).css("paddingTop"),10)||0),(c?Math.max(b.scrollWidth,b.offsetWidth):b.offsetWidth)-(parseInt(d(b).css("borderLeftWidth"),10)||0)-(parseInt(d(b).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(c?Math.max(b.scrollHeight,b.offsetHeight):b.offsetHeight)-(parseInt(d(b).css("borderTopWidth"),
   ..
  102  c)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}});d.extend(d.ui.draggable,{version:"1.8.16"});d.ui.plugin.add("draggable","connectToSortable",{start:function(a,b){var c=d(this).data("draggable"),f=c.options,e=d.extend({},b,{item:c.element});c.sortables=[];d(f.connectToSortable).each(function(){var h=d.data(this,"sortable");if(h&&!h.options.disabled){c.sortables.push({instance:h,shouldRevert:h.options.revert});
  103  h.refreshPositions();h._trigger("activate",a,e)}})},stop:function(a,b){var c=d(this).data("draggable"),f=d.extend({},b,{item:c.element});d.each(c.sortables,function(){if(this.instance.isOver){this.instance.isOver=0;c.cancelHelperRemoval=true;this.instance.cancelHelperRemoval=false;if(this.shouldRevert)this.instance.options.revert=true;this.instance._mouseStop(a);this.instance.options.helper=this.instance.options._helper;c.options.helper=="original"&&this.instance.currentItem.css({top:"auto",left:"auto"})}else{this.instance.cancelHelperRemoval=
  104: false;this.instance._trigger("deactivate",a,f)}})},drag:function(a,b){var c=d(this).data("draggable"),f=this;d.each(c.sortables,function(){this.instance.positionAbs=c.positionAbs;this.instance.helperProportions=c.helperProportions;this.instance.offset.click=c.offset.click;if(this.instance._intersectsWith(this.instance.containerCache)){if(!this.instance.isOver){this.instance.isOver=1;this.instance.currentItem=d(f).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item",true);
  105  this.instance.options._helper=this.instance.options.helper;this.instance.options.helper=function(){return b.helper[0]};a.target=this.instance.currentItem[0];this.instance._mouseCapture(a,true);this.instance._mouseStart(a,true,true);this.instance.offset.click.top=c.offset.click.top;this.instance.offset.click.left=c.offset.click.left;this.instance.offset.parent.left-=c.offset.parent.left-this.instance.offset.parent.left;this.instance.offset.parent.top-=c.offset.parent.top-this.instance.offset.parent.top;
  106  c._trigger("toSortable",a);c.dropped=this.instance.element;c.currentItem=c.element;this.instance.fromOutside=c}this.instance.currentItem&&this.instance._mouseDrag(a)}else if(this.instance.isOver){this.instance.isOver=0;this.instance.cancelHelperRemoval=true;this.instance.options.revert=false;this.instance._trigger("out",a,this.instance._uiHash(this.instance));this.instance._mouseStop(a,true);this.instance.options.helper=this.instance.options._helper;this.instance.currentItem.remove();this.instance.placeholder&&
  ...
  167  this._renderProxy();c=m(this.helper.css("left"));var f=m(this.helper.css("top"));if(a.containment){c+=e(a.containment).scrollLeft()||0;f+=e(a.containment).scrollTop()||0}this.offset=this.helper.offset();this.position={left:c,top:f};this.size=this._helper?{width:d.outerWidth(),height:d.outerHeight()}:{width:d.width(),height:d.height()};this.originalSize=this._helper?{width:d.outerWidth(),height:d.outerHeight()}:{width:d.width(),height:d.height()};this.originalPosition={left:c,top:f};this.sizeDiff=
  168  {width:d.outerWidth()-d.width(),height:d.outerHeight()-d.height()};this.originalMousePosition={left:b.pageX,top:b.pageY};this.aspectRatio=typeof a.aspectRatio=="number"?a.aspectRatio:this.originalSize.width/this.originalSize.height||1;a=e(".ui-resizable-"+this.axis).css("cursor");e("body").css("cursor",a=="auto"?this.axis+"-resize":a);d.addClass("ui-resizable-resizing");this._propagate("start",b);return true},_mouseDrag:function(b){var a=this.helper,c=this.originalMousePosition,d=this._change[this.axis];
  169: if(!d)return false;c=d.apply(this,[b,b.pageX-c.left||0,b.pageY-c.top||0]);this._updateVirtualBoundaries(b.shiftKey);if(this._aspectRatio||b.shiftKey)c=this._updateRatio(c,b);c=this._respectSize(c,b);this._propagate("resize",b);a.css({top:this.position.top+"px",left:this.position.left+"px",width:this.size.width+"px",height:this.size.height+"px"});!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize();this._updateCache(c);this._trigger("resize",b,this.ui());return false},
  170  _mouseStop:function(b){this.resizing=false;var a=this.options,c=this;if(this._helper){var d=this._proportionallyResizeElements,f=d.length&&/textarea/i.test(d[0].nodeName);d=f&&e.ui.hasScroll(d[0],"left")?0:c.sizeDiff.height;f=f?0:c.sizeDiff.width;f={width:c.helper.width()-f,height:c.helper.height()-d};d=parseInt(c.element.css("left"),10)+(c.position.left-c.originalPosition.left)||null;var g=parseInt(c.element.css("top"),10)+(c.position.top-c.originalPosition.top)||null;a.animate||this.element.css(e.extend(f,
  171  {top:g,left:d}));c.helper.height(c.size.height);c.helper.width(c.size.width);this._helper&&!a.animate&&this._proportionallyResize()}e("body").css("cursor","auto");this.element.removeClass("ui-resizable-resizing");this._propagate("stop",b);this._helper&&this.helper.remove();return false},_updateVirtualBoundaries:function(b){var a=this.options,c,d,f;a={minWidth:k(a.minWidth)?a.minWidth:0,maxWidth:k(a.maxWidth)?a.maxWidth:Infinity,minHeight:k(a.minHeight)?a.minHeight:0,maxHeight:k(a.maxHeight)?a.maxHeight:
  172: Infinity};if(this._aspectRatio||b){b=a.minHeight*this.aspectRatio;d=a.minWidth/this.aspectRatio;c=a.maxHeight*this.aspectRatio;f=a.maxWidth/this.aspectRatio;if(b>a.minWidth)a.minWidth=b;if(d>a.minHeight)a.minHeight=d;if(c<a.maxWidth)a.maxWidth=c;if(f<a.maxHeight)a.maxHeight=f}this._vBoundaries=a},_updateCache:function(b){this.offset=this.helper.offset();if(k(b.left))this.position.left=b.left;if(k(b.top))this.position.top=b.top;if(k(b.height))this.size.height=b.height;if(k(b.width))this.size.width=
  173  b.width},_updateRatio:function(b){var a=this.position,c=this.size,d=this.axis;if(k(b.height))b.width=b.height*this.aspectRatio;else if(k(b.width))b.height=b.width/this.aspectRatio;if(d=="sw"){b.left=a.left+(c.width-b.width);b.top=null}if(d=="nw"){b.top=a.top+(c.height-b.height);b.left=a.left+(c.width-b.width)}return b},_respectSize:function(b){var a=this._vBoundaries,c=this.axis,d=k(b.width)&&a.maxWidth&&a.maxWidth<b.width,f=k(b.height)&&a.maxHeight&&a.maxHeight<b.height,g=k(b.width)&&a.minWidth&&
  174  a.minWidth>b.width,h=k(b.height)&&a.minHeight&&a.minHeight>b.height;if(g)b.width=a.minWidth;if(h)b.height=a.minHeight;if(d)b.width=a.maxWidth;if(f)b.height=a.maxHeight;var i=this.originalPosition.left+this.originalSize.width,j=this.position.top+this.size.height,l=/sw|nw|w/.test(c);c=/nw|ne|n/.test(c);if(g&&l)b.left=i-a.minWidth;if(d&&l)b.left=i-a.maxWidth;if(h&&c)b.top=j-a.minHeight;if(f&&c)b.top=j-a.maxHeight;if((a=!b.width&&!b.height)&&!b.left&&b.top)b.top=null;else if(a&&!b.top&&b.left)b.left=
  ...
  182  e.each(b.alsoResize,function(i,j){h(i,j)}):h(b.alsoResize)},stop:function(){var b=e(this).data("resizable"),a=b.options,c=function(d){e(d).each(function(){var f=e(this);f.css({position:f.data("resizable-alsoresize").position})})};if(b._revertToRelativePosition){b._revertToRelativePosition=false;typeof a.alsoResize=="object"&&!a.alsoResize.nodeType?e.each(a.alsoResize,function(d){c(d)}):c(a.alsoResize)}e(this).removeData("resizable-alsoresize")}});e.ui.plugin.add("resizable","animate",{stop:function(b){var a=
  183  e(this).data("resizable"),c=a.options,d=a._proportionallyResizeElements,f=d.length&&/textarea/i.test(d[0].nodeName),g=f&&e.ui.hasScroll(d[0],"left")?0:a.sizeDiff.height;f={width:a.size.width-(f?0:a.sizeDiff.width),height:a.size.height-g};g=parseInt(a.element.css("left"),10)+(a.position.left-a.originalPosition.left)||null;var h=parseInt(a.element.css("top"),10)+(a.position.top-a.originalPosition.top)||null;a.element.animate(e.extend(f,h&&g?{top:h,left:g}:{}),{duration:c.animateDuration,easing:c.animateEasing,
  184: step:function(){var i={width:parseInt(a.element.css("width"),10),height:parseInt(a.element.css("height"),10),top:parseInt(a.element.css("top"),10),left:parseInt(a.element.css("left"),10)};d&&d.length&&e(d[0]).css({width:i.width,height:i.height});a._updateCache(i);a._propagate("resize",b)}})}});e.ui.plugin.add("resizable","containment",{start:function(){var b=e(this).data("resizable"),a=b.element,c=b.options.containment;if(a=c instanceof e?c.get(0):/parent/.test(c)?a.parent().get(0):c){b.containerElement=
  185  e(a);if(/document/.test(c)||c==document){b.containerOffset={left:0,top:0};b.containerPosition={left:0,top:0};b.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight}}else{var d=e(a),f=[];e(["Top","Right","Left","Bottom"]).each(function(i,j){f[i]=m(d.css("padding"+j))});b.containerOffset=d.offset();b.containerPosition=d.position();b.containerSize={height:d.innerHeight()-f[3],width:d.innerWidth()-f[1]};c=b.containerOffset;
  186  var g=b.containerSize.height,h=b.containerSize.width;h=e.ui.hasScroll(a,"left")?a.scrollWidth:h;g=e.ui.hasScroll(a)?a.scrollHeight:g;b.parentData={element:a,left:c.left,top:c.top,width:h,height:g}}}},resize:function(b){var a=e(this).data("resizable"),c=a.options,d=a.containerOffset,f=a.position;b=a._aspectRatio||b.shiftKey;var g={top:0,left:0},h=a.containerElement;if(h[0]!=document&&/static/.test(h.css("position")))g=d;if(f.left<(a._helper?d.left:0)){a.size.width+=a._helper?a.position.left-d.left:
  ...
  227   *	jquery.ui.widget.js
  228   */
  229: (function(d){d.widget("ui.sortable",d.ui.mouse,{widgetEventPrefix:"sort",options:{appendTo:"parent",axis:false,connectWith:false,containment:false,cursor:"auto",cursorAt:false,dropOnEmpty:true,forcePlaceholderSize:false,forceHelperSize:false,grid:false,handle:false,helper:"original",items:"> *",opacity:false,placeholder:false,revert:false,scroll:true,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1E3},_create:function(){var a=this.options;this.containerCache={};this.element.addClass("ui-sortable");
  230  this.refresh();this.floating=this.items.length?a.axis==="x"||/left|right/.test(this.items[0].item.css("float"))||/inline|table-cell/.test(this.items[0].item.css("display")):false;this.offset=this.element.offset();this._mouseInit()},destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").removeData("sortable").unbind(".sortable");this._mouseDestroy();for(var a=this.items.length-1;a>=0;a--)this.items[a].item.removeData("sortable-item");return this},_setOption:function(a,b){if(a===
  231  "disabled"){this.options[a]=b;this.widget()[b?"addClass":"removeClass"]("ui-sortable-disabled")}else d.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(a,b){if(this.reverting)return false;if(this.options.disabled||this.options.type=="static")return false;this._refreshItems(a);var c=null,e=this;d(a.target).parents().each(function(){if(d.data(this,"sortable-item")==e){c=d(this);return false}});if(d.data(a.target,"sortable-item")==e)c=d(a.target);if(!c)return false;if(this.options.handle&&
  232: !b){var f=false;d(this.options.handle,c).find("*").andSelf().each(function(){if(this==a.target)f=true});if(!f)return false}this.currentItem=c;this._removeCurrentsFromItems();return true},_mouseStart:function(a,b,c){b=this.options;var e=this;this.currentContainer=this;this.refreshPositions();this.helper=this._createHelper(a);this._cacheHelperProportions();this._cacheMargins();this.scrollParent=this.helper.scrollParent();this.offset=this.currentItem.offset();this.offset={top:this.offset.top-this.margins.top,
  233  left:this.offset.left-this.margins.left};this.helper.css("position","absolute");this.cssPosition=this.helper.css("position");d.extend(this.offset,{click:{left:a.pageX-this.offset.left,top:a.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()});this.originalPosition=this._generatePosition(a);this.originalPageX=a.pageX;this.originalPageY=a.pageY;b.cursorAt&&this._adjustOffsetFromHelper(b.cursorAt);this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]};
  234  this.helper[0]!=this.currentItem[0]&&this.currentItem.hide();this._createPlaceholder();b.containment&&this._setContainment();if(b.cursor){if(d("body").css("cursor"))this._storedCursor=d("body").css("cursor");d("body").css("cursor",b.cursor)}if(b.opacity){if(this.helper.css("opacity"))this._storedOpacity=this.helper.css("opacity");this.helper.css("opacity",b.opacity)}if(b.zIndex){if(this.helper.css("zIndex"))this._storedZIndex=this.helper.css("zIndex");this.helper.css("zIndex",b.zIndex)}if(this.scrollParent[0]!=
  235: document&&this.scrollParent[0].tagName!="HTML")this.overflowOffset=this.scrollParent.offset();this._trigger("start",a,this._uiHash());this._preserveHelperProportions||this._cacheHelperProportions();if(!c)for(c=this.containers.length-1;c>=0;c--)this.containers[c]._trigger("activate",a,e._uiHash(this));if(d.ui.ddmanager)d.ui.ddmanager.current=this;d.ui.ddmanager&&!b.dropBehaviour&&d.ui.ddmanager.prepareOffsets(this,a);this.dragging=true;this.helper.addClass("ui-sortable-helper");this._mouseDrag(a);
  236  return true},_mouseDrag:function(a){this.position=this._generatePosition(a);this.positionAbs=this._convertPositionTo("absolute");if(!this.lastPositionAbs)this.lastPositionAbs=this.positionAbs;if(this.options.scroll){var b=this.options,c=false;if(this.scrollParent[0]!=document&&this.scrollParent[0].tagName!="HTML"){if(this.overflowOffset.top+this.scrollParent[0].offsetHeight-a.pageY<b.scrollSensitivity)this.scrollParent[0].scrollTop=c=this.scrollParent[0].scrollTop+b.scrollSpeed;else if(a.pageY-this.overflowOffset.top<
  237  b.scrollSensitivity)this.scrollParent[0].scrollTop=c=this.scrollParent[0].scrollTop-b.scrollSpeed;if(this.overflowOffset.left+this.scrollParent[0].offsetWidth-a.pageX<b.scrollSensitivity)this.scrollParent[0].scrollLeft=c=this.scrollParent[0].scrollLeft+b.scrollSpeed;else if(a.pageX-this.overflowOffset.left<b.scrollSensitivity)this.scrollParent[0].scrollLeft=c=this.scrollParent[0].scrollLeft-b.scrollSpeed}else{if(a.pageY-d(document).scrollTop()<b.scrollSensitivity)c=d(document).scrollTop(d(document).scrollTop()-
  ...
  240  e):true)){this.direction=f==1?"down":"up";if(this.options.tolerance=="pointer"||this._intersectsWithSides(c))this._rearrange(a,c);else break;this._trigger("change",a,this._uiHash());break}}this._contactContainers(a);d.ui.ddmanager&&d.ui.ddmanager.drag(this,a);this._trigger("sort",a,this._uiHash());this.lastPositionAbs=this.positionAbs;return false},_mouseStop:function(a,b){if(a){d.ui.ddmanager&&!this.options.dropBehaviour&&d.ui.ddmanager.drop(this,a);if(this.options.revert){var c=this;b=c.placeholder.offset();
  241  c.reverting=true;d(this.helper).animate({left:b.left-this.offset.parent.left-c.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),top:b.top-this.offset.parent.top-c.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){c._clear(a)})}else this._clear(a,b);return false}},cancel:function(){var a=this;if(this.dragging){this._mouseUp({target:null});this.options.helper=="original"?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):
  242: this.currentItem.show();for(var b=this.containers.length-1;b>=0;b--){this.containers[b]._trigger("deactivate",null,a._uiHash(this));if(this.containers[b].containerCache.over){this.containers[b]._trigger("out",null,a._uiHash(this));this.containers[b].containerCache.over=0}}}if(this.placeholder){this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]);this.options.helper!="original"&&this.helper&&this.helper[0].parentNode&&this.helper.remove();d.extend(this,{helper:null,
  243  dragging:false,reverting:false,_noFinalSort:null});this.domPosition.prev?d(this.domPosition.prev).after(this.currentItem):d(this.domPosition.parent).prepend(this.currentItem)}return this},serialize:function(a){var b=this._getItemsAsjQuery(a&&a.connected),c=[];a=a||{};d(b).each(function(){var e=(d(a.item||this).attr(a.attribute||"id")||"").match(a.expression||/(.+)[-=_](.+)/);if(e)c.push((a.key||e[1]+"[]")+"="+(a.key&&a.expression?e[1]:e[2]))});!c.length&&a.key&&c.push(a.key+"=");return c.join("&")},
  244  toArray:function(a){var b=this._getItemsAsjQuery(a&&a.connected),c=[];a=a||{};b.each(function(){c.push(d(a.item||this).attr(a.attribute||"id")||"")});return c},_intersectsWith:function(a){var b=this.positionAbs.left,c=b+this.helperProportions.width,e=this.positionAbs.top,f=e+this.helperProportions.height,g=a.left,h=g+a.width,i=a.top,k=i+a.height,j=this.offset.click.top,l=this.offset.click.left;j=e+j>i&&e+j<k&&b+l>g&&b+l<h;return this.options.tolerance=="pointer"||this.options.forcePointerForContainers||
  ...
  250  this]],e=this._connectWith();if(e)for(var f=e.length-1;f>=0;f--)for(var g=d(e[f]),h=g.length-1;h>=0;h--){var i=d.data(g[h],"sortable");if(i&&i!=this&&!i.options.disabled){c.push([d.isFunction(i.options.items)?i.options.items.call(i.element[0],a,{item:this.currentItem}):d(i.options.items,i.element),i]);this.containers.push(i)}}for(f=c.length-1;f>=0;f--){a=c[f][1];e=c[f][0];h=0;for(g=e.length;h<g;h++){i=d(e[h]);i.data("sortable-item",a);b.push({item:i,instance:a,width:0,height:0,left:0,top:0})}}},refreshPositions:function(a){if(this.offsetParent&&
  251  this.helper)this.offset.parent=this._getParentOffset();for(var b=this.items.length-1;b>=0;b--){var c=this.items[b];if(!(c.instance!=this.currentContainer&&this.currentContainer&&c.item[0]!=this.currentItem[0])){var e=this.options.toleranceElement?d(this.options.toleranceElement,c.item):c.item;if(!a){c.width=e.outerWidth();c.height=e.outerHeight()}e=e.offset();c.left=e.left;c.top=e.top}}if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(b=
  252: this.containers.length-1;b>=0;b--){e=this.containers[b].element.offset();this.containers[b].containerCache.left=e.left;this.containers[b].containerCache.top=e.top;this.containers[b].containerCache.width=this.containers[b].element.outerWidth();this.containers[b].containerCache.height=this.containers[b].element.outerHeight()}return this},_createPlaceholder:function(a){var b=a||this,c=b.options;if(!c.placeholder||c.placeholder.constructor==String){var e=c.placeholder;c.placeholder={element:function(){var f=
  253  d(document.createElement(b.currentItem[0].nodeName)).addClass(e||b.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];if(!e)f.style.visibility="hidden";return f},update:function(f,g){if(!(e&&!c.forcePlaceholderSize)){g.height()||g.height(b.currentItem.innerHeight()-parseInt(b.currentItem.css("paddingTop")||0,10)-parseInt(b.currentItem.css("paddingBottom")||0,10));g.width()||g.width(b.currentItem.innerWidth()-parseInt(b.currentItem.css("paddingLeft")||0,10)-parseInt(b.currentItem.css("paddingRight")||
  254: 0,10))}}}}b.placeholder=d(c.placeholder.element.call(b.element,b.currentItem));b.currentItem.after(b.placeholder);c.placeholder.update(b,b.placeholder)},_contactContainers:function(a){for(var b=null,c=null,e=this.containers.length-1;e>=0;e--)if(!d.ui.contains(this.currentItem[0],this.containers[e].element[0]))if(this._intersectsWith(this.containers[e].containerCache)){if(!(b&&d.ui.contains(this.containers[e].element[0],b.element[0]))){b=this.containers[e];c=e}}else if(this.containers[e].containerCache.over){this.containers[e]._trigger("out",
  255: a,this._uiHash(this));this.containers[e].containerCache.over=0}if(b)if(this.containers.length===1){this.containers[c]._trigger("over",a,this._uiHash(this));this.containers[c].containerCache.over=1}else if(this.currentContainer!=this.containers[c]){b=1E4;e=null;for(var f=this.positionAbs[this.containers[c].floating?"left":"top"],g=this.items.length-1;g>=0;g--)if(d.ui.contains(this.containers[c].element[0],this.items[g].item[0])){var h=this.items[g][this.containers[c].floating?"left":"top"];if(Math.abs(h-
  256: f)<b){b=Math.abs(h-f);e=this.items[g]}}if(e||this.options.dropOnEmpty){this.currentContainer=this.containers[c];e?this._rearrange(a,e,null,true):this._rearrange(a,null,this.containers[c].element,true);this._trigger("change",a,this._uiHash());this.containers[c]._trigger("change",a,this._uiHash(this));this.options.placeholder.update(this.currentContainer,this.placeholder);this.containers[c]._trigger("over",a,this._uiHash(this));this.containers[c].containerCache.over=1}}},_createHelper:function(a){var b=
  257  this.options;a=d.isFunction(b.helper)?d(b.helper.apply(this.element[0],[a,this.currentItem])):b.helper=="clone"?this.currentItem.clone():this.currentItem;a.parents("body").length||d(b.appendTo!="parent"?b.appendTo:this.currentItem[0].parentNode)[0].appendChild(a[0]);if(a[0]==this.currentItem[0])this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")};if(a[0].style.width==
  258  ""||b.forceHelperSize)a.width(this.currentItem.width());if(a[0].style.height==""||b.forceHelperSize)a.height(this.currentItem.height());return a},_adjustOffsetFromHelper:function(a){if(typeof a=="string")a=a.split(" ");if(d.isArray(a))a={left:+a[0],top:+a[1]||0};if("left"in a)this.offset.click.left=a.left+this.margins.left;if("right"in a)this.offset.click.left=this.helperProportions.width-a.right+this.margins.left;if("top"in a)this.offset.click.top=a.top+this.margins.top;if("bottom"in a)this.offset.click.top=
  259  this.helperProportions.height-a.bottom+this.margins.top},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var a=this.offsetParent.offset();if(this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&d.ui.contains(this.scrollParent[0],this.offsetParent[0])){a.left+=this.scrollParent.scrollLeft();a.top+=this.scrollParent.scrollTop()}if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&d.browser.msie)a=
  260: {top:0,left:0};return{top:a.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:a.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var a=this.currentItem.position();return{top:a.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:a.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}else return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),
  261: 10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var a=this.options;if(a.containment=="parent")a.containment=this.helper[0].parentNode;if(a.containment=="document"||a.containment=="window")this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,d(a.containment=="document"?
  262  document:window).width()-this.helperProportions.width-this.margins.left,(d(a.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(a.containment)){var b=d(a.containment)[0];a=d(a.containment).offset();var c=d(b).css("overflow")!="hidden";this.containment=[a.left+(parseInt(d(b).css("borderLeftWidth"),10)||0)+(parseInt(d(b).css("paddingLeft"),10)||0)-this.margins.left,a.top+(parseInt(d(b).css("borderTopWidth"),
  263  10)||0)+(parseInt(d(b).css("paddingTop"),10)||0)-this.margins.top,a.left+(c?Math.max(b.scrollWidth,b.offsetWidth):b.offsetWidth)-(parseInt(d(b).css("borderLeftWidth"),10)||0)-(parseInt(d(b).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,a.top+(c?Math.max(b.scrollHeight,b.offsetHeight):b.offsetHeight)-(parseInt(d(b).css("borderTopWidth"),10)||0)-(parseInt(d(b).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top]}},_convertPositionTo:function(a,b){if(!b)b=
  ...
  270  "";this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();this.fromOutside&&!b&&c.push(function(f){this._trigger("receive",f,this._uiHash(this.fromOutside))});if((this.fromOutside||this.domPosition.prev!=this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!=this.currentItem.parent()[0])&&!b)c.push(function(f){this._trigger("update",f,this._uiHash())});if(!d.ui.contains(this.element[0],this.currentItem[0])){b||c.push(function(f){this._trigger("remove",
  271  f,this._uiHash())});for(e=this.containers.length-1;e>=0;e--)if(d.ui.contains(this.containers[e].element[0],this.currentItem[0])&&!b){c.push(function(f){return function(g){f._trigger("receive",g,this._uiHash(this))}}.call(this,this.containers[e]));c.push(function(f){return function(g){f._trigger("update",g,this._uiHash(this))}}.call(this,this.containers[e]))}}for(e=this.containers.length-1;e>=0;e--){b||c.push(function(f){return function(g){f._trigger("deactivate",g,this._uiHash(this))}}.call(this,
  272: this.containers[e]));if(this.containers[e].containerCache.over){c.push(function(f){return function(g){f._trigger("out",g,this._uiHash(this))}}.call(this,this.containers[e]));this.containers[e].containerCache.over=0}}this._storedCursor&&d("body").css("cursor",this._storedCursor);this._storedOpacity&&this.helper.css("opacity",this._storedOpacity);if(this._storedZIndex)this.helper.css("zIndex",this._storedZIndex=="auto"?"":this._storedZIndex);this.dragging=false;if(this.cancelHelperRemoval){if(!b){this._trigger("beforeStop",
  273  a,this._uiHash());for(e=0;e<c.length;e++)c[e].call(this,a);this._trigger("stop",a,this._uiHash())}return false}b||this._trigger("beforeStop",a,this._uiHash());this.placeholder[0].parentNode.removeChild(this.placeholder[0]);this.helper[0]!=this.currentItem[0]&&this.helper.remove();this.helper=null;if(!b){for(e=0;e<c.length;e++)c[e].call(this,a);this._trigger("stop",a,this._uiHash())}this.fromOutside=false;return true},_trigger:function(){d.Widget.prototype._trigger.apply(this,arguments)===false&&this.cancel()},
  274  _uiHash:function(a){var b=a||this;return{helper:b.helper,placeholder:b.placeholder||d([]),position:b.position,originalPosition:b.originalPosition,offset:b.positionAbs,item:b.currentItem,sender:a?a.element:null}}});d.extend(d.ui.sortable,{version:"1.8.16"})})(jQuery);
  ...
  448   *	jquery.ui.widget.js
  449   */
  450: (function(d,p){function u(){return++v}function w(){return++x}var v=0,x=0;d.widget("ui.tabs",{options:{add:null,ajaxOptions:null,cache:false,cookie:null,collapsible:false,disable:null,disabled:[],enable:null,event:"click",fx:null,idPrefix:"ui-tabs-",load:null,panelTemplate:"<div></div>",remove:null,select:null,show:null,spinner:"<em>Loading&#8230;</em>",tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"},_create:function(){this._tabify(true)},_setOption:function(b,e){if(b=="selected")this.options.collapsible&&
  451  e==this.options.selected||this.select(e);else{this.options[b]=e;this._tabify()}},_tabId:function(b){return b.title&&b.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF-]/g,"")||this.options.idPrefix+u()},_sanitizeSelector:function(b){return b.replace(/:/g,"\\:")},_cookie:function(){var b=this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+w());return d.cookie.apply(null,[b].concat(d.makeArray(arguments)))},_ui:function(b,e){return{tab:b,panel:e,index:this.anchors.index(b)}},_cleanup:function(){this.lis.filter(".ui-state-processing").removeClass("ui-state-processing").find("span:data(label.tabs)").each(function(){var b=
  452  d(this);b.html(b.data("label.tabs")).removeData("label.tabs")})},_tabify:function(b){function e(g,f){g.css("display","");!d.support.opacity&&f.opacity&&g[0].style.removeAttribute("filter")}var a=this,c=this.options,h=/^#.+/;this.list=this.element.find("ol,ul").eq(0);this.lis=d(" > li:has(a[href])",this.list);this.anchors=this.lis.map(function(){return d("a",this)[0]});this.panels=d([]);this.anchors.each(function(g,f){var i=d(f).attr("href"),l=i.split("#")[0],q;if(l&&(l===location.toString().split("#")[0]||
  ...
  455  this.lis.index(this.lis.filter(".ui-tabs-selected"));c.selected=c.selected||(this.lis.length?0:-1)}else if(c.selected===null)c.selected=-1;c.selected=c.selected>=0&&this.anchors[c.selected]||c.selected<0?c.selected:0;c.disabled=d.unique(c.disabled.concat(d.map(this.lis.filter(".ui-state-disabled"),function(g){return a.lis.index(g)}))).sort();d.inArray(c.selected,c.disabled)!=-1&&c.disabled.splice(d.inArray(c.selected,c.disabled),1);this.panels.addClass("ui-tabs-hide");this.lis.removeClass("ui-tabs-selected ui-state-active");
  456  if(c.selected>=0&&this.anchors.length){a.element.find(a._sanitizeSelector(a.anchors[c.selected].hash)).removeClass("ui-tabs-hide");this.lis.eq(c.selected).addClass("ui-tabs-selected ui-state-active");a.element.queue("tabs",function(){a._trigger("show",null,a._ui(a.anchors[c.selected],a.element.find(a._sanitizeSelector(a.anchors[c.selected].hash))[0]))});this.load(c.selected)}d(window).bind("unload",function(){a.lis.add(a.anchors).unbind(".tabs");a.lis=a.anchors=a.panels=null})}else c.selected=this.lis.index(this.lis.filter(".ui-tabs-selected"));
  457: this.element[c.collapsible?"addClass":"removeClass"]("ui-tabs-collapsible");c.cookie&&this._cookie(c.selected,c.cookie);b=0;for(var j;j=this.lis[b];b++)d(j)[d.inArray(b,c.disabled)!=-1&&!d(j).hasClass("ui-tabs-selected")?"addClass":"removeClass"]("ui-state-disabled");c.cache===false&&this.anchors.removeData("cache.tabs");this.lis.add(this.anchors).unbind(".tabs");if(c.event!=="mouseover"){var k=function(g,f){f.is(":not(.ui-state-disabled)")&&f.addClass("ui-state-"+g)},n=function(g,f){f.removeClass("ui-state-"+
  458  g)};this.lis.bind("mouseover.tabs",function(){k("hover",d(this))});this.lis.bind("mouseout.tabs",function(){n("hover",d(this))});this.anchors.bind("focus.tabs",function(){k("focus",d(this).closest("li"))});this.anchors.bind("blur.tabs",function(){n("focus",d(this).closest("li"))})}var m,o;if(c.fx)if(d.isArray(c.fx)){m=c.fx[0];o=c.fx[1]}else m=o=c.fx;var r=o?function(g,f){d(g).closest("li").addClass("ui-tabs-selected ui-state-active");f.hide().removeClass("ui-tabs-hide").animate(o,o.duration||"normal",
  459  function(){e(f,o);a._trigger("show",null,a._ui(g,f[0]))})}:function(g,f){d(g).closest("li").addClass("ui-tabs-selected ui-state-active");f.removeClass("ui-tabs-hide");a._trigger("show",null,a._ui(g,f[0]))},s=m?function(g,f){f.animate(m,m.duration||"normal",function(){a.lis.removeClass("ui-tabs-selected ui-state-active");f.addClass("ui-tabs-hide");e(f,m);a.element.dequeue("tabs")})}:function(g,f){a.lis.removeClass("ui-tabs-selected ui-state-active");f.addClass("ui-tabs-hide");a.element.dequeue("tabs")};
  ...
  461  -1;c.cookie&&a._cookie(c.selected,c.cookie);a.element.queue("tabs",function(){s(g,i)}).dequeue("tabs");this.blur();return false}else if(!i.length){c.cookie&&a._cookie(c.selected,c.cookie);a.element.queue("tabs",function(){r(g,l)});a.load(a.anchors.index(this));this.blur();return false}c.cookie&&a._cookie(c.selected,c.cookie);if(l.length){i.length&&a.element.queue("tabs",function(){s(g,i)});a.element.queue("tabs",function(){r(g,l)});a.load(a.anchors.index(this))}else throw"jQuery UI Tabs: Mismatching fragment identifier.";
  462  d.browser.msie&&this.blur()});this.anchors.bind("click.tabs",function(){return false})},_getIndex:function(b){if(typeof b=="string")b=this.anchors.index(this.anchors.filter("[href$="+b+"]"));return b},destroy:function(){var b=this.options;this.abort();this.element.unbind(".tabs").removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible").removeData("tabs");this.list.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all");this.anchors.each(function(){var e=
  463: d.data(this,"href.tabs");if(e)this.href=e;var a=d(this).unbind(".tabs");d.each(["href","load","cache"],function(c,h){a.removeData(h+".tabs")})});this.lis.unbind(".tabs").add(this.panels).each(function(){d.data(this,"destroy.tabs")?d(this).remove():d(this).removeClass("ui-state-default ui-corner-top ui-tabs-selected ui-state-active ui-state-hover ui-state-focus ui-state-disabled ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide")});b.cookie&&this._cookie(null,b.cookie);return this},add:function(b,
  464  e,a){if(a===p)a=this.anchors.length;var c=this,h=this.options;e=d(h.tabTemplate.replace(/#\{href\}/g,b).replace(/#\{label\}/g,e));b=!b.indexOf("#")?b.replace("#",""):this._tabId(d("a",e)[0]);e.addClass("ui-state-default ui-corner-top").data("destroy.tabs",true);var j=c.element.find("#"+b);j.length||(j=d(h.panelTemplate).attr("id",b).data("destroy.tabs",true));j.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");if(a>=this.lis.length){e.appendTo(this.list);j.appendTo(this.list[0].parentNode)}else{e.insertBefore(this.lis[a]);
  465  j.insertBefore(this.panels[a])}h.disabled=d.map(h.disabled,function(k){return k>=a?++k:k});this._tabify();if(this.anchors.length==1){h.selected=0;e.addClass("ui-tabs-selected ui-state-active");j.removeClass("ui-tabs-hide");this.element.queue("tabs",function(){c._trigger("show",null,c._ui(c.anchors[0],c.panels[0]))});this.load(0)}this._trigger("add",null,this._ui(this.anchors[a],this.panels[a]));return this},remove:function(b){b=this._getIndex(b);var e=this.options,a=this.lis.eq(b).remove(),c=this.panels.eq(b).remove();
  466  if(a.hasClass("ui-tabs-selected")&&this.anchors.length>1)this.select(b+(b+1<this.anchors.length?1:-1));e.disabled=d.map(d.grep(e.disabled,function(h){return h!=b}),function(h){return h>=b?--h:h});this._tabify();this._trigger("remove",null,this._ui(a.find("a")[0],c[0]));return this},enable:function(b){b=this._getIndex(b);var e=this.options;if(d.inArray(b,e.disabled)!=-1){this.lis.eq(b).removeClass("ui-state-disabled");e.disabled=d.grep(e.disabled,function(a){return a!=b});this._trigger("enable",null,
  467  this._ui(this.anchors[b],this.panels[b]));return this}},disable:function(b){b=this._getIndex(b);var e=this.options;if(b!=e.selected){this.lis.eq(b).addClass("ui-state-disabled");e.disabled.push(b);e.disabled.sort();this._trigger("disable",null,this._ui(this.anchors[b],this.panels[b]))}return this},select:function(b){b=this._getIndex(b);if(b==-1)if(this.options.collapsible&&this.options.selected!=-1)b=this.options.selected;else return this;this.anchors.eq(b).trigger(this.options.event+".tabs");return this},
  468: load:function(b){b=this._getIndex(b);var e=this,a=this.options,c=this.anchors.eq(b)[0],h=d.data(c,"load.tabs");this.abort();if(!h||this.element.queue("tabs").length!==0&&d.data(c,"cache.tabs"))this.element.dequeue("tabs");else{this.lis.eq(b).addClass("ui-state-processing");if(a.spinner){var j=d("span",c);j.data("label.tabs",j.html()).html(a.spinner)}this.xhr=d.ajax(d.extend({},a.ajaxOptions,{url:h,success:function(k,n){e.element.find(e._sanitizeSelector(c.hash)).html(k);e._cleanup();a.cache&&d.data(c,
  469: "cache.tabs",true);e._trigger("load",null,e._ui(e.anchors[b],e.panels[b]));try{a.ajaxOptions.success(k,n)}catch(m){}},error:function(k,n){e._cleanup();e._trigger("load",null,e._ui(e.anchors[b],e.panels[b]));try{a.ajaxOptions.error(k,n,b,c)}catch(m){}}}));e.element.dequeue("tabs");return this}},abort:function(){this.element.queue([]);this.panels.stop(false,true);this.element.queue("tabs",this.element.queue("tabs").splice(-2,2));if(this.xhr){this.xhr.abort();delete this.xhr}this._cleanup();return this},
  470: url:function(b,e){this.anchors.eq(b).removeData("cache.tabs").data("load.tabs",e);return this},length:function(){return this.anchors.length}});d.extend(d.ui.tabs,{version:"1.8.16"});d.extend(d.ui.tabs.prototype,{rotation:null,rotate:function(b,e){var a=this,c=this.options,h=a._rotate||(a._rotate=function(j){clearTimeout(a.rotation);a.rotation=setTimeout(function(){var k=c.selected;a.select(++k<a.anchors.length?k:0)},b);j&&j.stopPropagation()});e=a._unrotate||(a._unrotate=!e?function(j){j.clientX&&
  471  a.rotate(null)}:function(){t=c.selected;h()});if(b){this.element.bind("tabsshow",h);this.anchors.bind(c.event+".tabs",e);h()}else{clearTimeout(a.rotation);this.element.unbind("tabsshow",h);this.anchors.unbind(c.event+".tabs",e);delete this._rotate;delete this._unrotate}return this}})})(jQuery);
  472  ;/*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/capybara-2.1.0/lib/capybara/spec/public/jquery.js:
  158  					} else {
  159  						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
  160: 						selector = (ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment).childNodes;
  161  					}
  162  
  ...
 1418  
 1419  jQuery.extend({
 1420: 	cache: {},
 1421  
 1422  	// Please use with caution
 ....
 1437  
 1438  	hasData: function( elem ) {
 1439: 		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
 1440  
 1441  		return !!elem && !isEmptyDataObject( elem );
 ....
 1447  		}
 1448  
 1449: 		var thisCache, ret,
 1450  			internalKey = jQuery.expando,
 1451  			getByName = typeof name === "string",
 ....
 1455  			isNode = elem.nodeType,
 1456  
 1457: 			// Only DOM nodes need the global jQuery cache; JS object data is
 1458  			// attached directly to the object so GC can occur automatically
 1459: 			cache = isNode ? jQuery.cache : elem,
 1460  
 1461: 			// Only defining an ID for JS objects if its cache already exists allows
 1462: 			// the code to shortcut on the same path as a DOM node with no cache
 1463  			id = isNode ? elem[ jQuery.expando ] : elem[ jQuery.expando ] && jQuery.expando;
 1464  
 1465  		// Avoid doing any more work than we need to when trying to get data on an
 1466  		// object that has no data at all
 1467: 		if ( (!id || (pvt && id && (cache[ id ] && !cache[ id ][ internalKey ]))) && getByName && data === undefined ) {
 1468  			return;
 1469  		}
 ....
 1471  		if ( !id ) {
 1472  			// Only DOM nodes need a new unique ID for each element since their data
 1473: 			// ends up in the global cache
 1474  			if ( isNode ) {
 1475  				elem[ jQuery.expando ] = id = ++jQuery.uuid;
 ....
 1479  		}
 1480  
 1481: 		if ( !cache[ id ] ) {
 1482: 			cache[ id ] = {};
 1483  
 1484  			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery
 ....
 1486  			// JSON.stringify
 1487  			if ( !isNode ) {
 1488: 				cache[ id ].toJSON = jQuery.noop;
 1489  			}
 1490  		}
 1491  
 1492  		// An object can be passed to jQuery.data instead of a key/value pair; this gets
 1493: 		// shallow copied over onto the existing cache
 1494  		if ( typeof name === "object" || typeof name === "function" ) {
 1495  			if ( pvt ) {
 1496: 				cache[ id ][ internalKey ] = jQuery.extend(cache[ id ][ internalKey ], name);
 1497  			} else {
 1498: 				cache[ id ] = jQuery.extend(cache[ id ], name);
 1499  			}
 1500  		}
 1501  
 1502: 		thisCache = cache[ id ];
 1503  
 1504  		// Internal jQuery data is stored in a separate object inside the object's data
 1505: 		// cache in order to avoid key collisions between internal data and user-defined
 1506  		// data
 1507  		if ( pvt ) {
 1508: 			if ( !thisCache[ internalKey ] ) {
 1509: 				thisCache[ internalKey ] = {};
 1510  			}
 1511  
 1512: 			thisCache = thisCache[ internalKey ];
 1513  		}
 1514  
 1515  		if ( data !== undefined ) {
 1516: 			thisCache[ jQuery.camelCase( name ) ] = data;
 1517  		}
 1518  
 ....
 1520  		// not attempt to inspect the internal events object using jQuery.data, as this
 1521  		// internal data object is undocumented and subject to change.
 1522: 		if ( name === "events" && !thisCache[name] ) {
 1523: 			return thisCache[ internalKey ] && thisCache[ internalKey ].events;
 1524  		}
 1525  
 ....
 1529  
 1530  			// First Try to find as-is property data
 1531: 			ret = thisCache[ name ];
 1532  
 1533  			// Test for null|undefined property data
 ....
 1535  
 1536  				// Try to find the camelCased property
 1537: 				ret = thisCache[ jQuery.camelCase( name ) ];
 1538  			}
 1539  		} else {
 1540: 			ret = thisCache;
 1541  		}
 1542  
 ....
 1549  		}
 1550  
 1551: 		var thisCache,
 1552  
 1553: 			// Reference to internal data cache key
 1554  			internalKey = jQuery.expando,
 1555  
 ....
 1557  
 1558  			// See jQuery.data for more information
 1559: 			cache = isNode ? jQuery.cache : elem,
 1560  
 1561  			// See jQuery.data for more information
 1562  			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
 1563  
 1564: 		// If there is already no cache entry for this object, there is no
 1565  		// purpose in continuing
 1566: 		if ( !cache[ id ] ) {
 1567  			return;
 1568  		}
 ....
 1570  		if ( name ) {
 1571  
 1572: 			thisCache = pvt ? cache[ id ][ internalKey ] : cache[ id ];
 1573  
 1574: 			if ( thisCache ) {
 1575  
 1576  				// Support interoperable removal of hyphenated or camelcased keys
 1577: 				if ( !thisCache[ name ] ) {
 1578  					name = jQuery.camelCase( name );
 1579  				}
 1580  
 1581: 				delete thisCache[ name ];
 1582  
 1583: 				// If there is no data left in the cache, we want to continue
 1584: 				// and let the cache object itself get destroyed
 1585: 				if ( !isEmptyDataObject(thisCache) ) {
 1586  					return;
 1587  				}
 ....
 1591  		// See jQuery.data for more information
 1592  		if ( pvt ) {
 1593: 			delete cache[ id ][ internalKey ];
 1594  
 1595: 			// Don't destroy the parent cache unless the internal data object
 1596  			// had been the only thing left in it
 1597: 			if ( !isEmptyDataObject(cache[ id ]) ) {
 1598  				return;
 1599  			}
 1600  		}
 1601  
 1602: 		var internalCache = cache[ id ][ internalKey ];
 1603  
 1604  		// Browsers that fail expando deletion also refuse to delete expandos on
 1605  		// the window, but it will allow it on all other JS objects; other browsers
 1606  		// don't care
 1607: 		// Ensure that `cache` is not a window object #10080
 1608: 		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
 1609: 			delete cache[ id ];
 1610  		} else {
 1611: 			cache[ id ] = null;
 1612  		}
 1613  
 1614: 		// We destroyed the entire user cache at once because it's faster than
 1615  		// iterating through each key, but we need to continue to persist internal
 1616  		// data if it existed
 1617: 		if ( internalCache ) {
 1618: 			cache[ id ] = {};
 1619  			// TODO: This is a hack for 1.5 ONLY. Avoids exposing jQuery
 1620  			// metadata on plain JS objects when the object is serialized using
 1621  			// JSON.stringify
 1622  			if ( !isNode ) {
 1623: 				cache[ id ].toJSON = jQuery.noop;
 1624  			}
 1625  
 1626: 			cache[ id ][ internalKey ] = internalCache;
 1627  
 1628  		// Otherwise, we need to eliminate the expando on the node to avoid
 1629: 		// false lookups in the cache for entries that no longer exist
 1630  		} else if ( isNode ) {
 1631  			// IE does not allow us to delete expando properties from nodes,
 ....
 2890  		// Handle a global trigger
 2891  		if ( !elem ) {
 2892: 			// TODO: Stop taunting the data cache; remove global events and always attach to document
 2893: 			jQuery.each( jQuery.cache, function() {
 2894  				// internalKey variable is just used to make it easier to find
 2895  				// and potentially change this stuff later; currently it just
 2896  				// points to jQuery.expando
 2897  				var internalKey = jQuery.expando,
 2898: 					internalCache = this[ internalKey ];
 2899: 				if ( internalCache && internalCache.events && internalCache.events[ type ] ) {
 2900: 					jQuery.event.trigger( event, data, internalCache.handle.elem );
 2901  				}
 2902  			});
 ....
 4540  						parent = elem.parentNode;
 4541  
 4542: 					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
 4543  						var count = 0;
 4544  
 ....
 4549  						}
 4550  
 4551: 						parent.sizcache = doneName;
 4552  					}
 4553  
 ....
 5038  	}
 5039  
 5040: 	// Safari caches class attributes, doesn't catch changes (in 3.2)
 5041  	div.lastChild.className = "e";
 5042  
 ....
 5066  
 5067  			while ( elem ) {
 5068: 				if ( elem.sizcache === doneName ) {
 5069  					match = checkSet[elem.sizset];
 5070  					break;
 ....
 5072  
 5073  				if ( elem.nodeType === 1 && !isXML ){
 5074: 					elem.sizcache = doneName;
 5075  					elem.sizset = i;
 5076  				}
 ....
 5099  
 5100  			while ( elem ) {
 5101: 				if ( elem.sizcache === doneName ) {
 5102  					match = checkSet[elem.sizset];
 5103  					break;
 ....
 5106  				if ( elem.nodeType === 1 ) {
 5107  					if ( !isXML ) {
 5108: 						elem.sizcache = doneName;
 5109  						elem.sizset = i;
 5110  					}
 ....
 5534  	rtbody = /<tbody/i,
 5535  	rhtml = /<|&#?\w+;/,
 5536: 	rnocache = /<(?:script|object|embed|option|style)/i,
 5537  	// checked="checked" or checked
 5538  	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
 ....
 5729  
 5730  		// See if we can take a shortcut and just use innerHTML
 5731: 		} else if ( typeof value === "string" && !rnocache.test( value ) &&
 5732  			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
 5733  			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {
 ....
 5853  						// item instead of first because it can end up being emptied incorrectly
 5854  						// in certain situations (Bug #8070).
 5855: 						// Fragments from the fragment cache must always be cloned and never used
 5856  						// in place.
 5857: 						results.cacheable || (l > 1 && i < lastIndex) ?
 5858  							jQuery.clone( fragment, true, true ) :
 5859  							fragment
 ....
 5966  
 5967  jQuery.buildFragment = function( args, nodes, scripts ) {
 5968: 	var fragment, cacheable, cacheresults, doc;
 5969  
 5970    // nodes may contain either an explicit document object,
 ....
 5982  	}
 5983  
 5984: 	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
 5985: 	// Cloning options loses the selected state, so don't cache them
 5986  	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
 5987: 	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
 5988  	if ( args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document &&
 5989: 		args[0].charAt(0) === "<" && !rnocache.test( args[0] ) && (jQuery.support.checkClone || !rchecked.test( args[0] )) ) {
 5990  
 5991: 		cacheable = true;
 5992  
 5993: 		cacheresults = jQuery.fragments[ args[0] ];
 5994: 		if ( cacheresults && cacheresults !== 1 ) {
 5995: 			fragment = cacheresults;
 5996  		}
 5997  	}
 ....
 6002  	}
 6003  
 6004: 	if ( cacheable ) {
 6005: 		jQuery.fragments[ args[0] ] = cacheresults ? fragment : 1;
 6006  	}
 6007  
 6008: 	return { fragment: fragment, cacheable: cacheable };
 6009  };
 6010  
 ....
 6234  
 6235  	cleanData: function( elems ) {
 6236: 		var data, id, cache = jQuery.cache, internalKey = jQuery.expando, special = jQuery.event.special,
 6237  			deleteExpando = jQuery.support.deleteExpando;
 6238  
 ....
 6245  
 6246  			if ( id ) {
 6247: 				data = cache[ id ] && cache[ id ][ internalKey ];
 6248  
 6249  				if ( data && data.events ) {
 ....
 6271  				}
 6272  
 6273: 				delete cache[ id ];
 6274  			}
 6275  		}
 ....
 7002  		username: null,
 7003  		password: null,
 7004: 		cache: null,
 7005  		traditional: false,
 7006  		headers: {},
 ....
 7109  				readyState: 0,
 7110  
 7111: 				// Caches the header
 7112  				setRequestHeader: function( name, value ) {
 7113  					if ( !state ) {
 ....
 7180  			transport = undefined;
 7181  
 7182: 			// Cache response headers
 7183  			responseHeadersString = headers || "";
 7184  
 ....
 7348  			}
 7349  
 7350: 			// Get ifModifiedKey before adding the anti-cache parameter
 7351  			ifModifiedKey = s.url;
 7352  
 7353: 			// Add anti-cache in url if needed
 7354: 			if ( s.cache === false ) {
 7355  
 7356  				var ts = jQuery.now(),
 ....
 7515  	active: 0,
 7516  
 7517: 	// Last-Modified header cache for next request
 7518  	lastModified: {},
 7519  	etag: {}
 ....
 7773  });
 7774  
 7775: // Handle cache's special case and global
 7776  jQuery.ajaxPrefilter( "script", function( s ) {
 7777: 	if ( s.cache === undefined ) {
 7778: 		s.cache = false;
 7779  	}
 7780  	if ( s.crossDomain ) {
 ....
 8030  					};
 8031  
 8032: 					// if we're in sync mode or it's in cache
 8033  					// and has been retrieved directly (IE6 & IE7)
 8034  					// we need to manually fire the callback
 ....
 8638  			body.appendChild( iframe );
 8639  
 8640: 			// Create a cacheable copy of the iframe document on first call.
 8641  			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
 8642  			// document to it; WebKit & Firefox won't allow reusing the iframe document.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave.rb:
   15      end
   16  
   17:     def clean_cached_files!(seconds=60*60*24)
   18:       CarrierWave::Uploader::Base.clean_cached_files!(seconds)
   19      end
   20    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/mount.rb:
   76      #
   77      # [image]                   Returns an instance of the uploader only if anything has been uploaded
   78:     # [image=]                  Caches the given file
   79      #
   80      # [image_url]               Returns the url to the uploaded file
   81      #
   82:     # [image_cache]             Returns a string that identifies the cache location of the file
   83:     # [image_cache=]            Retrieves the file from the cache based on the given cache name
   84      #
   85:     # [remote_image_url]        Returns previously cached remote url
   86      # [remote_image_url=]       Retrieve the file from the remote url
   87      #
   ..
  177  
  178          def #{column}=(new_file)
  179:           _mounter(:#{column}).cache(new_file)
  180          end
  181  
  ...
  188          end
  189  
  190:         def #{column}_cache
  191:           _mounter(:#{column}).cache_name
  192          end
  193  
  194:         def #{column}_cache=(cache_name)
  195:           _mounter(:#{column}).cache_name = cache_name
  196          end
  197  
  ...
  324        end
  325  
  326:       def cache(new_file)
  327:         uploader.cache!(new_file)
  328          @integrity_error = nil
  329          @processing_error = nil
  ...
  336        end
  337  
  338:       def cache_name
  339:         uploader.cache_name
  340        end
  341  
  342:       def cache_name=(cache_name)
  343:         uploader.retrieve_from_cache!(cache_name) unless uploader.cached?
  344        rescue CarrierWave::InvalidParameter
  345        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/processing/mini_magick.rb:
  257      #
  258      def manipulate!
  259:       cache_stored_file! if !cached?
  260        image = ::MiniMagick::Image.open(current_path)
  261        image.format(@format.to_s.downcase) if @format

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/processing/rmagick.rb:
  312      #
  313      def manipulate!(options={}, &block)
  314:       cache_stored_file! if !cached?
  315  
  316        read_block = create_info_block(options[:read])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/storage/file.rb:
   15        #
   16        # By default, store!() uses copy_to(), which operates by copying the file
   17:       # from the cache to the store, then deleting the file from the cache.
   18        # If move_to_store() is overriden to return true, then store!() uses move_to(),
   19:       # which simply moves the file from cache to store.  Useful for large files.
   20        #
   21        # === Parameters

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/storage/fog.rb:
   60      class Fog < Abstract
   61        class << self
   62:         def connection_cache
   63:           @connection_cache ||= {}
   64          end
   65        end
   ..
  100          @connection ||= begin
  101            options = credentials = uploader.fog_credentials
  102:           self.class.connection_cache[credentials] ||= ::Fog::Storage.new(options)
  103          end
  104        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader.rb:
    6  require "carrierwave/uploader/url"
    7  require "carrierwave/uploader/mountable"
    8: require "carrierwave/uploader/cache"
    9  require "carrierwave/uploader/store"
   10  require "carrierwave/uploader/download"
   ..
   32      #
   33      #     my_uploader = MyUploader.new
   34:     #     my_uploader.cache!(File.open(path_to_file))
   35      #     my_uploader.retrieve_from_store!('monkey.png')
   36      #
   ..
   48        include CarrierWave::Uploader::Url
   49        include CarrierWave::Uploader::Mountable
   50:       include CarrierWave::Uploader::Cache
   51        include CarrierWave::Uploader::Store
   52        include CarrierWave::Uploader::Download

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/cache.rb:
   10  
   11    ##
   12:   # Generates a unique cache id for use in the caching system
   13    #
   14    # === Returns
   15    #
   16:   # [String] a cache id in the format TIMEINT-PID-RND
   17    #
   18:   def self.generate_cache_id
   19      Time.now.utc.to_i.to_s + '-' + Process.pid.to_s + '-' + ("%04d" % rand(9999))
   20    end
   21  
   22    module Uploader
   23:     module Cache
   24        extend ActiveSupport::Concern
   25  
   ..
   30  
   31          ##
   32:         # Removes cached files which are older than one day. You could call this method
   33:         # from a rake task to clean out old cached files.
   34          #
   35          # You can call this method directly on the module like this:
   36          #
   37:         #   CarrierWave.clean_cached_files!
   38          #
   39          # === Note
   40          #
   41:         # This only works as long as you haven't done anything funky with your cache_dir.
   42:         # It's recommended that you keep cache files in one place only.
   43          #
   44:         def clean_cached_files!(seconds=60*60*24)
   45:           Dir.glob(File.expand_path(File.join(cache_dir, '*'), CarrierWave.root)).each do |dir|
   46              time = dir.scan(/(\d+)-\d+-\d+/).first.map { |t| t.to_i }
   47              time = Time.at(*time)
   ..
   54  
   55        ##
   56:       # Returns true if the uploader has been cached
   57        #
   58        # === Returns
   59        #
   60:       # [Bool] whether the current file is cached
   61        #
   62:       def cached?
   63:         @cache_id
   64        end
   65  
   66        ##
   67:       # Caches the remotely stored file
   68        #
   69        # This is useful when about to process images. Most processing solutions
   70        # require the file to be stored on the local filesystem.
   71        #
   72:       def cache_stored_file!
   73:         cache!
   74        end
   75  
   ..
   88  
   89        ##
   90:       # Returns a String which uniquely identifies the currently cached file for later retrieval
   91        #
   92        # === Returns
   93        #
   94:       # [String] a cache name, in the format YYYYMMDD-HHMM-PID-RND/filename.txt
   95        #
   96:       def cache_name
   97:         File.join(cache_id, full_original_filename) if cache_id and original_filename
   98        end
   99  
  100        ##
  101:       # Caches the given file. Calls process! to trigger any process callbacks.
  102        #
  103:       # By default, cache!() uses copy_to(), which operates by copying the file
  104:       # to the cache, then deleting the original file.  If move_to_cache() is
  105:       # overriden to return true, then cache!() uses move_to(), which simply
  106:       # moves the file to the cache.  Useful for large files.
  107        #
  108        # === Parameters
  ...
  114        # [CarrierWave::FormNotMultipart] if the assigned parameter is a string
  115        #
  116:       def cache!(new_file = sanitized_file)
  117          new_file = CarrierWave::SanitizedFile.new(new_file)
  118  
  ...
  120            raise CarrierWave::FormNotMultipart if new_file.is_path? && ensure_multipart_form
  121  
  122:           with_callbacks(:cache, new_file) do
  123:             self.cache_id = CarrierWave.generate_cache_id unless cache_id
  124  
  125              @filename = new_file.filename
  126              self.original_filename = new_file.filename
  127  
  128:             if move_to_cache
  129:               @file = new_file.move_to(cache_path, permissions, directory_permissions)
  130              else
  131:               @file = new_file.copy_to(cache_path, permissions, directory_permissions)
  132              end
  133            end
  ...
  136  
  137        ##
  138:       # Retrieves the file with the given cache_name from the cache.
  139        #
  140        # === Parameters
  141        #
  142:       # [cache_name (String)] uniquely identifies a cache file
  143        #
  144        # === Raises
  145        #
  146:       # [CarrierWave::InvalidParameter] if the cache_name is incorrectly formatted.
  147        #
  148:       def retrieve_from_cache!(cache_name)
  149:         with_callbacks(:retrieve_from_cache, cache_name) do
  150:           self.cache_id, self.original_filename = cache_name.to_s.split('/', 2)
  151            @filename = original_filename
  152:           @file = CarrierWave::SanitizedFile.new(cache_path)
  153          end
  154        end
  ...
  156      private
  157  
  158:       def cache_path
  159:         File.expand_path(File.join(cache_dir, cache_name), root)
  160        end
  161  
  162:       attr_reader :cache_id, :original_filename
  163  
  164        # We can override the full_original_filename method in other modules
  165        alias_method :full_original_filename, :original_filename
  166  
  167:       def cache_id=(cache_id)
  168:         raise CarrierWave::InvalidParameter, "invalid cache id" unless cache_id =~ /\A[\d]+\-[\d]+\-[\d]{4}\z/
  169:         @cache_id = cache_id
  170        end
  171  
  ...
  175        end
  176  
  177:     end # Cache
  178    end # Uploader
  179  end # CarrierWave

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/configuration.rb:
   15          add_config :storage_engines
   16          add_config :store_dir
   17:         add_config :cache_dir
   18          add_config :enable_processing
   19          add_config :ensure_multipart_form
   20          add_config :delete_tmp_file_after_storage
   21:         add_config :move_to_cache
   22          add_config :move_to_store
   23          add_config :remove_previously_stored_files_after_update
   ..
  129              config.fog_use_ssl_for_aws = true
  130              config.store_dir = 'uploads'
  131:             config.cache_dir = 'uploads/tmp'
  132              config.delete_tmp_file_after_storage = true
  133:             config.move_to_cache = false
  134              config.move_to_store = false
  135              config.remove_previously_stored_files_after_update = true

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/default_url.rb:
   11        ##
   12        # Override this method in your uploader to provide a default url
   13:       # in case no file has been cached/stored yet.
   14        #
   15        def default_url; end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/download.rb:
   10        include CarrierWave::Uploader::Callbacks
   11        include CarrierWave::Uploader::Configuration
   12:       include CarrierWave::Uploader::Cache
   13  
   14        class RemoteFile
   ..
   52  
   53        ##
   54:       # Caches the file by downloading it from the given URL.
   55        #
   56        # === Parameters
   ..
   63            file = RemoteFile.new(processed_uri)
   64            raise CarrierWave::DownloadError, "trying to download a file which is not served over HTTP" unless file.http?
   65:           cache!(file)
   66          end
   67        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/extension_blacklist.rb:
    5  
    6        included do
    7:         before :cache, :check_blacklist!
    8        end
    9  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/extension_whitelist.rb:
    7  
    8        included do
    9:         before :cache, :check_whitelist!
   10        end
   11  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/processing.rb:
   12          self.processors = []
   13  
   14:         after :cache, :process!
   15        end
   16  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/proxy.rb:
   48  
   49        ##
   50:       # Fetches the size of the currently stored/cached file
   51        #
   52        # === Returns

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/remove.rb:
   15            @file.delete if @file
   16            @file = nil
   17:           @cache_id = nil
   18          end
   19        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/store.rb:
    8        include CarrierWave::Uploader::Callbacks
    9        include CarrierWave::Uploader::Configuration
   10:       include CarrierWave::Uploader::Cache
   11  
   12        ##
   ..
   47        # Stores the file by passing it to this Uploader's storage engine.
   48        #
   49:       # If new_file is omitted, a previously cached file will be stored.
   50        #
   51        # === Parameters
   ..
   54        #
   55        def store!(new_file=nil)
   56:         cache!(new_file) if new_file && ((@cache_id != parent_cache_id) || @cache_id.nil?)
   57:         if @file and @cache_id
   58            with_callbacks(:store, new_file) do
   59              new_file = storage.store!(@file)
   60              @file.delete if (delete_tmp_file_after_storage && ! move_to_store)
   61:             delete_cache_id
   62              @file = new_file
   63:             @cache_id = nil
   64            end
   65          end
   ..
   67  
   68        ##
   69:       # Deletes a cache id (tmp dir in cache)
   70        #
   71:       def delete_cache_id
   72:         if @cache_id
   73:           path = File.expand_path(File.join(cache_dir, @cache_id), CarrierWave.root)
   74            begin
   75              Dir.rmdir(path)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/lib/carrierwave/uploader/versions.rb:
   14          self.version_names = []
   15  
   16:         attr_accessor :parent_cache_id
   17  
   18:         after :cache, :assign_parent_cache_id
   19:         after :cache, :cache_versions!
   20          after :store, :store_versions!
   21          after :remove, :remove_versions!
   22:         after :retrieve_from_cache, :retrieve_versions_from_cache!
   23          after :retrieve_from_store, :retrieve_versions_from_store!
   24        end
   ..
   70  
   71              # Regardless of what is set in the parent uploader, do not enforce the
   72:             # move_to_cache config option on versions because it moves the original
   73              # file to the version's target file.
   74              #
   ..
   77              #
   78              # version :thumb do
   79:             #   def move_to_cache
   80              #     true
   81              #   end
   ..
   83              #
   84              uploader.class_eval <<-RUBY
   85:               def move_to_cache
   86                  false
   87                end
   ..
  215          # Some files could possibly not be stored on the local disk. This
  216          # doesn't play nicely with processing. Make sure that we're only
  217:         # processing a cached file
  218          #
  219          # The call to store! will trigger the necessary callbacks to both
  220          # process this version and all sub-versions
  221          if versions.any?
  222:           file = sanitized_file if !cached?
  223            store_versions!(file, versions)
  224          else
  225:           cache! if !cached?
  226            store!
  227          end
  ...
  229  
  230      private
  231:       def assign_parent_cache_id(file)
  232          active_versions.each do |name, uploader|
  233:           uploader.parent_cache_id = @cache_id
  234          end
  235        end
  ...
  249        end
  250  
  251:       def cache_versions!(new_file)
  252          # We might have processed the new_file argument after the callbacks were
  253          # initialized, so get the actual file based off of the current state of
  ...
  257  
  258          active_versions.each do |name, v|
  259:           next if v.cached?
  260  
  261:           v.send(:cache_id=, cache_id)
  262:           # If option :from_version is present, create cache using cached file from
  263            # version indicated
  264            if self.class.versions[name][:options] && self.class.versions[name][:options][:from_version]
  265:             # Maybe the reference version has not been cached yet
  266:             unless versions[self.class.versions[name][:options][:from_version]].cached?
  267:               versions[self.class.versions[name][:options][:from_version]].cache!(processed_parent)
  268              end
  269              processed_version = SanitizedFile.new :tempfile => versions[self.class.versions[name][:options][:from_version]],
  270                :filename => new_file.original_filename
  271:             v.cache!(processed_version)
  272            else
  273:             v.cache!(processed_parent)
  274            end
  275          end
  ...
  289        end
  290  
  291:       def retrieve_versions_from_cache!(cache_name)
  292:         versions.each { |name, v| v.retrieve_from_cache!(cache_name) }
  293        end
  294  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/carrierwave-0.9.0/README.md:
   64  ```
   65  
   66: CarrierWave gives you a `store` for permanent storage, and a `cache` for
   67  temporary storage. You can use different stores, including filesystem
   68  and cloud storage.
   ..
   96  ```
   97  
   98: Now you can cache files by assigning them to the attribute, they will
   99  automatically be stored when the record is saved.
  100  
  ...
  135  Define `store_dir` as `nil` if you'd like to store files at the root level.
  136  
  137: If you store files outside the project root folder, you may want to define `cache_dir` in the same way:
  138  
  139  ```ruby
  140  class MyUploader < CarrierWave::Uploader::Base
  141:   def cache_dir
  142:     '/tmp/projectname-cache'
  143    end
  144  end
  ...
  304  ```
  305  
  306: The option `:from_version` uses the file cached in the `:thumb` version instead
  307  of the original version, potentially resulting in faster processing.
  308  
  ...
  312  CarrierWave has a feature that makes it easy to remember the uploaded file even
  313  in that case. Suppose your `user` model has an uploader mounted on `avatar`
  314: file, just add a hidden field called `avatar_cache` (don't forget to add it to
  315  the attr_accessible list as necessary). In Rails, this would look like this:
  316  
  ...
  320      <label>My Avatar</label>
  321      <%= f.file_field :avatar %>
  322:     <%= f.hidden_field :avatar_cache %>
  323    </p>
  324  <% end %>
  ...
  334      <%= image_tag(@user.avatar_url) if @user.avatar? %>
  335      <%= f.file_field :avatar %>
  336:     <%= f.hidden_field :avatar_cache %>
  337    </p>
  338  <% end %>
  ...
  546    config.fog_directory  = 'name_of_directory'                     # required
  547    config.fog_public     = false                                   # optional, defaults to true
  548:   config.fog_attributes = {'Cache-Control'=>'max-age=315576000'}  # optional, defaults to {}
  549  end
  550  ```
  ...
  768  ## Large files
  769  
  770: By default, CarrierWave copies an uploaded file twice, first copying the file into the cache, then
  771  copying the file into the store.  For large files, this can be prohibitively time consuming.
  772  
  773: You may change this behavior by overriding either or both of the `move_to_cache` and
  774  `move_to_store` methods:
  775  
  776  ```ruby
  777  class MyUploader < CarrierWave::Uploader::Base
  778:   def move_to_cache
  779      true
  780    end
  ...
  785  ```
  786  
  787: When the `move_to_cache` and/or `move_to_store` methods return true, files will be moved (instead of copied) to the cache and store respectively.
  788  
  789  This has only been tested with the local filesystem store.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/benchmark/test.txt:
   19  <link rel="stylesheet" href="http://bits.wikimedia.org/w/extensions/UsabilityInitiative/css/combined.min.css?117" type="text/css" media="all" /> 
   20  <link rel="stylesheet" href="http://bits.wikimedia.org/w/extensions/UsabilityInitiative/css/vector/jquery-ui-1.7.2.css?1.7.2y" type="text/css" media="all" /> 
   21: <link rel="stylesheet" href="/w/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="all" /> 
   22: <link rel="stylesheet" href="/w/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="print" /> 
   23: <link rel="stylesheet" href="/w/index.php?title=MediaWiki:Handheld.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="handheld" /> 
   24: <link rel="stylesheet" href="/w/index.php?title=MediaWiki:Vector.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=2678400&amp;action=raw&amp;maxage=2678400" type="text/css" media="all" /> 
   25  <link rel="stylesheet" href="/w/index.php?title=-&amp;action=raw&amp;maxage=2678400&amp;gen=css" type="text/css" media="all" /> 
   26  <script type="text/javascript"> 
   ..
   79  <script src="http://bits.wikimedia.org/w/extensions/UsabilityInitiative/Vector/Vector.combined.min.js?283-19" type="text/javascript"></script> 
   80  <script type="text/javascript">mw.usability.addMessages({'vector-collapsiblenav-more':'更多语言','vector-editwarning-warning':'离开这个页面可能会令您失去之前的所有更改。\n若您已经登入，您可在您参数设置的“编辑”节中关闭此警告。','vector-simplesearch-search':'搜索','vector-simplesearch-containing':'含有...'});</script> 
   81: <script src="/w/index.php?title=Special:BannerController&amp;cache=/cn.js&amp;283-19" type="text/javascript"></script> 
   82  <!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/skins-1.5/vector/csshover.htc")}</style><![endif]--> 
   83  <script src="/w/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=vector&amp;283-19" type="text/javascript"></script> 
   ..
  122  </style> 
  123  <style type="text/css">/*<![CDATA[*/
  124: @import "/w/index.php?title=MediaWiki:Geshi.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=2678400";
  125  /*]]>*/
  126  </style></head> 
  ...
  432  --> 
  433   
  434: <!-- Saved in parser cache with key zhwiki:pcache:idhash:3632-0!1!0!!zh!4!zh and timestamp 20110110032035 --> 
  435  <div class="printfooter"> 
  436  来自“<a href="http://zh.wikipedia.org/wiki/XML">http://zh.wikipedia.org/wiki/XML</a>”</div> 

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/mkmf.log:
  464  checking for minix/config.h... no
  465  checking whether it is safe to define __EXTENSIONS__... yes
  466: checking for gcc... (cached) gcc
  467: checking whether we are using the GNU C compiler... (cached) yes
  468: checking whether gcc accepts -g... (cached) yes
  469: checking for gcc option to accept ISO C89... (cached) none needed
  470: checking dependency style of gcc... (cached) gcc3
  471  checking whether gcc and cc understand -c and -o together... yes
  472  checking whether ln -s works... yes
  ...
  494  checking if gcc static flag -static works... yes
  495  checking if gcc supports -c -o file.o... yes
  496: checking if gcc supports -c -o file.o... (cached) yes
  497  checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
  498  checking dynamic linker characteristics... GNU/Linux ld.so
  ...
  502  checking whether to build shared libraries... no
  503  checking whether to build static libraries... yes
  504: checking for ANSI C header files... (cached) yes
  505  checking whether sys/types.h defines makedev... yes
  506  checking for sys/wait.h that is POSIX.1 compatible... yes
  507: checking for stdint.h... (cached) yes
  508  checking fcntl.h usability... yes
  509  checking fcntl.h presence... yes
  ...
  512  checking locale.h presence... yes
  513  checking for locale.h... yes
  514: checking for stdint.h... (cached) yes
  515: checking for inttypes.h... (cached) yes
  516: checking for unistd.h... (cached) yes
  517  checking utime.h usability... yes
  518  checking utime.h presence... yes
  ...
  536  checking sys/mman.h presence... yes
  537  checking for sys/mman.h... yes
  538: checking for sys/stat.h... (cached) yes
  539: checking for sys/types.h... (cached) yes
  540  checking sys/utime.h usability... no
  541  checking sys/utime.h presence... no

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/acinclude.m4:
    3  AC_DEFUN([AC_STRUCT_TIMEZONE_DAYLIGHT],
    4  [AC_REQUIRE([AC_STRUCT_TM])dnl
    5: AC_CACHE_CHECK([for tm_zone in struct tm], ac_cv_struct_tm_zone,
    6  [AC_TRY_COMPILE([#include <sys/types.h>
    7  #include <$ac_cv_struct_tm>], [struct tm tm; tm.tm_zone;],
    .
   14  # consider it declared and we won't give our own extern.
   15  AC_CHECK_DECLS([tzname], , , [#include <time.h>])
   16: AC_CACHE_CHECK(for tzname, ac_cv_var_tzname,
   17  [AC_TRY_LINK(
   18  [#include <time.h>
   ..
   25    fi
   26  
   27: AC_CACHE_CHECK([for tm_isdst in struct tm], ac_cv_struct_tm_isdst,
   28  [AC_TRY_COMPILE([#include <sys/types.h>
   29  #include <$ac_cv_struct_tm>], [struct tm tm; tm.tm_isdst;],
   ..
   35  
   36  AC_CHECK_DECLS([daylight], , , [#include <time.h>])
   37: AC_CACHE_CHECK(for daylight, ac_cv_var_daylight,
   38  [AC_TRY_LINK(
   39  changequote(<<, >>)dnl
   ..
   50  
   51  AC_DEFUN([AC_STRUCT_OPTION_GETOPT_H],
   52: [AC_CACHE_CHECK([for struct option in getopt], ac_cv_struct_option_getopt_h,
   53  [AC_TRY_COMPILE([#include <getopt.h>], [struct option op; op.name;],
   54    ac_cv_struct_option_getopt_h=yes, ac_cv_struct_option_getopt_h=no)])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/aclocal.m4:
  165  # See how the compiler implements dependency checking.
  166  # NAME is "CC", "CXX", "GCJ", or "OBJC".
  167: # We try a few techniques and use that to set a single cache variable.
  168  #
  169  # We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was
  ...
  184                     [depcc="$$1"   am_compiler_list=])
  185  
  186: AC_CACHE_CHECK([dependency style of $depcc],
  187                 [am_cv_$1_dependencies_compiler_type],
  188  [if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  ...
  668  AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
  669  AC_REQUIRE_AUX_FILE([compile])dnl
  670: # FIXME: we rely on the cache variable name because
  671  # there is no other way.
  672  set dummy $CC
  ...
 1001    esac
 1002  
 1003:   # If the value was cached, stop now.  We just wanted to have am__tar
 1004    # and am__untar set.
 1005    test -n "${am_cv_prog_tar_$1}" && break
 ....
 1018  rm -rf conftest.dir
 1019  
 1020: AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
 1021  AC_MSG_RESULT([$am_cv_prog_tar_$1])])
 1022  AC_SUBST([am__tar])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/config.log:
 2392  
 2393  ## ---------------- ##
 2394: ## Cache variables. ##
 2395  ## ---------------- ##
 2396  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/INSTALL:
   31  debugging `configure').
   32  
   33:    It can also use an optional file (typically called `config.cache'
   34: and enabled with `--cache-file=config.cache' or simply `-C') that saves
   35  the results of its tests to speed up reconfiguring.  Caching is
   36  disabled by default to prevent problems with accidental use of stale
   37: cache files.
   38  
   39     If you need to do unusual things to compile the package, please try
   40  to figure out how `configure' could check whether to do them, and mail
   41  diffs or instructions to the address given in the `README' so they can
   42: be considered for the next release.  If you are using the cache, and at
   43: some point `config.cache' contains results you don't want to keep, you
   44  may remove or edit it.
   45  
   ..
  284     If you want to set default values for `configure' scripts to share,
  285  you can create a site shell script called `config.site' that gives
  286: default values for variables like `CC', `cache_file', and `prefix'.
  287  `configure' looks for `PREFIX/share/config.site' if it exists, then
  288  `PREFIX/etc/config.site' if it exists.  Or, you can set the
  ...
  331       script, and exit.
  332  
  333: `--cache-file=FILE'
  334:      Enable the cache: use and save the results of the tests in FILE,
  335:      traditionally `config.cache'.  FILE defaults to `/dev/null' to
  336       disable caching.
  337  
  338: `--config-cache'
  339  `-C'
  340:      Alias for `--cache-file=config.cache'.
  341  
  342  `--quiet'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/m4/libtool.m4:
  113  [for cc_temp in $1""; do
  114    case $cc_temp in
  115:     compile | *[[\\/]]compile | ccache | *[[\\/]]ccache ) ;;
  116      distcc | *[[\\/]]distcc | purify | *[[\\/]]purify ) ;;
  117      \-*) ;;
  ...
  908        [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])
  909  
  910:     AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],
  911        [lt_cv_apple_cc_single_mod=no
  912        if test -z "${LT_MULTI_MODULE}"; then
  ...
  930  	rm -f conftest.*
  931        fi])
  932:     AC_CACHE_CHECK([for -exported_symbols_list linker flag],
  933        [lt_cv_ld_exported_symbols_list],
  934        [lt_cv_ld_exported_symbols_list=no
  ...
 1321    SAVE_CFLAGS="$CFLAGS"
 1322    CFLAGS="$CFLAGS -belf"
 1323:   AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,
 1324      [AC_LANG_PUSH(C)
 1325       AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])
 ....
 1403  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1404  m4_require([_LT_DECL_SED])dnl
 1405: AC_CACHE_CHECK([$1], [$2],
 1406    [$2=no
 1407     m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
 ....
 1454  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1455  m4_require([_LT_DECL_SED])dnl
 1456: AC_CACHE_CHECK([$1], [$2],
 1457    [$2=no
 1458     save_LDFLAGS="$LDFLAGS"
 ....
 1497  # find the maximum length of command line arguments
 1498  AC_MSG_CHECKING([the maximum length of command line arguments])
 1499: AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
 1500    i=0
 1501    teststring="ABCD"
 ....
 1797      LIBS="$lt_cv_dlopen_libs $LIBS"
 1798  
 1799:     AC_CACHE_CHECK([whether a program can dlopen itself],
 1800  	  lt_cv_dlopen_self, [dnl
 1801  	  _LT_TRY_DLOPEN_SELF(
 ....
 1806      if test "x$lt_cv_dlopen_self" = xyes; then
 1807        wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
 1808:       AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
 1809  	  lt_cv_dlopen_self_static, [dnl
 1810  	  _LT_TRY_DLOPEN_SELF(
 ....
 1852  m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1853  m4_require([_LT_TAG_COMPILER])dnl
 1854: AC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],
 1855    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],
 1856    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no
 ....
 1933  # ----------------
 1934  m4_defun([_LT_CHECK_OBJDIR],
 1935: [AC_CACHE_CHECK([for objdir], [lt_cv_objdir],
 1936  [rm -f .libs 2>/dev/null
 1937  mkdir .libs 2>/dev/null
 ....
 2730  [m4_require([_LT_DECL_EGREP])dnl
 2731  AC_MSG_CHECKING([for $1])
 2732: AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
 2733  [case $MAGIC_CMD in
 2734  [[\\/*] |  ?:[\\/]*])
 ....
 2861    AC_MSG_CHECKING([for non-GNU ld])
 2862  fi
 2863: AC_CACHE_VAL(lt_cv_path_LD,
 2864  [if test -z "$LD"; then
 2865    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
 ....
 2910  #- --------------
 2911  m4_defun([_LT_PATH_LD_GNU],
 2912: [AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,
 2913  [# I'd rather use --version here, but apparently some GNU lds only accept -v.
 2914  case `$LD -v 2>&1 </dev/null` in
 ....
 2929  #   -- PORTME Some linkers may need a different reload flag.
 2930  m4_defun([_LT_CMD_RELOAD],
 2931: [AC_CACHE_CHECK([for $LD option to reload object files],
 2932    lt_cv_ld_reload_flag,
 2933    [lt_cv_ld_reload_flag='-r'])
 ....
 2959  [m4_require([_LT_DECL_EGREP])
 2960  m4_require([_LT_DECL_OBJDUMP])
 2961: AC_CACHE_CHECK([how to recognize dependent libraries],
 2962  lt_cv_deplibs_check_method,
 2963  [lt_cv_file_magic_cmd='$MAGIC_CMD'
 ....
 3167  AC_DEFUN([LT_PATH_NM],
 3168  [AC_REQUIRE([AC_PROG_CC])dnl
 3169: AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
 3170  [if test -n "$NM"; then
 3171    # Let the user override the test.
 ....
 3225  _LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl
 3226  
 3227: AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
 3228    [lt_cv_nm_interface="BSD nm"
 3229    echo "int some_variable = 0;" > conftest.$ac_ext
 ....
 3310  # Check for command to grab the raw symbol name followed by C symbol from nm.
 3311  AC_MSG_CHECKING([command to parse $NM output from $compiler object])
 3312: AC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],
 3313  [
 3314  # These are sane defaults that work on at least a few old systems.
 ....
 7042  m4_defun([AC_PROG_SED],
 7043  [AC_MSG_CHECKING([for a sed that does not truncate output])
 7044: AC_CACHE_VAL(lt_cv_path_SED,
 7045  [# Loop through the user's path and test for sed and gsed.
 7046  # Then use that list of sed's as ones to test for truncation.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/filesystems:
  794  >>>>>>3		string		>\0		\b, OEM-ID "%8.8s"
  795  #http://mirror.href.com/thestarman/asm/debug/debug2.htm#IHC
  796: >>>>>>>8	string		IHC		\b cached by Windows 9M
  797  >>>>>>11	uleshort	>512		\b, Bytes/sector %u
  798  #>>>>>>11	uleshort	=512		\b, Bytes/sector %u=512 (usual)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/geo:
   76  9	string MGD77	MGD77 Header, Marine Geophysical Data Exchange Format
   77  
   78: # MBSystem processing caches the mbinfo output
   79: 1	string	Swath\ Data\ File:	mbsystem info cache
   80  
   81  # Caris John Hughes Clark format

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/netscape:
   13  0   string   \000\017\102\111 Netscape Communicator address book
   14  
   15: # .snm Caches
   16: 0	string		#\ Netscape\ folder\ cache	Netscape folder cache
   17: 0	string	\000\036\204\220\000	Netscape folder cache
   18  # .n2p 
   19  # Net 2 Phone 

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/pulsar:
    8  #
    9  
   10: 0	belong	0x1ee7f11e	Pulsar POP3 daemon mailbox cache file.
   11  >4	ubelong	x		Version: %d.
   12  >8	ubelong	x		\b%d

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/windows:
   90  
   91  
   92: # Summary: Windows help cache
   93  # Created by: unknown
   94: 0	string		\164\146\115\122\012\000\000\000\001\000\000\000	MS Windows help cache
   95  
   96  
   97: # Summary: IE cache file
   98  # Created by: Christophe Monniez
   99: 0	string	Client\ UrlCache\ MMF 	Internet Explorer cache file
  100  >20	string	>\0			version %s
  101  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/magic/Magdir/wsdl:
    2  #------------------------------------------------------------------------------
    3  # $File: wsdl,v 1.1 2011/01/19 19:34:50 christos Exp $
    4: # wsdl: PHP WSDL Cache, http://www.php.net/manual/en/book.soap.php
    5: # Cache format extracted from source:
    6  # http://svn.php.net/viewvc/php/php-src/trunk/ext/soap/php_sdl.c?revision=HEAD&view=markup
    7  # Requires file >= 5.05, see http://mx.gw.com/pipermail/file/2010/000683.html
    8  # By Elan Ruusamäe <glen@delfi.ee>, Patryk Zawadzki <patrys@pld-linux.org>, 2010-2011
    9: 0		string		wsdl		PHP WSDL cache,
   10  >4		byte		x		version 0x%02x
   11  >6		ledate		x		\b, created %s

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/Makefile:
   46  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   47  	$(ACLOCAL_M4)
   48: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   49   configure.lineno config.status.lineno
   50  mkinstalldirs = $(install_sh) -d
   ..
  687  maintainer-clean: maintainer-clean-recursive
  688  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
  689: 	-rm -rf $(top_srcdir)/autom4te.cache
  690  	-rm -f Makefile
  691  maintainer-clean-am: distclean-am maintainer-clean-generic

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/src/file-5.08/Makefile.in:
   46  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   47  	$(ACLOCAL_M4)
   48: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   49   configure.lineno config.status.lineno
   50  mkinstalldirs = $(install_sh) -d
   ..
  687  maintainer-clean: maintainer-clean-recursive
  688  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
  689: 	-rm -rf $(top_srcdir)/autom4te.cache
  690  	-rm -f Makefile
  691  maintainer-clean-am: distclean-am maintainer-clean-generic

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/ext/charlock_holmes/transliterator.cpp:
   12  
   13  static void check_utf8_encoding(VALUE str) {
   14:   static rb_encoding *_cached[3] = {NULL, NULL, NULL};
   15    rb_encoding *enc;
   16  
   17:   if (_cached[0] == NULL) {
   18:     _cached[0] = rb_utf8_encoding();
   19:     _cached[1] = rb_usascii_encoding();
   20:     _cached[2] = rb_ascii8bit_encoding();
   21    }
   22  
   23    enc = rb_enc_get(str);
   24:   if (enc != _cached[0] && enc != _cached[1] && enc != _cached[2]) {
   25      rb_raise(rb_eEncodingCompatibilityError,
   26        "Input must be UTF-8 or US-ASCII, %s given", rb_enc_name(enc));

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/charlock_holmes-0.6.9.4/test/fixtures/laholator.py:
   16  
   17  #Hey monkey patcher! NLTK's NgramModel is not serializable w/ pickle.HIGHEST_PROTOCOL (2)
   18: from werkzeug.contrib import cache
   19: cache.HIGHEST_PROTOCOL = 1
   20: from werkzeug.contrib.cache import SimpleCache
   21  
   22  from BeautifulSoup import BeautifulSoup
   ..
   27  app = Flask(__name__)
   28  app.config.from_object('settings')
   29: cache = SimpleCache()
   30  
   31  app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///%s/db.sqlite3'%abspath(dirname(__file__))
   ..
   44      @classmethod
   45      def get_all(self):
   46:         cached = cache.get('samples')
   47:         if cached is None:
   48:             cached = self.query.filter_by(enabled=True).all()
   49:             cache.set('samples', cached, timeout=app.config['CACHE_MINUTES'] * 60)
   50:         return cached
   51  
   52  class Output(db.Model):
   ..
  109      #NLTK produces a LOT of warnings - don't mess with my error log
  110      warnings.simplefilter("ignore")
  111:     cached = cache.get('ngram_model')
  112:     if cached is None:
  113          samples = Sample.get_all()
  114          if samples:
  ...
  116              tokenizer = nltk.tokenize.WordPunctTokenizer()
  117              tokenized = tokenizer.tokenize(' '.join(text))
  118:             cached = nltk.NgramModel(3-int(bool(bigrams)), tokenized)
  119:             cache.set('ngram_model', cached, timeout=app.config['CACHE_MINUTES'] * 60)
  120:     return cached
  121  
  122  def _generate(words,bigrams):

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coderay-1.1.0/lib/coderay/scanner.rb:
  194          end
  195          
  196:         @cached_tokens = @tokens
  197          if source.is_a? Array
  198            @tokens.split_into_parts(*source.map { |part| part.size })
  ...
  202        end
  203        
  204:       # Cache the result of tokenize.
  205        def tokens
  206:         @cached_tokens ||= tokenize
  207        end
  208        
  ...
  283        def reset_instance
  284          @tokens.clear if @tokens.respond_to?(:clear) && !@options[:keep_tokens]
  285:         @cached_tokens = nil
  286          @binary_string = nil if defined? @binary_string
  287        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coderay-1.1.0/lib/coderay/scanners/java/builtin_types.rb:
    8        AbstractAction AbstractBorder AbstractButton AbstractCellEditor AbstractCollection
    9        AbstractColorChooserPanel AbstractDocument AbstractExecutorService AbstractInterruptibleChannel
   10:       AbstractLayoutCache AbstractList AbstractListModel AbstractMap AbstractMethodError AbstractPreferences
   11        AbstractQueue AbstractQueuedSynchronizer AbstractSelectableChannel AbstractSelectionKey AbstractSelector
   12        AbstractSequentialList AbstractSet AbstractSpinnerModel AbstractTableModel AbstractUndoableEdit
   ..
   63        BufferedInputStream BufferedOutputStream BufferedReader BufferedWriter BufferOverflowException
   64        BufferStrategy BufferUnderflowException Button ButtonGroup ButtonModel ButtonUI Byte
   65:       ByteArrayInputStream ByteArrayOutputStream ByteBuffer ByteChannel ByteLookupTable ByteOrder CachedRowSet
   66:       CacheRequest CacheResponse Calendar Callable CallableStatement Callback CallbackHandler
   67        CancelablePrintJob CancellationException CancelledKeyException CannotProceedException
   68        CannotRedoException CannotUndoException Canvas CardLayout Caret CaretEvent CaretListener CellEditor
   ..
  136        ExemptionMechanismSpi ExpandVetoException ExportException Expression ExtendedRequest ExtendedResponse
  137        Externalizable FactoryConfigurationError FailedLoginException FeatureDescriptor Fidelity Field
  138:       FieldPosition FieldView File FileCacheImageInputStream FileCacheImageOutputStream FileChannel
  139        FileChooserUI FileDescriptor FileDialog FileFilter FileHandler FileImageInputStream
  140        FileImageOutputStream FileInputStream FileLock FileLockInterruptionException FilenameFilter FileNameMap
  141        FileNotFoundException FileOutputStream FilePermission FileReader FileSystemView FileView FileWriter
  142        Filter FilteredImageSource FilteredRowSet FilterInputStream FilterOutputStream FilterReader FilterWriter
  143:       Finishings FixedHeightLayoutCache FlatteningPathIterator FlavorEvent FlavorException FlavorListener
  144        FlavorMap FlavorTable Float FloatBuffer FloatControl FlowLayout FlowView Flushable FocusAdapter
  145        FocusEvent FocusListener FocusManager FocusTraversalPolicy Font FontFormatException FontMetrics
  ...
  230        MBeanServerForwarder MBeanServerInvocationHandler MBeanServerNotification MBeanServerNotificationFilter
  231        MBeanServerPermission MBeanTrustPermission Media MediaName MediaPrintableArea MediaSize MediaSizeName
  232:       MediaTracker MediaTray Member MemoryCacheImageInputStream MemoryCacheImageOutputStream MemoryHandler
  233        MemoryImageSource MemoryManagerMXBean MemoryMXBean MemoryNotificationInfo MemoryPoolMXBean MemoryType
  234        MemoryUsage Menu MenuBar MenuBarUI MenuComponent MenuContainer MenuDragMouseEvent MenuDragMouseListener
  ...
  320        RenderableImage RenderableImageOp RenderableImageProducer RenderContext RenderedImage
  321        RenderedImageFactory Renderer RenderingHints RepaintManager ReplicateScaleFilter RequestingUserName
  322:       RequiredModelMBean RescaleOp ResolutionSyntax Resolver ResolveResult ResourceBundle ResponseCache Result
  323        ResultSet ResultSetMetaData Retention RetentionPolicy ReverbType RGBImageFilter RMIClassLoader
  324        RMIClassLoaderSpi RMIClientSocketFactory RMIConnection RMIConnectionImpl RMIConnectionImpl_Stub
  ...
  338        Scrollbar ScrollBarUI ScrollPane ScrollPaneAdjustable ScrollPaneConstants ScrollPaneLayout ScrollPaneUI
  339        SealedObject SearchControls SearchResult SecretKey SecretKeyFactory SecretKeyFactorySpi SecretKeySpec
  340:       SecureCacheResponse SecureClassLoader SecureRandom SecureRandomSpi Security SecurityException
  341        SecurityManager SecurityPermission Segment SelectableChannel SelectionKey Selector SelectorProvider
  342        Semaphore SeparatorUI Sequence SequenceInputStream Sequencer SerialArray SerialBlob SerialClob
  ...
  401        URLClassLoader URLConnection URLDecoder URLEncoder URLStreamHandler URLStreamHandlerFactory
  402        UTFDataFormatException Util UtilDelegate Utilities UUID Validator ValidatorHandler ValueExp ValueHandler
  403:       ValueHandlerMultiFormat VariableHeightLayoutCache Vector VerifyError VetoableChangeListener
  404        VetoableChangeListenerProxy VetoableChangeSupport View ViewFactory ViewportLayout ViewportUI
  405        VirtualMachineError Visibility VMID VoiceStatus Void VolatileImage WeakHashMap WeakReference WebRowSet

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coderay-1.1.0/lib/coderay/scanners/php.rb:
   52          atanh basename bcadd bccomp bcdiv bcmod bcmul bcpow bcpowmod bcscale bcsqrt bcsub bin2hex bindec
   53          bindtextdomain bzclose bzcompress bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread bzwrite
   54:         calculhmac ceil chdir checkdate checkdnsrr chgrp chmod chop chown chr chroot clearstatcache closedir closelog
   55          compact constant copy cos cosh count crc32 crypt current date dcgettext dcngettext deaggregate decbin dechex
   56          decoct define defined deg2rad delete dgettext die dirname diskfreespace dl dngettext doubleval each

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coderay-1.1.0/lib/coderay/tokens_proxy.rb:
   35      end
   36      
   37:     # The (cached) result of the tokenized input; a Tokens instance.
   38      def tokens
   39        @tokens ||= scanner.tokenize(input)
   40      end
   41      
   42:     # A (cached) scanner instance to use for the scan task.
   43      def scanner
   44        @scanner ||= CodeRay.scanner(lang, options, &block)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coercible-1.0.0/lib/support/type_lookup.rb:
    6      TYPE_FORMAT = /\A[A-Z]\w*\z/.freeze
    7  
    8:     # Set cache ivar on the model
    9      #
   10      # @param [Class] model
   ..
   14      # @api private
   15      def self.extended(model)
   16:       model.instance_variable_set('@type_lookup_cache', {})
   17      end
   18  
   ..
   33      # @api public
   34      def determine_type(class_or_name)
   35:       @type_lookup_cache[class_or_name] ||= determine_type_and_cache(class_or_name)
   36      end
   37  
   ..
   47      private
   48  
   49:     # Determine type and cache the class
   50      #
   51      # @return [Class]
   52      #
   53      # @api private
   54:     def determine_type_and_cache(class_or_name)
   55        case class_or_name
   56        when singleton_class

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/coffee-rails-4.0.1/test/assets_test.rb:
   12      @app.config.active_support.deprecation = :stderr
   13      @app.config.assets.enabled = true
   14:     @app.config.assets.cache_store = [ :file_store, "#{tmp_path}/cache" ]
   15      @app.paths["log"] = "#{tmp_path}/log/test.log"
   16      @app.initialize!
   ..
   18  
   19    def teardown
   20:     FileUtils.rm_rf "#{tmp_path}/cache"
   21      FileUtils.rm_rf "#{tmp_path}/log"
   22      File.delete "#{tmp_path}/coffee-script.js"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/connection_pool-1.2.0/README.md:
   28  
   29  ``` ruby
   30: @memcached = ConnectionPool.new(:size => 5, :timeout => 5) { Dalli::Client.new }
   31  ```
   32  
   ..
   34  
   35  ``` ruby
   36: @memcached.with do |dalli|
   37    dalli.get('some-count')
   38  end
   ..
   46  
   47  ``` ruby
   48: @memcached.with(:timeout => 2.0) do |dalli|
   49    dalli.get('some-count')
   50  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/crack-0.4.1/test/data/twittersearch-firefox.json:
    1: {"results":[{"text":"#let\u00f6lt\u00e9s - Mozilla SeaMonkey 1.1.16 magyar: B\u00f6ng\u00e9sz\u00f5 (Firefox), chat program (ChatZilla), weboldal.. http:\/\/tinyurl.com\/clvydf","to_user_id":null,"from_user":"mp33portal","id":1567167290,"from_user_id":7191223,"iso_language_code":"hu","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/96234069\/mp33teamlogo_normal.JPG","created_at":"Mon, 20 Apr 2009 17:25:16 +0000"},{"text":"#veille-sur-internet Speedtile 0.4, un nouveau plugin de bookmarks en visuel pour Firefox: \n.. http:\/\/twurl.nl\/43eq0o","to_user_id":null,"from_user":"rez0","id":1567164191,"from_user_id":87975,"iso_language_code":"fr","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/71734441\/80x80-2_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:53 +0000"},{"text":"Firefox #fail 2 do dia...","to_user_id":null,"from_user":"lucascimino","id":1567163150,"from_user_id":561101,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/www.nambu.com&quot;&gt;Nambu&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/108061839\/macbookpro_7_normal.gif","created_at":"Mon, 20 Apr 2009 17:24:45 +0000"},{"text":"Download Squad: AVG offers standalone realtime web page scanning for Firefox and IE: Filed under:.. http:\/\/tinyurl.com\/c4v923","to_user_id":null,"from_user":"techwatch","id":1567162787,"from_user_id":907915,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/118338486\/FotoFlexer_Photo_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:42 +0000"},{"text":"oops.....thought I was typing in my address bar. Using my Sidekick as web for past 3 days...Need...Firefox...Back...In...Life...","to_user_id":null,"from_user":"MikeMorganJr","id":1567162698,"from_user_id":8472813,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterhelp.blogspot.com\/2008\/05\/twitter-via-mobile-web-mtwittercom.html&quot;&gt;mobile web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/101742681\/S4201261_normal.JPG","created_at":"Mon, 20 Apr 2009 17:24:42 +0000"},{"text":"Top 10 Firefox Add-ons for Linux Users http:\/\/www.linux-mag.com\/id\/7307 @LinuxMagazine","to_user_id":null,"from_user":"jtcatchenco","id":1567161761,"from_user_id":102514,"iso_language_code":"no","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/67647355\/jairo2_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:32 +0000"},{"text":"@mamamali Try &quot;TwitterFox&quot; for Firefox?","to_user_id":11418879,"to_user":"mamamali","from_user":"coldmilktea","id":1567160292,"from_user_id":366808,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/58805948\/n546821674_1689558_9769_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:24 +0000"},{"text":"@cbcurran i have and i like it, but i use firefox for dev. because of the dev tools available to users","to_user_id":4604162,"to_user":"cbcurran","from_user":"joshuamc","id":1567160224,"from_user_id":1038770,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57059100\/1a8f013_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:24 +0000"},{"text":"@salustio A vers\u00e3o portuguesa do Firefox inclui motor de pesquisa para o Dicion\u00e1rio Priberam que funciona correctamente!? N\u00e3o \u00e9 essa?","to_user_id":2011109,"to_user":"salustio","from_user":"priberam","id":1567158943,"from_user_id":12725990,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148282351\/logoquadrado_normal.jpg","created_at":"Mon, 20 Apr 2009 17:24:15 +0000"},{"text":"@enver555 hoy. En todos los ordenadores hay firefox y explorer, menos en el que me ha tocado hoy, que s\u00f3lo hay explorer.","to_user_id":1117,"to_user":"enver555","from_user":"Purnas","id":1567153499,"from_user_id":2869,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/122746846\/ventanica_normal.jpg","created_at":"Mon, 20 Apr 2009 17:23:31 +0000"},{"text":"uffff por favor prueben la evolucion de las pesta\u00f1as en firefox... http:\/\/tinyurl.com\/3bhosa","to_user_id":null,"from_user":"rubbenslife","id":1567152871,"from_user_id":318865,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/109636341\/gir-vector2_normal.png","created_at":"Mon, 20 Apr 2009 17:23:27 +0000"},{"text":"@Andrew_Taylor I used to use IE as an excuse to not get any work done--you know, when a web page looks great in Firefox but is crap in IE.","to_user_id":920152,"to_user":"Andrew_Taylor","from_user":"thepete","id":1567151382,"from_user_id":20159,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/software\/bigbird\/&quot;&gt;Bigbird&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/78425271\/ThePeteHead_normal.png","created_at":"Mon, 20 Apr 2009 17:23:16 +0000"},{"text":"15 cool tricks for firefox users  http:\/\/twurl.nl\/ydpfj4 found via delicious network","to_user_id":null,"from_user":"mcfarljo","id":1567150610,"from_user_id":543823,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/67908105\/twitterprofile_normal.jpg","created_at":"Mon, 20 Apr 2009 17:23:10 +0000"},{"text":"Is there a good reason why it's taking so long for Firefox to load images since the last update?","to_user_id":null,"from_user":"KidKaz","id":1567150504,"from_user_id":2473590,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/78432331\/009_a_normal.png","created_at":"Mon, 20 Apr 2009 17:23:08 +0000"},{"text":"now its not working in Firefox on clients machine and they have exact same version as me (3.0.8) on a PC. Oh well....","to_user_id":null,"from_user":"andrewyee","id":1567150403,"from_user_id":1297173,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/destroytwitter.com\/&quot;&gt;DestroyTwitter&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/107140778\/CIMG738a5_normal.jpg","created_at":"Mon, 20 Apr 2009 17:23:07 +0000"},{"text":"Voltei para o Firefox 3.0.8, o 3.1b3 est\u00e1 com alguns bugs que acabam com a produtividade...","to_user_id":null,"from_user":"yporti","id":1567148429,"from_user_id":1470378,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/126029039\/avatar2_normal.png","created_at":"Mon, 20 Apr 2009 17:22:51 +0000"},{"text":"recovered bookmarks with firefox's automatic recovery - nice feature when you need it.","to_user_id":null,"from_user":"coffeeshrk","id":1567147766,"from_user_id":2776616,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.twitterlight.com\/&quot;&gt;Twitterlight&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/132290339\/cg_normal.jpg","created_at":"Mon, 20 Apr 2009 17:22:48 +0000"},{"text":"@ewillett I'm using Firefox Portable. It has Flash, but not the latest version. I just checked in IE 7, and the titles appear last, and slow","to_user_id":1112964,"to_user":"ewillett","from_user":"fallapart","id":1567143242,"from_user_id":570499,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/55279513\/marturia_normal.gif","created_at":"Mon, 20 Apr 2009 17:22:12 +0000"},{"text":"Is there any &quot;Stop Susan Boyle News&quot; button on Firefox or IE7?","to_user_id":null,"from_user":"MyCaricaturecom","id":1567141153,"from_user_id":8967683,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/103773093\/untitled_normal.jpg","created_at":"Mon, 20 Apr 2009 17:21:56 +0000"},{"text":"Firefox Question: why is firefox not working for me? http:\/\/twurl.nl\/7dvotq","to_user_id":null,"from_user":"Firefox_Queries","id":1567139413,"from_user_id":994884,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/56842902\/fxq-a_normal.png","created_at":"Mon, 20 Apr 2009 17:21:42 +0000"},{"text":"Showing Joan the coolest add on for firefox = twitterfox","to_user_id":null,"from_user":"shannonels","id":1567130581,"from_user_id":8743358,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/112823048\/small_text1_17_normal.JPG","created_at":"Mon, 20 Apr 2009 17:20:34 +0000"},{"text":"Mientras espero la integraci\u00f3n en el Adium uso Twitbin en Firefox","to_user_id":null,"from_user":"elgaita","id":1567124994,"from_user_id":6025355,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/www.twitbin.com\/&quot;&gt;TwitBin&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/86912947\/Ojo_normal.png","created_at":"Mon, 20 Apr 2009 17:19:53 +0000"},{"text":"@tenketanken fikk du noe svar p\u00e5 den addonen til firefox?","to_user_id":4597139,"to_user":"tenketanken","from_user":"cluver","id":1567120286,"from_user_id":3489762,"iso_language_code":"no","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/119889955\/Bilde_326_normal.jpg","created_at":"Mon, 20 Apr 2009 17:19:18 +0000"},{"text":"@KurtScholle Digg had Ads? lol, With Firefox, AdBlock &amp; RSS I never see the ads","to_user_id":333651,"to_user":"KurtScholle","from_user":"bcbeatty","id":1567119630,"from_user_id":68460,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/64319687\/Me_from_the_Lodge_7-13-08_normal.jpeg","created_at":"Mon, 20 Apr 2009 17:19:12 +0000"},{"text":"@spittingcat ahhh! didn't know, I only look at youtube on firefox. don't have any mobile communicators.","to_user_id":4254917,"to_user":"spittingcat","from_user":"mattmagic","id":1567117100,"from_user_id":5727306,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/84251889\/795405-big_normal.jpg","created_at":"Mon, 20 Apr 2009 17:18:53 +0000"},{"text":"@maboa - Mozilla\/5.0 (X11; U; Linux i686; en-GB; rv:1.8.1.13) Gecko\/20080316 SUSE\/2.0.0.13-0.2 Firefox\/2.0.0.13","to_user_id":33370,"to_user":"maboa","from_user":"lhearl","id":1567116047,"from_user_id":11145048,"iso_language_code":"no","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/static.twitter.com\/images\/default_profile_normal.png","created_at":"Mon, 20 Apr 2009 17:18:47 +0000"},{"text":"Finally upgrading to Firefox 3 (from 2), on both my work and home computers. Why did it take me so long?","to_user_id":null,"from_user":"FrederikGoris","id":1567114241,"from_user_id":2183657,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57245090\/binkley_trans_normal.gif","created_at":"Mon, 20 Apr 2009 17:18:34 +0000"},{"text":"really people. stop using internet explorer! FIREFOX! that way I don't have to keep changing my details on my site :)","to_user_id":null,"from_user":"StilettoSportsJ","id":1567114128,"from_user_id":3263198,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/140589587\/summer_me_normal.jpg","created_at":"Mon, 20 Apr 2009 17:18:32 +0000"},{"text":"at\u00e9q esse firefox 308 n\u00e3o est\u00e1 t\u00e3o ruim. mas ainda me irritam alguns bugs ~~","to_user_id":null,"from_user":"caduzito","id":1567111654,"from_user_id":5051483,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/76892540\/package_toys_normal.png","created_at":"Mon, 20 Apr 2009 17:18:15 +0000"},{"text":"Cierro Firefox y tweetdeck que tengo bastante tarea que hacer","to_user_id":null,"from_user":"marv3x","id":1567110471,"from_user_id":111779,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/135137954\/moto_0679_normal.jpg","created_at":"Mon, 20 Apr 2009 17:18:05 +0000"},{"text":"@tmc057 love firefox, but now I use that google chrome on my laptop...like it too!","to_user_id":8622848,"to_user":"tmc057","from_user":"jennmet","id":1567108866,"from_user_id":7219827,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/129220839\/smile_feet_normal.jpg","created_at":"Mon, 20 Apr 2009 17:17:52 +0000"},{"text":"Firefox Plugin for Twitter http:\/\/tinyurl.com\/2bmr3q","to_user_id":null,"from_user":"mazharin","id":1567108398,"from_user_id":12764228,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148417263\/logo_normal.gif","created_at":"Mon, 20 Apr 2009 17:17:51 +0000"},{"text":"firefox needs to not use a problematic cache","to_user_id":null,"from_user":"jakedahn","id":1567108188,"from_user_id":89635,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/iconfactory.com\/software\/twitterrific&quot;&gt;twitterrific&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57291688\/n1277970100_2225_normal.jpg","created_at":"Mon, 20 Apr 2009 17:17:47 +0000"},{"text":"Dodajte Gmail Tasks u Firefox sidebar: Po\u0161to ste verovatno po\u010deli da koristite Gmail Tasks za pam\u0107enje va\u0161ih dne.. http:\/\/tinyurl.com\/df7dgt","to_user_id":null,"from_user":"djevrek","id":1567104166,"from_user_id":6752155,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/112428857\/Picture_202_normal.jpg","created_at":"Mon, 20 Apr 2009 17:17:17 +0000"},{"text":"sandwich? sandwhich? can i spell at all? why doesn't safari have spellcheck like firefox does?","to_user_id":null,"from_user":"slimfender","id":1567102131,"from_user_id":461073,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/125212882\/20-02-2009_1-2_normal.jpg","created_at":"Mon, 20 Apr 2009 17:16:58 +0000"},{"text":"Did you know that you can drag a tab from Firefox to Chome and back? Neat.","to_user_id":null,"from_user":"joshutk","id":1567100604,"from_user_id":222578,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/destroytwitter.com\/&quot;&gt;DestroyTwitter&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/53112855\/josh_cs3_normal.png","created_at":"Mon, 20 Apr 2009 17:16:48 +0000"},{"text":"@cineboy \n\nI think it's Firefox. Safari seems faster. I thought it was comcast.","to_user_id":3502968,"to_user":"cineboy","from_user":"AndrewFRobinson","id":1567092336,"from_user_id":5219854,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/80758440\/Blog_Picture_normal.jpg","created_at":"Mon, 20 Apr 2009 17:15:46 +0000"},{"text":"@Avinio thank you, firefox didn't work. it always gives back an error. thanks for helping though :)","to_user_id":218611,"to_user":"Avinio","from_user":"Sarah_Stuart","id":1567091592,"from_user_id":1854673,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148425394\/n1050963749_30402544_5294812_normal.jpg","created_at":"Mon, 20 Apr 2009 17:15:40 +0000"},{"text":"Speed Up Firefox web browser http:\/\/tinyurl.com\/28zjbm","to_user_id":null,"from_user":"jayminkapish","id":1567089438,"from_user_id":227615,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/51442432\/jay_normal.png","created_at":"Mon, 20 Apr 2009 17:15:26 +0000"},{"text":"Minimap sidebar for Firefox ~ Mapping, addresses and directions @ http:\/\/tinyurl.com\/6f3yt6","to_user_id":null,"from_user":"steven2509","id":1567087844,"from_user_id":10204537,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/124435871\/Thor_3_normal.JPG","created_at":"Mon, 20 Apr 2009 17:15:12 +0000"},{"text":"@plutoniumpage Firefox -&gt; Safari: Mac or PC?","to_user_id":3185443,"to_user":"plutoniumpage","from_user":"Malacandra","id":1567087584,"from_user_id":1174499,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/91904641\/miles_for_twitter_normal.jpg","created_at":"Mon, 20 Apr 2009 17:15:10 +0000"},{"text":"@Beeeeg except firefox gets bored after a while and asks if you want the script to be stopped.","to_user_id":9535974,"to_user":"Beeeeg","from_user":"Drarok","id":1567080622,"from_user_id":941369,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/56645906\/Goomba_normal.jpg","created_at":"Mon, 20 Apr 2009 17:14:18 +0000"},{"text":"Screen resizing problems in Firefox http:\/\/tinyurl.com\/chz3wb","to_user_id":null,"from_user":"otherinboxhelp","id":1567079152,"from_user_id":2263650,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/63409998\/otherinbox_icon_normal.png","created_at":"Mon, 20 Apr 2009 17:14:07 +0000"},{"text":"@johnfbraun I really don't like Tweetdeck.  Even with two monitors it takes up too much space.  Tweetie fits perfectly just next to Firefox.","to_user_id":1291479,"to_user":"johnfbraun","from_user":"nentecular","id":1567076517,"from_user_id":928787,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57182988\/nentecular_normal.jpg","created_at":"Mon, 20 Apr 2009 17:13:45 +0000"},{"text":"t\u00f4 de boa com a organiza\u00e7\u00e3o das abas do firefox. se mta coisa acumula pra ler, organiza nos favoritos! :)","to_user_id":null,"from_user":"foxpretender","id":1567075265,"from_user_id":2199243,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/72981570\/DSC00347_normal.JPG","created_at":"Mon, 20 Apr 2009 17:13:37 +0000"},{"text":"Queria o Gmail sempre aberto sem precisar usar o Firefox pra isso","to_user_id":null,"from_user":"rustymind","id":1567072458,"from_user_id":6155,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/88642915\/c_normal.jpg","created_at":"Mon, 20 Apr 2009 17:13:14 +0000"},{"text":"@BostonWealthMan i'll try to fix, but Firefox users can see the blog fine; come back to the blog in 20 mins and c what happens","to_user_id":6438140,"to_user":"BostonWealthMan","from_user":"yesandnotyes","id":1567067108,"from_user_id":3780901,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/118180349\/deo-portrait_normal.JPG","created_at":"Mon, 20 Apr 2009 17:12:34 +0000"},{"text":"@viciousbleu @benipsen if you have firefox, you can get a script via Greasemonkey to block apps\/quizzes in swathes. but it's a little work","to_user_id":1681225,"to_user":"viciousbleu","from_user":"SamCousins","id":1567066165,"from_user_id":5090625,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.twhirl.org\/&quot;&gt;twhirl&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/127496405\/Sam_normal.jpg","created_at":"Mon, 20 Apr 2009 17:12:27 +0000"},{"text":"PS It seems like the photo album only works in Firefox, not IE right now. Good a reason as any to switch :)","to_user_id":null,"from_user":"toosunnyouthere","id":1567061723,"from_user_id":312807,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57121330\/Twitter_profile_photo_normal.jpg","created_at":"Mon, 20 Apr 2009 17:11:53 +0000"},{"text":"@mackaffinity thanks for tip on firefox threaded tabs. Nice!","to_user_id":267931,"to_user":"mackaffinity","from_user":"malcolmbot","id":1567056739,"from_user_id":11583811,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/83degrees.com\/to\/powertwitter&quot;&gt;Power Twitter&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/78425206\/malcom_hat3_normal.jpg","created_at":"Mon, 20 Apr 2009 17:11:14 +0000"},{"text":"@Biertjuh JA, ik lul teveel :)  Ene FireFox Pimp en ene Henk van Dijke zijn ineens verdwenen :)  Ene Jenny Doverspike heb ik heengezonden","to_user_id":9701261,"to_user":"Biertjuh","from_user":"Kruimeldief","id":1567056294,"from_user_id":4748714,"iso_language_code":"nl","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/126656948\/8b06388c-1206-43df-b9dd-4b51228b373b_normal.jpg","created_at":"Mon, 20 Apr 2009 17:11:11 +0000"},{"text":"@bravenewcode tested in safari 4 beta &amp; 3.1.2 &amp; latest firefox on mac. the ajax stuff doesn't work in any of them.","to_user_id":994961,"to_user":"bravenewcode","from_user":"khlrqa","id":1567052831,"from_user_id":224717,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57154560\/rrr300_normal.jpg","created_at":"Mon, 20 Apr 2009 17:10:45 +0000"},{"text":"RT: &quot;Throw all the tiny red lines you wish, I shall destroy them all!&quot;\n-- Fox, da SJ Games, sobre o corretor ortogr\u00e1fico do Firefox.","to_user_id":null,"from_user":"mamangava","id":1567052258,"from_user_id":4390018,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/75652189\/DSC04072_normal.JPG","created_at":"Mon, 20 Apr 2009 17:10:41 +0000"},{"text":"#Firefox prend  officialement le nom de #Firefox3.5 dans la quatri\u00e8me beta de ce dernier :)","to_user_id":null,"from_user":"OyoKooN","id":1567044110,"from_user_id":176092,"iso_language_code":"fr","source":"&lt;a href=&quot;http:\/\/desktop.seesmic.com\/&quot;&gt;Seesmic Desktop&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/129147038\/OliviaDunhamJPG_normal.jpg","created_at":"Mon, 20 Apr 2009 17:09:40 +0000"},{"text":"Atlantainternetmarketing.net News: &quot;Top 10 Firefox Add-ons for Linux Users - Linux Magazine (registration)&quot; - http:\/\/tinyurl.com\/cfgdqb","to_user_id":null,"from_user":"SEOAtlanta","id":1567034693,"from_user_id":5051211,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.bravenewcode.com\/wordtwit\/&quot;&gt;WordTwit&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/126242512\/atlanta-seo-1_normal.png","created_at":"Mon, 20 Apr 2009 17:08:28 +0000"},{"text":"@Avinio i haven't tried firefox, just safari, good idea. am going to try it out now :) thanks","to_user_id":218611,"to_user":"Avinio","from_user":"Sarah_Stuart","id":1567028645,"from_user_id":1854673,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148425394\/n1050963749_30402544_5294812_normal.jpg","created_at":"Mon, 20 Apr 2009 17:07:41 +0000"},{"text":"me voy a regresar a firefox porke google chrome no me convenci\u00f3","to_user_id":null,"from_user":"SonneMx","id":1567020771,"from_user_id":1065217,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/59431140\/DSC00072_normal.JPG","created_at":"Mon, 20 Apr 2009 17:06:41 +0000"},{"text":"Wyzo 3.0.1 The New Customized Browser Of FireFox 3.0.8 - http:\/\/tinyurl.com\/cm98td","to_user_id":null,"from_user":"anwarwagdi","id":1567016110,"from_user_id":2183567,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.sharethis.com&quot;&gt;ShareThis.com&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/83273512\/125x125_banner_normal.png","created_at":"Mon, 20 Apr 2009 17:06:06 +0000"},{"text":"Firefox = passoire ?: C\u2018est en tout cas ce que semble d\u00e9montrer une \u00e9tude men\u00e9e en 2008 par la soci\u00e9t\u00e9 Secunia, .. http:\/\/tinyurl.com\/dkgkj5","to_user_id":null,"from_user":"fuzzfr","id":1567013785,"from_user_id":3239997,"iso_language_code":"fr","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/68899486\/avatar_fuzz_normal.jpg","created_at":"Mon, 20 Apr 2009 17:05:47 +0000"},{"text":"@DavidEntremont  It is a decent iPhone webb app. I need to start using a desktop app since Twitter.com always seems so laggy on firefox.","to_user_id":150359,"to_user":"DavidEntremont","from_user":"DrArdtagon","id":1567006240,"from_user_id":4627853,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/70564130\/Anthony93_normal.JPG","created_at":"Mon, 20 Apr 2009 17:04:51 +0000"},{"text":"Firefox 3.5b4 \u0432\u044b\u0439\u0434\u0435\u0442 22-24 \u0430\u043f\u0440\u0435\u043b\u044f http:\/\/tr.im\/jflf","to_user_id":null,"from_user":"smartfon","id":1567002479,"from_user_id":1538736,"iso_language_code":"ru","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/130824428\/av-150_normal.png","created_at":"Mon, 20 Apr 2009 17:04:23 +0000"},{"text":"im using firefox right now for my tweets but ima be on tweet deck or Tweetie in a minute","to_user_id":null,"from_user":"solaravada","id":1567000487,"from_user_id":3205793,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/140410086\/Picture_060_normal.jpg","created_at":"Mon, 20 Apr 2009 17:04:06 +0000"},{"text":"Speedtile 0.4, un nouveau plugin de bookmarks en visuel pour Firefox: \n\t\t\n\t\t\t\n\t\t\n\tPour les utiisateurs du naviga.. http:\/\/tinyurl.com\/cp9ado","to_user_id":null,"from_user":"jmgall","id":1566997778,"from_user_id":23853,"iso_language_code":"fr","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/90306573\/jmbg54000_normal.jpg","created_at":"Mon, 20 Apr 2009 17:03:47 +0000"},{"text":"Top 10 Firefox Add-ons for Linux Users http:\/\/bit.ly\/15v1bC","to_user_id":null,"from_user":"ielite","id":1566997201,"from_user_id":3174070,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/68501431\/logo_normal.PNG","created_at":"Mon, 20 Apr 2009 17:03:43 +0000"},{"text":"@AngryChad Use the Better GReader extension for Firefox!","to_user_id":310949,"to_user":"AngryChad","from_user":"abeldanger","id":1566992843,"from_user_id":611593,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/56922450\/my_head_normal.jpg","created_at":"Mon, 20 Apr 2009 17:03:11 +0000"},{"text":"twitter travando o firefox de cinco em cinco minutos!","to_user_id":null,"from_user":"marcel_silva","id":1566987360,"from_user_id":12757889,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148430974\/7wBCg9Y8AaNEqXT_normal.jpg","created_at":"Mon, 20 Apr 2009 17:02:31 +0000"},{"text":"Anyone notice Firefox trying to be more like Chrome? &amp; with the FB\/twitter ap\/look and &amp; copy-tition it's like one big virtual brand soup","to_user_id":null,"from_user":"rachelcw","id":1566986955,"from_user_id":3051268,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/68342500\/rach_glasses_normal.jpg","created_at":"Mon, 20 Apr 2009 17:02:27 +0000"},{"text":"#Titook: The research was conducted by NSS labs and they had included the likes of Firefox (3.07), Apple.. http:\/\/tinyurl.com\/cnqhjs","to_user_id":null,"from_user":"TechnoZero","id":1566980725,"from_user_id":12687581,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/147420706\/TiDolphi_normal.jpg","created_at":"Mon, 20 Apr 2009 17:01:42 +0000"},{"text":"Turning OFF firefox so I get WORK!","to_user_id":null,"from_user":"CandiedFabrics","id":1566978524,"from_user_id":8190119,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/146694105\/Vimeo_avatar_300_normal.jpg","created_at":"Mon, 20 Apr 2009 17:01:27 +0000"},{"text":"Likes Mozilla Labs Weave 0.3 : Need to wait it be upgraded, hope to sync all of my firefox plugins and add-o... - http:\/\/likaholix.com\/r\/fBK","to_user_id":null,"from_user":"betashow","id":1566977384,"from_user_id":181186,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/147546718\/Leo_mobile_normal.jpg","created_at":"Mon, 20 Apr 2009 17:01:19 +0000"},{"text":"Firefox users, you probably know of the Twitter search add-on http:\/\/tinyurl.com\/c58xm9","to_user_id":null,"from_user":"edizquierdo","id":1566977150,"from_user_id":2010561,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/54481780\/ed_normal.png","created_at":"Mon, 20 Apr 2009 17:01:19 +0000"},{"text":"Download Facebook Albums to Your PC with FacePAD Firefox Add-on http:\/\/tinyurl.com\/daglp8","to_user_id":null,"from_user":"pcsbox","id":1566974888,"from_user_id":754736,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/76459142\/single_normal.JPG","created_at":"Mon, 20 Apr 2009 17:01:00 +0000"},{"text":"Testar Firefox 3.1 Beta 3","to_user_id":null,"from_user":"jonstg","id":1566974831,"from_user_id":2801022,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/www.chrisfinke.com\/addons\/twitterbar\/&quot;&gt;TwitterBar&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/70746207\/johan_stenberg_normal.JPG","created_at":"Mon, 20 Apr 2009 17:00:59 +0000"},{"text":"@priberam Uso o motor de pesquisa do dicion\u00e1rio instalado no Firefox. Sempre que procuro palavra com acentos, cedilha ou til, n\u00e3o reconhece.","to_user_id":12725990,"to_user":"priberam","from_user":"salustio","id":1566970119,"from_user_id":2011109,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/122514367\/maca2-twitter_normal.jpg","created_at":"Mon, 20 Apr 2009 17:00:28 +0000"},{"text":"Me hecho a dormir o pruebo Firefox 3.5 ? me hecho a dormir eso es mejor XD","to_user_id":null,"from_user":"icekrypto","id":1566965118,"from_user_id":11255742,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/itweet.net\/&quot;&gt;iTweet&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/135479149\/icekrypto-mini_normal.jpg","created_at":"Mon, 20 Apr 2009 16:59:53 +0000"},{"text":"How to get a better Firefox with Ubiquity extension http:\/\/tinyurl.com\/c8pxlr","to_user_id":null,"from_user":"macstories","id":1566964874,"from_user_id":12757200,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/bluebirdapp.com&quot;&gt;Bluebird&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148456587\/apple_logo_rainbow_6_color_normal.jpg","created_at":"Mon, 20 Apr 2009 16:59:51 +0000"},{"text":"@passionpit the video won't play on my Mac in neither Safari 4 nor Firefox 3. It jumps right to the end where it says &quot;replay&quot;\/&quot;share&quot;...","to_user_id":1195668,"to_user":"passionpit","from_user":"julscho","id":1566960035,"from_user_id":424071,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/loungeapp.com&quot;&gt;Lounge&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148317755\/Tamala2010_330x296_normal.jpg","created_at":"Mon, 20 Apr 2009 16:59:17 +0000"},{"text":"@haacked Better yet, goes around and installs Firefox and makes it the default browser?","to_user_id":34575,"to_user":"haacked","from_user":"beebe4","id":1566958997,"from_user_id":183100,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57482684\/Photo_5_normal.jpg","created_at":"Mon, 20 Apr 2009 16:59:08 +0000"},{"text":"@therealmaz Ideas for other topics: IDEs (Eclipse, Visual Studio, etc,,,) and Firefox + Firebug","to_user_id":381054,"to_user":"therealmaz","from_user":"elevine","id":1566957248,"from_user_id":83133,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.twhirl.org\/&quot;&gt;twhirl&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/24654522\/avatar2_normal.jpg","created_at":"Mon, 20 Apr 2009 16:58:56 +0000"},{"text":"@Carol_Meneses @Carol_Meneses F\u00e1cil... se vc usa o firefox, baixe o twitter fox, a~i vai funcionar que nem orkut o seu twitter","to_user_id":12710301,"to_user":"Carol_Meneses","from_user":"koiann","id":1566956562,"from_user_id":8928327,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/112468850\/030209180946_normal.jpg","created_at":"Mon, 20 Apr 2009 16:58:49 +0000"},{"text":"is anyone else having problems with Firefox crashing? It's been crashing nonstop for me at work and at home...I do not want to go back to IE","to_user_id":null,"from_user":"Joveth","id":1566952618,"from_user_id":5661754,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/84254585\/Jono1_normal.jpg","created_at":"Mon, 20 Apr 2009 16:58:18 +0000"},{"text":"Wyzo 3.0.1 The New Customized Browser Of FireFox 3.0.8","to_user_id":null,"from_user":"ibraheiem","id":1566952321,"from_user_id":6483451,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/static.twitter.com\/images\/default_profile_normal.png","created_at":"Mon, 20 Apr 2009 16:58:19 +0000"},{"text":"Enjoying the fruits of Firefox 3","to_user_id":null,"from_user":"NeonXero","id":1566949639,"from_user_id":4159819,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.twhirl.org\/&quot;&gt;twhirl&lt;\/a&gt;","profile_image_url":"https:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/131049544\/Photo_147_normal.jpg","created_at":"Mon, 20 Apr 2009 16:57:59 +0000"},{"text":"New Post: [tip] \u5c07\u4efb\u4f55\u641c\u5c0b\u6846\u52a0\u5165\u706b\u72d0\u641c\u5c0b\u5217 \u2013 add any search engine into firefox search bar http:\/\/tinyurl.com\/dymzhm","to_user_id":null,"from_user":"brownywalking","id":1566948188,"from_user_id":130823,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfeed.com&quot;&gt;twitterfeed&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/37532782\/\u5f71\u50cf008_normal.jpg","created_at":"Mon, 20 Apr 2009 16:57:47 +0000"},{"text":"&quot;Conflux&quot; is too a word, Firefox! You won't make me use &quot;confluence.&quot; Throw all the tiny red lines you wish, I shall destroy them all! -Fox","to_user_id":null,"from_user":"SJGames","id":1566946967,"from_user_id":2097481,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/64317528\/bigpyr_normal.png","created_at":"Mon, 20 Apr 2009 16:57:39 +0000"},{"text":"c4est relou d ecrire sur un clqvier qwerty. pis yq pqs firefox donc pqs de ;qils. fqil.","to_user_id":null,"from_user":"delgoff","id":1566944285,"from_user_id":1508369,"iso_language_code":"fr","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/94776151\/3318979772_3a9675756c_b_normal.jpg","created_at":"Mon, 20 Apr 2009 16:57:20 +0000"},{"text":"check out  &quot;Personas&quot; for Firefox. Much easier than messing with themes. Dull Browser? get it here! http:\/\/digg.com\/d1nfa0 #newtechmondays","to_user_id":null,"from_user":"RosenKratz","id":1566935847,"from_user_id":2460052,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.atebits.com\/&quot;&gt;Tweetie&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/56395851\/n7021936_38073746_8583_normal.jpg","created_at":"Mon, 20 Apr 2009 16:56:16 +0000"},{"text":"20+ Great Twitter Tools for Firefox http:\/\/ping.fm\/qQDf1","to_user_id":null,"from_user":"RealEstateXpert","id":1566927762,"from_user_id":461121,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.ping.fm\/&quot;&gt;Ping.fm&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/54324508\/jons_pic_normal.jpg","created_at":"Mon, 20 Apr 2009 16:55:14 +0000"},{"text":"@filipekiss \u00e9 verdade! O Foxytunes, extens\u00e3o pro Firefox, usa a Amazon pra pegar as capas.. eaHeaouhAEOUahe","to_user_id":216075,"to_user":"filipekiss","from_user":"mustabr","id":1566927275,"from_user_id":872878,"iso_language_code":"pt","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/138775391\/elitegeek_normal.png","created_at":"Mon, 20 Apr 2009 16:55:09 +0000"},{"text":"Come on PayPal, you don't support Firefox on your developer website?","to_user_id":null,"from_user":"paulwpagel","id":1566925393,"from_user_id":1145227,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/57536184\/Photo_8_normal.jpg","created_at":"Mon, 20 Apr 2009 16:54:55 +0000"},{"text":"Cool Firefox extension, Firediff: http:\/\/www.incaseofstairs.com\/firediff\/","to_user_id":null,"from_user":"nderksen","id":1566920249,"from_user_id":410013,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/108693203\/opus_small_normal.png","created_at":"Mon, 20 Apr 2009 16:54:18 +0000"},{"text":"Firefox.next: an iTunes-like browser? http:\/\/tinyurl.com\/dexkrr","to_user_id":null,"from_user":"macstories","id":1566919449,"from_user_id":12757200,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/bluebirdapp.com&quot;&gt;Bluebird&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/148456587\/apple_logo_rainbow_6_color_normal.jpg","created_at":"Mon, 20 Apr 2009 16:54:12 +0000"},{"text":"*sigh* I do cruel things to Firefox. *restarts browser*","to_user_id":null,"from_user":"mactavish","id":1566917670,"from_user_id":60868,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.tweetdeck.com\/&quot;&gt;TweetDeck&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/59435649\/maryforprofileaug08_normal.jpg","created_at":"Mon, 20 Apr 2009 16:53:57 +0000"},{"text":"@mandiebear oh thats foxy tunes for firefox. its a plugin. that can control your music apps on your comp and post your song to twitter.","to_user_id":1734139,"to_user":"mandiebear","from_user":"samuraipanzer","id":1566914895,"from_user_id":126457,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.digsby.com\/&quot;&gt;digsby&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/79442241\/IMG00201_normal.jpg","created_at":"Mon, 20 Apr 2009 16:53:37 +0000"},{"text":"Its really confusing to keep track of windows in multiple desktops.. I have four windows of Firefox with the same page on each desktop.. :\\","to_user_id":null,"from_user":"itsanimesh","id":1566912616,"from_user_id":6778642,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/93907938\/DSC00370_normal.JPG","created_at":"Mon, 20 Apr 2009 16:53:19 +0000"},{"text":"Reading: &quot;10 Essential Firefox Addons\/Extensions For Bloggers | PCandWEB&quot; ( http:\/\/tinyurl.com\/dfrprz )","to_user_id":null,"from_user":"sgayen","id":1566912172,"from_user_id":4381856,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitthat.com\/&quot;&gt;twitthat&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/75387168\/sg_normal.JPG","created_at":"Mon, 20 Apr 2009 16:53:17 +0000"},{"text":"is sayin download skipscreen for firefox no more wait times for zshare rapidshare etc.....","to_user_id":null,"from_user":"r__dub","id":1566909817,"from_user_id":3204128,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/twitter.com\/&quot;&gt;web&lt;\/a&gt;","profile_image_url":"http:\/\/static.twitter.com\/images\/default_profile_normal.png","created_at":"Mon, 20 Apr 2009 16:52:59 +0000"},{"text":"@rbieber you using Firefox 3.0 or the 3.1 beta? I was using 3.1 beta (very stable) until Safari 4 beta came out","to_user_id":29636,"to_user":"rbieber","from_user":"frumpa","id":1566905518,"from_user_id":192534,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.nambu.com&quot;&gt;Nambu&lt;\/a&gt;","profile_image_url":"https:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/137414986\/3437301687_7edf805439_normal.jpg","created_at":"Mon, 20 Apr 2009 16:52:25 +0000"},{"text":"Can it be true that Google @Adsense doesn't support Firefox on the Mac OS?  For real?!  Google hangs &amp; doesn't offer any confirmations. WTF?","to_user_id":null,"from_user":"mylerdude","id":1566905089,"from_user_id":10384,"iso_language_code":"en","source":"&lt;a href=&quot;http:\/\/www.twhirl.org\/&quot;&gt;twhirl&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/125612392\/mylerdude_gmail.com_615b413c_normal.jpg","created_at":"Mon, 20 Apr 2009 16:52:24 +0000"},{"text":"amo el hack &quot;open new tabs in background&quot; de firefox. creo que deber\u00eda venir por defecto.","to_user_id":null,"from_user":"claudio","id":1566903611,"from_user_id":14147,"iso_language_code":"es","source":"&lt;a href=&quot;http:\/\/twitterfox.net\/&quot;&gt;TwitterFox&lt;\/a&gt;","profile_image_url":"http:\/\/s3.amazonaws.com\/twitter_production\/profile_images\/77314492\/Imagen_1_normal.png","created_at":"Mon, 20 Apr 2009 16:52:13 +0000"}],"since_id":0,"max_id":1567167290,"refresh_url":"?since_id=1567167290&q=firefox","results_per_page":100,"next_page":"?page=2&max_id=1567167290&rpp=100&q=firefox","completed_in":0.041434,"page":1,"query":"firefox"}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/crack-0.4.1/test/xml_test.rb:
  505      example_xml = <<-EOT
  506      <disk type='file' device='cdrom'>
  507:       <driver name='qemu' type='raw' cache='none' io='native'/>
  508        <source file='/tmp/cdrom.iso'/>
  509      </disk>
  510      EOT
  511  
  512:     Crack::XML.parse(example_xml).must_equal({"disk"=>{"driver"=>{"name"=>"qemu", "type"=>"raw", "cache"=>"none", "io"=>"native"}, "source"=>{"file"=>"/tmp/cdrom.iso"}, "type"=>"file", "device"=>"cdrom"}})
  513    end
  514  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/daemons-1.1.9/Releases:
   32  == Release 1.1.3: April 14, 2011
   33  
   34: * Fixed a bug in Application.stop: the cached pid number needs to
   35    be used to check for the status of a killed process (thanks to Jimmy Sieben).
   36    

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/examples/Gemfile.lock:
    9        journey (~> 1.0.4)
   10        rack (~> 1.4.0)
   11:       rack-cache (~> 1.2)
   12        rack-test (~> 0.6.1)
   13        sprockets (~> 2.2.1)
   ..
  149        slop (~> 3.3.1)
  150      rack (1.4.3)
  151:     rack-cache (1.2)
  152        rack (>= 0.4)
  153      rack-ssl (1.3.2)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/Gemfile.lock:
    9        journey (~> 1.0.4)
   10        rack (~> 1.4.0)
   11:       rack-cache (~> 1.2)
   12        rack-test (~> 0.6.1)
   13        sprockets (~> 2.2.1)
   ..
  149        slop (~> 3.3.1)
  150      rack (1.4.3)
  151:     rack-cache (1.2)
  152        rack (>= 0.4)
  153      rack-ssl (1.3.2)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/History.rdoc:
   71    * view caching works with the schema_plus gem loaded
   72      * ActiveRecord::ConnectionAdapters::AbstractAdapter#views was renamed to an internal name
   73:   * ActiveRecord truncation strategy caches the list of tables #130 (Petteri Räty)
   74:   * Caches AR DB connections which speeds up cleaning with multiple DBs and allows for transation strategy.
   75    * MongoDB :truncation strategy (wihtout use of additional library like Mogoid). #138 (Christopher Darrell & Richard Luther/@sidereel)
   76    * Add Sequel support for multiple migration storage names in #148 (Jack Chu)
   ..
   81    * :deletion for AR Postgres in JRuby now works #140 (Heiko Seebach)
   82    * Rescue LoadError when AR adapters not available. #145 (Garrow Bedrossian)
   83:   * Fixes DatabaseCleaner::[] to cache cleaners.
   84  
   85  == 0.8.0 2012-06-02
   ..
  128  
  129    * Explicity require ERB. (Vít Ondruch)
  130:   * Cache DB connections, fixes referential integrity bug when using multiple DBs. (John Ferlito)
  131  
  132  == 0.6.6 2011-03-16

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/lib/database_cleaner/active_record/truncation.rb:
   20        # used to be called views but that can clash with gems like schema_plus
   21        # this gem is not meant to be exposing such an extra interface any way
   22:       def database_cleaner_view_cache
   23          @views ||= select_values("select table_name from information_schema.views where table_schema = '#{current_database}'") rescue []
   24        end
   25:       def database_cleaner_table_cache
   26          # the adapters don't do caching (#130) but we make the assumption that the list stays the same in tests
   27          @database_cleaner_tables ||= tables
   ..
  208  
  209      def tables_to_truncate(connection)
  210:       tables_in_db = cache_tables? ? connection.database_cleaner_table_cache : connection.tables
  211:       (@only || tables_in_db) - @tables_to_exclude - connection.database_cleaner_view_cache
  212      end
  213  
  ...
  217      end
  218  
  219:     def cache_tables?
  220:       !!@cache_tables
  221      end
  222  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/lib/database_cleaner/generic/truncation.rb:
    3      module Truncation
    4        def initialize(opts={})
    5:         if !opts.empty? && !(opts.keys - [:only, :except, :pre_count, :reset_ids, :cache_tables]).empty?
    6:           raise ArgumentError, "The only valid options are :only, :except, :pre_count, :reset_ids or :cache_tables. You specified #{opts.keys.join(',')}."
    7          end
    8          if opts.has_key?(:only) && opts.has_key?(:except)
    .
   15          @pre_count = opts[:pre_count]
   16          @reset_ids = opts[:reset_ids]
   17:         @cache_tables = opts.has_key?(:cache_tables) ? !!opts[:cache_tables] : true
   18        end
   19  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/README.markdown:
  184  The following option is available for ActiveRecord's `:truncation` and `:deletion` strategy for any DB.
  185  
  186: * `:cache_tables` - When set to `true` the list of tables to truncate or delete from will only be read from the DB once, otherwise it will be read before each cleanup run. Set this to `false` if you create and drop tables in your tests. Defaults to `true`.
  187  
  188  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/spec/database_cleaner/active_record/truncation_spec.rb:
   29        before(:each) do
   30          connection.stub(:disable_referential_integrity).and_yield
   31:         connection.stub(:database_cleaner_view_cache).and_return([])
   32          ::ActiveRecord::Base.stub(:connection).and_return(connection)
   33        end
   ..
   35        describe '#clean' do
   36          it "should truncate all tables except for schema_migrations" do
   37:           connection.stub(:database_cleaner_table_cache).and_return(%w[schema_migrations widgets dogs])
   38  
   39            connection.should_receive(:truncate_tables).with(['widgets', 'dogs'])
   ..
   42  
   43          it "should use ActiveRecord's schema_migrations_table_name" do
   44:           connection.stub(:database_cleaner_table_cache).and_return(%w[pre_schema_migrations_suf widgets dogs])
   45            ::ActiveRecord::Base.stub(:table_name_prefix).and_return('pre_')
   46            ::ActiveRecord::Base.stub(:table_name_suffix).and_return('_suf')
   ..
   52  
   53          it "should only truncate the tables specified in the :only option when provided" do
   54:           connection.stub(:database_cleaner_table_cache).and_return(%w[schema_migrations widgets dogs])
   55  
   56            connection.should_receive(:truncate_tables).with(['widgets'])
   ..
   60  
   61          it "should not truncate the tables specified in the :except option" do
   62:           connection.stub(:database_cleaner_table_cache).and_return(%w[schema_migrations widgets dogs])
   63  
   64            connection.should_receive(:truncate_tables).with(['dogs'])
   ..
   78  
   79          it "should not truncate views" do
   80:           connection.stub(:database_cleaner_table_cache).and_return(%w[widgets dogs])
   81:           connection.stub(:database_cleaner_view_cache).and_return(["widgets"])
   82  
   83            connection.should_receive(:truncate_tables).with(['dogs'])
   ..
   90  
   91            it "should rely on #pre_count_truncate_tables if #pre_count? returns true" do
   92:             connection.stub(:database_cleaner_table_cache).and_return(%w[widgets dogs])
   93:             connection.stub(:database_cleaner_view_cache).and_return(["widgets"])
   94  
   95              subject.instance_variable_set(:"@pre_count", true)
   ..
  102  
  103            it "should not rely on #pre_count_truncate_tables if #pre_count? return false" do
  104:             connection.stub(:database_cleaner_table_cache).and_return(%w[widgets dogs])
  105:             connection.stub(:database_cleaner_view_cache).and_return(["widgets"])
  106  
  107              subject.instance_variable_set(:"@pre_count", false)
  ...
  114          end
  115  
  116:         context 'when :cache_tables is set to true' do
  117:           it 'caches the list of tables to be truncated' do
  118:             connection.should_receive(:database_cleaner_table_cache).and_return([])
  119              connection.should_not_receive(:tables)
  120  
  121              connection.stub!(:truncate_tables)
  122:             Truncation.new({ :cache_tables => true }).clean
  123            end
  124          end
  125  
  126:         context 'when :cache_tables is set to false' do
  127:           it 'does not cache the list of tables to be truncated' do
  128:             connection.should_not_receive(:database_cleaner_table_cache)
  129              connection.should_receive(:tables).and_return([])
  130  
  131              connection.stub!(:truncate_tables)
  132:             Truncation.new({ :cache_tables => false }).clean
  133            end
  134          end
  ...
  138          before(:each) do
  139            connection.stub(:disable_referential_integrity).and_yield
  140:           connection.stub(:database_cleaner_view_cache).and_return([])
  141            ::ActiveRecord::Base.stub(:connection).and_return(connection)
  142          end
  ...
  159          before(:each) do
  160            connection.stub(:disable_referential_integrity).and_yield
  161:           connection.stub(:database_cleaner_view_cache).and_return([])
  162            ::ActiveRecord::Base.stub(:connection).and_return(connection)
  163          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/database_cleaner-1.2.0/spec/database_cleaner/base_spec.rb:
   11      describe "autodetect" do
   12  
   13:        #Cache all ORMs, we'll need them later but not now.
   14         before(:all) do
   15           Temp_AR = ::ActiveRecord if defined?(::ActiveRecord) and not defined?(Temp_AR)
   ..
   24         end
   25  
   26:        #Remove all ORM mocks and restore from cache
   27         after(:all) do
   28           Object.send(:remove_const, 'ActiveRecord') if defined?(::ActiveRecord)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/CHANGELOG.rdoc:
  328  * bug fix
  329    * Ensure to_xml is properly white listened
  330:   * Ensure handle_unverified_request clean up any cached signed-in user
  331  
  332  == 1.4.0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/gemfiles/Gemfile.rails-3.2.x.lock:
   21        journey (~> 1.0.4)
   22        rack (~> 1.4.5)
   23:       rack-cache (~> 1.2)
   24        rack-test (~> 0.6.1)
   25        sprockets (~> 2.2.1)
   ..
   90      polyglot (0.3.3)
   91      rack (1.4.5)
   92:     rack-cache (1.2)
   93        rack (>= 0.4)
   94      rack-openid (1.3.1)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/lib/devise.rb:
  281  
  282    def self.ref(arg)
  283:     if defined?(ActiveSupport::Dependencies::ClassCache)
  284        ActiveSupport::Dependencies::reference(arg)
  285        Getter.new(arg)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/lib/devise/controllers/helpers.rb:
  153          warden.raw_session.inspect # Without this inspect here. The session does not clear.
  154          warden.logout(scope)
  155:         warden.clear_strategies_cache!(:scope => scope)
  156          instance_variable_set(:"@current_#{scope}", nil)
  157  
  ...
  167          warden.raw_session.inspect
  168          warden.logout
  169:         expire_devise_cached_variables!
  170:         warden.clear_strategies_cache!
  171          warden.lock! if lock
  172  
  ...
  271  
  272        # Overwrite Rails' handle unverified request to sign out all scopes,
  273:       # clear run strategies and remove cached variables.
  274        def handle_unverified_request
  275          sign_out_all_scopes(false)
  276          request.env["devise.skip_storage"] = true
  277:         expire_devise_cached_variables!
  278          super # call the default behaviour which resets the session
  279        end
  ...
  289        private
  290  
  291:       def expire_devise_cached_variables!
  292          Devise.mappings.each { |_,m| instance_variable_set("@current_#{m.name}", nil) }
  293        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/controllers/helpers_test.rb:
  144      @mock_warden.expects(:user).with(:scope => :user, :run_callbacks => false).returns(user)
  145      @mock_warden.expects(:logout).with(:user).returns(true)
  146:     @mock_warden.expects(:clear_strategies_cache!).with(:scope => :user).returns(true)
  147      @controller.instance_variable_set(:@current_user, user)
  148      @controller.sign_out(:user)
  ...
  153      @mock_warden.expects(:user).with(:scope => :user, :run_callbacks => false).returns(true)
  154      @mock_warden.expects(:logout).with(:user).returns(true)
  155:     @mock_warden.expects(:clear_strategies_cache!).with(:scope => :user).returns(true)
  156      @controller.sign_out(User.new)
  157    end
  ...
  160      @mock_warden.expects(:user).times(Devise.mappings.size)
  161      @mock_warden.expects(:logout).with().returns(true)
  162:     @mock_warden.expects(:clear_strategies_cache!).with().returns(true)
  163      @controller.sign_out
  164    end
  ...
  230        @mock_warden.expects(:user).with(:scope => :admin, :run_callbacks => false).returns(true)
  231        @mock_warden.expects(:logout).with(:admin).returns(true)
  232:       @mock_warden.expects(:clear_strategies_cache!).with(:scope => :admin).returns(true)
  233        @controller.expects(:redirect_to).with(admin_root_path)
  234        @controller.instance_eval "def after_sign_out_path_for(resource); admin_root_path; end"
  ...
  241        @mock_warden.expects(:user).times(Devise.mappings.size)
  242        @mock_warden.expects(:logout).with().returns(true)
  243:       @mock_warden.expects(:clear_strategies_cache!).with().returns(true)
  244        @controller.expects(:redirect_to).with(admin_root_path)
  245        @controller.instance_eval "def after_sign_out_path_for(resource); admin_root_path; end"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/integration/authenticatable_test.rb:
  433  
  434  class AuthenticationOthersTest < ActionDispatch::IntegrationTest
  435:   test 'handles unverified requests gets rid of caches' do
  436      swap ApplicationController, :allow_forgery_protection => true do
  437        post exhibit_user_url(1)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/integration/http_authenticatable_test.rb:
    2  
    3  class HttpAuthenticationTest < ActionDispatch::IntegrationTest
    4:   test 'handles unverified requests gets rid of caches but continues signed in' do
    5      swap ApplicationController, :allow_forgery_protection => true do
    6        create_user

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/integration/rememberable_test.rb:
   31    end
   32  
   33:   test 'handle unverified requests gets rid of caches' do
   34      swap ApplicationController, :allow_forgery_protection => true do
   35        post exhibit_user_url(1)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/integration/token_authenticatable_test.rb:
  118        user1 = create_user_with_authentication_token()
  119  
  120:       # Clean up user cache
  121        @user = nil
  122  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/rails_app/config/environments/development.rb:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Do not eager load code on boot.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/rails_app/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests.
    5:   config.cache_classes = true
    6  
    7    # Eager load code on boot. This eager loads most of Rails and
    .
   15    config.action_controller.perform_caching = true
   16  
   17:   # Enable Rack::Cache to put a simple HTTP cache in front of your application
   18:   # Add `rack-cache` to your Gemfile before enabling this.
   19    # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
   20:   # config.action_dispatch.rack_cache = true
   21  
   22    # Disable Rails's static asset server (Apache or nginx will already do this).
   ..
   52    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   53  
   54:   # Use a different cache store in production.
   55:   # config.cache_store = :mem_cache_store
   56  
   57    # Enable serving of images, stylesheets, and JavaScripts from an asset server.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/rails_app/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Do not eager load code on boot. This avoids loading your whole application
   ..
   13    config.eager_load = false
   14  
   15:   # Configure static asset server for tests with Cache-Control for performance.
   16    config.serve_static_assets = true
   17:   config.static_cache_control = "public, max-age=3600"
   18  
   19    # Show full error reports and disable caching.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-3.0.4/test/support/helpers.rb:
   52        object.send :"#{key}=", value
   53      end
   54:     clear_cached_variables(new_values)
   55      yield
   56    ensure
   57:     clear_cached_variables(new_values)
   58      old_values.each do |key, value|
   59        object.send :"#{key}=", value
   ..
   61    end
   62  
   63:   def clear_cached_variables(options)
   64      if options.key?(:case_insensitive_keys) || options.key?(:strip_whitespace_keys)
   65        Devise.mappings.each do |_, mapping|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/devise-async-0.8.0/Gemfile.lock:
   18        journey (~> 1.0.4)
   19        rack (~> 1.4.5)
   20:       rack-cache (~> 1.2)
   21        rack-test (~> 0.6.1)
   22        sprockets (~> 2.2.1)
   ..
   70        pg (~> 0.16.0)
   71      rack (1.4.5)
   72:     rack-cache (1.2)
   73        rack (>= 0.4)
   74      rack-protection (1.5.0)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/email_spec-1.5.0/History.txt:
  119  
  120   === New features
  121:     * Added support for action_mailer_cache_delivery plugin. (Dan Dofter)
  122:       You must use the fork at: http://github.com/liangzan/action_mailer_cache_delivery
  123  
  124   === Bugfixes

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/email_spec-1.5.0/lib/email_spec/cucumber.rb:
    3  # Global Setup
    4  if defined?(ActionMailer)
    5:   unless [:test, :activerecord, :cache, :file].include?(ActionMailer::Base.delivery_method)
    6      ActionMailer::Base.register_observer(EmailSpec::TestObserver)
    7    end
    .
   12      case ActionMailer::Base.delivery_method
   13        when :test then ActionMailer::Base.deliveries.clear
   14:       when :cache then ActionMailer::Base.clear_cache
   15      end
   16    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/email_spec-1.5.0/lib/email_spec/deliveries.rb:
   10  
   11      def reset_mailer
   12:       if defined?(ActionMailer) && ActionMailer::Base.delivery_method == :cache
   13:         mailer.clear_cache
   14        else
   15          deliveries.clear
   ..
   27  
   28      def deliveries
   29:       if ActionMailer::Base.delivery_method == :cache
   30:         mailer.cached_deliveries
   31        else
   32          mailer.deliveries

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/email_spec-1.5.0/README.md:
    7  
    8  This library works with ActionMailer and Pony.  When using it with ActionMailer it works with
    9: DelayedJob, ActiveRecord Mailer, and action_mailer_cache_delivery.
   10  
   11  If you are testing emails in conjunction with an automated browser solution, like Selenium,
   12: you will want to use [action_mailer_cache_delivery](http://rubygems.org/gems/action_mailer_cache_delivery) in your test environment.  (This is
   13  because your test process and server processes are distinct and therefore need an
   14  intermediate store for the emails.) DelayedJob and ActiveRecord Mailer will also work but

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/equalizer-0.0.8/spec/spec_helper.rb:
   25  
   26  # TODO: FIXME!
   27: # Cache correct freezer in ice_nine before
   28  # rspec2 infects the world...
   29  Equalizer.new

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/benchmark/bench.rb:
   43  
   44    TARGETS = %w[eruby
   45:                ERB               ERB(cached)
   46:                Erubis::Eruby     Erubis::Eruby(cached)
   47:                Erubis::FastEruby Erubis::FastEruby(cached)
   48                 Erubis::TinyEruby
   49                 Erubis::ArrayBufferEruby
   ..
  113    end
  114  
  115:   def execute_erb_cached(filename, context)
  116      #eval context2code(context)
  117      list = context['list']
  118      output = nil
  119:     cachefile = filename + '.cache'
  120:     File.unlink(cachefile) if test(?f, cachefile)
  121      @ntimes.times do
  122:       if !test(?f, cachefile) || File.mtime(filename) > File.mtime(cachefile)
  123          eruby = ERB.new(File.read(filename))
  124:         File.write(cachefile, eruby.src)
  125        else
  126          eruby = ERB.new('')
  127:         #eruby.src = File.read(cachefile)
  128:         eruby.instance_variable_set("@src", File.read(cachefile))
  129        end
  130        output = eruby.result(binding())
  ...
  134    end
  135  
  136:   ## no cached
  137    for klass in %w[Eruby FastEruby TinyEruby ArrayBufferEruby PrintOutEruby StdoutEruby] do
  138      s = <<-END
  ...
  152    end
  153  
  154:   ## cached
  155    for klass in %w[Eruby FastEruby] do
  156      s = <<-END
  157:     def execute_erubis_#{klass.downcase}_cached(filename, context)
  158        #eval context2code(context)
  159        list = context['list']
  160:       cachefile = filename + '.cache'
  161:       File.unlink(cachefile) if test(?f, cachefile)
  162        output = nil
  163        @ntimes.times do
  ...
  166          print output
  167        end
  168:       savefile = cachefile.sub(/\\.cache$/, '.#{klass.downcase}.cache')
  169:       File.rename(cachefile, savefile)
  170        return output
  171      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/CHANGES.txt:
   69  
   70      - |
   71: 	Erubis::Eruby#load_file() now sets cache file timestamp to the same
   72  	value as original eRuby file. For example, if you restore eRuby files
   73  	from backup, Erubis::Eruby#load_file() can detect it and generate
   74: 	cache file again.
   75  
   76: 	    ## generates cache file (A.rhtml.cache).
   77  	    eruby = Erubis::Eruby.load_file('A.rhtml')
   78: 	    p File.mtime('A.rhtml') == File.mtime('A.rhtml.cache')  #=> true
   79  
   80  	    
   ..
  191  
  192      - |
  193: 	Erubis::Eruby.load_file() now allows you to change cache filename.
  194  
  195  	ex.
  196  	    eruby = Erubis::Eruby.load_file("ex3.rhtml",
  197: 		                            :cachename=>'ex3.rhtml.cache')
  198  
  199  
  ...
  529  
  530      - |
  531:       Erubis::Engine.load_file(filename) creates cache file (filename +
  532:       '.cache') automatically if cache file is old or not exist.
  533        Caching makes Erubis about 40-50 percent faster.
  534  
  ...
  537        require 'erubis'
  538        eruby = Erubis::Eruby.load_file('example.rhtml')
  539:          ## cache file 'example.rhtml.cache' is created automatically
  540        --------------------
  541  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/contrib/erubis:
  221        convert_input(codebuf, input)
  222        @postamble.nil? ? add_postamble(codebuf) : (@postamble && (codebuf << @postamble))
  223:       @_proc = nil    # clear cached proc object
  224        return codebuf  # or codebuf.join()
  225      end
  ...
  773  
  774      ##
  775:     ## load file, write cache file, and return engine object.
  776:     ## this method create code cache file automatically.
  777:     ## cachefile name can be specified with properties[:cachename],
  778:     ## or filname + 'cache' is used as default.
  779      ##
  780      def self.load_file(filename, properties={})
  781:       cachename = properties[:cachename] || (filename + '.cache')
  782        properties[:filename] = filename
  783        timestamp = File.mtime(filename)
  784:       if test(?f, cachename) && timestamp == File.mtime(cachename)
  785          engine = self.new(nil, properties)
  786:         engine.src = File.read(cachename)
  787        else
  788          input = File.open(filename, 'rb') {|f| f.read }
  789          engine = self.new(input, properties)
  790:         tmpname = cachename + rand().to_s[1,8]
  791          File.open(tmpname, 'wb') {|f| f.write(engine.src) }
  792:         File.rename(tmpname, cachename)
  793:         File.utime(timestamp, timestamp, cachename)
  794        end
  795        engine.src.untaint   # ok?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/doc-api/classes/Erubis/Converter.html:
  159        <span class="ruby-identifier">convert_input</span>(<span class="ruby-identifier">codebuf</span>, <span class="ruby-identifier">input</span>)
  160        <span class="ruby-ivar">@postamble</span>.<span class="ruby-identifier">nil?</span> <span class="ruby-value">? </span><span class="ruby-identifier">add_postamble</span>(<span class="ruby-identifier">codebuf</span>) <span class="ruby-operator">:</span> (<span class="ruby-ivar">@postamble</span> <span class="ruby-operator">&amp;&amp;</span> (<span class="ruby-identifier">codebuf</span> <span class="ruby-operator">&lt;&lt;</span> <span class="ruby-ivar">@postamble</span>))
  161:       <span class="ruby-ivar">@_proc</span> = <span class="ruby-keyword kw">nil</span>    <span class="ruby-comment cmt"># clear cached proc object</span>
  162        <span class="ruby-keyword kw">return</span> <span class="ruby-identifier">codebuf</span>  <span class="ruby-comment cmt"># or codebuf.join()</span>
  163      <span class="ruby-keyword kw">end</span>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/doc-api/classes/Erubis/Engine.html:
  131          <div class="method-description">
  132            <p>
  133: load file, write cache file, and return engine object. this method create
  134: code cache file automatically. cachefile name can be specified with
  135: properties[:cachename], or filname + &#8216;cache&#8217; is used as
  136  default.
  137  </p>
  ...
  142  <span class="ruby-comment cmt"># File erubis/engine.rb, line 48</span>
  143      <span class="ruby-keyword kw">def</span> <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">load_file</span>(<span class="ruby-identifier">filename</span>, <span class="ruby-identifier">properties</span>={})
  144:       <span class="ruby-identifier">cachename</span> = <span class="ruby-identifier">properties</span>[<span class="ruby-identifier">:cachename</span>] <span class="ruby-operator">||</span> (<span class="ruby-identifier">filename</span> <span class="ruby-operator">+</span> <span class="ruby-value str">'.cache'</span>)
  145        <span class="ruby-identifier">properties</span>[<span class="ruby-identifier">:filename</span>] = <span class="ruby-identifier">filename</span>
  146        <span class="ruby-identifier">timestamp</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">mtime</span>(<span class="ruby-identifier">filename</span>)
  147:       <span class="ruby-keyword kw">if</span> <span class="ruby-identifier">test</span>(<span class="ruby-value">?f</span>, <span class="ruby-identifier">cachename</span>) <span class="ruby-operator">&amp;&amp;</span> <span class="ruby-identifier">timestamp</span> <span class="ruby-operator">==</span> <span class="ruby-constant">File</span>.<span class="ruby-identifier">mtime</span>(<span class="ruby-identifier">cachename</span>)
  148          <span class="ruby-identifier">engine</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new</span>(<span class="ruby-keyword kw">nil</span>, <span class="ruby-identifier">properties</span>)
  149:         <span class="ruby-identifier">engine</span>.<span class="ruby-identifier">src</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">read</span>(<span class="ruby-identifier">cachename</span>)
  150        <span class="ruby-keyword kw">else</span>
  151          <span class="ruby-identifier">input</span> = <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">filename</span>, <span class="ruby-value str">'rb'</span>) {<span class="ruby-operator">|</span><span class="ruby-identifier">f</span><span class="ruby-operator">|</span> <span class="ruby-identifier">f</span>.<span class="ruby-identifier">read</span> }
  152          <span class="ruby-identifier">engine</span> = <span class="ruby-keyword kw">self</span>.<span class="ruby-identifier">new</span>(<span class="ruby-identifier">input</span>, <span class="ruby-identifier">properties</span>)
  153:         <span class="ruby-identifier">tmpname</span> = <span class="ruby-identifier">cachename</span> <span class="ruby-operator">+</span> <span class="ruby-identifier">rand</span>().<span class="ruby-identifier">to_s</span>[<span class="ruby-value">1</span>,<span class="ruby-value">8</span>]
  154          <span class="ruby-constant">File</span>.<span class="ruby-identifier">open</span>(<span class="ruby-identifier">tmpname</span>, <span class="ruby-value str">'wb'</span>) {<span class="ruby-operator">|</span><span class="ruby-identifier">f</span><span class="ruby-operator">|</span> <span class="ruby-identifier">f</span>.<span class="ruby-identifier">write</span>(<span class="ruby-identifier">engine</span>.<span class="ruby-identifier">src</span>) }
  155:         <span class="ruby-constant">File</span>.<span class="ruby-identifier">rename</span>(<span class="ruby-identifier">tmpname</span>, <span class="ruby-identifier">cachename</span>)
  156:         <span class="ruby-constant">File</span>.<span class="ruby-identifier">utime</span>(<span class="ruby-identifier">timestamp</span>, <span class="ruby-identifier">timestamp</span>, <span class="ruby-identifier">cachename</span>)
  157        <span class="ruby-keyword kw">end</span>
  158        <span class="ruby-identifier">engine</span>.<span class="ruby-identifier">src</span>.<span class="ruby-identifier">untaint</span>   <span class="ruby-comment cmt"># ok?</span>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/doc/users-guide.html:
 3084  <h3 class="section2">File Caching</h3>
 3085  <p>Erubis::Eruby.load_file(filename) convert file into Ruby script and return Eruby object.
 3086: In addition, it caches converted Ruby script into cache file (filename + '.cache') if cache file is old or not exist.
 3087: If cache file exists and is newer than eruby file, Erubis::Eruby.load_file() loads cache file.
 3088  </p>
 3089  <div class="program_caption">
 ....
 3092  filename = 'example.rhtml'
 3093  eruby = <strong>Erubis::Eruby.load_file(filename)</strong>
 3094: cachename = filename + '.cache'
 3095: if test(?f, cachename)
 3096:   puts "*** cache file '#{cachename}' created."
 3097  end
 3098  </pre>
 3099: <p>Since 2.6.0, it is able to specify cache filename.
 3100  </p>
 3101  <div class="program_caption">
 3102: specify cache filename.</div>
 3103  <pre class="program">filename = 'example.rhtml'
 3104: eruby = Erubis::Eruby.load_file(filename, :cachename=&gt;filename+'.cache')
 3105  </pre>
 3106  <p>Caching makes Erubis about 40-50 percent faster than no-caching.
 ....
 3257  </ol>
 3258  <p>You must set your directories to be writable by web server process, because
 3259: Apache::ErubisRun calls Erubis::Eruby.load_file() internally which creates cache files
 3260  in the same directory in which '*.rhtml' file exists.
 3261  </p>
 ....
 3290  <pre class="program">## enable mod_rewrie
 3291  RewriteEngine on
 3292: ## deny access to *.rhtml and *.cache
 3293: #RewriteRule \.(rhtml|cache)$ - [R=404,L]
 3294: RewriteRule \.(rhtml|cache)$ - [F,L]
 3295  ## rewrite only if requested file is not found
 3296  RewriteCond %{SCRIPT_FILENAME} !-f
 ....
 3341  eruby                          12.720000   0.240000  <strong>12.960000</strong> ( 12.971888)
 3342  ERB                            36.760000   0.350000  <strong>37.110000</strong> ( 37.112019)
 3343: ERB(cached)                    11.990000   0.440000  <strong>12.430000</strong> ( 12.430375)
 3344  Erubis::Eruby                  10.840000   0.300000  <strong>11.140000</strong> ( 11.144426)
 3345: Erubis::Eruby(cached)           7.540000   0.410000   <strong>7.950000</strong> (  7.969305)
 3346  Erubis::FastEruby              10.440000   0.300000  <strong>10.740000</strong> ( 10.737808)
 3347: Erubis::FastEruby(cached)       6.940000   0.410000   <strong>7.350000</strong> (  7.353666)
 3348  Erubis::TinyEruby               9.550000   0.290000   9.840000 (  9.851729)
 3349  Erubis::ArrayBufferEruby       11.010000   0.300000  11.310000 ( 11.314339)
 ....
 3371  <p>Escaping HTML characters (such as '&lt; &gt; &amp; "') makes Erubis more faster than eruby and ERB,
 3372  because Erubis::XmlHelper#escape_xml() works faster than CGI.escapeHTML() and ERB::Util#h().
 3373: The following shows that Erubis runs more than 40 percent (when no-cached) or 90 percent (when cached) faster than eruby if HTML characters are escaped.
 3374  </p>
 3375  <div class="terminal_caption">
 ....
 3380  eruby                          21.700000   0.290000  <strong>21.990000</strong> ( 22.050687)
 3381  ERB                            45.140000   0.390000  <strong>45.530000</strong> ( 45.536976)
 3382: ERB(cached)                    20.340000   0.470000  <strong>20.810000</strong> ( 20.822653)
 3383  Erubis::Eruby                  14.830000   0.310000  <strong>15.140000</strong> ( 15.147930)
 3384: Erubis::Eruby(cached)          11.090000   0.420000  <strong>11.510000</strong> ( 11.514954)
 3385  Erubis::FastEruby              14.850000   0.310000  <strong>15.160000</strong> ( 15.172499)
 3386: Erubis::FastEruby(cached)      10.970000   0.430000  <strong>11.400000</strong> ( 11.399605)
 3387  Erubis::ArrayBufferEruby       14.970000   0.300000  15.270000 ( 15.281061)
 3388  Erubis::PrintOutEruby          15.780000   0.300000  16.080000 ( 16.088289)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/lib/erubis/converter.rb:
   36        convert_input(codebuf, input)
   37        @postamble.nil? ? add_postamble(codebuf) : (@postamble && (codebuf << @postamble))
   38:       @_proc = nil    # clear cached proc object
   39        return codebuf  # or codebuf.join()
   40      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/lib/erubis/engine.rb:
   41  
   42      ##
   43:     ## load file, write cache file, and return engine object.
   44:     ## this method create code cache file automatically.
   45:     ## cachefile name can be specified with properties[:cachename],
   46:     ## or filname + 'cache' is used as default.
   47      ##
   48      def self.load_file(filename, properties={})
   49:       cachename = properties[:cachename] || (filename + '.cache')
   50        properties[:filename] = filename
   51        timestamp = File.mtime(filename)
   52:       if test(?f, cachename) && timestamp == File.mtime(cachename)
   53          engine = self.new(nil, properties)
   54:         engine.src = File.read(cachename)
   55        else
   56          input = File.open(filename, 'rb') {|f| f.read }
   57          engine = self.new(input, properties)
   58:         tmpname = cachename + rand().to_s[1,8]
   59          File.open(tmpname, 'wb') {|f| f.write(engine.src) }
   60:         File.rename(tmpname, cachename)
   61:         File.utime(timestamp, timestamp, cachename)
   62        end
   63        engine.src.untaint   # ok?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/lib/erubis/helpers/rails_helper.rb:
  187            end
  188            #
  189:           def cache_fragment(block, name = {}, options = nil) #:nodoc:
  190              @view.fragment_for(block, name, options) do
  191                #eval(ActionView::Base.erb_variable, block.binding)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/test/test-enhancers.rb:
   46          eruby = @klass.load_file(filename, @options)
   47        ensure
   48:         cachename = filename + '.cache'
   49:         File.unlink(cachename) if test(?f, cachename)
   50          File.unlink(filename) if test(?f, filename)
   51        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/test/test-erubis.rb:
   47          eruby = @klass.load_file(filename, @options)
   48        ensure
   49:         cachename = filename + '.cache'
   50:         File.unlink(cachename) if test(?f, cachename)
   51          File.unlink(filename) if test(?f, filename)
   52        end
   ..
   99  
  100  
  101:   def test_load_file_cache1
  102      @input = <<END
  103  <ul>
  ...
  118      @klass = Erubis::Eruby
  119      filename = 'tmp.load_file_timestamp1'
  120:     cachename = filename + '.cache'
  121      begin
  122:       ## when cache doesn't exist then it is created automatically
  123        File.open(filename, 'w') { |f| f.write(@input) }
  124        mtime = Time.now - 2.0
  125        File.utime(mtime, mtime, filename)
  126:       !test(?f, cachename)  or raise "** failed"
  127        engine = @klass.load_file(filename)
  128:       assert_block() { test(?f, cachename) }
  129:       assert_block() { File.mtime(filename) <= File.mtime(cachename) }
  130        assert_text_equal(@src, engine.src)
  131:       ## when cache has different timestamp then it is recreated
  132        input2 = @input.gsub(/ul>/, 'ol>')
  133        src2   = @src.gsub(/ul>/, 'ol>')
  ...
  138        #
  139        File.utime(t1, t1, filename)
  140:       File.utime(t2, t2, cachename)
  141:       File.mtime(filename) < File.mtime(cachename)  or raise "** failed"
  142        engine = @klass.load_file(filename)
  143:       assert_block('cache should have same timestamp') { File.mtime(filename) == File.mtime(cachename) }
  144        #assert_text_equal(@src, engine.src)
  145        assert_text_equal(src2, engine.src)
  146        #
  147        File.utime(t2, t2, filename)
  148:       File.utime(t1, t1, cachename)
  149:       File.mtime(filename) > File.mtime(cachename)  or raise "** failed"
  150        engine = @klass.load_file(filename)
  151:       assert_block('cache should have same timestamp') { File.mtime(filename) == File.mtime(cachename) }
  152        assert_text_equal(src2, engine.src)
  153      ensure
  154:       File.unlink(cachename) if File.file?(cachename)
  155        File.unlink(filename) if File.file?(filename)
  156      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/erubis-2.7.0/test/test-index-cgi.rb:
   41      return yield
   42    ensure
   43:     [filename, filename + '.cache'].each do |fname|
   44        File.unlink(fname) if File.exist?(fname)
   45      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/docs/old/ChangeLog:
  200  11Feb09: Fix compile options for sun compiler (Alasdairrr)
  201  11Feb09: get_status returns a Process::Status object
  202: 12Feb09: Add EM::Protocols::Memcache with simple get/set functionality
  203  19Feb09: Add catch-all EM.error_handler
  204  20Feb09: Support miniunit (1.9)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/ext/ssl.cpp:
  177  
  178  	if (is_server) {
  179: 		SSL_CTX_sess_set_cache_size (pCtx, 128);
  180  		SSL_CTX_set_session_id_context (pCtx, (unsigned char*)"eventmachine", 12);
  181  	}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/em/protocols.rb:
    3    # - HttpClient and HttpClient2
    4    # - Stomp
    5:   # - Memcache
    6    # - SmtpClient and SmtpServer
    7    # - SASLauth and SASLauthclient
    .
   29      autoload :SmtpServer, 'em/protocols/smtpserver'
   30      autoload :SASLauth, 'em/protocols/saslauth'
   31:     autoload :Memcache, 'em/protocols/memcache'
   32      autoload :Postgres3, 'em/protocols/postgres3'
   33      autoload :ObjectProtocol, 'em/protocols/object_protocol'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/em/protocols/httpclient.rb:
   50      # Timeout for connections that run too long or hang somewhere in the middle.
   51      # Persistent connections (HTTP/1.1), may need a associated delegate object.
   52:     # DNS: Some way to cache DNS lookups for hostnames we connect to. Ruby's
   53      # DNS lookups are unbelievably slow.
   54      # HEAD requests.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/em/protocols/memcache.rb:
    1  module EventMachine
    2    module Protocols
    3:     # Implements the Memcache protocol (http://code.sixapart.com/svn/memcached/trunk/server/doc/protocol.txt).
    4:     # Requires memcached >= 1.2.4 w/ noreply support
    5      #
    6      # == Usage example
    7      #
    8      #   EM.run{
    9:     #     cache = EM::P::Memcache.connect 'localhost', 11211
   10      #
   11:     #     cache.set :a, 'hello'
   12:     #     cache.set :b, 'hi'
   13:     #     cache.set :c, 'how are you?'
   14:     #     cache.set :d, ''
   15      #
   16:     #     cache.get(:a){ |v| p v }
   17:     #     cache.get_hash(:a, :b, :c, :d){ |v| p v }
   18:     #     cache.get(:a,:b,:c,:d){ |a,b,c,d| p [a,b,c,d] }
   19      #
   20:     #     cache.get(:a,:z,:b,:y,:d){ |a,z,b,y,d| p [a,z,b,y,d] }
   21      #
   22:     #     cache.get(:missing){ |m| p [:missing=, m] }
   23:     #     cache.set(:missing, 'abc'){ p :stored }
   24:     #     cache.get(:missing){ |m| p [:missing=, m] }
   25:     #     cache.del(:missing){ p :deleted }
   26:     #     cache.get(:missing){ |m| p [:missing=, m] }
   27      #   }
   28      #
   29:     module Memcache
   30        include EM::Deferrable
   31  
   ..
   56        # Get the value associated with one or multiple keys
   57        #
   58:       #  cache.get(:a){ |v| p v }
   59:       #  cache.get(:a,:b,:c,:d){ |a,b,c,d| p [a,b,c,d] }
   60        #
   61        def get *keys
   ..
   73        # Set the value for a given key
   74        #
   75:       #  cache.set :a, 'hello'
   76:       #  cache.set(:missing, 'abc'){ puts "stored the value!" }
   77        #
   78        def set key, val, exptime = 0, &cb
   ..
   88        # Gets multiple values as a hash
   89        #
   90:       #  cache.get_hash(:a, :b, :c, :d){ |h| puts h[:a] }
   91        #
   92        def get_hash *keys
   ..
  100        # Delete the value associated with a key
  101        #
  102:       #  cache.del :a
  103:       #  cache.del(:b){ puts "deleted the value!" }
  104        #
  105        def delete key, expires = 0, &cb
  ...
  111        alias del delete
  112  
  113:       # Connect to a memcached server (must support NOREPLY, memcached >= 1.2.4)
  114        def self.connect host = 'localhost', port = 11211
  115          EM.connect host, port, self, host, port
  ...
  209  
  210          else
  211:           p [:MEMCACHE_UNKNOWN, line]
  212          end
  213        end
  ...
  226            @deferred_status = nil
  227          else
  228:           raise 'Unable to connect to memcached server'
  229          end
  230        end
  ...
  234  
  235  if __FILE__ == $0
  236:   # ruby -I ext:lib -r eventmachine -rubygems lib/protocols/memcache.rb
  237    require 'em/spec'
  238  
  239    # @private
  240    class TestConnection
  241:     include EM::P::Memcache
  242      def send_data data
  243        sent_data << data
  ...
  252    end
  253  
  254:   EM.describe EM::Protocols::Memcache do
  255  
  256      before{

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/lib/em/pure_ruby.rb:
  535      # have selected readable.
  536      # TODO, coalesce multiple reads into a single event.
  537:     # TODO, do the function check somewhere else and cache it.
  538      def eventable_read
  539        @last_activity = Reactor.instance.current_loop_time

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/eventmachine-1.0.3/tests/test_basic.rb:
    7    end
    8  
    9:   def test_connection_class_cache
   10      mod = Module.new
   11      a, b = nil, nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/factory_girl-4.3.0/lib/factory_girl/evaluator.rb:
   14        @build_strategy = build_strategy
   15        @overrides = overrides
   16:       @cached_attributes = overrides
   17        @instance = nil
   18  
   ..
   66      def self.define_attribute(name, &block)
   67        define_method(name) do
   68:         if @cached_attributes.key?(name)
   69:           @cached_attributes[name]
   70          else
   71:           @cached_attributes[name] = instance_exec(&block)
   72          end
   73        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/factory_girl_rails-4.3.0/gemfiles/rails3.1.gemfile.lock:
   19        i18n (~> 0.6)
   20        rack (~> 1.3.6)
   21:       rack-cache (~> 1.2)
   22        rack-mount (~> 0.8.2)
   23        rack-test (~> 0.6.1)
   ..
   87      polyglot (0.3.3)
   88      rack (1.3.9)
   89:     rack-cache (1.2)
   90        rack (>= 0.4)
   91      rack-mount (0.8.3)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/factory_girl_rails-4.3.0/gemfiles/rails3.2.gemfile.lock:
   19        journey (~> 1.0.4)
   20        rack (~> 1.4.0)
   21:       rack-cache (~> 1.2)
   22        rack-test (~> 0.6.1)
   23        sprockets (~> 2.2.1)
   ..
   87      polyglot (0.3.3)
   88      rack (1.4.4)
   89:     rack-cache (1.2)
   90        rack (>= 0.4)
   91      rack-ssl (1.3.3)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/faraday-0.8.8/lib/faraday/utils.rb:
   13        end
   14  
   15:       # symbol -> string mapper + cache
   16        KeyMap = Hash.new do |map, key|
   17          map[key] = if key.respond_to?(:to_str) then key

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/faraday_middleware-0.9.0/faraday_middleware.gemspec:
    9    gem.add_development_dependency 'rspec', '~> 2.6'
   10    gem.add_development_dependency 'simple_oauth', '~> 0.1'
   11:   gem.add_development_dependency 'rack-cache', '~> 1.1'
   12    gem.authors = ["Erik Michaels-Ober", "Wynn Netherland"]
   13    gem.description = %q{Various middleware for Faraday}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/faraday_middleware-0.9.0/lib/faraday_middleware/response/caching.rb:
    5  
    6  module FaradayMiddleware
    7:   # Public: Caches GET responses and pulls subsequent ones from the cache.
    8    class Caching < Faraday::Middleware
    9:     attr_reader :cache
   10  
   11      extend Forwardable
   ..
   14      # Public: initialize the middleware.
   15      #
   16:     # cache   - An object that responds to read, write and fetch (default: nil).
   17      # options - An options Hash (default: {}):
   18      #           :ignore_params - String name or Array names of query params
   19:     #                            that should be ignored when forming the cache
   20      #                            key (default: []).
   21      #
   22:     # Yields if no cache is given. The block should return a cache object.
   23:     def initialize(app, cache = nil, options = {})
   24        super(app)
   25:       options, cache = cache, nil if cache.is_a? Hash and block_given?
   26:       @cache = cache || yield
   27        @options = options
   28      end
   ..
   32          if env[:parallel_manager]
   33            # callback mode
   34:           cache_on_complete(env)
   35          else
   36            # synchronous mode
   37:           response = cache.fetch(cache_key(env)) { @app.call(env) }
   38            finalize_response(response, env)
   39          end
   ..
   43      end
   44  
   45:     def cache_key(env)
   46        url = env[:url].dup
   47        if url.query && params_to_ignore.any?
   ..
   58      end
   59  
   60:     def cache_on_complete(env)
   61:       key = cache_key(env)
   62:       if cached_response = cache.read(key)
   63:         finalize_response(cached_response, env)
   64        else
   65          response = @app.call(env)
   66:         response.on_complete { cache.write(key, response) }
   67        end
   68      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/faraday_middleware-0.9.0/spec/caching_test.rb:
    2  require 'forwardable'
    3  require 'fileutils'
    4: require 'rack/cache'
    5  require 'faraday'
    6  require 'faraday_middleware/response/caching'
    .
    8  
    9  class CachingTest < Test::Unit::TestCase
   10:   class TestCache < Hash
   11      def read(key)
   12:       if cached = self[key]
   13:         Marshal.load(cached)
   14        end
   15      end
   ..
   35  
   36    def setup
   37:     @cache = TestCache.new
   38  
   39      request_count = 0
   ..
   44      @conn = Faraday.new do |b|
   45        b.use Lint
   46:       b.use FaradayMiddleware::Caching, @cache
   47        b.adapter :test do |stub|
   48          stub.get('/', &response)
   ..
   57    def_delegators :@conn, :get, :post
   58  
   59:   def test_cache_get
   60      assert_equal 'request:1', get('/').body
   61      assert_equal 'request:1', get('/').body
   ..
   65  
   66    def test_response_has_request_params
   67:     get('/') # make cache
   68      response = get('/')
   69      assert_equal :get, response.env[:method]
   ..
   71    end
   72  
   73:   def test_cache_query_params
   74      assert_equal 'request:1', get('/').body
   75      assert_equal 'request:2', get('/?foo=bar').body
   ..
   78    end
   79  
   80:   def test_doesnt_cache_post
   81      assert_equal 'request:1', post('/').body
   82      assert_equal 'request:2', post('/').body
   ..
   85  end
   86  
   87: # RackCompatible + Rack::Cache
   88  class HttpCachingTest < Test::Unit::TestCase
   89    include FileUtils
   90  
   91:   CACHE_DIR = File.expand_path('../../tmp/cache', __FILE__)
   92  
   93    # middleware to check whether "rack.errors" is free of error reports
   ..
  102  
  103    def setup
  104:     rm_r CACHE_DIR if File.exists? CACHE_DIR
  105:     # force reinitializing cache dirs
  106:     Rack::Cache::Storage.instance.clear
  107  
  108      request_count = 0
  109      response = lambda { |env|
  110        [200, { 'Content-Type' => 'text/plain',
  111:               'Cache-Control' => 'public, max-age=900',
  112              },
  113              "request:#{request_count+=1}"]
  ...
  117        b.use RackErrorsComplainer
  118  
  119:       b.use FaradayMiddleware::RackCompatible, Rack::Cache::Context,
  120:         :metastore   => "file:#{CACHE_DIR}/rack/meta",
  121:         :entitystore => "file:#{CACHE_DIR}/rack/body",
  122          :verbose     => true
  123  
  ...
  132    def_delegators :@conn, :get, :post
  133  
  134:   def test_cache_get
  135      response = get('/', :user_agent => 'test')
  136      assert_equal 'request:1', response.body
  ...
  148    end
  149  
  150:   def test_doesnt_cache_post
  151      assert_equal 'request:1', get('/').body
  152      assert_equal 'request:2', post('/').body

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffaker-1.22.1/lib/ffaker/address_mx.rb:
  303          "Santa Catarina Yosonotú", "Santa Catarina Zapoquila", "Santa Cruz Acatepec", "Santa Cruz Amilpas",
  304          "Santa Cruz Itundujia", "Santa Cruz Mixtepec", "Santa Cruz Nundaco", "Santa Cruz Papalutla",
  305:         "Santa Cruz Tacache de Mina", "Santa Cruz Tacahua", "Santa Cruz Tayata", "Santa Cruz Xitla", "Santa Cruz Xoxocotlán",
  306          "Santa Cruz Zenzontepec", "Santa Cruz de Bravo", "Santa Gertrudis", "Santa Inés Yatzeche", "Santa Inés de Zaragoza",
  307          "Santa Inés del Monte", "Santa Lucía Miahuatlán", "Santa Lucía Monteverde", "Santa Lucía Ocotlán",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffaker-1.22.1/lib/ffaker/data/skill/tech_skills:
   28  Cassandra
   29  Heroku
   30: Memcached
   31  PostgreSQL
   32  SOAP

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/Function.c:
  279      }
  280      
  281:     /* No existing function for the proc with that signature, create a new one and cache it */
  282      callback = rbffi_Function_NewInstance(rbFunctionInfo, proc);
  283      if (cbref == Qnil) {
  284:         /* If there is no other cb already cached for this proc, we can use the ivar slot */
  285          rb_ivar_set(proc, id_cb_ref, callback);
  286      } else {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi.darwin.mk:
    3  include ${srcdir}/libffi.gnu.mk
    4  
    5: CCACHE := $(shell type -p ccache)
    6  BUILD_DIR := $(shell pwd)
    7  
    .
   46  	    echo "Configuring libffi for $(1)"; \
   47  	    cd "$(BUILD_DIR)"/libffi-$(1) && \
   48: 	      env CC="$(CCACHE) $(CC)" CFLAGS="-arch $(1) $(LIBFFI_CFLAGS)" LDFLAGS="-arch $(1)" \
   49  		$(LIBFFI_CONFIGURE) --host=$(1)-apple-darwin > /dev/null; \
   50  	fi); \

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/acinclude.m4:
   12     ac_cv_func_mmap_anon=no
   13  else
   14:    AC_CACHE_CHECK([whether read-only mmap of a plain file works],
   15    ac_cv_func_mmap_file,
   16    [# Add a system to this blacklist if
   ..
   25  	ac_cv_func_mmap_file=yes;;
   26     esac])
   27:    AC_CACHE_CHECK([whether mmap from /dev/zero works],
   28    ac_cv_func_mmap_dev_zero,
   29    [# Add a system to this blacklist if it has mmap() but /dev/zero
   ..
   45  
   46     # Unlike /dev/zero, the MAP_ANON(YMOUS) defines can be probed for.
   47:    AC_CACHE_CHECK([for MAP_ANON(YMOUS)], ac_cv_decl_map_anon,
   48      [AC_TRY_COMPILE(
   49  [#include <sys/types.h>
   ..
   62       ac_cv_func_mmap_anon=no
   63     else
   64:      AC_CACHE_CHECK([whether mmap with MAP_ANON(YMOUS) works],
   65       ac_cv_func_mmap_anon,
   66    [# Add a system to this blacklist if it has mmap() and MAP_ANON or

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/aclocal.m4:
  464  AC_DEFUN([LT_SYS_DLOPEN_DEPLIBS],
  465  [AC_REQUIRE([AC_CANONICAL_HOST])dnl
  466: AC_CACHE_CHECK([whether deplibs are loaded by dlopen],
  467    [lt_cv_sys_dlopen_deplibs],
  468    [# PORTME does your system automatically load deplibs for dlopen?
  ...
  570  AC_DEFUN([LT_SYS_MODULE_EXT],
  571  [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
  572: AC_CACHE_CHECK([which extension is used for runtime loadable modules],
  573    [libltdl_cv_shlibext],
  574  [
  ...
  593  AC_DEFUN([LT_SYS_MODULE_PATH],
  594  [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
  595: AC_CACHE_CHECK([which variable specifies run-time module search path],
  596    [lt_cv_module_path_var], [lt_cv_module_path_var="$shlibpath_var"])
  597  if test -n "$lt_cv_module_path_var"; then
  ...
  612  AC_DEFUN([LT_SYS_DLSEARCH_PATH],
  613  [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
  614: AC_CACHE_CHECK([for the default library search path],
  615    [lt_cv_sys_dlsearch_path],
  616    [lt_cv_sys_dlsearch_path="$sys_lib_dlsearch_path_spec"])
  ...
  640  m4_defun([_LT_CHECK_DLPREOPEN],
  641  [m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
  642: AC_CACHE_CHECK([whether libtool supports -dlopen/-dlpreopen],
  643    [libltdl_cv_preloaded_symbols],
  644    [if test -n "$lt_cv_sys_global_symbol_pipe"; then
  ...
  760  AC_DEFUN([LT_SYS_SYMBOL_USCORE],
  761  [m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
  762: AC_CACHE_CHECK([for _ prefix in compiled symbols],
  763    [lt_cv_sys_symbol_underscore],
  764    [lt_cv_sys_symbol_underscore=no
  ...
  807    if test x"$libltdl_cv_func_dlopen" = xyes ||
  808       test x"$libltdl_cv_lib_dl_dlopen" = xyes ; then
  809: 	AC_CACHE_CHECK([whether we have to add an underscore for dlsym],
  810  	  [libltdl_cv_need_uscore],
  811  	  [libltdl_cv_need_uscore=unknown
  ...
  998  # See how the compiler implements dependency checking.
  999  # NAME is "CC", "CXX", "GCJ", or "OBJC".
 1000: # We try a few techniques and use that to set a single cache variable.
 1001  #
 1002  # We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was
 ....
 1017                     [depcc="$$1"   am_compiler_list=])
 1018  
 1019: AC_CACHE_CHECK([dependency style of $depcc],
 1020                 [am_cv_$1_dependencies_compiler_type],
 1021  [if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
 ....
 1529  AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
 1530  AC_REQUIRE_AUX_FILE([compile])dnl
 1531: # FIXME: we rely on the cache variable name because
 1532  # there is no other way.
 1533  set dummy $CC
 ....
 1835    esac
 1836  
 1837:   # If the value was cached, stop now.  We just wanted to have am__tar
 1838    # and am__untar set.
 1839    test -n "${am_cv_prog_tar_$1}" && break
 ....
 1852  rm -rf conftest.dir
 1853  
 1854: AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
 1855  AC_MSG_RESULT([$am_cv_prog_tar_$1])])
 1856  AC_SUBST([am__tar])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/ChangeLog:
    6  2011-07-11  Andrew Haley  <aph@redhat.com>
    7  
    8:         * src/arm/ffi.c (FFI_INIT_TRAMPOLINE): Clear icache.
    9  
   10  2011-06-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>
   ..
  136  
  137  	* src/sparc/ffi.c (ffi_call): Make compatible with Solaris Studio
  138: 	aggregate return ABI.  Flush cache.
  139: 	(ffi_prep_closure_loc): Flush cache.
  140  
  141  2011-02-11  Anthony Green  <green@moxielogic.com>
  ...
  170  2011-02-07  Joel Sherrill <joel.sherrill@oarcorp.com>
  171  
  172: 	* libffi/src/m68k/ffi.c: Add RTEMS support for cache flushing.
  173  	Handle case when CPU variant does not have long double support.
  174  	* libffi/src/m68k/sysv.S: Add support for mc68000, Coldfire,
  ...
 1150  2008-02-15  David Daney  <ddaney@avtrex.com>
 1151  
 1152: 	* src/mips/ffi.c (USE__BUILTIN___CLEAR_CACHE):
 1153: 	Define (conditionally), and use it to include cachectl.h.
 1154: 	(ffi_prep_closure_loc): Fix cache flushing.
 1155  	* src/mips/ffitarget.h (_ABIN32, _ABI64, _ABIO32): Define.
 1156  
 ....
 1474  2007-08-05  Steven Newbury  <s_j_newbury@yahoo.co.uk>
 1475  
 1476: 	* src/arm/ffi.c (FFI_INIT_TRAMPOLINE): Use __clear_cache instead of
 1477: 	directly using the sys_cacheflush syscall.
 1478  
 1479  2007-07-27  Andrew Haley  <aph@redhat.com>
 ....
 1678  2007-07-11  David Daney  <ddaney@avtrex.com>
 1679  
 1680: 	* src/mips/ffi.c: Don't include sys/cachectl.h.
 1681: 	(ffi_prep_closure_loc): Use __builtin___clear_cache() instead of
 1682: 	cacheflush().
 1683  
 1684  2007-05-18  Aurelien Jarno  <aurelien@aurel32.net>
 ....
 1863  2007-03-08  Alexandre Oliva  <aoliva@redhat.com>
 1864  
 1865: 	* src/powerpc/ffi.c (flush_icache): Fix left-over from previous
 1866  	patch.
 1867  	(ffi_prep_closure_loc): Remove unneeded casts.  Add needed ones.
 ....
 1915  	* src/powerpc/ffi.c (ffi_prep_closure_loc): Renamed from
 1916  	(ffi_prep_closure): ... this.
 1917: 	(flush_icache): Adjust.
 1918  
 1919  2007-03-07  Alexandre Oliva  <aoliva@redhat.com>
 ....
 2116  	declaration.
 2117  	(ffi_prep_closure): Make linux trampoline conditional on PA_LINUX.
 2118: 	Add nops to cache flush.  Add trampoline for PA_HPUX.
 2119  	* src/pa/hpux32.S: New file.
 2120  	* src/pa/linux.S (ffi_call_LINUX): Rename to ffi_call_pa32. Rename
 ....
 2924  
 2925  	* acinclude.m4 (AC_FUNC_MMAP_BLACKLIST): Check for <sys/mman.h>
 2926: 	and mmap() explicitly instead of relying on preset autoconf cache
 2927  	variables.
 2928  	* aclocal.m4: Regenerate.
 ....
 2936  2004-06-30  Geoffrey Keating  <geoffk@apple.com>
 2937  
 2938: 	* src/powerpc/ffi_darwin.c (flush_icache): ';' is a comment
 2939  	character on Darwin, use '\n\t' instead.
 2940  
 ....
 3748  	(ffi_call): Likewise.
 3749  	(ffi_prep_closure): Likewise.
 3750: 	(flush_icache): Surround by #ifndef POWERPC64.
 3751  	(ffi_dblfl): New union type.
 3752  	(ffi_closure_helper_SYSV): Use it to avoid aliasing problems.
 ....
 4161  	* include/ffi.h.in: Add AIX and Darwin closure definitions.
 4162  	* src/powerpc/ffi_darwin.c (ffi_prep_closure): New function.
 4163: 	(flush_icache, flush_range): New functions.
 4164  	(ffi_closure_helper_DARWIN): New function.
 4165  	* src/powerpc/aix_closure.S: New file.
 ....
 4308  	involving long long and register pairs.
 4309  	(ffi_prep_closure): New function.
 4310: 	(flush_icache): Likewise.
 4311  	(ffi_closure_helper_SYSV): Likewise.
 4312  	* include/ffi.h.in (FFI_CLOSURES): Define on PPC.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/ChangeLog.libffi:
  400  2008-02-15  David Daney	 <ddaney@avtrex.com>
  401  
  402: 	* src/mips/ffi.c (USE__BUILTIN___CLEAR_CACHE):
  403: 	Define (conditionally), and use it to include cachectl.h.
  404: 	(ffi_prep_closure_loc): Fix cache flushing.
  405  	* src/mips/ffitarget.h (_ABIN32, _ABI64, _ABIO32): Define.
  406  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/configure.ac:
  246  AC_C_BIGENDIAN
  247  
  248: AC_CACHE_CHECK([assembler .cfi pseudo-op support],
  249      libffi_cv_as_cfi_pseudo_op, [
  250      libffi_cv_as_cfi_pseudo_op=unknown
  ...
  259  
  260  if test x$TARGET = xSPARC; then
  261:     AC_CACHE_CHECK([assembler and linker support unaligned pc related relocs],
  262  	libffi_cv_as_sparc_ua_pcrel, [
  263  	save_CFLAGS="$CFLAGS"
  ...
  275      fi
  276  
  277:     AC_CACHE_CHECK([assembler .register pseudo-op support],
  278         libffi_cv_as_register_pseudo_op, [
  279         libffi_cv_as_register_pseudo_op=unknown
  ...
  290  
  291  if test x$TARGET = xX86 || test x$TARGET = xX86_WIN32 || test x$TARGET = xX86_64; then
  292:     AC_CACHE_CHECK([assembler supports pc related relocs],
  293  	libffi_cv_as_x86_pcrel, [
  294  	libffi_cv_as_x86_pcrel=no
  ...
  303      fi
  304  
  305:     AC_CACHE_CHECK([assembler .ascii pseudo-op support],
  306         libffi_cv_as_ascii_pseudo_op, [
  307         libffi_cv_as_ascii_pseudo_op=unknown
  ...
  316      fi
  317  
  318:     AC_CACHE_CHECK([assembler .string pseudo-op support],
  319         libffi_cv_as_string_pseudo_op, [
  320         libffi_cv_as_string_pseudo_op=unknown
  ...
  356  
  357  if test x$TARGET = xX86_64; then
  358:     AC_CACHE_CHECK([assembler supports unwind section type],
  359  	libffi_cv_as_x86_64_unwind_section_type, [
  360  	libffi_cv_as_x86_64_unwind_section_type=yes
  ...
  371  
  372  if test "x$GCC" = "xyes"; then
  373:   AC_CACHE_CHECK([whether .eh_frame section should be read-only],
  374        libffi_cv_ro_eh_frame, [
  375    	libffi_cv_ro_eh_frame=no
  ...
  395    fi
  396  
  397:   AC_CACHE_CHECK([for __attribute__((visibility("hidden")))],
  398        libffi_cv_hidden_visibility_attribute, [
  399    	echo 'int __attribute__ ((visibility ("hidden"))) foo (void) { return 1  ; }' > conftest.c

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_cflags_warn_all.m4:
   62  AS_VAR_PUSHDEF([FLAGS],[CFLAGS])dnl
   63  AS_VAR_PUSHDEF([VAR],[ac_cv_cflags_warn_all])dnl
   64: AC_CACHE_CHECK([m4_ifval($1,$1,FLAGS) for maximum warnings],
   65  VAR,[VAR="no, unknown"
   66   AC_LANG_PUSH([C])
   ..
  104  AS_VAR_PUSHDEF([FLAGS],[CXXFLAGS])dnl
  105  AS_VAR_PUSHDEF([VAR],[ax_cv_cxxflags_warn_all])dnl
  106: AC_CACHE_CHECK([m4_ifval($1,$1,FLAGS) for maximum warnings],
  107  VAR,[VAR="no, unknown"
  108   AC_LANG_PUSH([C++])
  ...
  146  AS_VAR_PUSHDEF([FLAGS],[FCFLAGS])dnl
  147  AS_VAR_PUSHDEF([VAR],[ax_cv_fcflags_warn_all])dnl
  148: AC_CACHE_CHECK([m4_ifval($1,$1,FLAGS) for maximum warnings],
  149  VAR,[VAR="no, unknown"
  150   AC_LANG_PUSH([Fortran])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_check_compiler_flags.m4:
   52  [AC_PREREQ(2.59) dnl for _AC_LANG_PREFIX
   53  AC_MSG_CHECKING([whether _AC_LANG compiler accepts $1])
   54: dnl Some hackery here since AC_CACHE_VAL can't handle a non-literal varname:
   55  AS_LITERAL_IF([$1],
   56:   [AC_CACHE_VAL(AS_TR_SH(ax_cv_[]_AC_LANG_ABBREV[]_flags_[$1]), [
   57        ax_save_FLAGS=$[]_AC_LANG_PREFIX[]FLAGS
   58        _AC_LANG_PREFIX[]FLAGS="$1"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_compiler_vendor.m4:
   11  #   Determine the vendor of the C/C++ compiler, e.g., gnu, intel, ibm, sun,
   12  #   hp, borland, comeau, dec, cray, kai, lcc, metrowerks, sgi, microsoft,
   13: #   watcom, etc. The vendor is returned in the cache variable
   14  #   $ax_cv_c_compiler_vendor for C and $ax_cv_cxx_compiler_vendor for C++.
   15  #
   ..
   49  AC_DEFUN([AX_COMPILER_VENDOR],
   50  [
   51: AC_CACHE_CHECK([for _AC_LANG compiler vendor], ax_cv_[]_AC_LANG_ABBREV[]_compiler_vendor,
   52   [ax_cv_[]_AC_LANG_ABBREV[]_compiler_vendor=unknown
   53    # note: don't check for gcc first since some other compilers define __GNUC__

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_enable_builddir.m4:
  119        test -f $srcdir/confdefs.h   && mv $srcdir/confdefs.h   .
  120        test -f $srcdir/conftest.log && mv $srcdir/conftest.log .
  121:       test -f $srcdir/$cache_file  && mv $srcdir/$cache_file  .
  122        AC_MSG_RESULT(....exec $SHELL $srcdir/[$]0 "--srcdir=$srcdir" "--enable-builddir=$SUB" ${1+"[$]@"})
  123        case "[$]0" in # restart

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_gcc_archflag.m4:
   11  #   This macro tries to guess the "native" arch corresponding to the target
   12  #   architecture for use with gcc's -march=arch or -mtune=arch flags. If
   13: #   found, the cache variable $ax_cv_gcc_archflag is set to this flag and
   14  #   ACTION-SUCCESS is executed; otherwise $ax_cv_gcc_archflag is is set to
   15  #   "unknown" and ACTION-FAILURE is executed. The default ACTION-SUCCESS is
   ..
   75  AC_MSG_CHECKING([for gcc architecture flag])
   76  AC_MSG_RESULT([])
   77: AC_CACHE_VAL(ax_cv_gcc_archflag,
   78  [
   79  ax_cv_gcc_archflag="unknown"
   ..
  116  	    *67?:*:*:*) ax_gcc_arch="athlon-4 athlon k7" ;;
  117  	    *6[[68a]]?:*:*:*)
  118: 	       AX_GCC_X86_CPUID(0x80000006) # L2 cache size
  119  	       case $ax_cv_gcc_x86_cpuid_0x80000006 in
  120                   *:*:*[[1-9a-f]]??????:*) # (L2 = ecx >> 16) >= 256

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/ax_gcc_x86_cpuid.m4:
   15  #
   16  #   On output, the values of the eax, ebx, ecx, and edx registers are stored
   17: #   as hexadecimal strings as "eax:ebx:ecx:edx" in the cache variable
   18  #   ax_cv_gcc_x86_cpuid_OP.
   19  #
   ..
   61  [AC_REQUIRE([AC_PROG_CC])
   62  AC_LANG_PUSH([C])
   63: AC_CACHE_CHECK(for x86 cpuid $1 output, ax_cv_gcc_x86_cpuid_$1,
   64   [AC_RUN_IFELSE([AC_LANG_PROGRAM([#include <stdio.h>], [
   65       int op = $1, eax, ebx, ecx, edx;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/m4/libtool.m4:
  118  [for cc_temp in $1""; do
  119    case $cc_temp in
  120:     compile | *[[\\/]]compile | ccache | *[[\\/]]ccache ) ;;
  121      distcc | *[[\\/]]distcc | purify | *[[\\/]]purify ) ;;
  122      \-*) ;;
  ...
  941        [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])
  942  
  943:     AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],
  944        [lt_cv_apple_cc_single_mod=no
  945        if test -z "${LT_MULTI_MODULE}"; then
  ...
  963  	rm -f conftest.*
  964        fi])
  965:     AC_CACHE_CHECK([for -exported_symbols_list linker flag],
  966        [lt_cv_ld_exported_symbols_list],
  967        [lt_cv_ld_exported_symbols_list=no
  ...
  974  	LDFLAGS="$save_LDFLAGS"
  975      ])
  976:     AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],
  977        [lt_cv_ld_force_load=no
  978        cat > conftest.c << _LT_EOF
  ...
 1089    aix_libpath=$lt_cv_aix_libpath
 1090  else
 1091:   AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],
 1092    [AC_LINK_IFELSE([AC_LANG_PROGRAM],[
 1093    lt_aix_libpath_sed='[
 ....
 1322    SAVE_CFLAGS="$CFLAGS"
 1323    CFLAGS="$CFLAGS -belf"
 1324:   AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,
 1325      [AC_LANG_PUSH(C)
 1326       AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])
 ....
 1365  _LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])
 1366  
 1367: AC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],
 1368    [lt_cv_ar_at_file=no
 1369     AC_COMPILE_IFELSE([AC_LANG_PROGRAM],
 ....
 1446  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1447  m4_require([_LT_DECL_SED])dnl
 1448: AC_CACHE_CHECK([$1], [$2],
 1449    [$2=no
 1450     m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
 ....
 1497  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1498  m4_require([_LT_DECL_SED])dnl
 1499: AC_CACHE_CHECK([$1], [$2],
 1500    [$2=no
 1501     save_LDFLAGS="$LDFLAGS"
 ....
 1540  # find the maximum length of command line arguments
 1541  AC_MSG_CHECKING([the maximum length of command line arguments])
 1542: AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
 1543    i=0
 1544    teststring="ABCD"
 ....
 1855      LIBS="$lt_cv_dlopen_libs $LIBS"
 1856  
 1857:     AC_CACHE_CHECK([whether a program can dlopen itself],
 1858  	  lt_cv_dlopen_self, [dnl
 1859  	  _LT_TRY_DLOPEN_SELF(
 ....
 1864      if test "x$lt_cv_dlopen_self" = xyes; then
 1865        wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
 1866:       AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
 1867  	  lt_cv_dlopen_self_static, [dnl
 1868  	  _LT_TRY_DLOPEN_SELF(
 ....
 1910  m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1911  m4_require([_LT_TAG_COMPILER])dnl
 1912: AC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],
 1913    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],
 1914    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no
 ....
 1991  # ----------------
 1992  m4_defun([_LT_CHECK_OBJDIR],
 1993: [AC_CACHE_CHECK([for objdir], [lt_cv_objdir],
 1994  [rm -f .libs 2>/dev/null
 1995  mkdir .libs 2>/dev/null
 ....
 2592  
 2593    # Some binutils ld are patched to set DT_RUNPATH
 2594:   AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],
 2595      [lt_cv_shlibpath_overrides_runpath=no
 2596      save_LDFLAGS=$LDFLAGS
 ....
 2872  [m4_require([_LT_DECL_EGREP])dnl
 2873  AC_MSG_CHECKING([for $1])
 2874: AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
 2875  [case $MAGIC_CMD in
 2876  [[\\/*] |  ?:[\\/]*])
 ....
 3004    AC_MSG_CHECKING([for non-GNU ld])
 3005  fi
 3006: AC_CACHE_VAL(lt_cv_path_LD,
 3007  [if test -z "$LD"; then
 3008    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
 ....
 3053  #- --------------
 3054  m4_defun([_LT_PATH_LD_GNU],
 3055: [AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,
 3056  [# I'd rather use --version here, but apparently some GNU lds only accept -v.
 3057  case `$LD -v 2>&1 </dev/null` in
 ....
 3072  #   -- PORTME Some linkers may need a different reload flag.
 3073  m4_defun([_LT_CMD_RELOAD],
 3074: [AC_CACHE_CHECK([for $LD option to reload object files],
 3075    lt_cv_ld_reload_flag,
 3076    [lt_cv_ld_reload_flag='-r'])
 ....
 3107  [m4_require([_LT_DECL_EGREP])
 3108  m4_require([_LT_DECL_OBJDUMP])
 3109: AC_CACHE_CHECK([how to recognize dependent libraries],
 3110  lt_cv_deplibs_check_method,
 3111  [lt_cv_file_magic_cmd='$MAGIC_CMD'
 ....
 3340  AC_DEFUN([LT_PATH_NM],
 3341  [AC_REQUIRE([AC_PROG_CC])dnl
 3342: AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
 3343  [if test -n "$NM"; then
 3344    # Let the user override the test.
 ....
 3410  _LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl
 3411  
 3412: AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
 3413    [lt_cv_nm_interface="BSD nm"
 3414    echo "int some_variable = 0;" > conftest.$ac_ext
 ....
 3443  m4_require([_LT_DECL_OBJDUMP])
 3444  m4_require([_LT_DECL_DLLTOOL])
 3445: AC_CACHE_CHECK([how to associate runtime and link libraries],
 3446  lt_cv_sharedlib_from_linklib_cmd,
 3447  [lt_cv_sharedlib_from_linklib_cmd='unknown'
 ....
 3480  [AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)
 3481  test -z "$MANIFEST_TOOL" && MANIFEST_TOOL=mt
 3482: AC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],
 3483    [lt_cv_path_mainfest_tool=no
 3484    echo "$as_me:$LINENO: $MANIFEST_TOOL '-?'" >&AS_MESSAGE_LOG_FD
 ....
 3562  # Check for command to grab the raw symbol name followed by C symbol from nm.
 3563  AC_MSG_CHECKING([command to parse $NM output from $compiler object])
 3564: AC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],
 3565  [
 3566  # These are sane defaults that work on at least a few old systems.
 ....
 4422  esac
 4423  
 4424: AC_CACHE_CHECK([for $compiler option to produce PIC],
 4425    [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],
 4426    [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])
 ....
 5238  	# work, assume that -exports_file does not work either and
 5239  	# implicitly export all symbols.
 5240: 	# This should be the same for all languages, so no per-tag cache variable.
 5241: 	AC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],
 5242  	  [lt_cv_irix_exported_symbol],
 5243  	  [save_LDFLAGS="$LDFLAGS"
 ....
 5540        # systems, -lgcc has to come before -lc. If gcc already passes -lc
 5541        # to ld, don't add -lc before -lgcc.
 5542:       AC_CACHE_CHECK([whether -lc should be explicitly linked in],
 5543  	[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),
 5544  	[$RM conftest*
 ....
 7562  m4_defun([AC_PROG_SED],
 7563  [AC_MSG_CHECKING([for a sed that does not truncate output])
 7564: AC_CACHE_VAL(lt_cv_path_SED,
 7565  [# Loop through the user's path and test for sed and gsed.
 7566  # Then use that list of sed's as ones to test for truncation.
 ....
 7773  AC_REQUIRE([AC_CANONICAL_BUILD])dnl
 7774  AC_MSG_CHECKING([how to convert $build file names to $host format])
 7775: AC_CACHE_VAL(lt_cv_to_host_file_cmd,
 7776  [case $host in
 7777    *-*-mingw* )
 ....
 7812  
 7813  AC_MSG_CHECKING([how to convert $build file names to toolchain format])
 7814: AC_CACHE_VAL(lt_cv_to_tool_file_cmd,
 7815  [#assume ordinary cross tools, or native build.
 7816  lt_cv_to_tool_file_cmd=func_convert_file_noop

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/Makefile.in:
   88  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   89  	$(ACLOCAL_M4)
   90: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   91   configure.lineno config.status.lineno
   92  mkinstalldirs = $(install_sh) -d
   ..
 1761  maintainer-clean: maintainer-clean-recursive
 1762  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 1763: 	-rm -rf $(top_srcdir)/autom4te.cache
 1764  	-rm -rf src/$(DEPDIR) src/alpha/$(DEPDIR) src/arm/$(DEPDIR) src/avr32/$(DEPDIR) src/cris/$(DEPDIR) src/frv/$(DEPDIR) src/ia64/$(DEPDIR) src/m32r/$(DEPDIR) src/m68k/$(DEPDIR) src/mips/$(DEPDIR) src/pa/$(DEPDIR) src/powerpc/$(DEPDIR) src/s390/$(DEPDIR) src/sh/$(DEPDIR) src/sh64/$(DEPDIR) src/sparc/$(DEPDIR) src/x86/$(DEPDIR)
 1765  	-rm -f Makefile

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/README:
  149  	Add support for ARM VFP ABI.
  150          Add RTEMS support for MIPS and M68K.
  151: 	Fix instruction cache clearing problems on
  152  	  ARM and SPARC.
  153  	Fix the N64 build on mips-sgi-irix6.5.
  ...
  195  
  196  3.0.1 Feb-15-08
  197:         Fix instruction cache flushing bug on MIPS.
  198  	Thanks to David Daney.
  199  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/alpha/ffi.c:
  190    closure->user_data = user_data;
  191  
  192:   /* Flush the Icache.
  193  
  194       Tru64 UNIX as doesn't understand the imb mnemonic, so use call_pal

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/arm/ffi.c:
  565     *(unsigned int*) &__tramp[12] = __ctx;				\
  566     *(unsigned int*) &__tramp[16] = __fun;				\
  567:    __clear_cache((&__tramp[0]), (&__tramp[19])); /* Clear data mapping.  */ \
  568:    __clear_cache(insns, insns + 3 * sizeof (unsigned int));             \
  569                                                   /* Clear instruction   \
  570                                                      mapping.  */        \

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/avr32/ffi.c:
  413      *(unsigned int*) &__tramp[28] = __inner;
  414      *(unsigned int*) &__tramp[32] = __fun;
  415:     syscall(__NR_cacheflush, 0, (&__tramp[0]), 36);
  416  
  417      closure->cif = cif;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/dlmalloc.c:
  827    realloc'ed etc. The elements are guaranteed to be adjacently
  828    allocated (this is not guaranteed to occur with multiple callocs or
  829:   mallocs), which may also improve cache locality in some
  830    applications.
  831  
  ...
  880    independently freed, realloc'ed etc. The elements are guaranteed to
  881    be adjacently allocated (this is not guaranteed to occur with
  882:   multiple callocs or mallocs), which may also improve cache locality
  883    in some applications.
  884  
  ...
 1315  */
 1316  #define MMAP_FLAGS           (MAP_PRIVATE)
 1317: static int dev_zero_fd = -1; /* Cached file descriptor for /dev/zero. */
 1318  #define CALL_MMAP(s) ((dev_zero_fd < 0) ? \
 1319             (dev_zero_fd = open("/dev/zero", O_RDWR), \
 ....
 1990    Top
 1991      The topmost chunk of the currently active segment. Its size is
 1992:     cached in topsize.  The actual size of topmost space is
 1993      topsize+TOP_FOOT_SIZE, which includes space reserved for adding
 1994      fenceposts and segment records if necessary when getting more
 1995      space from the system.  The size at which to autotrim top is
 1996:     cached from mparams in trim_check, except that it is disabled if
 1997      an autotrim fails.
 1998  
 ....
 2000      This is the preferred chunk for servicing small requests that
 2001      don't have exact fits.  It is normally the chunk split off most
 2002:     recently to service another small request.  Its size is cached in
 2003      dvsize. The link fields of this chunk are not maintained since it
 2004      is not kept in a bin.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/frv/ffi.c:
  284    closure->user_data = user_data;
  285  
  286:   /* Cache flushing.  */
  287    for (i = 0; i < FFI_TRAMPOLINE_SIZE; i++)
  288      __asm__ volatile ("dcf @(%0,%1)\n\tici @(%2,%1)" :: "r" (tramp), "r" (i),

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/m68k/ffi.c:
   11  #include <unistd.h>
   12  #ifdef __rtems__
   13: void rtems_cache_flush_multiple_data_lines( const void *, size_t );
   14  #else
   15  #include <sys/syscall.h>
   16: #include <asm/cachectl.h>
   17  #endif
   18  
   ..
  274  
  275  #ifdef __rtems__
  276:   rtems_cache_flush_multiple_data_lines( codeloc, FFI_TRAMPOLINE_SIZE );
  277  #else
  278:   syscall(SYS_cacheflush, codeloc, FLUSH_SCOPE_LINE,
  279: 	  FLUSH_CACHE_BOTH, FFI_TRAMPOLINE_SIZE);
  280  #endif
  281  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/mips/ffi.c:
   34  #ifdef __GNUC__
   35  #  if (__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 3))
   36: #    define USE__BUILTIN___CLEAR_CACHE 1
   37  #  endif
   38  #endif
   39  
   40: #ifndef USE__BUILTIN___CLEAR_CACHE
   41  #  if defined(__OpenBSD__)
   42  #    include <mips64/sysarch.h>
   43  #  else
   44: #    include <sys/cachectl.h>
   45  #  endif
   46  #endif
   ..
  723    closure->user_data = user_data;
  724  
  725: #ifdef USE__BUILTIN___CLEAR_CACHE
  726:   __builtin___clear_cache(clear_location, clear_location + FFI_TRAMPOLINE_SIZE);
  727  #else
  728:   cacheflush (clear_location, FFI_TRAMPOLINE_SIZE, ICACHE);
  729  #endif
  730    return FFI_OK;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/moxie/ffi.c:
  268    closure->user_data = user_data;
  269  
  270:   /* Cache flushing.  */
  271    for (i = 0; i < FFI_TRAMPOLINE_SIZE; i++)
  272      __asm__ volatile ("dcf @(%0,%1)\n\tici @(%2,%1)" :: "r" (tramp), "r" (i),

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/pa/ffi.c:
  652    tramp[7] = ((UINT32)(ffi_closure_pa32) & ~2);
  653  
  654:   /* Flush d/icache -- have to flush up 2 two lines because of
  655       alignment.  */
  656    __asm__ volatile(
  ...
  685    tramp[9] = ((UINT32)(ffi_closure_pa32) & ~2);
  686  
  687:   /* Flush d/icache -- have to flush three lines because of alignment.  */
  688    __asm__ volatile(
  689  		   "copy %1,%0\n\t"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/aix_closure.S:
  176  
  177  /* Each fragment must be exactly 16 bytes long (4 instructions).
  178:    Align to 16 byte boundary for cache and dispatch efficiency.  */
  179  	.align 4
  180  
  ...
  348  
  349  /* Each fragment must be exactly 16 bytes long (4 instructions).
  350:    Align to 16 byte boundary for cache and dispatch efficiency.  */
  351  	.align 4
  352  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/darwin_closure.S:
  208  LFE1:
  209  /* Each of the ret_typeX code fragments has to be exactly 16 bytes long
  210:    (4 instructions). For cache effectiveness we align to a 16 byte boundary
  211     first.  */
  212  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/ffi.c:
  926  
  927  #ifndef POWERPC64
  928: #define MIN_CACHE_LINE_SIZE 8
  929  
  930  static void
  931: flush_icache (char *wraddr, char *xaddr, int size)
  932  {
  933    int i;
  934:   for (i = 0; i < size; i += MIN_CACHE_LINE_SIZE)
  935      __asm__ volatile ("icbi 0,%0;" "dcbf 0,%1;"
  936  		      : : "r" (xaddr + i), "r" (wraddr + i) : "memory");
  ...
  977    *(void **) &tramp[3] = codeloc;                   /* context */
  978  
  979:   /* Flush the icache.  */
  980:   flush_icache ((char *)tramp, (char *)codeloc, FFI_TRAMPOLINE_SIZE);
  981  #endif
  982  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/ffi_darwin.c:
  947  }
  948  
  949: static void flush_icache(char *);
  950  static void flush_range(char *, int);
  951  
  ...
 1048  	closure->user_data = user_data;
 1049  
 1050: 	/* Flush the icache. Only necessary on Darwin.  */
 1051  	flush_range(codeloc, FFI_TRAMPOLINE_SIZE);
 1052  
 ....
 1076  
 1077  static void
 1078: flush_icache(char *addr)
 1079  {
 1080  #ifndef _AIX
 ....
 1095    int i;
 1096    for (i = 0; i < size; i += MIN_LINE_SIZE)
 1097:     flush_icache(addr1+i);
 1098:   flush_icache(addr1+size-1);
 1099  }
 1100  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/linux64_closure.S:
  110  
  111  # Each of the ret_typeX code fragments has to be exactly 16 bytes long
  112: # (4 instructions). For cache effectiveness we align to a 16 byte boundary
  113  # first.
  114  	.align 4

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/powerpc/ppc_closure.S:
  105  
  106  # Each of the ret_typeX code fragments has to be exactly 16 bytes long
  107: # (4 instructions). For cache effectiveness we align to a 16 byte boundary
  108  # first.
  109  	.align 4

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/sh/ffi.c:
  487  
  488  #if defined(__SH4__)
  489:   /* Flush the icache.  */
  490    __ic_invalidate(codeloc);
  491  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/sh64/ffi.c:
  331    closure->user_data = user_data;
  332  
  333:   /* Flush the icache.  */
  334    asm volatile ("ocbwb %0,0; synco; icbi %1,0; synci" : : "r" (tramp),
  335  		"r"(codeloc));

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/ext/ffi_c/libffi/src/sparc/ffi.c:
  513    closure->user_data = user_data;
  514  
  515:   /* Flush the Icache.  closure is 8 bytes aligned.  */
  516  #ifdef SPARC64
  517    asm volatile ("flush	%0; flush %0+8" : : "r" (closure) : "memory");

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/lib/ffi/library.rb:
  491  
  492        elsif t.is_a?(DataConverter)
  493:         # Add a typedef so next time the converter is used, it hits the cache
  494          typedef Type::Mapped.new(t), t
  495  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/libtest/GNUmakefile:
   26  export MACOSX_DEPLOYMENT_TARGET=10.4
   27  
   28: CCACHE := $(strip $(realpath $(shell which ccache 2> /dev/null)))
   29  
   30  TEST_SRCS = $(wildcard $(SRC_DIR)/*.c)
   ..
  138  $(TEST_BUILD_DIR)/%.o : $(SRC_DIR)/%.c
  139  	@mkdir -p $(@D)
  140: 	$(CCACHE) $(CC) $(CFLAGS) -c $< -o $@
  141  
  142  $(LIBTEST):  $(TEST_OBJS)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ffi-1.9.3/spec/ffi/struct_spec.rb:
  607      @s[:a].to_a.should == [0, 1, 2, 3, 4]
  608    end
  609: #  it 'should cache array object for successive calls' do
  610  #    @s[:a].object_id.should == @s[:a].object_id
  611  #  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/font-awesome-rails-3.2.1.3/test/dummy/log/test.log:
   77    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
   78    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
   79:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
   80    rack (1.4.5) lib/rack/lock.rb:15:in `call'
   81    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
   ..
  195    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
  196    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
  197:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
  198    rack (1.4.5) lib/rack/lock.rb:15:in `call'
  199    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
  ...
  967    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
  968    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
  969:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
  970    rack (1.4.5) lib/rack/lock.rb:15:in `call'
  971    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
  ...
 1131    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 1132    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 1133:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 1134    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 1135    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 1295    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 1296    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 1297:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 1298    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 1299    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 1459    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 1460    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 1461:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 1462    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 1463    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 1623    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 1624    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 1625:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 1626    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 1627    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 3578    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 3579    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 3580:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 3581    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 3582    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 3741    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 3742    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 3743:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 3744    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 3745    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 4193    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 4194    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 4195:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 4196    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 4197    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'
 ....
 4357    rack (1.4.5) lib/rack/methodoverride.rb:21:in `call'
 4358    rack (1.4.5) lib/rack/runtime.rb:17:in `call'
 4359:   activesupport (3.2.13) lib/active_support/cache/strategy/local_cache.rb:72:in `call'
 4360    rack (1.4.5) lib/rack/lock.rb:15:in `call'
 4361    actionpack (3.2.13) lib/action_dispatch/middleware/static.rb:63:in `call'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/font-awesome-rails-3.2.1.3/test/font_awesome_rails_test.rb:
    2  
    3  class FontAwesomeRailsTest < ActionDispatch::IntegrationTest
    4:   teardown { clean_sprockets_cache }
    5  
    6    test "engine is loaded" do
    .
   59    private
   60  
   61:   def clean_sprockets_cache
   62      FileUtils.rm_rf File.expand_path("../dummy/tmp",  __FILE__)
   63    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grack-2.0.0.pre/lib/grack/server.rb:
   70        @res["Content-Type"] = "application/x-git-%s-result" % @rpc
   71        @res["Transfer-Encoding"] = "chunked"
   72:       @res["Cache-Control"] = "no-cache"
   73  
   74        @res.finish do
   ..
  105          @res.status = 200
  106          @res["Content-Type"] = "application/x-git-%s-advertisement" % service_name
  107:         hdr_nocache
  108          @res.write(pkt_write("# service=git-#{service_name}\n"))
  109          @res.write(pkt_flush)
  ...
  118        update_server_info
  119        send_file(@reqfile, "text/plain; charset=utf-8") do
  120:         hdr_nocache
  121        end
  122      end
  ...
  125        # objects/info/packs
  126        send_file(@reqfile, "text/plain; charset=utf-8") do
  127:         hdr_nocache
  128        end
  129      end
  ...
  131      def get_loose_object
  132        send_file(@reqfile, "application/x-git-loose-object") do
  133:         hdr_cache_forever
  134        end
  135      end
  ...
  137      def get_pack_file
  138        send_file(@reqfile, "application/x-git-packed-objects") do
  139:         hdr_cache_forever
  140        end
  141      end
  ...
  143      def get_idx_file
  144        send_file(@reqfile, "application/x-git-packed-objects-toc") do
  145:         hdr_cache_forever
  146        end
  147      end
  ...
  149      def get_text_file
  150        send_file(@reqfile, "text/plain") do
  151:         hdr_nocache
  152        end
  153      end
  ...
  308      # ------------------------
  309  
  310:     def hdr_nocache
  311        @res["Expires"] = "Fri, 01 Jan 1980 00:00:00 GMT"
  312:       @res["Pragma"] = "no-cache"
  313:       @res["Cache-Control"] = "no-cache, max-age=0, must-revalidate"
  314      end
  315  
  316:     def hdr_cache_forever
  317        now = Time.now().to_i
  318        @res["Date"] = now.to_s
  319        @res["Expires"] = (now + 31536000).to_s;
  320:       @res["Cache-Control"] = "public, max-age=31536000";
  321      end
  322  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grit-2.6.5/lib/grit/git-ruby/internal/pack.rb:
   43            end
   44            @name = file
   45:           @cache = {}
   46            init_pack
   47          end
   ..
   89          end
   90  
   91:         def cache_objects
   92:           @cache = {}
   93            with_packfile do |packfile|
   94              each_entry do |sha, offset|
   95                data, type = unpack_object(packfile, offset, {:caching => true})
   96                if data
   97:                 @cache[sha] = RawObject.new(OBJ_TYPES[type], data)
   98                end
   99              end
  ...
  117  
  118          def [](sha1)
  119:           if obj = @cache[sha1]
  120              return obj
  121            end
  ...
  123            offset = find_object(sha1)
  124            return nil if !offset
  125:           @cache[sha1] = obj = parse_object(offset)
  126            return obj
  127          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grit-2.6.5/lib/grit/git-ruby/repository.rb:
   97        end
   98  
   99:       def cached(key, object, do_cache = true)
  100          object
  101        end
  ...
  772                pack = Grit::GitRuby::Internal::PackStorage.new(File.join(path,entry))
  773                if @options[:map_packfile]
  774:                 pack.cache_objects
  775                end
  776                @packs << pack

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grit-2.6.5/lib/grit/git.rb:
  214          native(:read_tree, options.dup, head_sha)
  215          stdin = native(:diff, options.dup, "#{applies_sha}^", applies_sha)
  216:         native(:apply, options.merge(:check => true, :cached => true, :input => stdin))
  217        rescue CommandFailed => fail
  218          status += fail.exitstatus
  ...
  257        begin
  258          native(:read_tree, options.dup, head_sha)
  259:         native(:apply, options.merge(:cached => true, :input => patch))
  260        rescue CommandFailed
  261          return false

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grit-2.6.5/lib/grit/lazy.rb:
    3  # computed until they are asked for.
    4  #
    5: # Works by delegating each lazy_reader to a cached lazy_source method.
    6  #
    7  # class Person

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-linguist-3.0.0/lib/linguist/blob_helper.rb:
   10    # DEPRECATED Avoid mixing into Blob classes. Prefer functional interfaces
   11    # like `Language.detect` over `Blob#language`. Functions are much easier to
   12:   # cache and compose.
   13    #
   14    # Avoid adding additional bloat to this module.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-linguist-3.0.0/lib/linguist/samples.json:
  590        "__Pyx_c_prodf": 2,
  591        "PyString_AsStringAndSize": 1,
  592:       "git_cache_init": 1,
  593        "setup_work_tree": 1,
  594        "__Pyx_ArgTypeTest": 1,
  ...
 1178        "B0": 1,
 1179        "*__pyx_kp_s_2": 1,
 1180:       "git_cached_obj_freeptr": 1,
 1181        "sdscatrepr": 1,
 1182        "*author": 2,
 ....
 2363        "cmd_bisect__helper": 1,
 2364        "used": 10,
 2365:       "git_cached_obj": 5,
 2366        "_USE_MATH_DEFINES": 1,
 2367        "REDIS_REPL_WAIT_BGSAVE_END": 1,
 ....
 2391        "__pyx_t_5numpy_uint16_t": 1,
 2392        "szres": 8,
 2393:       "cache": 26,
 2394        "atoi": 3,
 2395        "WGL_EXT_pixel_format_packed_float": 2,
 ....
 2472        "should": 2,
 2473        "saveCommand": 1,
 2474:       "*cache": 4,
 2475        "clusterCron": 1,
 2476        "at": 3,
 ....
 2718        "depends": 1,
 2719        "*__pyx_pf_7sklearn_12linear_model_8sgd_fast_12SquaredHinge_6__reduce__": 1,
 2720:       "__pyx_code_cache": 1,
 2721        "parN": 10,
 2722        "cmd_column": 1,
 ....
 3020        "__pyx_v_learning_rate": 1,
 3021        "__pyx_t_5numpy_uintp_t": 1,
 3022:       "*git_cache_try_store": 1,
 3023        "*git_hash_new_ctx": 1,
 3024        "t": 32,
 ....
 3981        "WGL_GPU_NUM_PIPES_AMD": 1,
 3982        "__Pyx_StringTabEntry": 2,
 3983:       "git_cached_obj_incref": 3,
 3984        "__wglewBindVideoCaptureDeviceNV": 2,
 3985        "wglQueryFrameTrackingI3D": 1,
 ....
 4533        "CE": 1,
 4534        "PFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC": 2,
 4535:       "__Pyx_CodeObjectCacheEntry": 1,
 4536        "__inline": 1,
 4537        "git_buf_truncate": 1,
 ....
 5029        "discardCommand": 2,
 5030        "_cpu_up": 3,
 5031:       "git_cache": 4,
 5032        "HAVE_BACKTRACE": 1,
 5033        "*diff_delta__merge_like_cgit": 1,
 ....
 5614        "cmd_symbolic_ref": 1,
 5615        "*msc": 3,
 5616:       "__Pyx_CodeObjectCache": 2,
 5617        "HTTP_MERGE": 1,
 5618        "PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC": 2,
 ....
 5998        "__pyx_kwds": 15,
 5999        "*__pyx_n_s__zeros": 1,
 6000:       "__Pyx_CodeObjectCacheEntry*": 2,
 6001        "npy_longdouble": 1,
 6002        "RF_FAILURE": 24,
 ....
 6024        "pfd": 2,
 6025        "REDIS_SHARED_BULKHDR_LEN": 1,
 6026:       "git_cached_obj_decref": 3,
 6027        "PFNWGLBINDVIDEOIMAGENVPROC": 2,
 6028        "*pLastMissedUsage": 1,
 ....
 6048        "__Pyx_PyInt_FromHash_t": 2,
 6049        "smaller": 1,
 6050:       "*git_cache_get": 1,
 6051        "*link": 1,
 6052        "process": 19,
 ....
 6097        "*column_data": 1,
 6098        "pattern": 3,
 6099:       "git_cache_free": 1,
 6100        "WGLEW_ARB_create_context_robustness": 1,
 6101        "uses": 1,
 ....
 10911        "r*255": 1,
 10912        "char": 2,
 10913:       "privateCache.events": 1,
 10914        "Recurse": 2,
 10915        "g.origType.replace": 1,
 .....
 10934        "doc": 4,
 10935        ".HTTPParser": 1,
 10936:       "a.cacheable": 1,
 10937        ".76": 1,
 10938        "e.css": 1,
 .....
 11394        "holdReady": 3,
 11395        "by": 12,
 11396:       "jQuery.cache": 3,
 11397        "hack": 2,
 11398        "this.output.push": 2,
 .....
 11451        "ni.height": 2,
 11452        "options=": 1,
 11453:       "sizcache=": 4,
 11454        "f.event.fix": 2,
 11455        "Agent.prototype.defaultPort": 1,
 .....
 11557        "<e&&90>": 2,
 11558        "jQuery.browser": 4,
 11559:       "c.cache": 2,
 11560        "Error": 16,
 11561        ".elem": 1,
 .....
 11683        "K": 4,
 11684        "0px": 1,
 11685:       "dateCache": 5,
 11686        "Expecting": 1,
 11687        "playing": 2,
 11688        "except": 1,
 11689        "ropera.exec": 1,
 11690:       "a.cache": 2,
 11691        "h*1.17/2": 1,
 11692        "this.trailers": 2,
 .....
 11910        "h.getAllResponseHeaders": 1,
 11911        "d.timeout": 1,
 11912:       "j.cacheable": 1,
 11913        "safe": 3,
 11914        "fledged": 1,
 .....
 12027        "ut/2": 4,
 12028        "n.pointer": 10,
 12029:       "thisCache.data": 3,
 12030        ".then": 3,
 12031        "cellPadding": 2,
 .....
 12304        "this.bind": 2,
 12305        "applet": 2,
 12306:       "f.cache": 5,
 12307        "focus": 7,
 12308        "cu": 18,
 .....
 12396        "steelseries.GaugeType.TYPE1": 4,
 12397        "u202F": 1,
 12398:       "cache=": 1,
 12399        "a.isPropagationStopped": 1,
 12400        "changeData": 3,
 .....
 12576        ".115*t": 5,
 12577        "useGradient": 2,
 12578:       "cache.setInterval": 1,
 12579        "leading": 1,
 12580        "cases": 4,
 .....
 12817        "errorPosition.column": 1,
 12818        "self.socketPath": 4,
 12819:       "cache": 45,
 12820        "a.options": 2,
 12821        "jQuery.expando": 12,
 .....
 12870        "exports.createClient": 1,
 12871        "class": 5,
 12872:       "<m;l++)d.call(c?bh(this[l],g):this[l],e.cacheable||m>": 1,
 12873        "setPointerType=": 1,
 12874        "pt.width": 1,
 .....
 14133        "must": 4,
 14134        "a=": 23,
 14135:       "flagsCache": 3,
 14136        "a.superclass": 1,
 14137        "c.defaultView": 2,
 .....
 14413        "mode": 1,
 14414        "d": 771,
 14415:       "thisCache": 15,
 14416        "makeArray": 3,
 14417        "666666": 2,
 .....
 14437        "offsets": 1,
 14438        "xa": 3,
 14439:       "cacheable": 2,
 14440        "n.setAttribute": 1,
 14441        "boolean": 8,
 .....
 15061        ".ok": 1,
 15062        "h.setAttribute": 2,
 15063:       "internalCache": 3,
 15064        "math": 4,
 15065        "a.getElementsByTagName": 9,
 .....
 15623        "b.src": 4,
 15624        "pr*.38": 1,
 15625:       "privateCache": 1,
 15626        "px": 31,
 15627        "info.versionMinor": 2,
 .....
 15957        "f=": 13,
 15958        "799065": 2,
 15959:       "window.applicationCache": 1,
 15960        "this._deferToConnect": 3,
 15961        "a.toLowerCase": 4,
 .....
 17040        "thread.": 3,
 17041        "If": 6,
 17042:       "cache.": 5,
 17043        "backing": 9,
 17044        "default.": 2,
 .....
 17097        "contents": 2,
 17098        "populate": 1,
 17099:       "ObservableAsyncMRUCache.": 1,
 17100        "IReactiveNotifyPropertyChanged.": 4,
 17101        "as": 25,
 .....
 17126        "observe": 12,
 17127        "Attempts": 1,
 17128:       "cache": 14,
 17129        "T": 1,
 17130        "log": 2,
 .....
 17332        "easyant": 3,
 17333        "updated.": 1,
 17334:       "cached": 2,
 17335        "coupled": 2,
 17336        "parameter": 6,
 .....
 17568        "x": 1,
 17569        "faster": 2,
 17570:       "ObservableAsyncMRUCache.AsyncGet": 1,
 17571        "hundreds": 2,
 17572        "Sender.": 1,
 17573        "also": 17,
 17574:       "ObservableAsyncMRUCache": 2,
 17575        "result": 3,
 17576        "ChangeTrackingEnabled": 2,
 .....
 17587        "like": 2,
 17588        "defaults": 1,
 17589:       "caches": 2,
 17590        "unique": 12,
 17591        "<assembly>": 1,
 .....
 19258        "logger": 17,
 19259        "pcreexamples": 32,
 19260:       "CacheTempBuffer": 2,
 19261        "zewdCompiler16": 5,
 19262        "NOT": 1,
 .....
 19804        "DT": 2,
 19805        "Locale": 5,
 19806:       "Cache": 3,
 19807        "inAttr=": 5,
 19808        "pcre.m": 1,
 .....
 19954        "reconfigure": 1,
 19955        "back": 4,
 19956:       "CacheTempEWD": 16,
 19957        "MERGETO": 1,
 19958        "Missing": 5,
 .....
 25355        "writes": 1,
 25356        "sockets": 3,
 25357:       "cache": 1,
 25358        "the": 12,
 25359        "}": 17,
 .....
 26039        "<<": 1,
 26040        "@indents": 1,
 26041:       "mainModule.moduleCache": 1,
 26042        "if": 102,
 26043        "Server": 2,
 .....
 26433        "Z": 1,
 26434        "slower": 2,
 26435:       "#cache_name": 72,
 26436        "localized": 2,
 26437        "so": 16,
 .....
 26599        "consume_token": 1,
 26600        "excludefield": 1,
 26601:       "knop_cachedelete": 2,
 26602        "First": 4,
 26603        "earlier": 2,
 .....
 26682        "not": 10,
 26683        "gmt": 1,
 26684:       "cache_name": 2,
 26685        "iterate": 12,
 26686        "Default": 2,
 .....
 26727        "prototype": 4,
 26728        "will": 12,
 26729:       "cached": 8,
 26730        "returns": 4,
 26731        "run": 2,
 .....
 26760        "custom": 8,
 26761        "flag": 2,
 26762:       "Cache": 2,
 26763        "#key": 12,
 26764        "28": 2,
 .....
 26864        "d": 2,
 26865        "knoptype": 2,
 26866:       "cache": 4,
 26867        "from": 6,
 26868        "reading": 2,
 .....
 27049        "Make": 2,
 27050        "&": 21,
 27051:       "knop_cachefetch": 4,
 27052        "value": 14,
 27053        "without": 4,
 .....
 27109        "HHmmssZ": 1,
 27110        "readlock": 2,
 27111:       "knop_cache": 2,
 27112        "supported": 2,
 27113:       "knop_cachestore": 4,
 27114        "current_record": 2,
 27115        "var": 38,
 .....
 27296        "__pyx_kp_s_1": 1,
 27297        "PyUnicode_Check": 1,
 27298:       "SetCachedSize": 2,
 27299        "clipboard.": 5,
 27300        "than": 1,
 .....
 27305        "with": 6,
 27306        "*__pyx_v_descr": 2,
 27307:       "SetUpCaches": 1,
 27308        "random_base": 3,
 27309        "*sor": 1,
 .....
 27879        "*__pyx_k_tuple_10": 1,
 27880        "cudaAddressModeClamp": 2,
 27881:       "UnicodeCache": 3,
 27882        "development": 1,
 27883        "Q_INIT_RESOURCE": 2,
 .....
 27996        "__pyx_k_11": 1,
 27997        "<math.h>": 1,
 27998:       "UnicodeCache*": 4,
 27999        "cudaArray*": 1,
 28000        "autorun": 2,
 .....
 28120        "Binds": 2,
 28121        "SCI_VCHOMEEXTEND": 1,
 28122:       "TearDownCaches": 1,
 28123        "SCI_CHARLEFT": 1,
 28124        "tp_as_mapping": 3,
 .....
 28257        "SetupContext": 1,
 28258        "__Pyx_PySequence_SetSlice": 2,
 28259:       "unicode_cache_": 10,
 28260        "xffu": 3,
 28261        "kAllowModules": 1,
 .....
 28273        "GT": 1,
 28274        "further": 1,
 28275:       "GetCachedSize": 1,
 28276        "SCI_LINEENDDISPLAYEXTEND": 1,
 28277        "Py_None": 38,
 .....
 28418        "Indent": 1,
 28419        "different": 1,
 28420:       "_cached_size_": 7,
 28421        "NPY_BYTE": 2,
 28422        "LineDown": 1,
 .....
 28774        "ScanRegExpPattern": 1,
 28775        "PyDict_Type": 1,
 28776:       "SerializeWithCachedSizes": 2,
 28777        "Qt": 1,
 28778        "pow": 2,
 .....
 29360        "__Pyx_PyInt_AsUnsignedLongLong": 1,
 29361        "PyBytes_Size": 1,
 29362:       "unicode_cache": 3,
 29363        "LineEnd": 1,
 29364        "LEVEL_ONE": 1,
 .....
 29474        "w": 1,
 29475        "Key_PageUp": 1,
 29476:       "SerializeWithCachedSizesToArray": 2,
 29477        "*__pyx_v_answer_ptr": 2,
 29478        "<QWebFrame>": 1,
 .....
 29612        "/usr/lib/apache2/modules/mod_proxy_ajp.so": 1,
 29613        "/": 3,
 29614:       "/usr/lib/apache2/modules/mod_mem_cache.so": 1,
 29615        "dav.conf": 2,
 29616        "allow": 10,
 .....
 29676        "/usr/lib/apache2/modules/mod_cern_meta.so": 1,
 29677        "libexec/apache2/mod_dbd.so": 1,
 29678:       "mem_cache_module": 2,
 29679        "info_module": 2,
 29680        "nikto": 1,
 .....
 29693        "log_config_module": 3,
 29694        "</IfModule>": 17,
 29695:       "libexec/apache2/mod_cache.so": 1,
 29696        "multilang": 2,
 29697        "mime_module": 4,
 .....
 29722        "libexec/apache2/mod_ext_filter.so": 1,
 29723        "HEAD": 1,
 29724:       "/usr/lib/apache2/modules/mod_disk_cache.so": 1,
 29725        "/usr/lib/apache2/modules/mod_ssl.so": 1,
 29726        "User": 2,
 .....
 29795        "LogFormat": 6,
 29796        "/missing.html": 2,
 29797:       "file_cache_module": 1,
 29798        "/usr/lib/apache2/modules/mod_usertrack.so": 1,
 29799        "info.conf": 2,
 .....
 29873        "headers_module": 2,
 29874        "libexec/apache2/mod_authz_dbm.so": 1,
 29875:       "libexec/apache2/mod_disk_cache.so": 1,
 29876        "#ServerName": 2,
 29877        "libexec/apache2/mod_userdir.so": 1,
 .....
 29888        "/usr/lib/apache2/modules/mod_proxy_http.so": 1,
 29889        "Indexes": 2,
 29890:       "/usr/lib/apache2/modules/mod_cache.so": 1,
 29891        "libexec/apache2/mod_status.so": 1,
 29892        "Tt": 1,
 .....
 29908        "include_module": 2,
 29909        "imagemap_module": 2,
 29910:       "/usr/lib/apache2/modules/mod_file_cache.so": 1,
 29911        "log_forensic_module": 2,
 29912        "AllowOverride": 6,
 .....
 29931        "speling_module": 2,
 29932        "perl": 1,
 29933:       "cache_module": 2,
 29934        "libexec/apache2/mod_authn_dbd.so": 1,
 29935        "#AddHandler": 4,
 .....
 30002        "#LoadModule": 4,
 30003        "</Directory>": 6,
 30004:       "libexec/apache2/mod_mem_cache.so": 1,
 30005        "/usr/lib/apache2/modules/mod_dav_fs.so": 1,
 30006        "version_module": 2,
 .....
 30009        "proxy_module": 2,
 30010        "webobjects": 1,
 30011:       "disk_cache_module": 2,
 30012        "md5": 1,
 30013        "libexec/apache2/mod_ssl.so": 1,
 .....
 30493      },
 30494      "Objective-C": {
 30495:       "setDidUseCachedResponse": 1,
 30496        "NSMutableDictionary": 18,
 30497        "very": 2,
 .....
 30518        "which": 1,
 30519        "JK_WARN_UNUSED_CONST": 1,
 30520:       "JK_CACHE_SLOTS": 1,
 30521        "NS_BLOCKS_AVAILABLE": 8,
 30522        "__APPLE_CC__": 2,
 .....
 30609        "TUITableViewStyleGrouped": 1,
 30610        "self.title": 2,
 30611:       "*jk_cachedObjects": 1,
 30612        "JKEncodeOptionType": 2,
 30613        "JSONNumberStateError": 1,
 .....
 30623        "context.delegate": 1,
 30624        "NSRangeException": 6,
 30625:       "JKEncodeCache": 6,
 30626        "sentinel": 1,
 30627        "*postBodyWriteStream": 1,
 .....
 30695        "responseData": 5,
 30696        "*ASIUnableToCreateRequestError": 1,
 30697:       "jk_cache_age": 1,
 30698        "them": 10,
 30699        "contentLength": 6,
 .....
 30728        "defaults": 2,
 30729        "sectionIndex": 23,
 30730:       "cached": 2,
 30731        "shouldStreamPostDataFromDisk": 4,
 30732        "proxyAuthenticationNeededBlock": 5,
 .....
 30914        "advanceBy": 1,
 30915        "readwrite": 1,
 30916:       "jk_encode_updateCache": 1,
 30917        "*keyHashes": 2,
 30918        "ASIInputStream": 2,
 .....
 31116        "text.style": 1,
 31117        "kViewStyleType": 2,
 31118:       "JK_CACHE_PROBES": 1,
 31119        "Location": 1,
 31120        "setCompressedPostBody": 1,
 .....
 31181        "succeeded": 1,
 31182        "setAuthenticationNeeded": 2,
 31183:       "cachePolicy": 3,
 31184        "dictionaryWithObjectsAndKeys": 10,
 31185        "NSMutableArray": 31,
 31186        "re": 9,
 31187:       "ASICachePolicy": 4,
 31188        "id": 170,
 31189        "futureMakeFirstResponderRequestToken": 1,
 .....
 31263        "want": 5,
 31264        "*v": 2,
 31265:       "cache": 17,
 31266        "inflatedFileDownloadOutputStream": 1,
 31267        "struct": 20,
 .....
 31277        "JKObjectStack": 5,
 31278        "yourself": 4,
 31279:       "cacheStoragePolicy": 2,
 31280        "#import": 53,
 31281        "large": 1,
 .....
 31349        "__BLOCKS__": 1,
 31350        "_futureMakeFirstResponderToken": 2,
 31351:       "didUseCachedResponse": 3,
 31352        "setPersistentConnectionTimeoutSeconds": 2,
 31353        "totalBytesSent": 5,
 .....
 31493        "threadForRequest": 3,
 31494        "v1.4": 1,
 31495:       "useDataFromCache": 2,
 31496        "*ASIHTTPRequestRunLoopMode": 1,
 31497        "registerForNetworkReachabilityNotifications": 1,
 .....
 31724        "setAuthenticationScheme": 1,
 31725        "task": 1,
 31726:       "clearCache": 1,
 31727        "remove": 4,
 31728        "Obtain": 1,
 .....
 31854        "b": 4,
 31855        "setUploadProgressDelegate": 2,
 31856:       "setCachePolicy": 1,
 31857        "possible": 3,
 31858:       "ASICacheDelegate.h": 2,
 31859        "<Foundation/NSObjCRuntime.h>": 2,
 31860        "record": 1,
 .....
 31961        "JKDictionary": 22,
 31962        "perhaps": 1,
 31963:       "secondsToCache": 3,
 31964        "retain": 73,
 31965:       "defaultCache": 3,
 31966        "*cbInvocation": 1,
 31967        "UIViewAutoresizingFlexibleHeight": 1,
 .....
 32119        "<Foundation/NSAutoreleasePool.h>": 1,
 32120        "<TUITableViewDelegate>": 4,
 32121:       "usingCache": 5,
 32122        "successfully": 4,
 32123        "yes": 1,
 .....
 32207        "xC0": 1,
 32208        "nonatomic": 40,
 32209:       "JK_ENCODE_CACHE_SLOTS": 1,
 32210        "YES.": 1,
 32211        "downloadComplete": 2,
 .....
 32253        "kNetworkEvents": 1,
 32254        "reference": 1,
 32255:       "ASIUseDefaultCachePolicy": 1,
 32256        "willRetryRequest": 1,
 32257        "*s": 3,
 .....
 32260        "FFFFFFF": 1,
 32261        "much": 2,
 32262:       "setDownloadCache": 3,
 32263        "Do": 3,
 32264        "other": 3,
 .....
 32283        "its": 9,
 32284        "Another": 1,
 32285:       "downloadCache": 5,
 32286        "absoluteURL": 1,
 32287        "newDelegate": 6,
 .....
 32312        "break": 13,
 32313        "setReadStream": 2,
 32314:       "andCachePolicy": 3,
 32315        "newTimeOutSeconds": 1,
 32316        "*sessionCookiesLock": 1,
 .....
 32389        "*bandwidthThrottlingLock": 1,
 32390        "NSNotFound": 1,
 32391:       "canUseCachedDataForRequest": 1,
 32392        "scrollPosition": 9,
 32393        "zone": 8,
 .....
 32497        "updateStatus": 2,
 32498        "kGroupSpacing": 5,
 32499:       "JK_INIT_CACHE_AGE": 1,
 32500        "must": 6,
 32501        "But": 1,
 .....
 32544        "unsignedLongLongValue": 1,
 32545        "hasBytesAvailable": 1,
 32546:       "setDefaultCache": 2,
 32547        "NSArray": 27,
 32548        "prepareForReuse": 1,
 .....
 32597        "*a": 2,
 32598        "doesn": 1,
 32599:       "JKObjCImpCache": 2,
 32600        "*redirectURL": 2,
 32601        "never": 1,
 .....
 32703        "calls": 1,
 32704        "clang": 3,
 32705:       "JKTokenCache": 2,
 32706        "readStream": 5,
 32707        "allowResumeForFileDownloads": 2,
 .....
 32846        "*topVisibleIndex": 1,
 32847        "class_getInstanceSize": 2,
 32848:       "<ASICacheDelegate>": 9,
 32849        "&&": 123,
 32850        "needed": 3,
 .....
 32877        "likely": 1,
 32878        "setCancelledLock": 1,
 32879:       "ASIFallbackToCacheIfLoadFailsCachePolicy": 2,
 32880        "{": 541,
 32881        "identifier": 7,
 32882        "*accumulator": 1,
 32883:       "JKTokenCacheItem": 2,
 32884        "JSONNumberStateWholeNumberZero": 1,
 32885        "writing": 2,
 .....
 32904        "itself": 1,
 32905        "@protocol": 3,
 32906:       "JK_CACHE_SLOTS_BITS": 2,
 32907        "measure": 1,
 32908        "didChangeValueForKey": 1,
 .....
 33000        "UIControlEventTouchUpInside": 1,
 33001        "forState": 4,
 33002:       "*cacheSlot": 4,
 33003        "*keys": 2,
 33004        "attempt": 3,
 .....
 33271        "JSONStringStateEscape": 1,
 33272        "setMaxBandwidthPerSecond": 1,
 33273:       "ASICacheStoragePolicy": 2,
 33274        "temporaryUncompressedDataDownloadPath": 3,
 33275        "contentOffset": 2,
 .....
 33922        "align": 2,
 33923        "caveats": 1,
 33924:       "HOMEBREW_CACHE_FORMULA.mkpath": 1,
 33925        "SecureRandom.hex": 1,
 33926        ".rb": 1,
 .....
 33955        "constant.const_get": 1,
 33956        "explanation": 1,
 33957:       "possible_cached_formula.to_s": 1,
 33958        "formula_with_that_name": 1,
 33959        "instance_eval": 2,
 .....
 33989        "template": 1,
 33990        "<body>": 1,
 33991:       "@downloader.cached_location": 1,
 33992        "@standard.nil": 1,
 33993        "relative_pathname": 1,
 .....
 34017        "File.expand_path": 1,
 34018        "Hash": 3,
 34019:       "HOMEBREW_CACHE_FORMULA": 2,
 34020        "Delegator.target.register": 1,
 34021        "mirror_list.empty": 1,
 .....
 34214        "File.basename": 2,
 34215        "nodes": 1,
 34216:       "cached_download": 1,
 34217        "LAST": 1,
 34218        "not": 3,
 .....
 34315        "does": 1,
 34316        "path.keys": 1,
 34317:       "possible_cached_formula": 1,
 34318        "self.defer": 1,
 34319        "patch_list.empty": 1,
 .....
 34328        "Formula.factory": 2,
 34329        "..": 1,
 34330:       "static_cache_control": 1,
 34331        "type.to_s.upcase": 1,
 34332        "self.class.path": 1,
 .....
 34383        "self.url": 1,
 34384        "k": 2,
 34385:       "possible_cached_formula.file": 1,
 34386        "filename": 2,
 34387        "preferred_type": 1,
 .....
 34538        "patch_list.each": 1,
 34539        "@queue": 1,
 34540:       "HOMEBREW_CACHE.mkpath": 1,
 34541        "This": 1,
 34542        "Dir": 4,
 .....
 35166      "Java": {
 35167        "CopyOnWriteList": 4,
 35168:       "clearCache": 1,
 35169        "initParser": 1,
 35170        "<Builder>": 1,
 .....
 35172        "xsltModule.defineClassUnder": 1,
 35173        "ARRAY": 6,
 35174:       "nokogiriClassCache.put": 26,
 35175        "for": 16,
 35176        "nokogiri.defineClassUnder": 2,
 .....
 35256        "this.unknownFields": 4,
 35257        "boolean": 36,
 35258:       "cache.remove": 1,
 35259        "Type.OBJECT": 2,
 35260        "name.charAt": 1,
 .....
 35411        "xmlSchema": 3,
 35412        "Numbers.compare": 1,
 35413:       "nokogiriClassCacheGvarName": 1,
 35414        "BigInt": 1,
 35415        "Person": 10,
 .....
 35744        "this.mergeUnknownFields": 1,
 35745        "com.google.protobuf.ExtensionRegistryLite": 8,
 35746:       "nokogiriClassCache": 2,
 35747        "XMLParserConfiguration": 1,
 35748        "Stapler.getCurrentResponse": 1,
 .....
 35774        "d": 10,
 35775        "LONG": 7,
 35776:       "cache": 1,
 35777        "double": 4,
 35778        "XSLT_STYLESHEET_ALLOCATOR": 2,
 .....
 35890        "java.io.File": 1,
 35891        "XML_NODE_ALLOCATOR": 2,
 35892:       "cache.entrySet": 1,
 35893        "Slave": 3,
 35894        "writeReplace": 1,
 .....
 36336        "full_name": 2,
 36337        "HTTPConnection": 2,
 36338:       "seed_cache": 2,
 36339        "set": 3,
 36340        "self": 100,
 .....
 36908        "f2**2": 1,
 36909        "V": 12,
 36910:       "cachename": 4,
 36911        "self.protocol": 7,
 36912        "ssl_options": 3,
 .....
 38905        "Set": 9,
 38906        "9": 1,
 38907:       "cacheAction": 1,
 38908        "long": 2,
 38909        "hasParameterOption": 7,
 .....
 39161        "Copyright": 5,
 39162        "properties": 4,
 39163:       "cacheQueries": 1,
 39164        "2005": 4,
 39165        "whitelist": 14,
 .....
 39405        "_normalizeXmlData": 3,
 39406        "property_exists": 3,
 39407:       "cacheSources": 7,
 39408        "AclComponent": 1,
 39409        "doRequestInProcess": 2,
 .....
 39488        "<": 11,
 39489        "getDescription": 3,
 39490:       "disableCache": 2,
 39491        "try": 3,
 39492        "messages": 16,
 .....
 39542        "function": 205,
 39543        "_findCount": 1,
 39544:       "cache": 2,
 39545        "can": 2,
 39546        "prefix": 2,
 .....
 39647        "foreach": 94,
 39648        "when": 1,
 39649:       "updateCounterCache": 6,
 39650        "setRequest": 2,
 39651        "load": 3,
 .....
 39728        "The": 4,
 39729        "_findThreaded": 1,
 39730:       "_clearCache": 2,
 39731        "qs": 4,
 39732        "ArrayInput": 3,
 .....
 40666        "rupa/z.sh": 2,
 40667        "get": 6,
 40668:       "codecache": 1,
 40669        "&&": 65,
 40670        "//": 3,
 .....
 40976        "https": 2,
 40977        "makeinfo": 2,
 40978:       "caches": 1,
 40979        "quiet": 6,
 40980        "like": 1,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-linguist-3.0.0/lib/linguist/vendor.yml:
   10  ## Vendor Conventions ##
   11  
   12: # Caches
   13: - cache/
   14  
   15  # C deps

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab_git-5.8.0/lib/gitlab_git/compare.rb:
   34  
   35          # Try to collect diff only if diffs is empty
   36:         # Otherwise return cached version
   37          if @diffs.empty? && @timeout == false
   38            begin

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/filter/code.rb:
   19        lang   = m_lang ? m_lang.strip : nil
   20        id     = Digest::SHA1.hexdigest("#{lang}.#{m_code}")
   21:       cached = @markup.check_cache(:code, id)
   22  
   23        # extract lang from { .ruby } or { #stuff .ruby .indent }
   ..
   29        end
   30  
   31:       @map[id] = cached ?
   32:           { :output => cached } :
   33            { :lang => lang, :code => m_code, :indent => m_indent }
   34  
   ..
   39        lang     = $2 ? $2.strip : nil
   40        id       = Digest::SHA1.hexdigest("#{lang}.#{$3}")
   41:       cached   = @markup.check_cache(:code, id)
   42:       @map[id] = cached ?
   43:           { :output => cached } :
   44            { :lang => lang, :code => $3, :indent => $1 }
   45        "#{$1}#{id}" # print the SHA1 ID with the proper indentation
   ..
   62  
   63      @map.each do |id, spec|
   64:       next if spec[:output] # cached
   65  
   66        code = spec[:code]
   ..
  105        body = spec[:output] || begin
  106          if (body = highlighted.shift.to_s).size > 0
  107:           @markup.update_cache(:code, id, body)
  108            body
  109          else

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/filter/remote_code.rb:
   49      resp         = http.get uri.path, {
   50          'Accept'        => 'text/plain',
   51:         'Cache-Control' => 'no-cache',
   52          'Connection'    => 'keep-alive',
   53          'User-Agent'    => 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/git_access.rb:
   31      end
   32  
   33:     # Public: Converts a given Git reference to a SHA, using the cache if
   34      # available.
   35      #
   ..
   44              ref
   45            else
   46:             get_cache(:ref, ref) { ref_to_sha!(ref) }
   47            end.to_s
   48        sha.empty? ? nil : sha
   ..
   57      def tree(ref)
   58        if sha = ref_to_sha(ref)
   59:         get_cache(:tree, sha) { tree!(sha) }
   60        else
   61          []
   ..
   79      def commit(ref)
   80        if sha?(ref)
   81:         get_cache(:commit, ref) { commit!(ref) }
   82        else
   83:         if sha = get_cache(:ref, ref)
   84            commit(sha)
   85          else
   86            if cm = commit!(ref)
   87:             set_cache(:ref, ref, cm.id)
   88:             set_cache(:commit, cm.id, cm)
   89            end
   90          end
   ..
   92      end
   93  
   94:     # Public: Clears all of the cached data that this GitAccess is tracking.
   95      #
   96      # Returns nothing.
   ..
  101      end
  102  
  103:     # Public: Refreshes just the cached Git reference data.  This should
  104      # be called after every Gollum update.
  105      #
  ...
  121      attr_reader :repo
  122  
  123:     # Gets a Hash cache of refs to commit SHAs.
  124      #
  125      #   {"master" => "abc123", ...}
  ...
  127      attr_reader :ref_map
  128  
  129:     # Gets a Hash cache of commit SHAs to a recursive tree of blobs.
  130      #
  131      #   {"abc123" => [<BlobEntry>, <BlobEntry>]}
  ...
  133      attr_reader :tree_map
  134  
  135:     # Gets a Hash cache of commit SHAs to the Grit::Commit instance.
  136      #
  137      #     {"abcd123" => <Grit::Commit>}
  ...
  197      end
  198  
  199:     # Attempts to get the given data from a cache.  If it doesn't exist, it'll
  200:     # pass the results of the yielded block to the cache for future accesses.
  201      #
  202:     # name - The cache prefix used in building the full cache key.
  203:     # key  - The unique cache key suffix, usually a String Git SHA.
  204      #
  205:     # Yields a block to pass to the cache.
  206:     # Returns the cached result.
  207:     def get_cache(name, key)
  208:       cache = instance_variable_get("@#{name}_map")
  209:       value = cache[key]
  210        if value.nil? && block_given?
  211:         set_cache(name, key, value = yield)
  212        end
  213        value == :_nil ? nil : value
  214      end
  215  
  216:     # Writes some data to the internal cache.
  217      #
  218:     # name  - The cache prefix used in building the full cache key.
  219:     # key   - The unique cache key suffix, usually a String Git SHA.
  220:     # value - The value to write to the cache.
  221      #
  222      # Returns nothing.
  223:     def set_cache(name, key, value)
  224:       cache      = instance_variable_get("@#{name}_map")
  225:       cache[key] = value || :_nil
  226      end
  227  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/gitcode.rb:
   32        resp         = http.get uri.path, {
   33            'Accept'        => 'text/plain',
   34:           'Cache-Control' => 'no-cache',
   35            'Connection'    => 'keep-alive',
   36            'Host'          => uri.host,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/markup.rb:
  175      # id   - String SHA1 hash of original extracted tag data.
  176      #
  177:     # Returns the String cached formatted data, or nil.
  178:     def check_cache(type, id)
  179      end
  180  
  ...
  183      # type - Symbol value identifying what type of data is being extracted.
  184      # id   - String SHA1 hash of original extracted tag data.
  185:     # data - The String formatted value to be cached.
  186      #
  187      # Returns nothing.
  188:     def update_cache(type, id, data)
  189      end
  190    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gollum-lib-3.0.0/lib/gollum-lib/wiki.rb:
  629      end
  630  
  631:     # Public: Refreshes just the cached Git reference data.  This should
  632      # be called after every Gollum update.
  633      #
  634      # Returns nothing.
  635:     def clear_cache
  636        @access.refresh
  637      end
  ...
  882  
  883      # Finds a full listing of files and their blob SHA for a given ref.  Each
  884:     # listing is cached based on its actual commit SHA.
  885      #
  886      # ref - A String ref that is either a commit SHA or references one.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gon-5.0.1/spec/spec_helper.rb:
   20      load 'rabl/configuration.rb'
   21      load 'rabl/renderer.rb'
   22:     load 'rabl/cache_engine.rb'
   23    end
   24  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/grape-0.6.1/.travis.yml:
    1  language: ruby
    2: cache: bundler
    3  rvm:
    4    - 2.0.0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/grape-entity-0.4.2/.travis.yml:
    1  language: ruby
    2: cache: bundler
    3  rvm:
    4    - 2.0.0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/haml-4.0.4/lib/haml/buffer.rb:
  294      end
  295  
  296:     @@tab_cache = {}
  297      # Gets `count` tabs. Mostly for internal use.
  298      def tabs(count = 0)
  299        tabs = [count + @tabulation, 0].max
  300:       @@tab_cache[tabs] ||= '  ' * tabs
  301      end
  302  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/haml-4.0.4/lib/haml/template/plugin.rb:
   31      end
   32  
   33:     def cache_fragment(block, name = {}, options = nil)
   34        @view.fragment_for(block, name, options) do
   35          eval("_hamlout.buffer", block.binding)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/haml-4.0.4/test/template_test.rb:
  319    end
  320  
  321:   def test_cache
  322      @base.controller = ActionController::Base.new
  323      @base.controller.perform_caching = false
  ...
  325  Test
  326  HTML
  327: - cache do
  328    Test
  329  HAML

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/haml-rails-0.5.1/lib/haml-rails.rb:
   17  
   18        initializer 'haml_rails.configure_template_digestor' do
   19:         # Configure cache digests to parse haml view templates
   20:         # when calculating cache keys for view fragments
   21  
   22          ActiveSupport.on_load(:action_view) do
   23            ActiveSupport.on_load(:after_initialize) do
   24              begin
   25:               if defined?(CacheDigests::DependencyTracker)
   26:                 # 'cache_digests' gem being used (overrides Rails 4 implementation)
   27:                 CacheDigests::DependencyTracker.register_tracker :haml, CacheDigests::DependencyTracker::ERBTracker
   28  
   29                  if ::Rails.env.development?
   30:                   # recalculate cache digest keys for each request
   31:                   CacheDigests::TemplateDigestor.cache = ActiveSupport::Cache::NullStore.new
   32                  end
   33                else
   ..
   37  
   38                  if ::Rails.env.development?
   39:                   # recalculate cache digest keys for each request
   40  
   41:                   # using blackhole cache until code is released to allow us to get this behavior
   42:                   # by simply setting `config.action_view.cache_template_loading` false in development.rb
   43                    # https://github.com/rails/rails/pull/10791
   44                    class BlackHole < Hash
   ..
   51                    module ::ActionView
   52                      class Digestor
   53:                       @@cache = BlackHole.new
   54                      end
   55                    end
   ..
   58              rescue
   59                # likely this version of Rails doesn't support dependency tracking
   60:               # so, we can't parse haml templates without 'cache_digests' gem anyway :)
   61              end
   62            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/haml-rails-0.5.1/README.md:
   10    * Any time you generate a controller or scaffold, you'll get Haml templates (instead of ERB)
   11    * When your Rails application loads, Haml will be loaded and initialized automatically
   12:   * Haml templates will be respected by the view template cache digestor
   13  
   14  Pretty fancy, eh? The modern world is just so amazing.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/hike-1.2.3/lib/hike/index.rb:
    2  
    3  module Hike
    4:   # `Index` is an internal cached variant of `Trail`. It assumes the
    5    # file system does not change between `find` calls. All `stat` and
    6:   # `entries` calls are cached for the lifetime of the `Index` object.
    7    class Index
    8      # `Index#paths` is an immutable `Paths` collection.
    .
   73      end
   74  
   75:     # A cached version of `Dir.entries` that filters out `.` files and
   76      # `~` swap files. Returns an empty `Array` if the directory does
   77      # not exist.
   ..
   87      end
   88  
   89:     # A cached version of `File.stat`. Returns nil if the file does
   90      # not exist.
   91      def stat(path)
   ..
  152        end
  153  
  154:       # Cache results of `build_pattern_for`
  155        def pattern_for(basename)
  156          @patterns[basename] ||= build_pattern_for(basename)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/hike-1.2.3/lib/hike/trail.rb:
  141  
  142      # `Trail#index` returns an `Index` object that has the same
  143:     # interface as `Trail`. An `Index` is a cached `Trail` object that
  144      # does not update when the file system changes. If you are
  145      # confident that you are not making changes the paths you are

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/http_parser.rb-0.5.3/ext/ruby_http_parser/vendor/http-parser-java/test.c:
  675           "Expires: Tue, 26 May 2009 11:11:49 GMT\r\n"
  676           "X-$PrototypeBI-Version: 1.6.0.3\r\n" /* $ char in header field */
  677:          "Cache-Control: public, max-age=2592000\r\n"
  678           "Server: gws\r\n"
  679           "Content-Length:  219  \r\n"
  ...
  697      , { "Expires", "Tue, 26 May 2009 11:11:49 GMT" }
  698      , { "X-$PrototypeBI-Version", "1.6.0.3" }
  699:     , { "Cache-Control", "public, max-age=2592000" }
  700      , { "Server", "gws" }
  701      , { "Content-Length", "219  " }
  ...
  898           "Date: Thu, 03 Jun 2010 09:56:32 GMT\r\n"
  899           "Server: Apache/2.2.3 (Red Hat)\r\n"
  900:          "Cache-Control: public\r\n"
  901           "Pragma: \r\n"
  902           "Location: http://www.bonjourmadame.fr/\r\n"
  ...
  915      { { "Date", "Thu, 03 Jun 2010 09:56:32 GMT" }
  916      , { "Server", "Apache/2.2.3 (Red Hat)" }
  917:     , { "Cache-Control", "public" }
  918      , { "Pragma", "" }
  919      , { "Location", "http://www.bonjourmadame.fr/" }
  ...
  966           "Date: Tue, 28 Sep 2010 01:14:13 GMT\r\n"
  967           "Server: Apache\r\n"
  968:          "Cache-Control: no-cache, must-revalidate\r\n"
  969           "Expires: Mon, 26 Jul 1997 05:00:00 GMT\r\n"
  970           ".et-Cookie: PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com\r\n"
  ...
  986      { { "Date", "Tue, 28 Sep 2010 01:14:13 GMT" }
  987      , { "Server", "Apache" }
  988:     , { "Cache-Control", "no-cache, must-revalidate" }
  989      , { "Expires", "Mon, 26 Jul 1997 05:00:00 GMT" }
  990      , { ".et-Cookie", "PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com" }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/http_parser.rb-0.5.3/ext/ruby_http_parser/vendor/http-parser-java/tests.dumped:
  439  
  440  name  :google 301
  441: raw   :"HTTP/1.1 301 Moved Permanently\r\nLocation: http://www.google.com/\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sun, 26 Apr 2009 11:11:49 GMT\r\nExpires: Tue, 26 May 2009 11:11:49 GMT\r\nX-$PrototypeBI-Version: 1.6.0.3\r\nCache-Control: public, max-age=2592000\r\nServer: gws\r\nContent-Length:  219  \r\n\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n"
  442  type  :HTTP_RESPONSE
  443  method: HTTP_DELETE
  ...
  454  header_3 :{ "Expires": "Tue, 26 May 2009 11:11:49 GMT"}
  455  header_4 :{ "X-$PrototypeBI-Version": "1.6.0.3"}
  456: header_5 :{ "Cache-Control": "public, max-age=2592000"}
  457  header_6 :{ "Server": "gws"}
  458  header_7 :{ "Content-Length": "219  "}
  ...
  592  
  593  name  :bonjourmadame.fr
  594: raw   :"HTTP/1.0 301 Moved Permanently\r\nDate: Thu, 03 Jun 2010 09:56:32 GMT\r\nServer: Apache/2.2.3 (Red Hat)\r\nCache-Control: public\r\nPragma: \r\nLocation: http://www.bonjourmadame.fr/\r\nVary: Accept-Encoding\r\nContent-Length: 0\r\nContent-Type: text/html; charset=UTF-8\r\nConnection: keep-alive\r\n\r\n"
  595  type  :HTTP_RESPONSE
  596  method: HTTP_DELETE
  ...
  604  header_0 :{ "Date": "Thu, 03 Jun 2010 09:56:32 GMT"}
  605  header_1 :{ "Server": "Apache/2.2.3 (Red Hat)"}
  606: header_2 :{ "Cache-Control": "public"}
  607  header_3 :{ "Pragma": ""}
  608  header_4 :{ "Location": "http://www.bonjourmadame.fr/"}
  ...
  640  
  641  name  :field underscore
  642: raw   :"HTTP/1.1 200 OK\r\nDate: Tue, 28 Sep 2010 01:14:13 GMT\r\nServer: Apache\r\nCache-Control: no-cache, must-revalidate\r\nExpires: Mon, 26 Jul 1997 05:00:00 GMT\r\n.et-Cookie: PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com\r\nVary: Accept-Encoding\r\n_eep-Alive: timeout=45\r\n_onnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n0\r\n\r\n"
  643  type  :HTTP_RESPONSE
  644  method: HTTP_DELETE
  ...
  652  header_0 :{ "Date": "Tue, 28 Sep 2010 01:14:13 GMT"}
  653  header_1 :{ "Server": "Apache"}
  654: header_2 :{ "Cache-Control": "no-cache, must-revalidate"}
  655  header_3 :{ "Expires": "Mon, 26 Jul 1997 05:00:00 GMT"}
  656  header_4 :{ ".et-Cookie": "PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com"}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/http_parser.rb-0.5.3/ext/ruby_http_parser/vendor/http-parser/test.c:
  675           "Expires: Tue, 26 May 2009 11:11:49 GMT\r\n"
  676           "X-$PrototypeBI-Version: 1.6.0.3\r\n" /* $ char in header field */
  677:          "Cache-Control: public, max-age=2592000\r\n"
  678           "Server: gws\r\n"
  679           "Content-Length:  219  \r\n"
  ...
  697      , { "Expires", "Tue, 26 May 2009 11:11:49 GMT" }
  698      , { "X-$PrototypeBI-Version", "1.6.0.3" }
  699:     , { "Cache-Control", "public, max-age=2592000" }
  700      , { "Server", "gws" }
  701      , { "Content-Length", "219  " }
  ...
  898           "Date: Thu, 03 Jun 2010 09:56:32 GMT\r\n"
  899           "Server: Apache/2.2.3 (Red Hat)\r\n"
  900:          "Cache-Control: public\r\n"
  901           "Pragma: \r\n"
  902           "Location: http://www.bonjourmadame.fr/\r\n"
  ...
  915      { { "Date", "Thu, 03 Jun 2010 09:56:32 GMT" }
  916      , { "Server", "Apache/2.2.3 (Red Hat)" }
  917:     , { "Cache-Control", "public" }
  918      , { "Pragma", "" }
  919      , { "Location", "http://www.bonjourmadame.fr/" }
  ...
  966           "Date: Tue, 28 Sep 2010 01:14:13 GMT\r\n"
  967           "Server: Apache\r\n"
  968:          "Cache-Control: no-cache, must-revalidate\r\n"
  969           "Expires: Mon, 26 Jul 1997 05:00:00 GMT\r\n"
  970           ".et-Cookie: PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com\r\n"
  ...
  986      { { "Date", "Tue, 28 Sep 2010 01:14:13 GMT" }
  987      , { "Server", "Apache" }
  988:     , { "Cache-Control", "no-cache, must-revalidate" }
  989      , { "Expires", "Mon, 26 Jul 1997 05:00:00 GMT" }
  990      , { ".et-Cookie", "PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com" }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/http_parser.rb-0.5.3/spec/support/responses.json:
    3      "name": "google 301",
    4      "type": "HTTP_RESPONSE",
    5:     "raw": "HTTP/1.1 301 Moved Permanently\r\nLocation: http://www.google.com/\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sun, 26 Apr 2009 11:11:49 GMT\r\nExpires: Tue, 26 May 2009 11:11:49 GMT\r\nX-$PrototypeBI-Version: 1.6.0.3\r\nCache-Control: public, max-age=2592000\r\nServer: gws\r\nContent-Length:  219  \r\n\r\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF=\"http://www.google.com/\">here</A>.\r\n</BODY></HTML>\r\n",
    6      "should_keep_alive": true,
    7      "message_complete_on_eof": false,
    .
   16        "Expires": "Tue, 26 May 2009 11:11:49 GMT",
   17        "X-$PrototypeBI-Version": "1.6.0.3",
   18:       "Cache-Control": "public, max-age=2592000",
   19        "Server": "gws",
   20        "Content-Length": "219  "
   ..
  144      "name": "bonjourmadame.fr",
  145      "type": "HTTP_RESPONSE",
  146:     "raw": "HTTP/1.0 301 Moved Permanently\r\nDate: Thu, 03 Jun 2010 09:56:32 GMT\r\nServer: Apache/2.2.3 (Red Hat)\r\nCache-Control: public\r\nPragma: \r\nLocation: http://www.bonjourmadame.fr/\r\nVary: Accept-Encoding\r\nContent-Length: 0\r\nContent-Type: text/html; charset=UTF-8\r\nConnection: keep-alive\r\n\r\n",
  147      "should_keep_alive": true,
  148      "message_complete_on_eof": false,
  ...
  154        "Date": "Thu, 03 Jun 2010 09:56:32 GMT",
  155        "Server": "Apache/2.2.3 (Red Hat)",
  156:       "Cache-Control": "public",
  157        "Pragma": "",
  158        "Location": "http://www.bonjourmadame.fr/",
  ...
  188      "name": "field underscore",
  189      "type": "HTTP_RESPONSE",
  190:     "raw": "HTTP/1.1 200 OK\r\nDate: Tue, 28 Sep 2010 01:14:13 GMT\r\nServer: Apache\r\nCache-Control: no-cache, must-revalidate\r\nExpires: Mon, 26 Jul 1997 05:00:00 GMT\r\n.et-Cookie: PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com\r\nVary: Accept-Encoding\r\n_eep-Alive: timeout=45\r\n_onnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n0\r\n\r\n",
  191      "should_keep_alive": false,
  192      "message_complete_on_eof": false,
  ...
  198        "Date": "Tue, 28 Sep 2010 01:14:13 GMT",
  199        "Server": "Apache",
  200:       "Cache-Control": "no-cache, must-revalidate",
  201        "Expires": "Mon, 26 Jul 1997 05:00:00 GMT",
  202        ".et-Cookie": "PlaxoCS=1274804622353690521; path=/; domain=.plaxo.com",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/httparty-0.13.0/spec/fixtures/delicious.xml:
    1  <posts user="jnunemaker" tag="ruby"> 
    2    <post href="http://roxml.rubyforge.org/" hash="19bba2ab667be03a19f67fb67dc56917" description="ROXML - Ruby Object to XML Mapping Library" tag="ruby xml gems mapping" time="2008-08-09T05:24:20Z" others="56" extended="ROXML is a Ruby library designed to make it easier for Ruby developers to work with XML. Using simple annotations, it enables Ruby classes to be custom-mapped to XML. ROXML takes care of the marshalling and unmarshalling of mapped attributes so that developers can focus on building first-class Ruby classes."/> 
    3:   <post href="http://code.google.com/p/sparrow/" hash="1df8a7cb9e8960992556518c0ea0d146" description="sparrow - Google Code" tag="ruby sparrow memcache queue" time="2008-08-06T15:07:24Z" others="115" extended="Sparrow is a really fast lightweight queue written in Ruby that speaks memcache. That means you can use Sparrow with any memcached client library (Ruby or otherwise)."/> 
    4    <post href="http://code.google.com/p/query-reviewer/" hash="963187e8bf350ae42e21eee13a2bef07" description="query-reviewer - Google Code" tag="rails ruby railstips plugins database optimization" time="2008-08-04T21:50:14Z" others="180" extended="This rails plugin not only runs &quot;EXPLAIN&quot; before each of your select queries in development, but provides a small DIV in the rendered output of each page with the summary of query warnings that it analyzed."/> 
    5    <post href="http://dev.zeraweb.com/introducing-functor" hash="2cdd545934bd37ae6f4829c51b3041c5" description="dev.zeraweb.com: Introducing Functor" tag="ruby methods gems railstips" time="2008-08-04T21:46:47Z" others="61" extended="Really cool ruby lib for overloading method definitions. I can think of a few places this would be handy."/> 
    .
   10    <post href="http://blog.labnotes.org/2008/05/05/distributed-twitter-client-in-20-lines-of-code/" hash="7c2a36292db109b144036a02eb3f46b7" description="Labnotes » Distributed Twitter Client in 20 lines of code" tag="xmpp ruby jabber xmpp4r" time="2008-08-01T18:16:23Z" others="18" extended="Cool little snippet of xmpp goodness to check your buddies status messages."/> 
   11    <post href="http://labs.reevoo.com/plugins/beanstalk-messaging" hash="d100c10208acbf5e954320a5577838d9" description="reevoolabs - Beanstalk Messaging" tag="railstips messaging queue rails ruby" time="2008-07-28T02:57:00Z" others="33" extended="Good write up on beanstalk"/> 
   12:   <post href="http://www.slideshare.net/guest807bb2/rubyfringe?src=embed" hash="c3dc3b940dbe25e39737240b4e1ab071" description="Rockstar Memcached" tag="memcached performance caching ruby rails railstips" time="2008-07-28T02:30:50Z" others="11" extended="Killer presentation on memcached by Tobi of Shopify."/> 
   13    <post href="http://www.igvita.com/2008/07/22/unix-signals-for-live-debugging/" hash="288054a38d870b15bdf060ed5c6b2a2e" description="Unix Signals for Live Debugging - igvita.com" tag="ruby signals unix debugging signal railstips" time="2008-07-27T04:53:00Z" others="86" extended="I've known how to kill processes and such but never quite understood kill. Ilya Grigorik explains not only how to send those signals but how to use them in your scripts to change the way they behave on the fly. Very cool."/> 
   14    <post href="http://www.rubyinside.com/redcloth-4-released-962.html" hash="b3db9b84940ce550e26a560b83eb2f66" description="RedCloth 4.0 Released: 40x Faster Textile Rendering" tag="textile ruby gems railstips" time="2008-07-27T04:42:29Z" others="20" extended="Redcloth gets some serious love. It's now much faster. Sweet!"/> 

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/httpauth-0.2.0/lib/httpauth/digest.rb:
  613        # The filename from which the session will be saved and read from
  614        def filename
  615:         "#{options[:tmpdir] || Dir::tmpdir}/ruby_digest_cache.#{self.opaque}"
  616        end
  617      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n.rb:
  137      #
  138      # It is recommended to use/implement lambdas in an "idempotent" way. E.g. when
  139:     # a cache layer is put in front of I18n.translate it will generate a cache key
  140      # from the argument values passed to #translate. Therefor your lambdas should
  141      # always return the same translations/values per unique combination of argument
  ...
  329  
  330      def normalize_key(key, separator)
  331:       normalized_key_cache[separator][key] ||=
  332          case key
  333          when Array
  ...
  341      end
  342  
  343:     def normalized_key_cache
  344:       @normalized_key_cache ||= Hash.new { |h,k| h[k] = {} }
  345      end
  346  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n/backend.rb:
    3      autoload :Base,                  'i18n/backend/base'
    4      autoload :InterpolationCompiler, 'i18n/backend/interpolation_compiler'
    5:     autoload :Cache,                 'i18n/backend/cache'
    6      autoload :Cascade,               'i18n/backend/cascade'
    7      autoload :Chain,                 'i18n/backend/chain'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n/backend/cache.rb:
    1: # This module allows you to easily cache all responses from the backend - thus
    2  # speeding up the I18n aspects of your application quite a bit.
    3  #
    4: # To enable caching you can simply include the Cache module to the Simple
    5  # backend - or whatever other backend you are using:
    6  #
    7: #   I18n::Backend::Simple.send(:include, I18n::Backend::Cache)
    8  #
    9: # You will also need to set a cache store implementation that you want to use:
   10  #
   11: #   I18n.cache_store = ActiveSupport::Cache.lookup_store(:memory_store)
   12  #
   13: # You can use any cache implementation you want that provides the same API as
   14: # ActiveSupport::Cache (only the methods #fetch and #write are being used).
   15  #
   16: # The cache_key implementation assumes that you only pass values to
   17  # I18n.translate that return a valid key from #hash (see
   18  # http://www.ruby-doc.org/core/classes/Object.html#M000337).
   ..
   22  #   I18n.t(:"date.order", :default => lambda {[:month, :day, :year]})
   23  #
   24: # Then you will always have a cache miss, because each time this method
   25  # is called the lambda will have a different hash value. If you know
   26  # the result of the lambda is a constant as in the example above, then
   27: # to cache this you can make the lambda a constant, like this:
   28  #
   29  #   DEFAULT_DATE_ORDER = lambda {[:month, :day, :year]}
   ..
   36  module I18n
   37    class << self
   38:     @@cache_store = nil
   39:     @@cache_namespace = nil
   40  
   41:     def cache_store
   42:       @@cache_store
   43      end
   44  
   45:     def cache_store=(store)
   46:       @@cache_store = store
   47      end
   48  
   49:     def cache_namespace
   50:       @@cache_namespace
   51      end
   52  
   53:     def cache_namespace=(namespace)
   54:       @@cache_namespace = namespace
   55      end
   56  
   57      def perform_caching?
   58:       !cache_store.nil?
   59      end
   60    end
   61  
   62    module Backend
   63:     # TODO Should the cache be cleared if new translations are stored?
   64:     module Cache
   65        def translate(locale, key, options = {})
   66:         I18n.perform_caching? ? fetch(cache_key(locale, key, options)) { super } : super
   67        end
   68  
   69        protected
   70  
   71:         def fetch(cache_key, &block)
   72:           result = _fetch(cache_key, &block)
   73            throw(:exception, result) if result.is_a?(MissingTranslation)
   74            result = result.dup if result.frozen? rescue result
   ..
   76          end
   77  
   78:         def _fetch(cache_key, &block)
   79:           result = I18n.cache_store.read(cache_key) and return result
   80            result = catch(:exception, &block)
   81:           I18n.cache_store.write(cache_key, result) unless result.is_a?(Proc)
   82            result
   83          end
   84  
   85:         def cache_key(locale, key, options)
   86            # This assumes that only simple, native Ruby values are passed to I18n.translate.
   87:           "i18n/#{I18n.cache_namespace}/#{locale}/#{key.hash}/#{USE_INSPECT_HASH ? options.inspect.hash : options.hash}"
   88          end
   89  
   90        private
   91          # In Ruby < 1.9 the following is true: { :foo => 1, :bar => 2 }.hash == { :foo => 2, :bar => 1 }.hash
   92:         # Therefore we must use the hash of the inspect string instead to avoid cache key colisions.
   93          USE_INSPECT_HASH = RUBY_VERSION <= "1.9"
   94      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n/backend/key_value.rb:
   32      #
   33      # You may make this backend even faster by including the Memoize module.
   34:     # However, notice that you should properly clear the cache if you change
   35      # values directly in the key-store.
   36      #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n/backend/memoize.rb:
    7  #
    8  # Notice that it's the responsibility of the backend to define whenever the
    9: # cache should be cleaned.
   10  module I18n
   11    module Backend

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/lib/i18n/tests/basics.rb:
   51          assert_equal 'bar', I18n.t(:to_be_deleted, :default => 'baz')
   52  
   53:         I18n.cache_store.clear if I18n.respond_to?(:cache_store) && I18n.cache_store
   54          I18n.backend.store_translations(:en, :to_be_deleted => nil)
   55          assert_equal 'baz', I18n.t(:to_be_deleted, :default => 'baz')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/README.textile:
   20  Pluggable features:
   21  
   22: * Cache
   23  * Pluralization: lambda pluralizers stored as translation data
   24  * Locale fallbacks, RFC4647 compliant (optionally: RFC4646 locale validation)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/test/api/all_features_test.rb:
    5    require 'active_support'
    6  rescue LoadError
    7:   puts "not testing with Cache enabled because active_support can not be found"
    8  end
    9  
   ..
   11    class Backend < I18n::Backend::Simple
   12      include I18n::Backend::Metadata
   13:     include I18n::Backend::Cache
   14      include I18n::Backend::Cascade
   15      include I18n::Backend::Fallbacks
   ..
   20    def setup
   21      I18n.backend = I18n::Backend::Chain.new(Backend.new, I18n::Backend::Simple.new)
   22:     I18n.cache_store = cache_store
   23      super
   24    end
   25  
   26    def teardown
   27:     I18n.cache_store.clear if I18n.cache_store
   28:     I18n.cache_store = nil
   29      super
   30    end
   31  
   32:   def cache_store
   33:     ActiveSupport::Cache.lookup_store(:memory_store) if cache_available?
   34    end
   35  
   36:   def cache_available?
   37:     defined?(ActiveSupport) && defined?(ActiveSupport::Cache)
   38    end
   39  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/i18n-0.6.9/test/backend/cache_test.rb:
    4    require 'active_support'
    5  rescue LoadError
    6:   $stderr.puts "Skipping cache tests using ActiveSupport"
    7  else
    8  
    9: class I18nBackendCacheTest < Test::Unit::TestCase
   10    class Backend < I18n::Backend::Simple
   11:     include I18n::Backend::Cache
   12    end
   13  
   ..
   15      I18n.backend = Backend.new
   16      super
   17:     I18n.cache_store = ActiveSupport::Cache.lookup_store(:memory_store)
   18    end
   19  
   20    def teardown
   21:     I18n.cache_store = nil
   22    end
   23  
   24:   test "it uses the cache" do
   25:     assert I18n.cache_store.is_a?(ActiveSupport::Cache::MemoryStore)
   26    end
   27  
   28:   test "translate hits the backend and caches the response" do
   29      I18n.backend.expects(:lookup).returns('Foo')
   30      assert_equal 'Foo', I18n.t(:foo)
   ..
   37    end
   38  
   39:   test "still raises MissingTranslationData but also caches it" do
   40      assert_raise(I18n::MissingTranslationData) { I18n.t(:missing, :raise => true) }
   41      assert_raise(I18n::MissingTranslationData) { I18n.t(:missing, :raise => true) }
   42:     assert_equal 1, I18n.cache_store.instance_variable_get(:@data).size
   43  
   44      # I18n.backend.expects(:lookup).returns(nil)
   ..
   48    end
   49  
   50:   test "uses 'i18n' as a cache key namespace by default" do
   51:     assert_equal 0, I18n.backend.send(:cache_key, :en, :foo, {}).index('i18n')
   52    end
   53  
   54:   test "adds a custom cache key namespace" do
   55:     with_cache_namespace('bar') do
   56:       assert_equal 0, I18n.backend.send(:cache_key, :en, :foo, {}).index('i18n/bar/')
   57      end
   58    end
   ..
   60    test "adds locale and hash of key and hash of options" do
   61      options = { :bar=>1 }
   62:     options_hash = I18n::Backend::Cache::USE_INSPECT_HASH ? options.inspect.hash : options.hash
   63:     assert_equal "i18n//en/#{:foo.hash}/#{options_hash}", I18n.backend.send(:cache_key, :en, :foo, options)
   64    end
   65  
   ..
   68      interpolation_values2 = { :foo => 2, :bar => 1 }
   69  
   70:     key1 = I18n.backend.send(:cache_key, :en, :some_key, interpolation_values1)
   71:     key2 = I18n.backend.send(:cache_key, :en, :some_key, interpolation_values2)
   72  
   73      assert key1 != key2
   ..
   76    protected
   77  
   78:     def with_cache_namespace(namespace)
   79:       I18n.cache_namespace = namespace
   80        yield
   81:       I18n.cache_namespace = nil
   82      end
   83  end
   84  
   85: end # AS cache check
   86  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ice_nine-0.10.0/lib/ice_nine/freezer.rb:
    6    class Freezer
    7  
    8:     # Cache the Freezer classes returned for each type
    9:     @freezer_cache = Hash.new do |cache, mod|
   10:       cache[mod] = nil
   11        mod.ancestors.each do |ancestor|
   12          freezer = find(ancestor.name.to_s)
   13:         break cache[mod] = freezer if freezer
   14        end
   15:       cache[mod]
   16      end
   17  
   ..
   27      # @api public
   28      def self.[](mod)
   29:       @freezer_cache[mod]
   30      end
   31  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jasmine-2.0.0.rc5/lib/jasmine/application.rb:
    4  require 'rack/jasmine/runner'
    5  require 'rack/jasmine/focused_suite'
    6: require 'rack/jasmine/cache_control'
    7  require 'ostruct'
    8  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jasmine-2.0.0.rc5/lib/jasmine/config.rb:
   45  
   46      @config.add_rack_app(Rack::Head)
   47:     @config.add_rack_app(Rack::Jasmine::CacheControl)
   48  
   49      if Jasmine::Dependencies.use_asset_pipeline?

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jasmine-2.0.0.rc5/lib/rack/jasmine/cache_control.rb:
    2    module Jasmine
    3  
    4:     class CacheControl
    5        def initialize(app)
    6          @app, @content_type = app
    .
   10          status, headers, body = @app.call(env)
   11          headers = Rack::Utils::HeaderHash.new(headers)
   12:         headers['Cache-Control'] ||= "max-age=0, private, must-revalidate"
   13:         headers['Pragma'] ||= "no-cache"
   14          [status, headers, body]
   15        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jasmine-2.0.0.rc5/spec/application_integration_spec.rb:
    3  describe "Jasmine::Application" do
    4  
    5:   it "includes no-cache headers for specs" do
    6      pending
    7      get "/__spec__/example_spec.js"
    8:     last_response.headers.should have_key("Cache-Control")
    9:     last_response.headers["Cache-Control"].should == "max-age=0, private, must-revalidate"
   10      last_response.headers['Pragma'].each do |key|
   11:       last_response.headers[key].should == 'no-cache'
   12      end
   13    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jasmine-2.0.0.rc5/spec/configuration_spec.rb:
  127  
  128    describe 'jasmine ports' do
  129:     it 'returns new CI port and caches return value' do
  130        config = Jasmine::Configuration.new()
  131        Jasmine.stub(:find_unused_port).and_return('1234')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-rails-3.1.0/vendor/assets/javascripts/jquery.js:
  630  	dirruns = 0,
  631  	done = 0,
  632: 	classCache = createCache(),
  633: 	tokenCache = createCache(),
  634: 	compilerCache = createCache(),
  635  	sortOrder = function( a, b ) {
  636  		if ( a === b ) {
  ...
  882  
  883  /**
  884:  * Create key-value caches of limited size
  885   * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
  886:  *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
  887   *	deleting the oldest entry
  888   */
  889: function createCache() {
  890  	var keys = [];
  891  
  892: 	function cache( key, value ) {
  893  		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
  894: 		if ( keys.push( key + " " ) > Expr.cacheLength ) {
  895  			// Only keep the most recent entries
  896: 			delete cache[ keys.shift() ];
  897  		}
  898: 		return (cache[ key + " " ] = value);
  899  	}
  900: 	return cache;
  901  }
  902  
  ...
 1543  
 1544  	// Can be adjusted by the user
 1545: 	cacheLength: 50,
 1546  
 1547  	createPseudo: markFunction,
 ....
 1647  
 1648  		"CLASS": function( className ) {
 1649: 			var pattern = classCache[ className + " " ];
 1650  
 1651  			return pattern ||
 1652  				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
 1653: 				classCache( className, function( elem ) {
 1654  					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
 1655  				});
 ....
 1693  
 1694  				function( elem, context, xml ) {
 1695: 					var cache, outerCache, node, diff, nodeIndex, start,
 1696  						dir = simple !== forward ? "nextSibling" : "previousSibling",
 1697  						parent = elem.parentNode,
 1698  						name = ofType && elem.nodeName.toLowerCase(),
 1699: 						useCache = !xml && !ofType;
 1700  
 1701  					if ( parent ) {
 ....
 1718  						start = [ forward ? parent.firstChild : parent.lastChild ];
 1719  
 1720: 						// non-xml :nth-child(...) stores cache data on `parent`
 1721: 						if ( forward && useCache ) {
 1722: 							// Seek `elem` from a previously-cached index
 1723: 							outerCache = parent[ expando ] || (parent[ expando ] = {});
 1724: 							cache = outerCache[ type ] || [];
 1725: 							nodeIndex = cache[0] === dirruns && cache[1];
 1726: 							diff = cache[0] === dirruns && cache[2];
 1727  							node = nodeIndex && parent.childNodes[ nodeIndex ];
 1728  
 ....
 1732  								(diff = nodeIndex = 0) || start.pop()) ) {
 1733  
 1734: 								// When found, cache indexes on `parent` and break
 1735  								if ( node.nodeType === 1 && ++diff && node === elem ) {
 1736: 									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
 1737  									break;
 1738  								}
 1739  							}
 1740  
 1741: 						// Use previously-cached element index if available
 1742: 						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
 1743: 							diff = cache[1];
 1744  
 1745  						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
 ....
 1750  
 1751  								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
 1752: 									// Cache the index of each encountered element
 1753: 									if ( useCache ) {
 1754  										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
 1755  									}
 ....
 2024  	var matched, match, tokens, type,
 2025  		soFar, groups, preFilters,
 2026: 		cached = tokenCache[ selector + " " ];
 2027  
 2028: 	if ( cached ) {
 2029: 		return parseOnly ? 0 : cached.slice( 0 );
 2030  	}
 2031  
 ....
 2084  		soFar ?
 2085  			Sizzle.error( selector ) :
 2086: 			// Cache the tokens
 2087: 			tokenCache( selector, groups ).slice( 0 );
 2088  }
 2089  
 ....
 2115  		// Check against all ancestor/preceding elements
 2116  		function( elem, context, xml ) {
 2117: 			var oldCache, outerCache,
 2118: 				newCache = [ dirruns, doneName ];
 2119  
 2120  			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
 ....
 2130  				while ( (elem = elem[ dir ]) ) {
 2131  					if ( elem.nodeType === 1 || checkNonElements ) {
 2132: 						outerCache = elem[ expando ] || (elem[ expando ] = {});
 2133: 						if ( (oldCache = outerCache[ dir ]) &&
 2134: 							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
 2135  
 2136: 							// Assign to newCache so results back-propagate to previous elements
 2137: 							return (newCache[ 2 ] = oldCache[ 2 ]);
 2138  						} else {
 2139: 							// Reuse newcache so results back-propagate to previous elements
 2140: 							outerCache[ dir ] = newCache;
 2141  
 2142  							// A match means we're done; a fail means we have to keep checking
 2143: 							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
 2144  								return true;
 2145  							}
 ....
 2437  		setMatchers = [],
 2438  		elementMatchers = [],
 2439: 		cached = compilerCache[ selector + " " ];
 2440  
 2441: 	if ( !cached ) {
 2442  		// Generate a function of recursive functions that can be used to check each element
 2443  		if ( !group ) {
 ....
 2446  		i = group.length;
 2447  		while ( i-- ) {
 2448: 			cached = matcherFromTokens( group[i] );
 2449: 			if ( cached[ expando ] ) {
 2450: 				setMatchers.push( cached );
 2451  			} else {
 2452: 				elementMatchers.push( cached );
 2453  			}
 2454  		}
 2455  
 2456: 		// Cache the compiled function
 2457: 		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
 2458  	}
 2459: 	return cached;
 2460  };
 2461  
 ....
 3030  
 3031  
 3032: // String to Object options format cache
 3033: var optionsCache = {};
 3034  
 3035: // Convert String-formatted options into Object-formatted ones and store in cache
 3036  function createOptions( options ) {
 3037: 	var object = optionsCache[ options ] = {};
 3038  	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
 3039  		object[ flag ] = true;
 ....
 3067  
 3068  	// Convert options from String-formatted to Object-formatted if needed
 3069: 	// (we check in cache first)
 3070  	options = typeof options === "string" ?
 3071: 		( optionsCache[ options ] || createOptions( options ) ) :
 3072  		jQuery.extend( {}, options );
 3073  
 ....
 3645  }
 3646  
 3647: // checks a cache object for emptiness
 3648  function isEmptyDataObject( obj ) {
 3649  	var name;
 ....
 3667  	}
 3668  
 3669: 	var ret, thisCache,
 3670  		internalKey = jQuery.expando,
 3671  
 ....
 3674  		isNode = elem.nodeType,
 3675  
 3676: 		// Only DOM nodes need the global jQuery cache; JS object data is
 3677  		// attached directly to the object so GC can occur automatically
 3678: 		cache = isNode ? jQuery.cache : elem,
 3679  
 3680: 		// Only defining an ID for JS objects if its cache already exists allows
 3681: 		// the code to shortcut on the same path as a DOM node with no cache
 3682  		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;
 3683  
 3684  	// Avoid doing any more work than we need to when trying to get data on an
 3685  	// object that has no data at all
 3686: 	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
 3687  		return;
 3688  	}
 ....
 3690  	if ( !id ) {
 3691  		// Only DOM nodes need a new unique ID for each element since their data
 3692: 		// ends up in the global cache
 3693  		if ( isNode ) {
 3694  			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
 ....
 3698  	}
 3699  
 3700: 	if ( !cache[ id ] ) {
 3701  		// Avoid exposing jQuery metadata on plain JS objects when the object
 3702  		// is serialized using JSON.stringify
 3703: 		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
 3704  	}
 3705  
 3706  	// An object can be passed to jQuery.data instead of a key/value pair; this gets
 3707: 	// shallow copied over onto the existing cache
 3708  	if ( typeof name === "object" || typeof name === "function" ) {
 3709  		if ( pvt ) {
 3710: 			cache[ id ] = jQuery.extend( cache[ id ], name );
 3711  		} else {
 3712: 			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
 3713  		}
 3714  	}
 3715  
 3716: 	thisCache = cache[ id ];
 3717  
 3718  	// jQuery data() is stored in a separate object inside the object's internal data
 3719: 	// cache in order to avoid key collisions between internal data and user-defined
 3720  	// data.
 3721  	if ( !pvt ) {
 3722: 		if ( !thisCache.data ) {
 3723: 			thisCache.data = {};
 3724  		}
 3725  
 3726: 		thisCache = thisCache.data;
 3727  	}
 3728  
 3729  	if ( data !== undefined ) {
 3730: 		thisCache[ jQuery.camelCase( name ) ] = data;
 3731  	}
 3732  
 ....
 3736  
 3737  		// First Try to find as-is property data
 3738: 		ret = thisCache[ name ];
 3739  
 3740  		// Test for null|undefined property data
 ....
 3742  
 3743  			// Try to find the camelCased property
 3744: 			ret = thisCache[ jQuery.camelCase( name ) ];
 3745  		}
 3746  	} else {
 3747: 		ret = thisCache;
 3748  	}
 3749  
 ....
 3756  	}
 3757  
 3758: 	var thisCache, i,
 3759  		isNode = elem.nodeType,
 3760  
 3761  		// See jQuery.data for more information
 3762: 		cache = isNode ? jQuery.cache : elem,
 3763  		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;
 3764  
 3765: 	// If there is already no cache entry for this object, there is no
 3766  	// purpose in continuing
 3767: 	if ( !cache[ id ] ) {
 3768  		return;
 3769  	}
 ....
 3771  	if ( name ) {
 3772  
 3773: 		thisCache = pvt ? cache[ id ] : cache[ id ].data;
 3774  
 3775: 		if ( thisCache ) {
 3776  
 3777  			// Support array or space separated string names for data keys
 ....
 3779  
 3780  				// try the string as a key before any manipulation
 3781: 				if ( name in thisCache ) {
 3782  					name = [ name ];
 3783  				} else {
 ....
 3785  					// split the camel cased version by spaces unless a key with the spaces exists
 3786  					name = jQuery.camelCase( name );
 3787: 					if ( name in thisCache ) {
 3788  						name = [ name ];
 3789  					} else {
 ....
 3803  			i = name.length;
 3804  			while ( i-- ) {
 3805: 				delete thisCache[ name[i] ];
 3806  			}
 3807  
 3808: 			// If there is no data left in the cache, we want to continue
 3809: 			// and let the cache object itself get destroyed
 3810: 			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
 3811  				return;
 3812  			}
 ....
 3816  	// See jQuery.data for more information
 3817  	if ( !pvt ) {
 3818: 		delete cache[ id ].data;
 3819  
 3820: 		// Don't destroy the parent cache unless the internal data object
 3821  		// had been the only thing left in it
 3822: 		if ( !isEmptyDataObject( cache[ id ] ) ) {
 3823  			return;
 3824  		}
 3825  	}
 3826  
 3827: 	// Destroy the cache
 3828  	if ( isNode ) {
 3829  		jQuery.cleanData( [ elem ], true );
 3830  
 3831: 	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
 3832  	/* jshint eqeqeq: false */
 3833: 	} else if ( support.deleteExpando || cache != cache.window ) {
 3834  		/* jshint eqeqeq: true */
 3835: 		delete cache[ id ];
 3836  
 3837  	// When all else fails, null
 3838  	} else {
 3839: 		cache[ id ] = null;
 3840  	}
 3841  }
 3842  
 3843  jQuery.extend({
 3844: 	cache: {},
 3845  
 3846  	// The following elements (space-suffixed to avoid Object.prototype collisions)
 ....
 3854  
 3855  	hasData: function( elem ) {
 3856: 		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
 3857  		return !!elem && !isEmptyDataObject( elem );
 3858  	},
 ....
 5262  		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
 5263  	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
 5264: 	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
 5265  	rleadingWhitespace = /^\s+/,
 5266  	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
 ....
 5461  			inPage = jQuery.contains( elem.ownerDocument, elem );
 5462  
 5463: 		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
 5464  			clone = elem.cloneNode( true );
 5465  
 ....
 5643  			i = 0,
 5644  			internalKey = jQuery.expando,
 5645: 			cache = jQuery.cache,
 5646  			deleteExpando = support.deleteExpando,
 5647  			special = jQuery.event.special;
 ....
 5651  
 5652  				id = elem[ internalKey ];
 5653: 				data = id && cache[ id ];
 5654  
 5655  				if ( data ) {
 ....
 5666  					}
 5667  
 5668: 					// Remove cache only if it was not already removed by jQuery.event.remove
 5669: 					if ( cache[ id ] ) {
 5670  
 5671: 						delete cache[ id ];
 5672  
 5673  						// IE does not allow us to delete expando properties from nodes,
 ....
 5805  			// See if we can take a shortcut and just use innerHTML
 5806  			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
 5807: 				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
 5808  				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
 5809  				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {
 ....
 8859  	active: 0,
 8860  
 8861: 	// Last-Modified header cache for next request
 8862  	lastModified: {},
 8863  	etag: {},
 ....
 8877  		username: null,
 8878  		password: null,
 8879: 		cache: null,
 8880  		throws: false,
 8881  		traditional: false,
 ....
 8962  			// Loop variable
 8963  			i,
 8964: 			// URL without anti-cache param
 8965: 			cacheURL,
 8966  			// Response headers as string
 8967  			responseHeadersString,
 ....
 9019  				},
 9020  
 9021: 				// Caches the header
 9022  				setRequestHeader: function( name, value ) {
 9023  					var lname = name.toLowerCase();
 ....
 9121  		// Save the URL in case we're toying with the If-Modified-Since
 9122  		// and/or If-None-Match header later on
 9123: 		cacheURL = s.url;
 9124  
 9125  		// More options handling for requests with no content
 ....
 9128  			// If data is available, append data to url
 9129  			if ( s.data ) {
 9130: 				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
 9131  				// #9682: remove data so that it's not used in an eventual retry
 9132  				delete s.data;
 9133  			}
 9134  
 9135: 			// Add anti-cache in url if needed
 9136: 			if ( s.cache === false ) {
 9137: 				s.url = rts.test( cacheURL ) ?
 9138  
 9139  					// If there is already a '_' parameter, set its value
 9140: 					cacheURL.replace( rts, "$1_=" + nonce++ ) :
 9141  
 9142  					// Otherwise add one to the end
 9143: 					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
 9144  			}
 9145  		}
 ....
 9147  		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
 9148  		if ( s.ifModified ) {
 9149: 			if ( jQuery.lastModified[ cacheURL ] ) {
 9150: 				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
 9151  			}
 9152: 			if ( jQuery.etag[ cacheURL ] ) {
 9153: 				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
 9154  			}
 9155  		}
 ....
 9243  			transport = undefined;
 9244  
 9245: 			// Cache response headers
 9246  			responseHeadersString = headers || "";
 9247  
 ....
 9267  					modified = jqXHR.getResponseHeader("Last-Modified");
 9268  					if ( modified ) {
 9269: 						jQuery.lastModified[ cacheURL ] = modified;
 9270  					}
 9271  					modified = jqXHR.getResponseHeader("etag");
 9272  					if ( modified ) {
 9273: 						jQuery.etag[ cacheURL ] = modified;
 9274  					}
 9275  				}
 ....
 9726  						callback();
 9727  					} else if ( xhr.readyState === 4 ) {
 9728: 						// (IE6 & IE7) if it's in cache and has been
 9729  						// retrieved directly we need to fire the callback
 9730  						setTimeout( callback );
 ....
 9777  });
 9778  
 9779: // Handle cache's special case and global
 9780  jQuery.ajaxPrefilter( "script", function( s ) {
 9781: 	if ( s.cache === undefined ) {
 9782: 		s.cache = false;
 9783  	}
 9784  	if ( s.crossDomain ) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-rails-3.1.0/vendor/assets/javascripts/jquery.min.js:
    1  /*! jQuery v1.11.0 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
    2: !function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k="".trim,l={},m="1.11.0",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(l.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:k&&!k.call("\ufeff\xa0")?function(a){return null==a?"":k.call(a)}:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||n.guid++,e):void 0},now:function(){return+new Date},support:l}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s="sizzle"+-new Date,t=a.document,u=0,v=0,w=eb(),x=eb(),y=eb(),z=function(a,b){return a===b&&(j=!0),0},A="undefined",B=1<<31,C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=D.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M=L.replace("w","w#"),N="\\["+K+"*("+L+")"+K+"*(?:([*^$|!~]?=)"+K+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+M+")|)|)"+K+"*\\]",O=":("+L+")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|"+N.replace(3,8)+")*)|.*)\\)|)",P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(O),U=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L.replace("w","w*")+")"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=/'|\\/g,ab=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),bb=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{G.apply(D=H.call(t.childNodes),t.childNodes),D[t.childNodes.length].nodeType}catch(cb){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function db(a,b,d,e){var f,g,h,i,j,m,p,q,u,v;if((b?b.ownerDocument||b:t)!==l&&k(b),b=b||l,d=d||[],!a||"string"!=typeof a)return d;if(1!==(i=b.nodeType)&&9!==i)return[];if(n&&!e){if(f=Z.exec(a))if(h=f[1]){if(9===i){if(g=b.getElementById(h),!g||!g.parentNode)return d;if(g.id===h)return d.push(g),d}else if(b.ownerDocument&&(g=b.ownerDocument.getElementById(h))&&r(b,g)&&g.id===h)return d.push(g),d}else{if(f[2])return G.apply(d,b.getElementsByTagName(a)),d;if((h=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(h)),d}if(c.qsa&&(!o||!o.test(a))){if(q=p=s,u=b,v=9===i&&a,1===i&&"object"!==b.nodeName.toLowerCase()){m=ob(a),(p=b.getAttribute("id"))?q=p.replace(_,"\\$&"):b.setAttribute("id",q),q="[id='"+q+"'] ",j=m.length;while(j--)m[j]=q+pb(m[j]);u=$.test(a)&&mb(b.parentNode)||b,v=m.join(",")}if(v)try{return G.apply(d,u.querySelectorAll(v)),d}catch(w){}finally{p||b.removeAttribute("id")}}}return xb(a.replace(P,"$1"),b,d,e)}function eb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function fb(a){return a[s]=!0,a}function gb(a){var b=l.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function hb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function ib(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||B)-(~a.sourceIndex||B);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function jb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function kb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function lb(a){return fb(function(b){return b=+b,fb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function mb(a){return a&&typeof a.getElementsByTagName!==A&&a}c=db.support={},f=db.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},k=db.setDocument=function(a){var b,e=a?a.ownerDocument||a:t,g=e.defaultView;return e!==l&&9===e.nodeType&&e.documentElement?(l=e,m=e.documentElement,n=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){k()},!1):g.attachEvent&&g.attachEvent("onunload",function(){k()})),c.attributes=gb(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=gb(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(e.getElementsByClassName)&&gb(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=gb(function(a){return m.appendChild(a).id=s,!e.getElementsByName||!e.getElementsByName(s).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==A&&n){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ab,bb);return function(a){var c=typeof a.getAttributeNode!==A&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==A?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==A&&n?b.getElementsByClassName(a):void 0},p=[],o=[],(c.qsa=Y.test(e.querySelectorAll))&&(gb(function(a){a.innerHTML="<select t=''><option selected=''></option></select>",a.querySelectorAll("[t^='']").length&&o.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||o.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll(":checked").length||o.push(":checked")}),gb(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&o.push("name"+K+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||o.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),o.push(",.*:")})),(c.matchesSelector=Y.test(q=m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&gb(function(a){c.disconnectedMatch=q.call(a,"div"),q.call(a,"[s!='']:x"),p.push("!=",O)}),o=o.length&&new RegExp(o.join("|")),p=p.length&&new RegExp(p.join("|")),b=Y.test(m.compareDocumentPosition),r=b||Y.test(m.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},z=b?function(a,b){if(a===b)return j=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===t&&r(t,a)?-1:b===e||b.ownerDocument===t&&r(t,b)?1:i?I.call(i,a)-I.call(i,b):0:4&d?-1:1)}:function(a,b){if(a===b)return j=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],k=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:i?I.call(i,a)-I.call(i,b):0;if(f===g)return ib(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)k.unshift(c);while(h[d]===k[d])d++;return d?ib(h[d],k[d]):h[d]===t?-1:k[d]===t?1:0},e):l},db.matches=function(a,b){return db(a,null,null,b)},db.matchesSelector=function(a,b){if((a.ownerDocument||a)!==l&&k(a),b=b.replace(S,"='$1']"),!(!c.matchesSelector||!n||p&&p.test(b)||o&&o.test(b)))try{var d=q.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return db(b,l,null,[a]).length>0},db.contains=function(a,b){return(a.ownerDocument||a)!==l&&k(a),r(a,b)},db.attr=function(a,b){(a.ownerDocument||a)!==l&&k(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!n):void 0;return void 0!==f?f:c.attributes||!n?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},db.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},db.uniqueSort=function(a){var b,d=[],e=0,f=0;if(j=!c.detectDuplicates,i=!c.sortStable&&a.slice(0),a.sort(z),j){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return i=null,a},e=db.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=db.selectors={cacheLength:50,createPseudo:fb,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ab,bb),a[3]=(a[4]||a[5]||"").replace(ab,bb),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||db.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&db.error(a[0]),a},PSEUDO:function(a){var b,c=!a[5]&&a[2];return V.CHILD.test(a[0])?null:(a[3]&&void 0!==a[4]?a[2]=a[4]:c&&T.test(c)&&(b=ob(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ab,bb).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=w[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&w(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==A&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=db.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),t=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&t){k=q[s]||(q[s]={}),j=k[a]||[],n=j[0]===u&&j[1],m=j[0]===u&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[u,n,m];break}}else if(t&&(j=(b[s]||(b[s]={}))[a])&&j[0]===u)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(t&&((l[s]||(l[s]={}))[a]=[u,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||db.error("unsupported pseudo: "+a);return e[s]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?fb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:fb(function(a){var b=[],c=[],d=g(a.replace(P,"$1"));return d[s]?fb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:fb(function(a){return function(b){return db(a,b).length>0}}),contains:fb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:fb(function(a){return U.test(a||"")||db.error("unsupported lang: "+a),a=a.replace(ab,bb).toLowerCase(),function(b){var c;do if(c=n?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===m},focus:function(a){return a===l.activeElement&&(!l.hasFocus||l.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:lb(function(){return[0]}),last:lb(function(a,b){return[b-1]}),eq:lb(function(a,b,c){return[0>c?c+b:c]}),even:lb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:lb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:lb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:lb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=jb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=kb(b);function nb(){}nb.prototype=d.filters=d.pseudos,d.setFilters=new nb;function ob(a,b){var c,e,f,g,h,i,j,k=x[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=Q.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?db.error(a):x(a,i).slice(0)}function pb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function qb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=v++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[u,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[s]||(b[s]={}),(h=i[d])&&h[0]===u&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function rb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function sb(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function tb(a,b,c,d,e,f){return d&&!d[s]&&(d=tb(d)),e&&!e[s]&&(e=tb(e,f)),fb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||wb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:sb(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=sb(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=sb(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ub(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],i=g||d.relative[" "],j=g?1:0,k=qb(function(a){return a===b},i,!0),l=qb(function(a){return I.call(b,a)>-1},i,!0),m=[function(a,c,d){return!g&&(d||c!==h)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>j;j++)if(c=d.relative[a[j].type])m=[qb(rb(m),c)];else{if(c=d.filter[a[j].type].apply(null,a[j].matches),c[s]){for(e=++j;f>e;e++)if(d.relative[a[e].type])break;return tb(j>1&&rb(m),j>1&&pb(a.slice(0,j-1).concat({value:" "===a[j-2].type?"*":""})).replace(P,"$1"),c,e>j&&ub(a.slice(j,e)),f>e&&ub(a=a.slice(e)),f>e&&pb(a))}m.push(c)}return rb(m)}function vb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,i,j,k){var m,n,o,p=0,q="0",r=f&&[],s=[],t=h,v=f||e&&d.find.TAG("*",k),w=u+=null==t?1:Math.random()||.1,x=v.length;for(k&&(h=g!==l&&g);q!==x&&null!=(m=v[q]);q++){if(e&&m){n=0;while(o=a[n++])if(o(m,g,i)){j.push(m);break}k&&(u=w)}c&&((m=!o&&m)&&p--,f&&r.push(m))}if(p+=q,c&&q!==p){n=0;while(o=b[n++])o(r,s,g,i);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=E.call(j));s=sb(s)}G.apply(j,s),k&&!f&&s.length>0&&p+b.length>1&&db.uniqueSort(j)}return k&&(u=w,h=t),r};return c?fb(f):f}g=db.compile=function(a,b){var c,d=[],e=[],f=y[a+" "];if(!f){b||(b=ob(a)),c=b.length;while(c--)f=ub(b[c]),f[s]?d.push(f):e.push(f);f=y(a,vb(e,d))}return f};function wb(a,b,c){for(var d=0,e=b.length;e>d;d++)db(a,b[d],c);return c}function xb(a,b,e,f){var h,i,j,k,l,m=ob(a);if(!f&&1===m.length){if(i=m[0]=m[0].slice(0),i.length>2&&"ID"===(j=i[0]).type&&c.getById&&9===b.nodeType&&n&&d.relative[i[1].type]){if(b=(d.find.ID(j.matches[0].replace(ab,bb),b)||[])[0],!b)return e;a=a.slice(i.shift().value.length)}h=V.needsContext.test(a)?0:i.length;while(h--){if(j=i[h],d.relative[k=j.type])break;if((l=d.find[k])&&(f=l(j.matches[0].replace(ab,bb),$.test(i[0].type)&&mb(b.parentNode)||b))){if(i.splice(h,1),a=f.length&&pb(i),!a)return G.apply(e,f),e;break}}}return g(a,m)(f,b,!n,e,$.test(a)&&mb(b.parentNode)||b),e}return c.sortStable=s.split("").sort(z).join("")===s,c.detectDuplicates=!!j,k(),c.sortDetached=gb(function(a){return 1&a.compareDocumentPosition(l.createElement("div"))}),gb(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||hb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&gb(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||hb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),gb(function(a){return null==a.getAttribute("disabled")})||hb(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),db}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=a.document,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,B=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:A.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:z,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=z.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return y.find(a);this.length=1,this[0]=d}return this.context=z,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};B.prototype=n.fn,y=n(z);var C=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!n(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function E(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return E(a,"nextSibling")},prev:function(a){return E(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(D[a]||(e=n.unique(e)),C.test(a)&&(e=e.reverse())),this.pushStack(e)}});var F=/\S+/g,G={};function H(a){var b=G[a]={};return n.each(a.match(F)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?G[a]||H(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&n.each(arguments,function(a,c){var d;while((d=n.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){if(a===!0?!--n.readyWait:!n.isReady){if(!z.body)return setTimeout(n.ready);n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(z,[n]),n.fn.trigger&&n(z).trigger("ready").off("ready"))}}});function J(){z.addEventListener?(z.removeEventListener("DOMContentLoaded",K,!1),a.removeEventListener("load",K,!1)):(z.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(z.addEventListener||"load"===event.type||"complete"===z.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===z.readyState)setTimeout(n.ready);else if(z.addEventListener)z.addEventListener("DOMContentLoaded",K,!1),a.addEventListener("load",K,!1);else{z.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&z.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!n.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}J(),n.ready()}}()}return I.promise(b)};var L="undefined",M;for(M in n(l))break;l.ownLast="0"!==M,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c=z.getElementsByTagName("body")[0];c&&(a=z.createElement("div"),a.style.cssText="border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px",b=z.createElement("div"),c.appendChild(a).appendChild(b),typeof b.style.zoom!==L&&(b.style.cssText="border:0;margin:0;width:1px;padding:1px;display:inline;zoom:1",(l.inlineBlockNeedsLayout=3===b.offsetWidth)&&(c.style.zoom=1)),c.removeChild(a),a=b=null)}),function(){var a=z.createElement("div");if(null==l.deleteExpando){l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}}a=null}(),n.acceptData=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(n.acceptData(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f
    3: }}function S(a,b,c){if(n.acceptData(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d]));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var T=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},W=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},X=/^(?:checkbox|radio)$/i;!function(){var a=z.createDocumentFragment(),b=z.createElement("div"),c=z.createElement("input");if(b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a>",l.leadingWhitespace=3===b.firstChild.nodeType,l.tbody=!b.getElementsByTagName("tbody").length,l.htmlSerialize=!!b.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==z.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,a.appendChild(c),l.appendChecked=c.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,a.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){l.noCloneEvent=!1}),b.cloneNode(!0).click()),null==l.deleteExpando){l.deleteExpando=!0;try{delete b.test}catch(d){l.deleteExpando=!1}}a=b=c=null}(),function(){var b,c,d=z.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),l[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var Y=/^(?:input|select|textarea)$/i,Z=/^key/,$=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,ab=/^([^.]*)(?:\.(.+)|)$/;function bb(){return!0}function cb(){return!1}function db(){try{return z.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof n===L||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(F)||[""],h=b.length;while(h--)f=ab.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(F)||[""],j=b.length;while(j--)if(h=ab.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,m,o=[d||z],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||z,3!==d.nodeType&&8!==d.nodeType&&!_.test(p+n.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[n.expando]?b:new n.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),k=n.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!n.isWindow(d)){for(i=k.delegateType||p,_.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||z)&&o.push(l.defaultView||l.parentWindow||a)}m=0;while((h=o[m++])&&!b.isPropagationStopped())b.type=m>1?i:k.bindType||p,f=(n._data(h,"events")||{})[b.type]&&n._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&n.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&n.acceptData(d)&&g&&d[p]&&!n.isWindow(d)){l=d[g],l&&(d[g]=null),n.event.triggered=p;try{d[p]()}catch(r){}n.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((n.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?n(c,this).index(i)>=0:n.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=$.test(e)?this.mouseHooks:Z.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||z),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||z,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==db()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===db()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=z.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===L&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&(a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault())?bb:cb):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:cb,isPropagationStopped:cb,isImmediatePropagationStopped:cb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=bb,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=bb,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submitBubbles||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?b.form:void 0;c&&!n._data(c,"submitBubbles")&&(n.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),n._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.changeBubbles||(n.event.special.change={setup:function(){return Y.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),n.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),n.event.simulate("change",this,a,!0)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;Y.test(b.nodeName)&&!n._data(b,"changeBubbles")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a,!0)}),n._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!Y.test(this.nodeName)}}),l.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=cb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return n().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=cb),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});function eb(a){var b=fb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var fb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",gb=/ jQuery\d+="(?:null|\d+)"/g,hb=new RegExp("<(?:"+fb+")[\\s/>]","i"),ib=/^\s+/,jb=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,kb=/<([\w:]+)/,lb=/<tbody/i,mb=/<|&#?\w+;/,nb=/<(?:script|style|link)/i,ob=/checked\s*(?:[^=]|=\s*.checked.)/i,pb=/^$|\/(?:java|ecma)script/i,qb=/^true\/(.*)/,rb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,sb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},tb=eb(z),ub=tb.appendChild(z.createElement("div"));sb.optgroup=sb.option,sb.tbody=sb.tfoot=sb.colgroup=sb.caption=sb.thead,sb.th=sb.td;function vb(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==L?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==L?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,vb(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function wb(a){X.test(a.type)&&(a.defaultChecked=a.checked)}function xb(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function yb(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function zb(a){var b=qb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Ab(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}function Bb(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Cb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(yb(b).text=a.text,zb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&X.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}n.extend({clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!hb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(ub.innerHTML=a.outerHTML,ub.removeChild(f=ub.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=vb(f),h=vb(a),g=0;null!=(e=h[g]);++g)d[g]&&Cb(e,d[g]);if(b)if(c)for(h=h||vb(a),d=d||vb(f),g=0;null!=(e=h[g]);g++)Bb(e,d[g]);else Bb(a,f);return d=vb(f,"script"),d.length>0&&Ab(d,!i&&vb(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k,m=a.length,o=eb(b),p=[],q=0;m>q;q++)if(f=a[q],f||0===f)if("object"===n.type(f))n.merge(p,f.nodeType?[f]:f);else if(mb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(kb.exec(f)||["",""])[1].toLowerCase(),k=sb[i]||sb._default,h.innerHTML=k[1]+f.replace(jb,"<$1></$2>")+k[2],e=k[0];while(e--)h=h.lastChild;if(!l.leadingWhitespace&&ib.test(f)&&p.push(b.createTextNode(ib.exec(f)[0])),!l.tbody){f="table"!==i||lb.test(f)?"<table>"!==k[1]||lb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)n.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}n.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),l.appendChecked||n.grep(vb(p,"input"),wb),q=0;while(f=p[q++])if((!d||-1===n.inArray(f,d))&&(g=n.contains(f.ownerDocument,f),h=vb(o.appendChild(f),"script"),g&&Ab(h),c)){e=0;while(f=h[e++])pb.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.deleteExpando,m=n.event.special;null!=(d=a[h]);h++)if((b||n.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k?delete d[i]:typeof d.removeAttribute!==L?d.removeAttribute(i):d[i]=null,c.push(f))}}}),n.fn.extend({text:function(a){return W(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||z).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(vb(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&Ab(vb(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(vb(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return W(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(gb,""):void 0;if(!("string"!=typeof a||nb.test(a)||!l.htmlSerialize&&hb.test(a)||!l.leadingWhitespace&&ib.test(a)||sb[(kb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(jb,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(vb(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(vb(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,k=this.length,m=this,o=k-1,p=a[0],q=n.isFunction(p);if(q||k>1&&"string"==typeof p&&!l.checkClone&&ob.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(k&&(i=n.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=n.map(vb(i,"script"),yb),f=g.length;k>j;j++)d=i,j!==o&&(d=n.clone(d,!0,!0),f&&n.merge(g,vb(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,n.map(g,zb),j=0;f>j;j++)d=g[j],pb.test(d.type||"")&&!n._data(d,"globalEval")&&n.contains(h,d)&&(d.src?n._evalUrl&&n._evalUrl(d.src):n.globalEval((d.text||d.textContent||d.innerHTML||"").replace(rb,"")));i=c=null}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],g=n(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Db,Eb={};function Fb(b,c){var d=n(c.createElement(b)).appendTo(c.body),e=a.getDefaultComputedStyle?a.getDefaultComputedStyle(d[0]).display:n.css(d[0],"display");return d.detach(),e}function Gb(a){var b=z,c=Eb[a];return c||(c=Fb(a,b),"none"!==c&&c||(Db=(Db||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Db[0].contentWindow||Db[0].contentDocument).document,b.write(),b.close(),c=Fb(a,b),Db.detach()),Eb[a]=c),c}!function(){var a,b,c=z.createElement("div"),d="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],a.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(a.style.opacity),l.cssFloat=!!a.style.cssFloat,c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===c.style.backgroundClip,a=c=null,l.shrinkWrapBlocks=function(){var a,c,e,f;if(null==b){if(a=z.getElementsByTagName("body")[0],!a)return;f="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",c=z.createElement("div"),e=z.createElement("div"),a.appendChild(c).appendChild(e),b=!1,typeof e.style.zoom!==L&&(e.style.cssText=d+";width:1px;padding:1px;zoom:1",e.innerHTML="<div></div>",e.firstChild.style.width="5px",b=3!==e.offsetWidth),a.removeChild(c),a=c=e=null}return b}}();var Hb=/^margin/,Ib=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Jb,Kb,Lb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Jb=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),Ib.test(g)&&Hb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):z.documentElement.currentStyle&&(Jb=function(a){return a.currentStyle},Kb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Jb(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Ib.test(g)&&!Lb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Mb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h=z.createElement("div"),i="border:0;width:0;height:0;position:absolute;top:0;left:-9999px",j="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;padding:0;margin:0;border:0";h.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",b=h.getElementsByTagName("a")[0],b.style.cssText="float:left;opacity:.5",l.opacity=/^0.5/.test(b.style.opacity),l.cssFloat=!!b.style.cssFloat,h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,b=h=null,n.extend(l,{reliableHiddenOffsets:function(){if(null!=c)return c;var a,b,d,e=z.createElement("div"),f=z.getElementsByTagName("body")[0];if(f)return e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=z.createElement("div"),a.style.cssText=i,f.appendChild(a).appendChild(e),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",b=e.getElementsByTagName("td"),b[0].style.cssText="padding:0;margin:0;border:0;display:none",d=0===b[0].offsetHeight,b[0].style.display="",b[1].style.display="none",c=d&&0===b[0].offsetHeight,f.removeChild(a),e=f=null,c},boxSizing:function(){return null==d&&k(),d},boxSizingReliable:function(){return null==e&&k(),e},pixelPosition:function(){return null==f&&k(),f},reliableMarginRight:function(){var b,c,d,e;if(null==g&&a.getComputedStyle){if(b=z.getElementsByTagName("body")[0],!b)return;c=z.createElement("div"),d=z.createElement("div"),c.style.cssText=i,b.appendChild(c).appendChild(d),e=d.appendChild(z.createElement("div")),e.style.cssText=d.style.cssText=j,e.style.marginRight=e.style.width="0",d.style.width="1px",g=!parseFloat((a.getComputedStyle(e,null)||{}).marginRight),b.removeChild(c)}return g}});function k(){var b,c,h=z.getElementsByTagName("body")[0];h&&(b=z.createElement("div"),c=z.createElement("div"),b.style.cssText=i,h.appendChild(b).appendChild(c),c.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;display:block;padding:1px;border:1px;width:4px;margin-top:1%;top:1%",n.swap(h,null!=h.style.zoom?{zoom:1}:{},function(){d=4===c.offsetWidth}),e=!0,f=!1,g=!0,a.getComputedStyle&&(f="1%"!==(a.getComputedStyle(c,null)||{}).top,e="4px"===(a.getComputedStyle(c,null)||{width:"4px"}).width),h.removeChild(b),c=h=null)}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Nb=/alpha\([^)]*\)/i,Ob=/opacity\s*=\s*([^)]*)/,Pb=/^(none|table(?!-c[ea]).+)/,Qb=new RegExp("^("+T+")(.*)$","i"),Rb=new RegExp("^([+-])=("+T+")","i"),Sb={position:"absolute",visibility:"hidden",display:"block"},Tb={letterSpacing:0,fontWeight:400},Ub=["Webkit","O","Moz","ms"];function Vb(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Ub.length;while(e--)if(b=Ub[e]+c,b in a)return b;return d}function Wb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=n._data(d,"olddisplay",Gb(d.nodeName)))):f[g]||(e=V(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Xb(a,b,c){var d=Qb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Yb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Zb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Jb(a),g=l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Kb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ib.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Yb(a,b,c||(g?"border":"content"),d,f)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Kb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=Vb(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Rb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]="",i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Vb(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Kb(a,b,d)),"normal"===f&&b in Tb&&(f=Tb[b]),""===c||c?(e=parseFloat(f),c===!0||n.isNumeric(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?0===a.offsetWidth&&Pb.test(n.css(a,"display"))?n.swap(a,Sb,function(){return Zb(a,b,d)}):Zb(a,b,d):void 0},set:function(a,c,d){var e=d&&Jb(a);return Xb(a,c,d?Yb(a,b,d,l.boxSizing()&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Ob.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Nb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Nb.test(f)?f.replace(Nb,e):f+" "+e)}}),n.cssHooks.marginRight=Mb(l.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},Kb,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Hb.test(a)||(n.cssHooks[a+b].set=Xb)}),n.fn.extend({css:function(a,b){return W(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Jb(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)
    4: },a,b,arguments.length>1)},show:function(){return Wb(this,!0)},hide:function(){return Wb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function $b(a,b,c,d,e){return new $b.prototype.init(a,b,c,d,e)}n.Tween=$b,$b.prototype={constructor:$b,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=$b.propHooks[this.prop];return a&&a.get?a.get(this):$b.propHooks._default.get(this)},run:function(a){var b,c=$b.propHooks[this.prop];return this.pos=b=this.options.duration?n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):$b.propHooks._default.set(this),this}},$b.prototype.init.prototype=$b.prototype,$b.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},$b.propHooks.scrollTop=$b.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=$b.prototype.init,n.fx.step={};var _b,ac,bc=/^(?:toggle|show|hide)$/,cc=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),dc=/queueHooks$/,ec=[jc],fc={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=cc.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&cc.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function gc(){return setTimeout(function(){_b=void 0}),_b=n.now()}function hc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=U[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function ic(a,b,c){for(var d,e=(fc[b]||[]).concat(fc["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function jc(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&V(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k=Gb(a.nodeName),"none"===j&&(j=k),"inline"===j&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==k?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],bc.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}if(!n.isEmptyObject(o)){r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=ic(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function kc(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function lc(a,b,c){var d,e,f=0,g=ec.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=_b||gc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:_b||gc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(kc(k,j.opts.specialEasing);g>f;f++)if(d=ec[f].call(j,a,k,j.opts))return d;return n.map(k,ic,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(lc,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],fc[c]=fc[c]||[],fc[c].unshift(b)},prefilter:function(a,b){b?ec.unshift(a):ec.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=lc(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&dc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(hc(b,!0),a,d,e)}}),n.each({slideDown:hc("show"),slideUp:hc("hide"),slideToggle:hc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(_b=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),_b=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ac||(ac=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(ac),ac=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e=z.createElement("div");e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=e.getElementsByTagName("a")[0],c=z.createElement("select"),d=c.appendChild(z.createElement("option")),b=e.getElementsByTagName("input")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==e.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=d.selected,l.enctype=!!z.createElement("form").enctype,c.disabled=!0,l.optDisabled=!d.disabled,b=z.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value,a=b=c=d=e=null}();var mc=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(mc,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.text(a)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(l.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var nc,oc,pc=n.expr.attrHandle,qc=/^(?:checked|selected)$/i,rc=l.getSetAttribute,sc=l.input;n.fn.extend({attr:function(a,b){return W(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===L?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?oc:nc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(F);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?sc&&rc||!qc.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(rc?c:d)},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),oc={set:function(a,b,c){return b===!1?n.removeAttr(a,c):sc&&rc||!qc.test(c)?a.setAttribute(!rc&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=pc[b]||n.find.attr;pc[b]=sc&&rc||!qc.test(b)?function(a,b,d){var e,f;return d||(f=pc[b],pc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,pc[b]=f),e}:function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),sc&&rc||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):nc&&nc.set(a,b,c)}}),rc||(nc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},pc.id=pc.name=pc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:nc.set},n.attrHooks.contenteditable={set:function(a,b,c){nc.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var tc=/^(?:input|select|textarea|button|object)$/i,uc=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return W(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):tc.test(a.nodeName)||uc.test(a.nodeName)&&a.href?0:-1}}}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var vc=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(F)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(vc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(F)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===L||"boolean"===c)&&(this.className&&n._data(this,"__className__",this.className),this.className=this.className||a===!1?"":n._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(vc," ").indexOf(b)>=0)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var wc=n.now(),xc=/\?/,yc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(yc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var zc,Ac,Bc=/#.*$/,Cc=/([?&])_=[^&]*/,Dc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ec=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Fc=/^(?:GET|HEAD)$/,Gc=/^\/\//,Hc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Ic={},Jc={},Kc="*/".concat("*");try{Ac=location.href}catch(Lc){Ac=z.createElement("a"),Ac.href="",Ac=Ac.href}zc=Hc.exec(Ac.toLowerCase())||[];function Mc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(F)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Nc(a,b,c,d){var e={},f=a===Jc;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Oc(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Pc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Qc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ac,type:"GET",isLocal:Ec.test(zc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Kc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Oc(Oc(a,n.ajaxSettings),b):Oc(n.ajaxSettings,a)},ajaxPrefilter:Mc(Ic),ajaxTransport:Mc(Jc),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Dc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||Ac)+"").replace(Bc,"").replace(Gc,zc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(F)||[""],null==k.crossDomain&&(c=Hc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===zc[1]&&c[2]===zc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(zc[3]||("http:"===zc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),Nc(Ic,k,b,v),2===t)return v;h=k.global,h&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Fc.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(xc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Cc.test(e)?e.replace(Cc,"$1_="+wc++):e+(xc.test(e)?"&":"?")+"_="+wc++)),k.ifModified&&(n.lastModified[e]&&v.setRequestHeader("If-Modified-Since",n.lastModified[e]),n.etag[e]&&v.setRequestHeader("If-None-Match",n.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Kc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Nc(Jc,k,b,v)){v.readyState=1,h&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Pc(k,v,c)),u=Qc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(n.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!l.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||n.css(a,"display"))},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var Rc=/%20/g,Sc=/\[\]$/,Tc=/\r?\n/g,Uc=/^(?:submit|button|image|reset|file)$/i,Vc=/^(?:input|select|textarea|keygen)/i;function Wc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Sc.test(a)?d(a,e):Wc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Wc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Wc(c,a[c],b,e);return d.join("&").replace(Rc,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Vc.test(this.nodeName)&&!Uc.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Tc,"\r\n")}}):{name:b.name,value:c.replace(Tc,"\r\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&$c()||_c()}:$c;var Xc=0,Yc={},Zc=n.ajaxSettings.xhr();a.ActiveXObject&&n(a).on("unload",function(){for(var a in Yc)Yc[a](void 0,!0)}),l.cors=!!Zc&&"withCredentials"in Zc,Zc=l.ajax=!!Zc,Zc&&n.ajaxTransport(function(a){if(!a.crossDomain||l.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Xc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Yc[g],b=void 0,f.onreadystatechange=n.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Yc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function $c(){try{return new a.XMLHttpRequest}catch(b){}}function _c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=z.head||n("head")[0]||z.documentElement;return{send:function(d,e){b=z.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var ad=[],bd=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=ad.pop()||n.expando+"_"+wc++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(bd.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&bd.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(bd,"$1"+e):b.jsonp!==!1&&(b.url+=(xc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,ad.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||z;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var cd=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&cd)return cd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=a.slice(h,a.length),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&n.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var dd=a.document.documentElement;function ed(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?(typeof e.getBoundingClientRect!==L&&(d=e.getBoundingClientRect()),c=ed(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||dd;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||dd})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return W(this,function(a,d,e){var f=ed(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Mb(l.pixelPosition,function(a,c){return c?(c=Kb(a,b),Ib.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return W(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var fd=a.jQuery,gd=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=gd),b&&a.jQuery===n&&(a.jQuery=fd),n},typeof b===L&&(a.jQuery=a.$=n),n});
    5  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-rails-3.1.0/vendor/assets/javascripts/jquery.min.map:
    1: {"version":3,"file":"jquery.min.js","sources":["jquery.js"],"names":["global","factory","module","exports","document","w","Error","window","this","noGlobal","deletedIds","slice","concat","push","indexOf","class2type","toString","hasOwn","hasOwnProperty","trim","support","version","jQuery","selector","context","fn","init","rtrim","rmsPrefix","rdashAlpha","fcamelCase","all","letter","toUpperCase","prototype","jquery","constructor","length","toArray","call","get","num","pushStack","elems","ret","merge","prevObject","each","callback","args","map","elem","i","apply","arguments","first","eq","last","len","j","end","sort","splice","extend","src","copyIsArray","copy","name","options","clone","target","deep","isFunction","isPlainObject","isArray","undefined","expando","Math","random","replace","isReady","error","msg","noop","obj","type","Array","isWindow","isNumeric","parseFloat","isEmptyObject","key","nodeType","e","ownLast","globalEval","data","execScript","camelCase","string","nodeName","toLowerCase","value","isArraylike","text","makeArray","arr","results","Object","inArray","max","second","grep","invert","callbackInverse","matches","callbackExpect","arg","guid","proxy","tmp","now","Date","split","Sizzle","Expr","getText","isXML","compile","outermostContext","sortInput","hasDuplicate","setDocument","docElem","documentIsHTML","rbuggyQSA","rbuggyMatches","contains","preferredDoc","dirruns","done","classCache","createCache","tokenCache","compilerCache","sortOrder","a","b","strundefined","MAX_NEGATIVE","pop","push_native","booleans","whitespace","characterEncoding","identifier","attributes","pseudos","RegExp","rcomma","rcombinators","rattributeQuotes","rpseudo","ridentifier","matchExpr","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","rinputs","rheader","rnative","rquickExpr","rsibling","rescape","runescape","funescape","_","escaped","escapedWhitespace","high","String","fromCharCode","childNodes","els","seed","match","m","groups","old","nid","newContext","newSelector","ownerDocument","exec","getElementById","parentNode","id","getElementsByTagName","getElementsByClassName","qsa","test","tokenize","getAttribute","setAttribute","toSelector","testContext","join","querySelectorAll","qsaError","removeAttribute","select","keys","cache","cacheLength","shift","markFunction","assert","div","createElement","removeChild","addHandle","attrs","handler","attrHandle","siblingCheck","cur","diff","sourceIndex","nextSibling","createInputPseudo","createButtonPseudo","createPositionalPseudo","argument","matchIndexes","documentElement","node","hasCompare","doc","parent","defaultView","top","addEventListener","attachEvent","className","appendChild","createComment","innerHTML","firstChild","getById","getElementsByName","find","filter","attrId","getAttributeNode","tag","input","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","adown","bup","compare","sortDetached","aup","ap","bp","unshift","expr","elements","attr","val","specified","uniqueSort","duplicates","detectDuplicates","sortStable","textContent","nodeValue","selectors","createPseudo","relative",">","dir"," ","+","~","preFilter","excess","unquoted","nodeNameSelector","pattern","operator","check","result","what","simple","forward","ofType","xml","outerCache","nodeIndex","start","useCache","lastChild","pseudo","setFilters","idx","matched","not","matcher","unmatched","has","innerText","lang","elemLang","hash","location","root","focus","activeElement","hasFocus","href","tabIndex","enabled","disabled","checked","selected","selectedIndex","empty","header","button","even","odd","lt","gt","radio","checkbox","file","password","image","submit","reset","filters","parseOnly","tokens","soFar","preFilters","cached","addCombinator","combinator","base","checkNonElements","doneName","oldCache","newCache","elementMatcher","matchers","condense","newUnmatched","mapped","setMatcher","postFilter","postFinder","postSelector","temp","preMap","postMap","preexisting","multipleContexts","matcherIn","matcherOut","matcherFromTokens","checkContext","leadingRelative","implicitRelative","matchContext","matchAnyContext","matcherFromGroupMatchers","elementMatchers","setMatchers","bySet","byElement","superMatcher","outermost","matchedCount","setMatched","contextBackup","dirrunsUnique","group","contexts","token","div1","defaultValue","unique","isXMLDoc","rneedsContext","rsingleTag","risSimple","winnow","qualifier","self","is","rootjQuery","charAt","parseHTML","ready","rparentsprev","guaranteedUnique","children","contents","next","prev","until","sibling","n","r","targets","closest","l","pos","index","prevAll","add","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","contentWindow","reverse","rnotwhite","optionsCache","createOptions","object","flag","Callbacks","firing","memory","fired","firingLength","firingIndex","firingStart","list","stack","once","fire","stopOnFalse","disable","remove","lock","locked","fireWith","Deferred","func","tuples","state","promise","always","deferred","fail","then","fns","newDefer","tuple","returned","resolve","reject","progress","notify","pipe","stateString","when","subordinate","resolveValues","remaining","updateFunc","values","progressValues","notifyWith","resolveWith","progressContexts","resolveContexts","readyList","readyWait","holdReady","hold","wait","body","setTimeout","trigger","off","detach","removeEventListener","completed","detachEvent","event","readyState","frameElement","doScroll","doScrollCheck","inlineBlockNeedsLayout","container","style","cssText","zoom","offsetWidth","deleteExpando","acceptData","noData","rbrace","rmultiDash","dataAttr","parseJSON","isEmptyDataObject","internalData","pvt","thisCache","internalKey","isNode","toJSON","internalRemoveData","cleanData","applet ","embed ","object ","hasData","removeData","_data","_removeData","queue","dequeue","startLength","hooks","_queueHooks","stop","setter","clearQueue","count","defer","pnum","source","cssExpand","isHidden","el","css","access","chainable","emptyGet","raw","bulk","rcheckableType","fragment","createDocumentFragment","leadingWhitespace","tbody","htmlSerialize","html5Clone","cloneNode","outerHTML","appendChecked","noCloneChecked","checkClone","noCloneEvent","click","eventName","change","focusin","rformElems","rkeyEvent","rmouseEvent","rfocusMorph","rtypenamespace","returnTrue","returnFalse","safeActiveElement","err","types","events","t","handleObjIn","special","eventHandle","handleObj","handlers","namespaces","origType","elemData","handle","triggered","dispatch","delegateType","bindType","namespace","delegateCount","setup","mappedTypes","origCount","teardown","removeEvent","onlyHandlers","ontype","bubbleType","eventPath","Event","isTrigger","namespace_re","noBubble","parentWindow","isPropagationStopped","preventDefault","isDefaultPrevented","_default","fix","handlerQueue","delegateTarget","preDispatch","currentTarget","isImmediatePropagationStopped","stopPropagation","postDispatch","sel","prop","originalEvent","fixHook","fixHooks","mouseHooks","keyHooks","props","srcElement","metaKey","original","which","charCode","keyCode","eventDoc","fromElement","pageX","clientX","scrollLeft","clientLeft","pageY","clientY","scrollTop","clientTop","relatedTarget","toElement","load","blur","beforeunload","returnValue","simulate","bubble","isSimulated","defaultPrevented","getPreventDefault","timeStamp","cancelBubble","stopImmediatePropagation","mouseenter","mouseleave","orig","related","submitBubbles","form","_submit_bubble","changeBubbles","propertyName","_just_changed","focusinBubbles","attaches","on","one","origFn","triggerHandler","createSafeFragment","nodeNames","safeFrag","rinlinejQuery","rnoshimcache","rleadingWhitespace","rxhtmlTag","rtagName","rtbody","rhtml","rnoInnerhtml","rchecked","rscriptType","rscriptTypeMasked","rcleanScript","wrapMap","option","legend","area","param","thead","tr","col","td","safeFragment","fragmentDiv","optgroup","tfoot","colgroup","caption","th","getAll","found","fixDefaultChecked","defaultChecked","manipulationTarget","content","disableScript","restoreScript","setGlobalEval","refElements","cloneCopyEvent","dest","oldData","curData","fixCloneNodeIssues","defaultSelected","dataAndEvents","deepDataAndEvents","destElements","srcElements","inPage","buildFragment","scripts","selection","wrap","safe","nodes","createTextNode","append","domManip","prepend","insertBefore","before","after","keepData","html","replaceWith","replaceChild","hasScripts","set","iNoClone","_evalUrl","appendTo","prependTo","insertAfter","replaceAll","insert","iframe","elemdisplay","actualDisplay","display","getDefaultComputedStyle","defaultDisplay","write","close","shrinkWrapBlocksVal","divReset","opacity","cssFloat","backgroundClip","clearCloneStyle","shrinkWrapBlocks","containerStyles","width","rmargin","rnumnonpx","getStyles","curCSS","rposition","getComputedStyle","computed","minWidth","maxWidth","getPropertyValue","currentStyle","left","rs","rsLeft","runtimeStyle","pixelLeft","addGetHookIf","conditionFn","hookFn","condition","reliableHiddenOffsetsVal","boxSizingVal","boxSizingReliableVal","pixelPositionVal","reliableMarginRightVal","reliableHiddenOffsets","tds","isSupported","offsetHeight","boxSizing","computeStyleTests","boxSizingReliable","pixelPosition","reliableMarginRight","marginDiv","marginRight","swap","ralpha","ropacity","rdisplayswap","rnumsplit","rrelNum","cssShow","position","visibility","cssNormalTransform","letterSpacing","fontWeight","cssPrefixes","vendorPropName","capName","origName","showHide","show","hidden","setPositiveNumber","subtract","augmentWidthOrHeight","extra","isBorderBox","styles","getWidthOrHeight","valueIsBorderBox","cssHooks","cssNumber","columnCount","fillOpacity","lineHeight","order","orphans","widows","zIndex","cssProps","float","$1","margin","padding","border","prefix","suffix","expand","expanded","parts","hide","toggle","Tween","easing","unit","propHooks","run","percent","eased","duration","step","tween","fx","linear","p","swing","cos","PI","fxNow","timerId","rfxtypes","rfxnum","rrun","animationPrefilters","defaultPrefilter","tweeners","*","createTween","scale","maxIterations","createFxNow","genFx","includeWidth","height","animation","collection","opts","oldfire","dDisplay","anim","dataShow","unqueued","overflow","overflowX","overflowY","propFilter","specialEasing","Animation","properties","stopped","tick","currentTime","startTime","tweens","originalProperties","originalOptions","gotoEnd","rejectWith","timer","complete","tweener","prefilter","speed","opt","speeds","fadeTo","to","animate","optall","doAnimation","finish","stopQueue","timers","cssFn","slideDown","slideUp","slideToggle","fadeIn","fadeOut","fadeToggle","interval","setInterval","clearInterval","slow","fast","delay","time","timeout","clearTimeout","getSetAttribute","hrefNormalized","checkOn","optSelected","enctype","optDisabled","radioValue","rreturn","valHooks","optionSet","scrollHeight","nodeHook","boolHook","ruseDefault","getSetInput","removeAttr","nType","attrHooks","propName","attrNames","propFix","getter","setAttributeNode","createAttribute","coords","contenteditable","rfocusable","rclickable","removeProp","for","class","notxml","tabindex","parseInt","rclass","addClass","classes","clazz","finalValue","proceed","removeClass","toggleClass","stateVal","classNames","hasClass","hover","fnOver","fnOut","bind","unbind","delegate","undelegate","nonce","rquery","rvalidtokens","JSON","parse","requireNonComma","depth","str","comma","open","Function","parseXML","DOMParser","parseFromString","ActiveXObject","async","loadXML","ajaxLocParts","ajaxLocation","rhash","rts","rheaders","rlocalProtocol","rnoContent","rprotocol","rurl","prefilters","transports","allTypes","addToPrefiltersOrTransports","structure","dataTypeExpression","dataType","dataTypes","inspectPrefiltersOrTransports","jqXHR","inspected","seekingTransport","inspect","prefilterOrFactory","dataTypeOrTransport","ajaxExtend","flatOptions","ajaxSettings","ajaxHandleResponses","s","responses","firstDataType","ct","finalDataType","mimeType","getResponseHeader","converters","ajaxConvert","response","isSuccess","conv2","current","conv","responseFields","dataFilter","active","lastModified","etag","url","isLocal","processData","contentType","accepts","json","* text","text html","text json","text xml","ajaxSetup","settings","ajaxPrefilter","ajaxTransport","ajax","cacheURL","responseHeadersString","timeoutTimer","fireGlobals","transport","responseHeaders","callbackContext","globalEventContext","completeDeferred","statusCode","requestHeaders","requestHeadersNames","strAbort","getAllResponseHeaders","setRequestHeader","lname","overrideMimeType","code","status","abort","statusText","finalText","success","method","crossDomain","traditional","hasContent","ifModified","headers","beforeSend","send","nativeStatusText","modified","getJSON","getScript","throws","wrapAll","wrapInner","unwrap","visible","r20","rbracket","rCRLF","rsubmitterTypes","rsubmittable","buildParams","v","encodeURIComponent","serialize","serializeArray","xhr","createStandardXHR","createActiveXHR","xhrId","xhrCallbacks","xhrSupported","cors","username","xhrFields","isAbort","onreadystatechange","responseText","XMLHttpRequest","script","text script","head","scriptCharset","charset","onload","oldCallbacks","rjsonp","jsonp","jsonpCallback","originalSettings","callbackName","overwritten","responseContainer","jsonProp","keepScripts","parsed","_load","params","animated","getWindow","offset","setOffset","curPosition","curLeft","curCSSTop","curTop","curOffset","curCSSLeft","calculatePosition","curElem","using","win","box","getBoundingClientRect","pageYOffset","pageXOffset","offsetParent","parentOffset","scrollTo","Height","Width","defaultExtra","funcName","size","andSelf","define","amd","_jQuery","_$","$","noConflict"],"mappings":"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"}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-rails-3.1.0/vendor/assets/javascripts/jquery_ujs.js:
   58      },
   59  
   60:     // making sure that all forms have actual up-to-date token(cached forms contain old one)
   61      refreshCSRFTokens: function(){
   62        var csrfToken = $('meta[name=csrf-token]').attr('content');
   ..
  185  
  186      /* Disables form elements:
  187:       - Caches element value in 'ujs:enable-with' data store
  188        - Replaces element text with value of 'data-disable-with' attribute
  189        - Sets disabled property to true
  ...
  199  
  200      /* Re-enables disabled form elements:
  201:       - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
  202        - Sets disabled property to false
  203      */
  ...
  281        if (element.data('ujs:enable-with') !== undefined) {
  282          element.html(element.data('ujs:enable-with')); // set to old enabled state
  283:         element.removeData('ujs:enable-with'); // clean up cache
  284        }
  285        element.unbind('click.railsDisable'); // enable element

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.draggable.js:
  113  		this.helper.addClass("ui-draggable-dragging");
  114  
  115: 		//Cache the helper size
  116: 		this._cacheHelperProportions();
  117  
  118  		//If ddmanager is used for droppables, set the global draggable
  ...
  126  		 */
  127  
  128: 		//Cache the margins of the original element
  129: 		this._cacheMargins();
  130  
  131  		//Store the helper's css position
  ...
  142  		};
  143  
  144: 		//Reset scroll cache
  145  		this.offset.scroll = false;
  146  
  ...
  171  		}
  172  
  173: 		//Recache the helper size
  174: 		this._cacheHelperProportions();
  175  
  176  		//Prepare the droppable offsets
  ...
  191  
  192  	_mouseDrag: function(event, noPropagation) {
  193: 		// reset any necessary cached properties (see #5009)
  194  		if ( this.offsetParentCssPosition === "fixed" ) {
  195  			this.offset.parent = this._getParentOffset();
  ...
  330  	_getParentOffset: function() {
  331  
  332: 		//Get the offsetParent and cache its position
  333  		var po = this.offsetParent.offset();
  334  
  ...
  370  	},
  371  
  372: 	_cacheMargins: function() {
  373  		this.margins = {
  374  			left: (parseInt(this.element.css("marginLeft"),10) || 0),
  ...
  379  	},
  380  
  381: 	_cacheHelperProportions: function() {
  382  		this.helperProportions = {
  383  			width: this.helper.outerWidth(),
  ...
  452  			scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;
  453  
  454: 		//Cache the scroll
  455  		if (!this.offset.scroll) {
  456  			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
  ...
  482  			pageY = event.pageY;
  483  
  484: 		//Cache the scroll
  485  		if (!this.offset.scroll) {
  486  			this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
  ...
  599  					shouldRevert: sortable.options.revert
  600  				});
  601: 				sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
  602  				sortable._trigger("activate", event, uiSortable);
  603  			}
  ...
  656  			this.instance.offset.click = inst.offset.click;
  657  
  658: 			if(this.instance._intersectsWith(this.instance.containerCache)) {
  659  				innermostIntersecting = true;
  660  				$.each(inst.sortables, function () {
  ...
  663  					this.instance.offset.click = inst.offset.click;
  664  					if (this !== thisSortable &&
  665: 						this.instance._intersectsWith(this.instance.containerCache) &&
  666  						$.contains(thisSortable.instance.element[0], this.instance.element[0])
  667  					) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.effect.js:
  154  support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;
  155  
  156: // define cache name and alpha properties
  157  // for rgba and hsla spaces
  158  each( spaces, function( spaceName, space ) {
  159: 	space.cache = "_" + spaceName;
  160  	space.props.alpha = {
  161  		idx: 3,
  ...
  208  			// if this was an rgba parse the assignment might happen twice
  209  			// oh well....
  210: 			inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
  211  			rgba = inst._rgba = parsed._rgba;
  212  
  ...
  266  			if ( red instanceof color ) {
  267  				each( spaces, function( spaceName, space ) {
  268: 					if ( red[ space.cache ] ) {
  269: 						inst[ space.cache ] = red[ space.cache ].slice();
  270  					}
  271  				});
  272  			} else {
  273  				each( spaces, function( spaceName, space ) {
  274: 					var cache = space.cache;
  275  					each( space.props, function( key, prop ) {
  276  
  277: 						// if the cache doesn't exist, and we know how to convert
  278: 						if ( !inst[ cache ] && space.to ) {
  279  
  280  							// if the value was null, we don't need to copy it
  ...
  283  								return;
  284  							}
  285: 							inst[ cache ] = space.to( inst._rgba );
  286  						}
  287  
  288  						// this is the only case where we allow nulls for ALL properties.
  289  						// call clamp with alwaysAllowEmpty
  290: 						inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
  291  					});
  292  
  293  					// everything defined but alpha?
  294: 					if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
  295  						// use the default of 1
  296: 						inst[ cache ][ 3 ] = 1;
  297  						if ( space.from ) {
  298: 							inst._rgba = space.from( inst[ cache ] );
  299  						}
  300  					}
  ...
  310  
  311  		each( spaces, function( _, space ) {
  312: 			var localCache,
  313: 				isCache = is[ space.cache ];
  314: 			if (isCache) {
  315: 				localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
  316  				each( space.props, function( _, prop ) {
  317: 					if ( isCache[ prop.idx ] != null ) {
  318: 						same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
  319  						return same;
  320  					}
  ...
  329  			inst = this;
  330  		each( spaces, function( spaceName, space ) {
  331: 			if ( inst[ space.cache ] ) {
  332  				used.push( spaceName );
  333  			}
  ...
  340  			space = spaces[ spaceName ],
  341  			startColor = this.alpha() === 0 ? color( "transparent" ) : this,
  342: 			start = startColor[ space.cache ] || space.to( startColor._rgba ),
  343  			result = start.slice();
  344  
  345: 		end = end[ space.cache ];
  346  		each( space.props, function( key, prop ) {
  347  			var index = prop.idx,
  ...
  514  each( spaces, function( spaceName, space ) {
  515  	var props = space.props,
  516: 		cache = space.cache,
  517  		to = space.to,
  518  		from = space.from;
  ...
  521  	color.fn[ spaceName ] = function( value ) {
  522  
  523: 		// generate a cache for this space if it doesn't exist
  524: 		if ( to && !this[ cache ] ) {
  525: 			this[ cache ] = to( this._rgba );
  526  		}
  527  		if ( value === undefined ) {
  528: 			return this[ cache ].slice();
  529  		}
  530  
  ...
  532  			type = jQuery.type( value ),
  533  			arr = ( type === "array" || type === "object" ) ? value : arguments,
  534: 			local = this[ cache ].slice();
  535  
  536  		each( props, function( key, prop ) {
  ...
  544  		if ( from ) {
  545  			ret = color( from( local ) );
  546: 			ret[ cache ] = local;
  547  			return ret;
  548  		} else {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.position.js:
   13  $.ui = $.ui || {};
   14  
   15: var cachedScrollbarWidth,
   16  	max = Math.max,
   17  	abs = Math.abs,
   ..
   67  $.position = {
   68  	scrollbarWidth: function() {
   69: 		if ( cachedScrollbarWidth !== undefined ) {
   70: 			return cachedScrollbarWidth;
   71  		}
   72  		var w1, w2,
   ..
   86  		div.remove();
   87  
   88: 		return (cachedScrollbarWidth = w1 - w2);
   89  	},
   90  	getScrollInfo: function( within ) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.resizable.js:
  345  		data = this._respectSize(data, event);
  346  
  347: 		this._updateCache(data);
  348  
  349  		// plugins callbacks need to be called first
  ...
  454  	},
  455  
  456: 	_updateCache: function(data) {
  457  		this.offset = this.helper.offset();
  458  		if (isNumber(data.left)) {
  ...
  684  
  685  					// propagating resize, and updating values for each animation step
  686: 					that._updateCache(data);
  687  					that._propagate("resize", event);
  688  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.selectable.js:
   45  		this.dragged = false;
   46  
   47: 		// cache selectee children based on filter
   48  		this.refresh = function() {
   49  			selectees = $(that.options.filter, that.element[0]);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.sortable.js:
   73  
   74  		var o = this.options;
   75: 		this.containerCache = {};
   76  		this.element.addClass("ui-sortable");
   77  
   ..
  176  		this.helper = this._createHelper(event);
  177  
  178: 		//Cache the helper size
  179: 		this._cacheHelperProportions();
  180  
  181  		/*
  ...
  184  		 */
  185  
  186: 		//Cache the margins of the original element
  187: 		this._cacheMargins();
  188  
  189  		//Get the next scrolling parent
  ...
  219  		(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
  220  
  221: 		//Cache the former DOM position
  222  		this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };
  223  
  ...
  267  		this._trigger("start", event, this._uiHash());
  268  
  269: 		//Recache the helper size
  270  		if(!this._preserveHelperProportions) {
  271: 			this._cacheHelperProportions();
  272  		}
  273  
  ...
  361  		for (i = this.items.length - 1; i >= 0; i--) {
  362  
  363: 			//Cache variables and intersection, continue if no intersection
  364  			item = this.items[i];
  365  			itemElement = item.item[0];
  ...
  468  			for (var i = this.containers.length - 1; i >= 0; i--){
  469  				this.containers[i]._trigger("deactivate", null, this._uiHash(this));
  470: 				if(this.containers[i].containerCache.over) {
  471  					this.containers[i]._trigger("out", null, this._uiHash(this));
  472: 					this.containers[i].containerCache.over = 0;
  473  				}
  474  			}
  ...
  746  			for (i = this.containers.length - 1; i >= 0; i--){
  747  				p = this.containers[i].element.offset();
  748: 				this.containers[i].containerCache.left = p.left;
  749: 				this.containers[i].containerCache.top = p.top;
  750: 				this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
  751: 				this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
  752  			}
  753  		}
  ...
  826  			}
  827  
  828: 			if(this._intersectsWith(this.containers[i].containerCache)) {
  829  
  830  				// if we've already found a container and it's more "inner" than this, then continue
  ...
  838  			} else {
  839  				// container doesn't intersect. trigger "out" event if necessary
  840: 				if(this.containers[i].containerCache.over) {
  841  					this.containers[i]._trigger("out", event, this._uiHash(this));
  842: 					this.containers[i].containerCache.over = 0;
  843  				}
  844  			}
  ...
  853  		// move the item into the container if it's not there already
  854  		if(this.containers.length === 1) {
  855: 			if (!this.containers[innermostIndex].containerCache.over) {
  856  				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
  857: 				this.containers[innermostIndex].containerCache.over = 1;
  858  			}
  859  		} else {
  ...
  907  
  908  			this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
  909: 			this.containers[innermostIndex].containerCache.over = 1;
  910  		}
  911  
  ...
  962  
  963  
  964: 		//Get the offsetParent and cache its position
  965  		this.offsetParent = this.helper.offsetParent();
  966  		var po = this.offsetParent.offset();
  ...
 1002  	},
 1003  
 1004: 	_cacheMargins: function() {
 1005  		this.margins = {
 1006  			left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
 ....
 1009  	},
 1010  
 1011: 	_cacheHelperProportions: function() {
 1012  		this.helperProportions = {
 1013  			width: this.helper.outerWidth(),
 ....
 1214  				delayedTriggers.push( delayEvent( "deactivate", this, this.containers[ i ] ) );
 1215  			}
 1216: 			if(this.containers[i].containerCache.over) {
 1217  				delayedTriggers.push( delayEvent( "out", this, this.containers[ i ] ) );
 1218: 				this.containers[i].containerCache.over = 0;
 1219  			}
 1220  		}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/app/assets/javascripts/jquery.ui.tooltip.js:
  197  				return;
  198  			}
  199: 			// IE may instantly serve a cached response for ajax requests
  200  			// delay this call to _open so the other call to _open runs first
  201  			that._delay(function() {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/jquery-ui-rails-4.2.1/History.md:
   17  
   18  * Declare image dependencies using `//= depend_on_asset`, to stop the
   19:   Sprockets cache from going stale.
   20  
   21  # 4.1.0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/json-1.8.1/data/prototype.js:
  992    }()) {
  993      function each(iterator) {
  994:       var cache = [];
  995        for (var key in this._object) {
  996          var value = this._object[key];
  997:         if (cache.include(key)) continue;
  998:         cache.push(key);
  999          var pair = [key, value];
 1000          pair.key = key;
 ....
 1557      attributes = attributes || { };
 1558      tagName = tagName.toLowerCase();
 1559:     var cache = Element.cache;
 1560      if (Prototype.Browser.IE && attributes.name) {
 1561        tagName = '<' + tagName + ' name="' + attributes.name + '">';
 ....
 1563        return Element.writeAttribute(document.createElement(tagName), attributes);
 1564      }
 1565:     if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));
 1566:     return Element.writeAttribute(cache[tagName].cloneNode(false), attributes);
 1567    };
 1568    Object.extend(this.Element, element || { });
 1569  }).call(window);
 1570  
 1571: Element.cache = { };
 1572  
 1573  Element.Methods = {
 ....
 2682  
 2683    if (Element.extend.refresh) Element.extend.refresh();
 2684:   Element.cache = { };
 2685  };
 2686  
 ....
 2728          c = Selector.criteria, le, p, m;
 2729  
 2730:     if (Selector._cache[e]) {
 2731:       this.matcher = Selector._cache[e];
 2732        return;
 2733      }
 ....
 2751      this.matcher.push("return h.unique(n);\n}");
 2752      eval(this.matcher.join('\n'));
 2753:     Selector._cache[this.expression] = this.matcher;
 2754    },
 2755  
 ....
 2758          x = Selector.xpath, le, m;
 2759  
 2760:     if (Selector._cache[e]) {
 2761:       this.xpath = Selector._cache[e]; return;
 2762      }
 2763  
 ....
 2776  
 2777      this.xpath = this.matcher.join('');
 2778:     Selector._cache[this.expression] = this.xpath;
 2779    },
 2780  
 ....
 2831  
 2832  Object.extend(Selector, {
 2833:   _cache: { },
 2834  
 2835    xpath: {
 ....
 3698    KEY_INSERT:   45,
 3699  
 3700:   cache: { },
 3701  
 3702    relatedTarget: function(event) {
 ....
 3807  
 3808  Object.extend(Event, (function() {
 3809:   var cache = Event.cache;
 3810  
 3811    function getEventID(element) {
 ....
 3820    }
 3821  
 3822:   function getCacheForID(id) {
 3823:     return cache[id] = cache[id] || { };
 3824    }
 3825  
 3826    function getWrappersForEventName(id, eventName) {
 3827:     var c = getCacheForID(id);
 3828      return c[eventName] = c[eventName] || [];
 3829    }
 ....
 3854  
 3855    function destroyWrapper(id, eventName, handler) {
 3856:     var c = getCacheForID(id);
 3857      if (!c[eventName]) return false;
 3858      c[eventName] = c[eventName].without(findWrapper(id, eventName, handler));
 3859    }
 3860  
 3861:   function destroyCache() {
 3862:     for (var id in cache)
 3863:       for (var eventName in cache[id])
 3864:         cache[id][eventName] = null;
 3865    }
 3866  
 3867    if (window.attachEvent) {
 3868:     window.attachEvent("onunload", destroyCache);
 3869    }
 3870  
 ....
 3897  
 3898        } else if (!eventName) {
 3899:         Object.keys(getCacheForID(id)).each(function(eventName) {
 3900            element.stopObserving(eventName);
 3901          });
 ....
 4044    },
 4045  
 4046:   // caches x/y coordinate pair to use with overlap
 4047    within: function(element, x, y) {
 4048      if (this.includeScrollOffsets)
 ....
 4059  
 4060    withinIncludingScrolloffsets: function(element, x, y) {
 4061:     var offsetcache = Element.cumulativeScrollOffset(element);
 4062  
 4063:     this.xcomp = x + offsetcache[0] - this.deltaX;
 4064:     this.ycomp = y + offsetcache[1] - this.deltaY;
 4065      this.offset = Element.cumulativeOffset(element);
 4066  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/json-1.8.1/java/src/json/ext/RuntimeInfo.java:
   72                      runtimes = new WeakHashMap<Ruby, RuntimeInfo>(1);
   73                  }
   74:                 RuntimeInfo cache = runtimes.get(runtime);
   75:                 if (cache == null) {
   76:                     cache = new RuntimeInfo(runtime);
   77:                     runtimes.put(runtime, cache);
   78                  }
   79:                 return cache;
   80              }
   81          }
   ..
   85          synchronized (RuntimeInfo.class) {
   86              if (runtime1.get() == runtime) return info1;
   87:             RuntimeInfo cache = null;
   88:             if (runtimes != null) cache = runtimes.get(runtime);
   89:             assert cache != null : "Runtime given has not initialized JSON::Ext";
   90:             return cache;
   91          }
   92      }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/kaminari-0.15.1/CHANGELOG.rdoc:
    3  * page_method_name option was not working in 0.15.0 #481 [mauriciopasquier]
    4  
    5: * Use the mongoid criteria #length method to cache the count of the collection
    6  per criteria #484 [camallen]
    7  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/kgio-2.8.1/ChangeLog:
 1335         * Kgio.try* singleton methods added for working with non-Kgio
 1336           enhanced objects.  No more needing to use Object#extend
 1337:          and blowing away your method cache to make existing I/O
 1338           objects kinder and gentler.
 1339         

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/kgio-2.8.1/NEWS:
  166    * Kgio.try* singleton methods added for working with non-Kgio
  167      enhanced objects.  No more needing to use Object#extend
  168:     and blowing away your method cache to make existing I/O
  169      objects kinder and gentler.
  170  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/kgio-2.8.1/setup.rb:
  793      @ardir = File.expand_path(ardir_root)
  794      @config = config
  795:     # cache
  796      @valid_task_re = nil
  797    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/libv8-3.16.14.3-x86_64-linux/vendor/v8/include/v8.h:
 1898     * Notification that the embedder has changed the time zone,
 1899     * daylight savings time, or other date / time configuration
 1900:    * parameters.  V8 keeps a cache of various values used for
 1901     * date / time computation.  This notification will reset
 1902:    * those cached values for the current context so that date /
 1903     * time configuration changes would be reflected in the Date
 1904     * object.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/address_lists.rb:
   26      def _nt_primary_address
   27        start_index = index
   28:       if node_cache[:primary_address].has_key?(index)
   29:         cached = node_cache[:primary_address][index]
   30:         if cached
   31:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   32:           @index = cached.interval.end
   33          end
   34:         return cached
   35        end
   36  
   ..
   51        end
   52  
   53:       node_cache[:primary_address][start_index] = r0
   54  
   55        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/content_disposition.rb:
   48      def _nt_content_disposition
   49        start_index = index
   50:       if node_cache[:content_disposition].has_key?(index)
   51:         cached = node_cache[:content_disposition][index]
   52:         if cached
   53:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   54:           @index = cached.interval.end
   55          end
   56:         return cached
   57        end
   58  
   ..
  109        end
  110  
  111:       node_cache[:content_disposition][start_index] = r0
  112  
  113        r0
  ...
  122      def _nt_disposition_type
  123        start_index = index
  124:       if node_cache[:disposition_type].has_key?(index)
  125:         cached = node_cache[:disposition_type][index]
  126:         if cached
  127:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  128:           @index = cached.interval.end
  129          end
  130:         return cached
  131        end
  132  
  ...
  315        end
  316  
  317:       node_cache[:disposition_type][start_index] = r0
  318  
  319        r0
  ...
  322      def _nt_extension_token
  323        start_index = index
  324:       if node_cache[:extension_token].has_key?(index)
  325:         cached = node_cache[:extension_token][index]
  326:         if cached
  327:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  328:           @index = cached.interval.end
  329          end
  330:         return cached
  331        end
  332  
  ...
  345        end
  346  
  347:       node_cache[:extension_token][start_index] = r0
  348  
  349        r0
  ...
  369      def _nt_parameter
  370        start_index = index
  371:       if node_cache[:parameter].has_key?(index)
  372:         cached = node_cache[:parameter][index]
  373:         if cached
  374:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  375:           @index = cached.interval.end
  376          end
  377:         return cached
  378        end
  379  
  ...
  422        end
  423  
  424:       node_cache[:parameter][start_index] = r0
  425  
  426        r0
  ...
  429      def _nt_attribute
  430        start_index = index
  431:       if node_cache[:attribute].has_key?(index)
  432:         cached = node_cache[:attribute][index]
  433:         if cached
  434:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  435:           @index = cached.interval.end
  436          end
  437:         return cached
  438        end
  439  
  ...
  454        end
  455  
  456:       node_cache[:attribute][start_index] = r0
  457  
  458        r0
  ...
  467      def _nt_value
  468        start_index = index
  469:       if node_cache[:value].has_key?(index)
  470:         cached = node_cache[:value][index]
  471:         if cached
  472:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  473:           @index = cached.interval.end
  474          end
  475:         return cached
  476        end
  477  
  ...
  522        end
  523  
  524:       node_cache[:value][start_index] = r0
  525  
  526        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/content_location.rb:
   30      def _nt_primary
   31        start_index = index
   32:       if node_cache[:primary].has_key?(index)
   33:         cached = node_cache[:primary][index]
   34:         if cached
   35:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   36:           @index = cached.interval.end
   37          end
   38:         return cached
   39        end
   40  
   ..
   58        end
   59  
   60:       node_cache[:primary][start_index] = r0
   61  
   62        r0
   ..
   71      def _nt_location
   72        start_index = index
   73:       if node_cache[:location].has_key?(index)
   74:         cached = node_cache[:location][index]
   75:         if cached
   76:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   77:           @index = cached.interval.end
   78          end
   79:         return cached
   80        end
   81  
   ..
  126        end
  127  
  128:       node_cache[:location][start_index] = r0
  129  
  130        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/content_transfer_encoding.rb:
   34      def _nt_primary
   35        start_index = index
   36:       if node_cache[:primary].has_key?(index)
   37:         cached = node_cache[:primary][index]
   38:         if cached
   39:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   40:           @index = cached.interval.end
   41          end
   42:         return cached
   43        end
   44  
   ..
   81        end
   82  
   83:       node_cache[:primary][start_index] = r0
   84  
   85        r0
   ..
   88      def _nt_encoding
   89        start_index = index
   90:       if node_cache[:encoding].has_key?(index)
   91:         cached = node_cache[:encoding][index]
   92:         if cached
   93:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   94:           @index = cached.interval.end
   95          end
   96:         return cached
   97        end
   98  
   ..
  188        end
  189  
  190:       node_cache[:encoding][start_index] = r0
  191  
  192        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/content_type.rb:
   52      def _nt_content_type
   53        start_index = index
   54:       if node_cache[:content_type].has_key?(index)
   55:         cached = node_cache[:content_type][index]
   56:         if cached
   57:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   58:           @index = cached.interval.end
   59          end
   60:         return cached
   61        end
   62  
   ..
  136        end
  137  
  138:       node_cache[:content_type][start_index] = r0
  139  
  140        r0
  ...
  143      def _nt_main_type
  144        start_index = index
  145:       if node_cache[:main_type].has_key?(index)
  146:         cached = node_cache[:main_type][index]
  147:         if cached
  148:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  149:           @index = cached.interval.end
  150          end
  151:         return cached
  152        end
  153  
  ...
  166        end
  167  
  168:       node_cache[:main_type][start_index] = r0
  169  
  170        r0
  ...
  188      def _nt_discrete_type
  189        start_index = index
  190:       if node_cache[:discrete_type].has_key?(index)
  191:         cached = node_cache[:discrete_type][index]
  192:         if cached
  193:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  194:           @index = cached.interval.end
  195          end
  196:         return cached
  197        end
  198  
  ...
  526        end
  527  
  528:       node_cache[:discrete_type][start_index] = r0
  529  
  530        r0
  ...
  539      def _nt_composite_type
  540        start_index = index
  541:       if node_cache[:composite_type].has_key?(index)
  542:         cached = node_cache[:composite_type][index]
  543:         if cached
  544:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  545:           @index = cached.interval.end
  546          end
  547:         return cached
  548        end
  549  
  ...
  721        end
  722  
  723:       node_cache[:composite_type][start_index] = r0
  724  
  725        r0
  ...
  728      def _nt_extension_token
  729        start_index = index
  730:       if node_cache[:extension_token].has_key?(index)
  731:         cached = node_cache[:extension_token][index]
  732:         if cached
  733:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  734:           @index = cached.interval.end
  735          end
  736:         return cached
  737        end
  738  
  ...
  751        end
  752  
  753:       node_cache[:extension_token][start_index] = r0
  754  
  755        r0
  ...
  758      def _nt_sub_type
  759        start_index = index
  760:       if node_cache[:sub_type].has_key?(index)
  761:         cached = node_cache[:sub_type][index]
  762:         if cached
  763:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  764:           @index = cached.interval.end
  765          end
  766:         return cached
  767        end
  768  
  ...
  781        end
  782  
  783:       node_cache[:sub_type][start_index] = r0
  784  
  785        r0
  ...
  805      def _nt_parameter
  806        start_index = index
  807:       if node_cache[:parameter].has_key?(index)
  808:         cached = node_cache[:parameter][index]
  809:         if cached
  810:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  811:           @index = cached.interval.end
  812          end
  813:         return cached
  814        end
  815  
  ...
  858        end
  859  
  860:       node_cache[:parameter][start_index] = r0
  861  
  862        r0
  ...
  865      def _nt_attribute
  866        start_index = index
  867:       if node_cache[:attribute].has_key?(index)
  868:         cached = node_cache[:attribute][index]
  869:         if cached
  870:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  871:           @index = cached.interval.end
  872          end
  873:         return cached
  874        end
  875  
  ...
  890        end
  891  
  892:       node_cache[:attribute][start_index] = r0
  893  
  894        r0
  ...
  903      def _nt_value
  904        start_index = index
  905:       if node_cache[:value].has_key?(index)
  906:         cached = node_cache[:value][index]
  907:         if cached
  908:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  909:           @index = cached.interval.end
  910          end
  911:         return cached
  912        end
  913  
  ...
  958        end
  959  
  960:       node_cache[:value][start_index] = r0
  961  
  962        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/date_time.rb:
   36      def _nt_primary
   37        start_index = index
   38:       if node_cache[:primary].has_key?(index)
   39:         cached = node_cache[:primary][index]
   40:         if cached
   41:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   42:           @index = cached.interval.end
   43          end
   44:         return cached
   45        end
   46  
   ..
  101        end
  102  
  103:       node_cache[:primary][start_index] = r0
  104  
  105        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/envelope_from.rb:
   24      def _nt_primary
   25        start_index = index
   26:       if node_cache[:primary].has_key?(index)
   27:         cached = node_cache[:primary][index]
   28:         if cached
   29:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   30:           @index = cached.interval.end
   31          end
   32:         return cached
   33        end
   34  
   ..
   48        end
   49  
   50:       node_cache[:primary][start_index] = r0
   51  
   52        r0
   ..
   77      def _nt_ctime_date
   78        start_index = index
   79:       if node_cache[:ctime_date].has_key?(index)
   80:         cached = node_cache[:ctime_date][index]
   81:         if cached
   82:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   83:           @index = cached.interval.end
   84          end
   85:         return cached
   86        end
   87  
   ..
  181        end
  182  
  183:       node_cache[:ctime_date][start_index] = r0
  184  
  185        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/message_ids.rb:
   20      def _nt_primary
   21        start_index = index
   22:       if node_cache[:primary].has_key?(index)
   23:         cached = node_cache[:primary][index]
   24:         if cached
   25:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   26:           @index = cached.interval.end
   27          end
   28:         return cached
   29        end
   30  
   ..
   32        r0.extend(Primary0)
   33  
   34:       node_cache[:primary][start_index] = r0
   35  
   36        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/mime_version.rb:
   42      def _nt_version
   43        start_index = index
   44:       if node_cache[:version].has_key?(index)
   45:         cached = node_cache[:version][index]
   46:         if cached
   47:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   48:           @index = cached.interval.end
   49          end
   50:         return cached
   51        end
   52  
   ..
  131        end
  132  
  133:       node_cache[:version][start_index] = r0
  134  
  135        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/phrase_lists.rb:
   20      def _nt_primary_phrase
   21        start_index = index
   22:       if node_cache[:primary_phrase].has_key?(index)
   23:         cached = node_cache[:primary_phrase][index]
   24:         if cached
   25:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   26:           @index = cached.interval.end
   27          end
   28:         return cached
   29        end
   30  
   ..
   32        r0.extend(PrimaryPhrase0)
   33  
   34:       node_cache[:primary_phrase][start_index] = r0
   35  
   36        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/received.rb:
   24      def _nt_primary
   25        start_index = index
   26:       if node_cache[:primary].has_key?(index)
   27:         cached = node_cache[:primary][index]
   28:         if cached
   29:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   30:           @index = cached.interval.end
   31          end
   32:         return cached
   33        end
   34  
   ..
   58        end
   59  
   60:       node_cache[:primary][start_index] = r0
   61  
   62        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/rfc2045.rb:
   12      def _nt_tspecials
   13        start_index = index
   14:       if node_cache[:tspecials].has_key?(index)
   15:         cached = node_cache[:tspecials][index]
   16:         if cached
   17:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   18:           @index = cached.interval.end
   19          end
   20:         return cached
   21        end
   22  
   ..
  201        end
  202  
  203:       node_cache[:tspecials][start_index] = r0
  204  
  205        r0
  ...
  208      def _nt_ietf_token
  209        start_index = index
  210:       if node_cache[:ietf_token].has_key?(index)
  211:         cached = node_cache[:ietf_token][index]
  212:         if cached
  213:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  214:           @index = cached.interval.end
  215          end
  216:         return cached
  217        end
  218  
  ...
  233        end
  234  
  235:       node_cache[:ietf_token][start_index] = r0
  236  
  237        r0
  ...
  243      def _nt_custom_x_token
  244        start_index = index
  245:       if node_cache[:custom_x_token].has_key?(index)
  246:         cached = node_cache[:custom_x_token][index]
  247:         if cached
  248:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  249:           @index = cached.interval.end
  250          end
  251:         return cached
  252        end
  253  
  ...
  296        end
  297  
  298:       node_cache[:custom_x_token][start_index] = r0
  299  
  300        r0
  ...
  303      def _nt_iana_token
  304        start_index = index
  305:       if node_cache[:iana_token].has_key?(index)
  306:         cached = node_cache[:iana_token][index]
  307:         if cached
  308:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  309:           @index = cached.interval.end
  310          end
  311:         return cached
  312        end
  313  
  ...
  328        end
  329  
  330:       node_cache[:iana_token][start_index] = r0
  331  
  332        r0
  ...
  335      def _nt_token
  336        start_index = index
  337:       if node_cache[:token].has_key?(index)
  338:         cached = node_cache[:token][index]
  339:         if cached
  340:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  341:           @index = cached.interval.end
  342          end
  343:         return cached
  344        end
  345  
  ...
  408        end
  409  
  410:       node_cache[:token][start_index] = r0
  411  
  412        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/rfc2822.rb:
   14      def _nt_ALPHA
   15        start_index = index
   16:       if node_cache[:ALPHA].has_key?(index)
   17:         cached = node_cache[:ALPHA][index]
   18:         if cached
   19:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   20:           @index = cached.interval.end
   21          end
   22:         return cached
   23        end
   24  
   ..
   30        end
   31  
   32:       node_cache[:ALPHA][start_index] = r0
   33  
   34        r0
   ..
   37      def _nt_DIGIT
   38        start_index = index
   39:       if node_cache[:DIGIT].has_key?(index)
   40:         cached = node_cache[:DIGIT][index]
   41:         if cached
   42:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   43:           @index = cached.interval.end
   44          end
   45:         return cached
   46        end
   47  
   ..
   53        end
   54  
   55:       node_cache[:DIGIT][start_index] = r0
   56  
   57        r0
   ..
   60      def _nt_DQUOTE
   61        start_index = index
   62:       if node_cache[:DQUOTE].has_key?(index)
   63:         cached = node_cache[:DQUOTE][index]
   64:         if cached
   65:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   66:           @index = cached.interval.end
   67          end
   68:         return cached
   69        end
   70  
   ..
   77        end
   78  
   79:       node_cache[:DQUOTE][start_index] = r0
   80  
   81        r0
   ..
   84      def _nt_LF
   85        start_index = index
   86:       if node_cache[:LF].has_key?(index)
   87:         cached = node_cache[:LF][index]
   88:         if cached
   89:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   90:           @index = cached.interval.end
   91          end
   92:         return cached
   93        end
   94  
   ..
  101        end
  102  
  103:       node_cache[:LF][start_index] = r0
  104  
  105        r0
  ...
  108      def _nt_CR
  109        start_index = index
  110:       if node_cache[:CR].has_key?(index)
  111:         cached = node_cache[:CR][index]
  112:         if cached
  113:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  114:           @index = cached.interval.end
  115          end
  116:         return cached
  117        end
  118  
  ...
  125        end
  126  
  127:       node_cache[:CR][start_index] = r0
  128  
  129        r0
  ...
  132      def _nt_CRLF
  133        start_index = index
  134:       if node_cache[:CRLF].has_key?(index)
  135:         cached = node_cache[:CRLF][index]
  136:         if cached
  137:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  138:           @index = cached.interval.end
  139          end
  140:         return cached
  141        end
  142  
  ...
  149        end
  150  
  151:       node_cache[:CRLF][start_index] = r0
  152  
  153        r0
  ...
  156      def _nt_WSP
  157        start_index = index
  158:       if node_cache[:WSP].has_key?(index)
  159:         cached = node_cache[:WSP][index]
  160:         if cached
  161:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  162:           @index = cached.interval.end
  163          end
  164:         return cached
  165        end
  166  
  ...
  172        end
  173  
  174:       node_cache[:WSP][start_index] = r0
  175  
  176        r0
  ...
  193      def _nt_FWS
  194        start_index = index
  195:       if node_cache[:FWS].has_key?(index)
  196:         cached = node_cache[:FWS][index]
  197:         if cached
  198:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  199:           @index = cached.interval.end
  200          end
  201:         return cached
  202        end
  203  
  ...
  288        end
  289  
  290:       node_cache[:FWS][start_index] = r0
  291  
  292        r0
  ...
  304      def _nt_CFWS
  305        start_index = index
  306:       if node_cache[:CFWS].has_key?(index)
  307:         cached = node_cache[:CFWS][index]
  308:         if cached
  309:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  310:           @index = cached.interval.end
  311          end
  312:         return cached
  313        end
  314  
  ...
  364        end
  365  
  366:       node_cache[:CFWS][start_index] = r0
  367  
  368        r0
  ...
  371      def _nt_NO_WS_CTL
  372        start_index = index
  373:       if node_cache[:NO_WS_CTL].has_key?(index)
  374:         cached = node_cache[:NO_WS_CTL][index]
  375:         if cached
  376:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  377:           @index = cached.interval.end
  378          end
  379:         return cached
  380        end
  381  
  ...
  424        end
  425  
  426:       node_cache[:NO_WS_CTL][start_index] = r0
  427  
  428        r0
  ...
  431      def _nt_specials
  432        start_index = index
  433:       if node_cache[:specials].has_key?(index)
  434:         cached = node_cache[:specials][index]
  435:         if cached
  436:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  437:           @index = cached.interval.end
  438          end
  439:         return cached
  440        end
  441  
  ...
  581        end
  582  
  583:       node_cache[:specials][start_index] = r0
  584  
  585        r0
  ...
  588      def _nt_ctext
  589        start_index = index
  590:       if node_cache[:ctext].has_key?(index)
  591:         cached = node_cache[:ctext][index]
  592:         if cached
  593:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  594:           @index = cached.interval.end
  595          end
  596:         return cached
  597        end
  598  
  ...
  636        end
  637  
  638:       node_cache[:ctext][start_index] = r0
  639  
  640        r0
  ...
  643      def _nt_ccontent
  644        start_index = index
  645:       if node_cache[:ccontent].has_key?(index)
  646:         cached = node_cache[:ccontent][index]
  647:         if cached
  648:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  649:           @index = cached.interval.end
  650          end
  651:         return cached
  652        end
  653  
  ...
  671        end
  672  
  673:       node_cache[:ccontent][start_index] = r0
  674  
  675        r0
  ...
  687      def _nt_comment
  688        start_index = index
  689:       if node_cache[:comment].has_key?(index)
  690:         cached = node_cache[:comment][index]
  691:         if cached
  692:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  693:           @index = cached.interval.end
  694          end
  695:         return cached
  696        end
  697  
  ...
  763        end
  764  
  765:       node_cache[:comment][start_index] = r0
  766  
  767        r0
  ...
  770      def _nt_atext
  771        start_index = index
  772:       if node_cache[:atext].has_key?(index)
  773:         cached = node_cache[:atext][index]
  774:         if cached
  775:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  776:           @index = cached.interval.end
  777          end
  778:         return cached
  779        end
  780  
  ...
 1002        end
 1003  
 1004:       node_cache[:atext][start_index] = r0
 1005  
 1006        r0
 ....
 1009      def _nt_mtext
 1010        start_index = index
 1011:       if node_cache[:mtext].has_key?(index)
 1012:         cached = node_cache[:mtext][index]
 1013:         if cached
 1014:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1015:           @index = cached.interval.end
 1016          end
 1017:         return cached
 1018        end
 1019  
 ....
 1052        end
 1053  
 1054:       node_cache[:mtext][start_index] = r0
 1055  
 1056        r0
 ....
 1062      def _nt_atom
 1063        start_index = index
 1064:       if node_cache[:atom].has_key?(index)
 1065:         cached = node_cache[:atom][index]
 1066:         if cached
 1067:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1068:           @index = cached.interval.end
 1069          end
 1070:         return cached
 1071        end
 1072  
 ....
 1114        end
 1115  
 1116:       node_cache[:atom][start_index] = r0
 1117  
 1118        r0
 ....
 1128      def _nt_dot_atom
 1129        start_index = index
 1130:       if node_cache[:dot_atom].has_key?(index)
 1131:         cached = node_cache[:dot_atom][index]
 1132:         if cached
 1133:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1134:           @index = cached.interval.end
 1135          end
 1136:         return cached
 1137        end
 1138  
 ....
 1166        end
 1167  
 1168:       node_cache[:dot_atom][start_index] = r0
 1169  
 1170        r0
 ....
 1180      def _nt_local_dot_atom
 1181        start_index = index
 1182:       if node_cache[:local_dot_atom].has_key?(index)
 1183:         cached = node_cache[:local_dot_atom][index]
 1184:         if cached
 1185:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1186:           @index = cached.interval.end
 1187          end
 1188:         return cached
 1189        end
 1190  
 ....
 1218        end
 1219  
 1220:       node_cache[:local_dot_atom][start_index] = r0
 1221  
 1222        r0
 ....
 1225      def _nt_message_id_text
 1226        start_index = index
 1227:       if node_cache[:message_id_text].has_key?(index)
 1228:         cached = node_cache[:message_id_text][index]
 1229:         if cached
 1230:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1231:           @index = cached.interval.end
 1232          end
 1233:         return cached
 1234        end
 1235  
 ....
 1250        end
 1251  
 1252:       node_cache[:message_id_text][start_index] = r0
 1253  
 1254        r0
 ....
 1264      def _nt_dot_atom_text
 1265        start_index = index
 1266:       if node_cache[:dot_atom_text].has_key?(index)
 1267:         cached = node_cache[:dot_atom_text][index]
 1268:         if cached
 1269:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1270:           @index = cached.interval.end
 1271          end
 1272:         return cached
 1273        end
 1274  
 ....
 1313        end
 1314  
 1315:       node_cache[:dot_atom_text][start_index] = r0
 1316  
 1317        r0
 ....
 1327      def _nt_local_dot_atom_text
 1328        start_index = index
 1329:       if node_cache[:local_dot_atom_text].has_key?(index)
 1330:         cached = node_cache[:local_dot_atom_text][index]
 1331:         if cached
 1332:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1333:           @index = cached.interval.end
 1334          end
 1335:         return cached
 1336        end
 1337  
 ....
 1399        end
 1400  
 1401:       node_cache[:local_dot_atom_text][start_index] = r0
 1402  
 1403        r0
 ....
 1422      def _nt_domain_text
 1423        start_index = index
 1424:       if node_cache[:domain_text].has_key?(index)
 1425:         cached = node_cache[:domain_text][index]
 1426:         if cached
 1427:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1428:           @index = cached.interval.end
 1429          end
 1430:         return cached
 1431        end
 1432  
 ....
 1517        end
 1518  
 1519:       node_cache[:domain_text][start_index] = r0
 1520  
 1521        r0
 ....
 1530      def _nt_quoted_domain
 1531        start_index = index
 1532:       if node_cache[:quoted_domain].has_key?(index)
 1533:         cached = node_cache[:quoted_domain][index]
 1534:         if cached
 1535:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1536:           @index = cached.interval.end
 1537          end
 1538:         return cached
 1539        end
 1540  
 ....
 1572        end
 1573  
 1574:       node_cache[:quoted_domain][start_index] = r0
 1575  
 1576        r0
 ....
 1579      def _nt_qdcontent
 1580        start_index = index
 1581:       if node_cache[:qdcontent].has_key?(index)
 1582:         cached = node_cache[:qdcontent][index]
 1583:         if cached
 1584:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1585:           @index = cached.interval.end
 1586          end
 1587:         return cached
 1588        end
 1589  
 ....
 1637        end
 1638  
 1639:       node_cache[:qdcontent][start_index] = r0
 1640  
 1641        r0
 ....
 1644      def _nt_phrase
 1645        start_index = index
 1646:       if node_cache[:phrase].has_key?(index)
 1647:         cached = node_cache[:phrase][index]
 1648:         if cached
 1649:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1650:           @index = cached.interval.end
 1651          end
 1652:         return cached
 1653        end
 1654  
 ....
 1681        end
 1682  
 1683:       node_cache[:phrase][start_index] = r0
 1684  
 1685        r0
 ....
 1688      def _nt_word
 1689        start_index = index
 1690:       if node_cache[:word].has_key?(index)
 1691:         cached = node_cache[:word][index]
 1692:         if cached
 1693:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1694:           @index = cached.interval.end
 1695          end
 1696:         return cached
 1697        end
 1698  
 ....
 1711        end
 1712  
 1713:       node_cache[:word][start_index] = r0
 1714  
 1715        r0
 ....
 1734      def _nt_phrase_list
 1735        start_index = index
 1736:       if node_cache[:phrase_list].has_key?(index)
 1737:         cached = node_cache[:phrase_list][index]
 1738:         if cached
 1739:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1740:           @index = cached.interval.end
 1741          end
 1742:         return cached
 1743        end
 1744  
 ....
 1799        end
 1800  
 1801:       node_cache[:phrase_list][start_index] = r0
 1802  
 1803        r0
 ....
 1815      def _nt_domain_literal
 1816        start_index = index
 1817:       if node_cache[:domain_literal].has_key?(index)
 1818:         cached = node_cache[:domain_literal][index]
 1819:         if cached
 1820:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1821:           @index = cached.interval.end
 1822          end
 1823:         return cached
 1824        end
 1825  
 ....
 1909        end
 1910  
 1911:       node_cache[:domain_literal][start_index] = r0
 1912  
 1913        r0
 ....
 1916      def _nt_dcontent
 1917        start_index = index
 1918:       if node_cache[:dcontent].has_key?(index)
 1919:         cached = node_cache[:dcontent][index]
 1920:         if cached
 1921:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1922:           @index = cached.interval.end
 1923          end
 1924:         return cached
 1925        end
 1926  
 ....
 1939        end
 1940  
 1941:       node_cache[:dcontent][start_index] = r0
 1942  
 1943        r0
 ....
 1946      def _nt_dtext
 1947        start_index = index
 1948:       if node_cache[:dtext].has_key?(index)
 1949:         cached = node_cache[:dtext][index]
 1950:         if cached
 1951:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1952:           @index = cached.interval.end
 1953          end
 1954:         return cached
 1955        end
 1956  
 ....
 1984        end
 1985  
 1986:       node_cache[:dtext][start_index] = r0
 1987  
 1988        r0
 ....
 1998      def _nt_angle_addr
 1999        start_index = index
 2000:       if node_cache[:angle_addr].has_key?(index)
 2001:         cached = node_cache[:angle_addr][index]
 2002:         if cached
 2003:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2004:           @index = cached.interval.end
 2005          end
 2006:         return cached
 2007        end
 2008  
 ....
 2068        end
 2069  
 2070:       node_cache[:angle_addr][start_index] = r0
 2071  
 2072        r0
 ....
 2085      def _nt_addr_spec
 2086        start_index = index
 2087:       if node_cache[:addr_spec].has_key?(index)
 2088:         cached = node_cache[:addr_spec][index]
 2089:         if cached
 2090:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2091:           @index = cached.interval.end
 2092          end
 2093:         return cached
 2094        end
 2095  
 ....
 2131        end
 2132  
 2133:       node_cache[:addr_spec][start_index] = r0
 2134  
 2135        r0
 ....
 2138      def _nt_local_part
 2139        start_index = index
 2140:       if node_cache[:local_part].has_key?(index)
 2141:         cached = node_cache[:local_part][index]
 2142:         if cached
 2143:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2144:           @index = cached.interval.end
 2145          end
 2146:         return cached
 2147        end
 2148  
 ....
 2166        end
 2167  
 2168:       node_cache[:local_part][start_index] = r0
 2169  
 2170        r0
 ....
 2173      def _nt_domain
 2174        start_index = index
 2175:       if node_cache[:domain].has_key?(index)
 2176:         cached = node_cache[:domain][index]
 2177:         if cached
 2178:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2179:           @index = cached.interval.end
 2180          end
 2181:         return cached
 2182        end
 2183  
 ....
 2201        end
 2202  
 2203:       node_cache[:domain][start_index] = r0
 2204  
 2205        r0
 ....
 2219      def _nt_group
 2220        start_index = index
 2221:       if node_cache[:group].has_key?(index)
 2222:         cached = node_cache[:group][index]
 2223:         if cached
 2224:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2225:           @index = cached.interval.end
 2226          end
 2227:         return cached
 2228        end
 2229  
 ....
 2289        end
 2290  
 2291:       node_cache[:group][start_index] = r0
 2292  
 2293        r0
 ....
 2302      def _nt_mailbox_list_group
 2303        start_index = index
 2304:       if node_cache[:mailbox_list_group].has_key?(index)
 2305:         cached = node_cache[:mailbox_list_group][index]
 2306:         if cached
 2307:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2308:           @index = cached.interval.end
 2309          end
 2310:         return cached
 2311        end
 2312  
 ....
 2314        r0.extend(MailboxListGroup0)
 2315  
 2316:       node_cache[:mailbox_list_group][start_index] = r0
 2317  
 2318        r0
 ....
 2342      def _nt_quoted_string
 2343        start_index = index
 2344:       if node_cache[:quoted_string].has_key?(index)
 2345:         cached = node_cache[:quoted_string][index]
 2346:         if cached
 2347:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2348:           @index = cached.interval.end
 2349          end
 2350:         return cached
 2351        end
 2352  
 ....
 2424        end
 2425  
 2426:       node_cache[:quoted_string][start_index] = r0
 2427  
 2428        r0
 ....
 2431      def _nt_qcontent
 2432        start_index = index
 2433:       if node_cache[:qcontent].has_key?(index)
 2434:         cached = node_cache[:qcontent][index]
 2435:         if cached
 2436:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2437:           @index = cached.interval.end
 2438          end
 2439:         return cached
 2440        end
 2441  
 ....
 2454        end
 2455  
 2456:       node_cache[:qcontent][start_index] = r0
 2457  
 2458        r0
 ....
 2467      def _nt_quoted_pair
 2468        start_index = index
 2469:       if node_cache[:quoted_pair].has_key?(index)
 2470:         cached = node_cache[:quoted_pair][index]
 2471:         if cached
 2472:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2473:           @index = cached.interval.end
 2474          end
 2475:         return cached
 2476        end
 2477  
 ....
 2509        end
 2510  
 2511:       node_cache[:quoted_pair][start_index] = r0
 2512  
 2513        r0
 ....
 2516      def _nt_qtext
 2517        start_index = index
 2518:       if node_cache[:qtext].has_key?(index)
 2519:         cached = node_cache[:qtext][index]
 2520:         if cached
 2521:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2522:           @index = cached.interval.end
 2523          end
 2524:         return cached
 2525        end
 2526  
 ....
 2564        end
 2565  
 2566:       node_cache[:qtext][start_index] = r0
 2567  
 2568        r0
 ....
 2571      def _nt_text
 2572        start_index = index
 2573:       if node_cache[:text].has_key?(index)
 2574:         cached = node_cache[:text][index]
 2575:         if cached
 2576:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2577:           @index = cached.interval.end
 2578          end
 2579:         return cached
 2580        end
 2581  
 ....
 2619        end
 2620  
 2621:       node_cache[:text][start_index] = r0
 2622  
 2623        r0
 ....
 2626      def _nt_display_name
 2627        start_index = index
 2628:       if node_cache[:display_name].has_key?(index)
 2629:         cached = node_cache[:display_name][index]
 2630:         if cached
 2631:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2632:           @index = cached.interval.end
 2633          end
 2634:         return cached
 2635        end
 2636  
 2637        r0 = _nt_phrase
 2638  
 2639:       node_cache[:display_name][start_index] = r0
 2640  
 2641        r0
 ....
 2654      def _nt_name_addr
 2655        start_index = index
 2656:       if node_cache[:name_addr].has_key?(index)
 2657:         cached = node_cache[:name_addr][index]
 2658:         if cached
 2659:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2660:           @index = cached.interval.end
 2661          end
 2662:         return cached
 2663        end
 2664  
 ....
 2690        end
 2691  
 2692:       node_cache[:name_addr][start_index] = r0
 2693  
 2694        r0
 ....
 2713      def _nt_mailbox_list
 2714        start_index = index
 2715:       if node_cache[:mailbox_list].has_key?(index)
 2716:         cached = node_cache[:mailbox_list][index]
 2717:         if cached
 2718:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2719:           @index = cached.interval.end
 2720          end
 2721:         return cached
 2722        end
 2723  
 ....
 2795        end
 2796  
 2797:       node_cache[:mailbox_list][start_index] = r0
 2798  
 2799        r0
 ....
 2819      def _nt_mailbox
 2820        start_index = index
 2821:       if node_cache[:mailbox].has_key?(index)
 2822:         cached = node_cache[:mailbox][index]
 2823:         if cached
 2824:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2825:           @index = cached.interval.end
 2826          end
 2827:         return cached
 2828        end
 2829  
 ....
 2844        end
 2845  
 2846:       node_cache[:mailbox][start_index] = r0
 2847  
 2848        r0
 ....
 2869      def _nt_address
 2870        start_index = index
 2871:       if node_cache[:address].has_key?(index)
 2872:         cached = node_cache[:address][index]
 2873:         if cached
 2874:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2875:           @index = cached.interval.end
 2876          end
 2877:         return cached
 2878        end
 2879  
 ....
 2893        end
 2894  
 2895:       node_cache[:address][start_index] = r0
 2896  
 2897        r0
 ....
 2916      def _nt_address_list
 2917        start_index = index
 2918:       if node_cache[:address_list].has_key?(index)
 2919:         cached = node_cache[:address_list][index]
 2920:         if cached
 2921:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2922:           @index = cached.interval.end
 2923          end
 2924:         return cached
 2925        end
 2926  
 ....
 3022        end
 3023  
 3024:       node_cache[:address_list][start_index] = r0
 3025  
 3026        r0
 ....
 3051      def _nt_date_time
 3052        start_index = index
 3053:       if node_cache[:date_time].has_key?(index)
 3054:         cached = node_cache[:date_time][index]
 3055:         if cached
 3056:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3057:           @index = cached.interval.end
 3058          end
 3059:         return cached
 3060        end
 3061  
 ....
 3116        end
 3117  
 3118:       node_cache[:date_time][start_index] = r0
 3119  
 3120        r0
 ....
 3129      def _nt_day_of_week
 3130        start_index = index
 3131:       if node_cache[:day_of_week].has_key?(index)
 3132:         cached = node_cache[:day_of_week][index]
 3133:         if cached
 3134:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3135:           @index = cached.interval.end
 3136          end
 3137:         return cached
 3138        end
 3139  
 ....
 3170        end
 3171  
 3172:       node_cache[:day_of_week][start_index] = r0
 3173  
 3174        r0
 ....
 3177      def _nt_day_name
 3178        start_index = index
 3179:       if node_cache[:day_name].has_key?(index)
 3180:         cached = node_cache[:day_name][index]
 3181:         if cached
 3182:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3183:           @index = cached.interval.end
 3184          end
 3185:         return cached
 3186        end
 3187  
 ....
 3267        end
 3268  
 3269:       node_cache[:day_name][start_index] = r0
 3270  
 3271        r0
 ....
 3288      def _nt_date
 3289        start_index = index
 3290:       if node_cache[:date].has_key?(index)
 3291:         cached = node_cache[:date][index]
 3292:         if cached
 3293:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3294:           @index = cached.interval.end
 3295          end
 3296:         return cached
 3297        end
 3298  
 ....
 3316        end
 3317  
 3318:       node_cache[:date][start_index] = r0
 3319  
 3320        r0
 ....
 3341      def _nt_year
 3342        start_index = index
 3343:       if node_cache[:year].has_key?(index)
 3344:         cached = node_cache[:year][index]
 3345:         if cached
 3346:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3347:           @index = cached.interval.end
 3348          end
 3349:         return cached
 3350        end
 3351  
 ....
 3385        end
 3386  
 3387:       node_cache[:year][start_index] = r0
 3388  
 3389        r0
 ....
 3406      def _nt_month
 3407        start_index = index
 3408:       if node_cache[:month].has_key?(index)
 3409:         cached = node_cache[:month][index]
 3410:         if cached
 3411:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3412:           @index = cached.interval.end
 3413          end
 3414:         return cached
 3415        end
 3416  
 ....
 3446        end
 3447  
 3448:       node_cache[:month][start_index] = r0
 3449  
 3450        r0
 ....
 3453      def _nt_month_name
 3454        start_index = index
 3455:       if node_cache[:month_name].has_key?(index)
 3456:         cached = node_cache[:month_name][index]
 3457:         if cached
 3458:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3459:           @index = cached.interval.end
 3460          end
 3461:         return cached
 3462        end
 3463  
 ....
 3598        end
 3599  
 3600:       node_cache[:month_name][start_index] = r0
 3601  
 3602        r0
 ....
 3612      def _nt_day
 3613        start_index = index
 3614:       if node_cache[:day].has_key?(index)
 3615:         cached = node_cache[:day][index]
 3616:         if cached
 3617:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3618:           @index = cached.interval.end
 3619          end
 3620:         return cached
 3621        end
 3622  
 ....
 3662        end
 3663  
 3664:       node_cache[:day][start_index] = r0
 3665  
 3666        r0
 ....
 3683      def _nt_time
 3684        start_index = index
 3685:       if node_cache[:time].has_key?(index)
 3686:         cached = node_cache[:time][index]
 3687:         if cached
 3688:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3689:           @index = cached.interval.end
 3690          end
 3691:         return cached
 3692        end
 3693  
 ....
 3711        end
 3712  
 3713:       node_cache[:time][start_index] = r0
 3714  
 3715        r0
 ....
 3735      def _nt_time_of_day
 3736        start_index = index
 3737:       if node_cache[:time_of_day].has_key?(index)
 3738:         cached = node_cache[:time_of_day][index]
 3739:         if cached
 3740:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3741:           @index = cached.interval.end
 3742          end
 3743:         return cached
 3744        end
 3745  
 ....
 3797        end
 3798  
 3799:       node_cache[:time_of_day][start_index] = r0
 3800  
 3801        r0
 ....
 3814      def _nt_hour
 3815        start_index = index
 3816:       if node_cache[:hour].has_key?(index)
 3817:         cached = node_cache[:hour][index]
 3818:         if cached
 3819:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3820:           @index = cached.interval.end
 3821          end
 3822:         return cached
 3823        end
 3824  
 ....
 3850        end
 3851  
 3852:       node_cache[:hour][start_index] = r0
 3853  
 3854        r0
 ....
 3867      def _nt_minute
 3868        start_index = index
 3869:       if node_cache[:minute].has_key?(index)
 3870:         cached = node_cache[:minute][index]
 3871:         if cached
 3872:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3873:           @index = cached.interval.end
 3874          end
 3875:         return cached
 3876        end
 3877  
 ....
 3903        end
 3904  
 3905:       node_cache[:minute][start_index] = r0
 3906  
 3907        r0
 ....
 3920      def _nt_second
 3921        start_index = index
 3922:       if node_cache[:second].has_key?(index)
 3923:         cached = node_cache[:second][index]
 3924:         if cached
 3925:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3926:           @index = cached.interval.end
 3927          end
 3928:         return cached
 3929        end
 3930  
 ....
 3956        end
 3957  
 3958:       node_cache[:second][start_index] = r0
 3959  
 3960        r0
 ....
 3981      def _nt_zone
 3982        start_index = index
 3983:       if node_cache[:zone].has_key?(index)
 3984:         cached = node_cache[:zone][index]
 3985:         if cached
 3986:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3987:           @index = cached.interval.end
 3988          end
 3989:         return cached
 3990        end
 3991  
 ....
 4053        end
 4054  
 4055:       node_cache[:zone][start_index] = r0
 4056  
 4057        r0
 ....
 4070      def _nt_return
 4071        start_index = index
 4072:       if node_cache[:return].has_key?(index)
 4073:         cached = node_cache[:return][index]
 4074:         if cached
 4075:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4076:           @index = cached.interval.end
 4077          end
 4078:         return cached
 4079        end
 4080  
 ....
 4094        end
 4095  
 4096:       node_cache[:return][start_index] = r0
 4097  
 4098        r0
 ....
 4104      def _nt_path
 4105        start_index = index
 4106:       if node_cache[:path].has_key?(index)
 4107:         cached = node_cache[:path][index]
 4108:         if cached
 4109:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4110:           @index = cached.interval.end
 4111          end
 4112:         return cached
 4113        end
 4114  
 ....
 4191        end
 4192  
 4193:       node_cache[:path][start_index] = r0
 4194  
 4195        r0
 ....
 4212      def _nt_received
 4213        start_index = index
 4214:       if node_cache[:received].has_key?(index)
 4215:         cached = node_cache[:received][index]
 4216:         if cached
 4217:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4218:           @index = cached.interval.end
 4219          end
 4220:         return cached
 4221        end
 4222  
 ....
 4250        end
 4251  
 4252:       node_cache[:received][start_index] = r0
 4253  
 4254        r0
 ....
 4277      def _nt_name_val_list
 4278        start_index = index
 4279:       if node_cache[:name_val_list].has_key?(index)
 4280:         cached = node_cache[:name_val_list][index]
 4281:         if cached
 4282:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4283:           @index = cached.interval.end
 4284          end
 4285:         return cached
 4286        end
 4287  
 ....
 4346        end
 4347  
 4348:       node_cache[:name_val_list][start_index] = r0
 4349  
 4350        r0
 ....
 4367      def _nt_name_val_pair
 4368        start_index = index
 4369:       if node_cache[:name_val_pair].has_key?(index)
 4370:         cached = node_cache[:name_val_pair][index]
 4371:         if cached
 4372:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4373:           @index = cached.interval.end
 4374          end
 4375:         return cached
 4376        end
 4377  
 ....
 4395        end
 4396  
 4397:       node_cache[:name_val_pair][start_index] = r0
 4398  
 4399        r0
 ....
 4412      def _nt_item_name
 4413        start_index = index
 4414:       if node_cache[:item_name].has_key?(index)
 4415:         cached = node_cache[:item_name][index]
 4416:         if cached
 4417:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4418:           @index = cached.interval.end
 4419          end
 4420:         return cached
 4421        end
 4422  
 ....
 4481        end
 4482  
 4483:       node_cache[:item_name][start_index] = r0
 4484  
 4485        r0
 ....
 4488      def _nt_item_value
 4489        start_index = index
 4490:       if node_cache[:item_value].has_key?(index)
 4491:         cached = node_cache[:item_value][index]
 4492:         if cached
 4493:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4494:           @index = cached.interval.end
 4495          end
 4496:         return cached
 4497        end
 4498  
 ....
 4540        end
 4541  
 4542:       node_cache[:item_value][start_index] = r0
 4543  
 4544        r0
 ....
 4567      def _nt_message_ids
 4568        start_index = index
 4569:       if node_cache[:message_ids].has_key?(index)
 4570:         cached = node_cache[:message_ids][index]
 4571:         if cached
 4572:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4573:           @index = cached.interval.end
 4574          end
 4575:         return cached
 4576        end
 4577  
 ....
 4613        end
 4614  
 4615:       node_cache[:message_ids][start_index] = r0
 4616  
 4617        r0
 ....
 4627      def _nt_msg_id
 4628        start_index = index
 4629:       if node_cache[:msg_id].has_key?(index)
 4630:         cached = node_cache[:msg_id][index]
 4631:         if cached
 4632:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4633:           @index = cached.interval.end
 4634          end
 4635:         return cached
 4636        end
 4637  
 ....
 4685        end
 4686  
 4687:       node_cache[:msg_id][start_index] = r0
 4688  
 4689        r0
 ....
 4702      def _nt_msg_id_value
 4703        start_index = index
 4704:       if node_cache[:msg_id_value].has_key?(index)
 4705:         cached = node_cache[:msg_id_value][index]
 4706:         if cached
 4707:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4708:           @index = cached.interval.end
 4709          end
 4710:         return cached
 4711        end
 4712  
 ....
 4736        end
 4737  
 4738:       node_cache[:msg_id_value][start_index] = r0
 4739  
 4740        r0
 ....
 4743      def _nt_id_left
 4744        start_index = index
 4745:       if node_cache[:id_left].has_key?(index)
 4746:         cached = node_cache[:id_left][index]
 4747:         if cached
 4748:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4749:           @index = cached.interval.end
 4750          end
 4751:         return cached
 4752        end
 4753  
 ....
 4771        end
 4772  
 4773:       node_cache[:id_left][start_index] = r0
 4774  
 4775        r0
 ....
 4778      def _nt_id_right
 4779        start_index = index
 4780:       if node_cache[:id_right].has_key?(index)
 4781:         cached = node_cache[:id_right][index]
 4782:         if cached
 4783:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4784:           @index = cached.interval.end
 4785          end
 4786:         return cached
 4787        end
 4788  
 ....
 4806        end
 4807  
 4808:       node_cache[:id_right][start_index] = r0
 4809  
 4810        r0
 ....
 4820      def _nt_msg_id_dot_atom_text
 4821        start_index = index
 4822:       if node_cache[:msg_id_dot_atom_text].has_key?(index)
 4823:         cached = node_cache[:msg_id_dot_atom_text][index]
 4824:         if cached
 4825:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4826:           @index = cached.interval.end
 4827          end
 4828:         return cached
 4829        end
 4830  
 ....
 4869        end
 4870  
 4871:       node_cache[:msg_id_dot_atom_text][start_index] = r0
 4872  
 4873        r0
 ....
 4892      def _nt_msg_id_domain_text
 4893        start_index = index
 4894:       if node_cache[:msg_id_domain_text].has_key?(index)
 4895:         cached = node_cache[:msg_id_domain_text][index]
 4896:         if cached
 4897:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 4898:           @index = cached.interval.end
 4899          end
 4900:         return cached
 4901        end
 4902  
 ....
 4987        end
 4988  
 4989:       node_cache[:msg_id_domain_text][start_index] = r0
 4990  
 4991        r0
 ....
 4994      def _nt_msg_id_atext
 4995        start_index = index
 4996:       if node_cache[:msg_id_atext].has_key?(index)
 4997:         cached = node_cache[:msg_id_atext][index]
 4998:         if cached
 4999:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 5000:           @index = cached.interval.end
 5001          end
 5002:         return cached
 5003        end
 5004  
 ....
 5237        end
 5238  
 5239:       node_cache[:msg_id_atext][start_index] = r0
 5240  
 5241        r0
 ....
 5254      def _nt_no_fold_quote
 5255        start_index = index
 5256:       if node_cache[:no_fold_quote].has_key?(index)
 5257:         cached = node_cache[:no_fold_quote][index]
 5258:         if cached
 5259:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 5260:           @index = cached.interval.end
 5261          end
 5262:         return cached
 5263        end
 5264  
 ....
 5308        end
 5309  
 5310:       node_cache[:no_fold_quote][start_index] = r0
 5311  
 5312        r0
 ....
 5318      def _nt_no_fold_literal
 5319        start_index = index
 5320:       if node_cache[:no_fold_literal].has_key?(index)
 5321:         cached = node_cache[:no_fold_literal][index]
 5322:         if cached
 5323:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 5324:           @index = cached.interval.end
 5325          end
 5326:         return cached
 5327        end
 5328  
 ....
 5384        end
 5385  
 5386:       node_cache[:no_fold_literal][start_index] = r0
 5387  
 5388        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mail-2.5.4/lib/mail/parsers/rfc2822_obsolete.rb:
   15      def _nt_obs_qp
   16        start_index = index
   17:       if node_cache[:obs_qp].has_key?(index)
   18:         cached = node_cache[:obs_qp][index]
   19:         if cached
   20:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   21:           @index = cached.interval.end
   22          end
   23:         return cached
   24        end
   25  
   ..
   50        end
   51  
   52:       node_cache[:obs_qp][start_index] = r0
   53  
   54        r0
   ..
   67      def _nt_obs_text
   68        start_index = index
   69:       if node_cache[:obs_text].has_key?(index)
   70:         cached = node_cache[:obs_text][index]
   71:         if cached
   72:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   73:           @index = cached.interval.end
   74          end
   75:         return cached
   76        end
   77  
   ..
  157        end
  158  
  159:       node_cache[:obs_text][start_index] = r0
  160  
  161        r0
  ...
  164      def _nt_obs_char
  165        start_index = index
  166:       if node_cache[:obs_char].has_key?(index)
  167:         cached = node_cache[:obs_char][index]
  168:         if cached
  169:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  170:           @index = cached.interval.end
  171          end
  172:         return cached
  173        end
  174  
  ...
  207        end
  208  
  209:       node_cache[:obs_char][start_index] = r0
  210  
  211        r0
  ...
  214      def _nt_obs_utext
  215        start_index = index
  216:       if node_cache[:obs_utext].has_key?(index)
  217:         cached = node_cache[:obs_utext][index]
  218:         if cached
  219:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  220:           @index = cached.interval.end
  221          end
  222:         return cached
  223        end
  224  
  225        r0 = _nt_obs_text
  226  
  227:       node_cache[:obs_utext][start_index] = r0
  228  
  229        r0
  ...
  232      def _nt_obs_phrase
  233        start_index = index
  234:       if node_cache[:obs_phrase].has_key?(index)
  235:         cached = node_cache[:obs_phrase][index]
  236:         if cached
  237:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  238:           @index = cached.interval.end
  239          end
  240:         return cached
  241        end
  242  
  ...
  286        end
  287  
  288:       node_cache[:obs_phrase][start_index] = r0
  289  
  290        r0
  ...
  299      def _nt_obs_phrase_list
  300        start_index = index
  301:       if node_cache[:obs_phrase_list].has_key?(index)
  302:         cached = node_cache[:obs_phrase_list][index]
  303:         if cached
  304:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  305:           @index = cached.interval.end
  306          end
  307:         return cached
  308        end
  309  
  ...
  396        end
  397  
  398:       node_cache[:obs_phrase_list][start_index] = r0
  399  
  400        r0
  ...
  413      def _nt_obs_FWS
  414        start_index = index
  415:       if node_cache[:obs_FWS].has_key?(index)
  416:         cached = node_cache[:obs_FWS][index]
  417:         if cached
  418:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  419:           @index = cached.interval.end
  420          end
  421:         return cached
  422        end
  423  
  ...
  487        end
  488  
  489:       node_cache[:obs_FWS][start_index] = r0
  490  
  491        r0
  ...
  501      def _nt_obs_day_of_week
  502        start_index = index
  503:       if node_cache[:obs_day_of_week].has_key?(index)
  504:         cached = node_cache[:obs_day_of_week][index]
  505:         if cached
  506:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  507:           @index = cached.interval.end
  508          end
  509:         return cached
  510        end
  511  
  ...
  539        end
  540  
  541:       node_cache[:obs_day_of_week][start_index] = r0
  542  
  543        r0
  ...
  559      def _nt_obs_year
  560        start_index = index
  561:       if node_cache[:obs_year].has_key?(index)
  562:         cached = node_cache[:obs_year][index]
  563:         if cached
  564:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  565:           @index = cached.interval.end
  566          end
  567:         return cached
  568        end
  569  
  ...
  610        end
  611  
  612:       node_cache[:obs_year][start_index] = r0
  613  
  614        r0
  ...
  631      def _nt_obs_month
  632        start_index = index
  633:       if node_cache[:obs_month].has_key?(index)
  634:         cached = node_cache[:obs_month][index]
  635:         if cached
  636:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  637:           @index = cached.interval.end
  638          end
  639:         return cached
  640        end
  641  
  ...
  659        end
  660  
  661:       node_cache[:obs_month][start_index] = r0
  662  
  663        r0
  ...
  679      def _nt_obs_day
  680        start_index = index
  681:       if node_cache[:obs_day].has_key?(index)
  682:         cached = node_cache[:obs_day][index]
  683:         if cached
  684:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  685:           @index = cached.interval.end
  686          end
  687:         return cached
  688        end
  689  
  ...
  742        end
  743  
  744:       node_cache[:obs_day][start_index] = r0
  745  
  746        r0
  ...
  762      def _nt_obs_hour
  763        start_index = index
  764:       if node_cache[:obs_hour].has_key?(index)
  765:         cached = node_cache[:obs_hour][index]
  766:         if cached
  767:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  768:           @index = cached.interval.end
  769          end
  770:         return cached
  771        end
  772  
  ...
  813        end
  814  
  815:       node_cache[:obs_hour][start_index] = r0
  816  
  817        r0
  ...
  833      def _nt_obs_minute
  834        start_index = index
  835:       if node_cache[:obs_minute].has_key?(index)
  836:         cached = node_cache[:obs_minute][index]
  837:         if cached
  838:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  839:           @index = cached.interval.end
  840          end
  841:         return cached
  842        end
  843  
  ...
  884        end
  885  
  886:       node_cache[:obs_minute][start_index] = r0
  887  
  888        r0
  ...
  904      def _nt_obs_second
  905        start_index = index
  906:       if node_cache[:obs_second].has_key?(index)
  907:         cached = node_cache[:obs_second][index]
  908:         if cached
  909:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  910:           @index = cached.interval.end
  911          end
  912:         return cached
  913        end
  914  
  ...
  955        end
  956  
  957:       node_cache[:obs_second][start_index] = r0
  958  
  959        r0
  ...
  962      def _nt_obs_zone
  963        start_index = index
  964:       if node_cache[:obs_zone].has_key?(index)
  965:         cached = node_cache[:obs_zone][index]
  966:         if cached
  967:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  968:           @index = cached.interval.end
  969          end
  970:         return cached
  971        end
  972  
  ...
 1125        end
 1126  
 1127:       node_cache[:obs_zone][start_index] = r0
 1128  
 1129        r0
 ....
 1139      def _nt_obs_angle_addr
 1140        start_index = index
 1141:       if node_cache[:obs_angle_addr].has_key?(index)
 1142:         cached = node_cache[:obs_angle_addr][index]
 1143:         if cached
 1144:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1145:           @index = cached.interval.end
 1146          end
 1147:         return cached
 1148        end
 1149  
 ....
 1206        end
 1207  
 1208:       node_cache[:obs_angle_addr][start_index] = r0
 1209  
 1210        r0
 ....
 1220      def _nt_obs_route
 1221        start_index = index
 1222:       if node_cache[:obs_route].has_key?(index)
 1223:         cached = node_cache[:obs_route][index]
 1224:         if cached
 1225:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1226:           @index = cached.interval.end
 1227          end
 1228:         return cached
 1229        end
 1230  
 ....
 1268        end
 1269  
 1270:       node_cache[:obs_route][start_index] = r0
 1271  
 1272        r0
 ....
 1288      def _nt_obs_domain_list
 1289        start_index = index
 1290:       if node_cache[:obs_domain_list].has_key?(index)
 1291:         cached = node_cache[:obs_domain_list][index]
 1292:         if cached
 1293:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1294:           @index = cached.interval.end
 1295          end
 1296:         return cached
 1297        end
 1298  
 ....
 1378        end
 1379  
 1380:       node_cache[:obs_domain_list][start_index] = r0
 1381  
 1382        r0
 ....
 1398      def _nt_obs_local_part
 1399        start_index = index
 1400:       if node_cache[:obs_local_part].has_key?(index)
 1401:         cached = node_cache[:obs_local_part][index]
 1402:         if cached
 1403:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1404:           @index = cached.interval.end
 1405          end
 1406:         return cached
 1407        end
 1408  
 ....
 1450        end
 1451  
 1452:       node_cache[:obs_local_part][start_index] = r0
 1453  
 1454        r0
 ....
 1470      def _nt_obs_domain
 1471        start_index = index
 1472:       if node_cache[:obs_domain].has_key?(index)
 1473:         cached = node_cache[:obs_domain][index]
 1474:         if cached
 1475:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1476:           @index = cached.interval.end
 1477          end
 1478:         return cached
 1479        end
 1480  
 ....
 1522        end
 1523  
 1524:       node_cache[:obs_domain][start_index] = r0
 1525  
 1526        r0
 ....
 1535      def _nt_obs_mbox_list
 1536        start_index = index
 1537:       if node_cache[:obs_mbox_list].has_key?(index)
 1538:         cached = node_cache[:obs_mbox_list][index]
 1539:         if cached
 1540:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1541:           @index = cached.interval.end
 1542          end
 1543:         return cached
 1544        end
 1545  
 ....
 1620        end
 1621  
 1622:       node_cache[:obs_mbox_list][start_index] = r0
 1623  
 1624        r0
 ....
 1633      def _nt_obs_addr_list
 1634        start_index = index
 1635:       if node_cache[:obs_addr_list].has_key?(index)
 1636:         cached = node_cache[:obs_addr_list][index]
 1637:         if cached
 1638:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1639:           @index = cached.interval.end
 1640          end
 1641:         return cached
 1642        end
 1643  
 ....
 1718        end
 1719  
 1720:       node_cache[:obs_addr_list][start_index] = r0
 1721  
 1722        r0
 ....
 1725      def _nt_obs_fields
 1726        start_index = index
 1727:       if node_cache[:obs_fields].has_key?(index)
 1728:         cached = node_cache[:obs_fields][index]
 1729:         if cached
 1730:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1731:           @index = cached.interval.end
 1732          end
 1733:         return cached
 1734        end
 1735  
 ....
 1867        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
 1868  
 1869:       node_cache[:obs_fields][start_index] = r0
 1870  
 1871        r0
 ....
 1884      def _nt_obs_orig_date
 1885        start_index = index
 1886:       if node_cache[:obs_orig_date].has_key?(index)
 1887:         cached = node_cache[:obs_orig_date][index]
 1888:         if cached
 1889:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1890:           @index = cached.interval.end
 1891          end
 1892:         return cached
 1893        end
 1894  
 ....
 1941        end
 1942  
 1943:       node_cache[:obs_orig_date][start_index] = r0
 1944  
 1945        r0
 ....
 1958      def _nt_obs_from
 1959        start_index = index
 1960:       if node_cache[:obs_from].has_key?(index)
 1961:         cached = node_cache[:obs_from][index]
 1962:         if cached
 1963:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1964:           @index = cached.interval.end
 1965          end
 1966:         return cached
 1967        end
 1968  
 ....
 2015        end
 2016  
 2017:       node_cache[:obs_from][start_index] = r0
 2018  
 2019        r0
 ....
 2032      def _nt_obs_sender
 2033        start_index = index
 2034:       if node_cache[:obs_sender].has_key?(index)
 2035:         cached = node_cache[:obs_sender][index]
 2036:         if cached
 2037:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2038:           @index = cached.interval.end
 2039          end
 2040:         return cached
 2041        end
 2042  
 ....
 2089        end
 2090  
 2091:       node_cache[:obs_sender][start_index] = r0
 2092  
 2093        r0
 ....
 2106      def _nt_obs_reply_to
 2107        start_index = index
 2108:       if node_cache[:obs_reply_to].has_key?(index)
 2109:         cached = node_cache[:obs_reply_to][index]
 2110:         if cached
 2111:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2112:           @index = cached.interval.end
 2113          end
 2114:         return cached
 2115        end
 2116  
 ....
 2163        end
 2164  
 2165:       node_cache[:obs_reply_to][start_index] = r0
 2166  
 2167        r0
 ....
 2180      def _nt_obs_to
 2181        start_index = index
 2182:       if node_cache[:obs_to].has_key?(index)
 2183:         cached = node_cache[:obs_to][index]
 2184:         if cached
 2185:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2186:           @index = cached.interval.end
 2187          end
 2188:         return cached
 2189        end
 2190  
 ....
 2237        end
 2238  
 2239:       node_cache[:obs_to][start_index] = r0
 2240  
 2241        r0
 ....
 2254      def _nt_obs_cc
 2255        start_index = index
 2256:       if node_cache[:obs_cc].has_key?(index)
 2257:         cached = node_cache[:obs_cc][index]
 2258:         if cached
 2259:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2260:           @index = cached.interval.end
 2261          end
 2262:         return cached
 2263        end
 2264  
 ....
 2311        end
 2312  
 2313:       node_cache[:obs_cc][start_index] = r0
 2314  
 2315        r0
 ....
 2324      def _nt_obs_bcc
 2325        start_index = index
 2326:       if node_cache[:obs_bcc].has_key?(index)
 2327:         cached = node_cache[:obs_bcc][index]
 2328:         if cached
 2329:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2330:           @index = cached.interval.end
 2331          end
 2332:         return cached
 2333        end
 2334  
 ....
 2398        end
 2399  
 2400:       node_cache[:obs_bcc][start_index] = r0
 2401  
 2402        r0
 ....
 2415      def _nt_obs_message_id
 2416        start_index = index
 2417:       if node_cache[:obs_message_id].has_key?(index)
 2418:         cached = node_cache[:obs_message_id][index]
 2419:         if cached
 2420:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2421:           @index = cached.interval.end
 2422          end
 2423:         return cached
 2424        end
 2425  
 ....
 2472        end
 2473  
 2474:       node_cache[:obs_message_id][start_index] = r0
 2475  
 2476        r0
 ....
 2485      def _nt_obs_in_reply_to
 2486        start_index = index
 2487:       if node_cache[:obs_in_reply_to].has_key?(index)
 2488:         cached = node_cache[:obs_in_reply_to][index]
 2489:         if cached
 2490:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2491:           @index = cached.interval.end
 2492          end
 2493:         return cached
 2494        end
 2495  
 ....
 2563        end
 2564  
 2565:       node_cache[:obs_in_reply_to][start_index] = r0
 2566  
 2567        r0
 ....
 2576      def _nt_obs_references
 2577        start_index = index
 2578:       if node_cache[:obs_references].has_key?(index)
 2579:         cached = node_cache[:obs_references][index]
 2580:         if cached
 2581:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2582:           @index = cached.interval.end
 2583          end
 2584:         return cached
 2585        end
 2586  
 ....
 2654        end
 2655  
 2656:       node_cache[:obs_references][start_index] = r0
 2657  
 2658        r0
 ....
 2661      def _nt_obs_id_left
 2662        start_index = index
 2663:       if node_cache[:obs_id_left].has_key?(index)
 2664:         cached = node_cache[:obs_id_left][index]
 2665:         if cached
 2666:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2667:           @index = cached.interval.end
 2668          end
 2669:         return cached
 2670        end
 2671  
 2672        r0 = _nt_local_part
 2673  
 2674:       node_cache[:obs_id_left][start_index] = r0
 2675  
 2676        r0
 ....
 2679      def _nt_obs_id_right
 2680        start_index = index
 2681:       if node_cache[:obs_id_right].has_key?(index)
 2682:         cached = node_cache[:obs_id_right][index]
 2683:         if cached
 2684:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2685:           @index = cached.interval.end
 2686          end
 2687:         return cached
 2688        end
 2689  
 2690        r0 = _nt_domain
 2691  
 2692:       node_cache[:obs_id_right][start_index] = r0
 2693  
 2694        r0
 ....
 2707      def _nt_obs_subject
 2708        start_index = index
 2709:       if node_cache[:obs_subject].has_key?(index)
 2710:         cached = node_cache[:obs_subject][index]
 2711:         if cached
 2712:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2713:           @index = cached.interval.end
 2714          end
 2715:         return cached
 2716        end
 2717  
 ....
 2764        end
 2765  
 2766:       node_cache[:obs_subject][start_index] = r0
 2767  
 2768        r0
 ....
 2781      def _nt_obs_comments
 2782        start_index = index
 2783:       if node_cache[:obs_comments].has_key?(index)
 2784:         cached = node_cache[:obs_comments][index]
 2785:         if cached
 2786:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2787:           @index = cached.interval.end
 2788          end
 2789:         return cached
 2790        end
 2791  
 ....
 2838        end
 2839  
 2840:       node_cache[:obs_comments][start_index] = r0
 2841  
 2842        r0
 ....
 2855      def _nt_obs_keywords
 2856        start_index = index
 2857:       if node_cache[:obs_keywords].has_key?(index)
 2858:         cached = node_cache[:obs_keywords][index]
 2859:         if cached
 2860:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2861:           @index = cached.interval.end
 2862          end
 2863:         return cached
 2864        end
 2865  
 ....
 2912        end
 2913  
 2914:       node_cache[:obs_keywords][start_index] = r0
 2915  
 2916        r0
 ....
 2929      def _nt_obs_resent_from
 2930        start_index = index
 2931:       if node_cache[:obs_resent_from].has_key?(index)
 2932:         cached = node_cache[:obs_resent_from][index]
 2933:         if cached
 2934:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2935:           @index = cached.interval.end
 2936          end
 2937:         return cached
 2938        end
 2939  
 ....
 2986        end
 2987  
 2988:       node_cache[:obs_resent_from][start_index] = r0
 2989  
 2990        r0
 ....
 3003      def _nt_obs_resent_send
 3004        start_index = index
 3005:       if node_cache[:obs_resent_send].has_key?(index)
 3006:         cached = node_cache[:obs_resent_send][index]
 3007:         if cached
 3008:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3009:           @index = cached.interval.end
 3010          end
 3011:         return cached
 3012        end
 3013  
 ....
 3060        end
 3061  
 3062:       node_cache[:obs_resent_send][start_index] = r0
 3063  
 3064        r0
 ....
 3077      def _nt_obs_resent_date
 3078        start_index = index
 3079:       if node_cache[:obs_resent_date].has_key?(index)
 3080:         cached = node_cache[:obs_resent_date][index]
 3081:         if cached
 3082:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3083:           @index = cached.interval.end
 3084          end
 3085:         return cached
 3086        end
 3087  
 ....
 3134        end
 3135  
 3136:       node_cache[:obs_resent_date][start_index] = r0
 3137  
 3138        r0
 ....
 3151      def _nt_obs_resent_to
 3152        start_index = index
 3153:       if node_cache[:obs_resent_to].has_key?(index)
 3154:         cached = node_cache[:obs_resent_to][index]
 3155:         if cached
 3156:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3157:           @index = cached.interval.end
 3158          end
 3159:         return cached
 3160        end
 3161  
 ....
 3208        end
 3209  
 3210:       node_cache[:obs_resent_to][start_index] = r0
 3211  
 3212        r0
 ....
 3225      def _nt_obs_resent_cc
 3226        start_index = index
 3227:       if node_cache[:obs_resent_cc].has_key?(index)
 3228:         cached = node_cache[:obs_resent_cc][index]
 3229:         if cached
 3230:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3231:           @index = cached.interval.end
 3232          end
 3233:         return cached
 3234        end
 3235  
 ....
 3282        end
 3283  
 3284:       node_cache[:obs_resent_cc][start_index] = r0
 3285  
 3286        r0
 ....
 3295      def _nt_obs_resent_bcc
 3296        start_index = index
 3297:       if node_cache[:obs_resent_bcc].has_key?(index)
 3298:         cached = node_cache[:obs_resent_bcc][index]
 3299:         if cached
 3300:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3301:           @index = cached.interval.end
 3302          end
 3303:         return cached
 3304        end
 3305  
 ....
 3369        end
 3370  
 3371:       node_cache[:obs_resent_bcc][start_index] = r0
 3372  
 3373        r0
 ....
 3386      def _nt_obs_resent_mid
 3387        start_index = index
 3388:       if node_cache[:obs_resent_mid].has_key?(index)
 3389:         cached = node_cache[:obs_resent_mid][index]
 3390:         if cached
 3391:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3392:           @index = cached.interval.end
 3393          end
 3394:         return cached
 3395        end
 3396  
 ....
 3443        end
 3444  
 3445:       node_cache[:obs_resent_mid][start_index] = r0
 3446  
 3447        r0
 ....
 3460      def _nt_obs_resent_rply
 3461        start_index = index
 3462:       if node_cache[:obs_resent_rply].has_key?(index)
 3463:         cached = node_cache[:obs_resent_rply][index]
 3464:         if cached
 3465:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3466:           @index = cached.interval.end
 3467          end
 3468:         return cached
 3469        end
 3470  
 ....
 3517        end
 3518  
 3519:       node_cache[:obs_resent_rply][start_index] = r0
 3520  
 3521        r0
 ....
 3534      def _nt_obs_return
 3535        start_index = index
 3536:       if node_cache[:obs_return].has_key?(index)
 3537:         cached = node_cache[:obs_return][index]
 3538:         if cached
 3539:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3540:           @index = cached.interval.end
 3541          end
 3542:         return cached
 3543        end
 3544  
 ....
 3591        end
 3592  
 3593:       node_cache[:obs_return][start_index] = r0
 3594  
 3595        r0
 ....
 3608      def _nt_obs_received
 3609        start_index = index
 3610:       if node_cache[:obs_received].has_key?(index)
 3611:         cached = node_cache[:obs_received][index]
 3612:         if cached
 3613:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3614:           @index = cached.interval.end
 3615          end
 3616:         return cached
 3617        end
 3618  
 ....
 3665        end
 3666  
 3667:       node_cache[:obs_received][start_index] = r0
 3668  
 3669        r0
 ....
 3672      def _nt_obs_path
 3673        start_index = index
 3674:       if node_cache[:obs_path].has_key?(index)
 3675:         cached = node_cache[:obs_path][index]
 3676:         if cached
 3677:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3678:           @index = cached.interval.end
 3679          end
 3680:         return cached
 3681        end
 3682  
 3683        r0 = _nt_obs_angle_addr
 3684  
 3685:       node_cache[:obs_path][start_index] = r0
 3686  
 3687        r0
 ....
 3704      def _nt_obs_optional
 3705        start_index = index
 3706:       if node_cache[:obs_optional].has_key?(index)
 3707:         cached = node_cache[:obs_optional][index]
 3708:         if cached
 3709:           cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3710:           @index = cached.interval.end
 3711          end
 3712:         return cached
 3713        end
 3714  
 ....
 3755        end
 3756  
 3757:       node_cache[:obs_optional][start_index] = r0
 3758  
 3759        r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/History.rdoc:
   90      application/vnd.ms-fontobject, .eot; application/x-chrome-extension, .crx;
   91      application/x-web-app-manifest\+json, .webapp; application/x-xpinstall,
   92:     .xpi; image/svg\+xml, .svg, .svgz; image/webp, .webp; text/cache-manifest,
   93:     .appcache, .manifest. https://github.com/halostatue/mime-types/pull/24
   94  * Fixed some Manifest.txt related madness on Travis.
   95  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/lib/mime/types.rb:
  582      end
  583  
  584:     class CacheContainer # :nodoc:
  585        attr_reader :version, :data
  586        def initialize(version, data)
  ...
  608  
  609      # Returns the number of known types. A shortcut of MIME::Types[//].size.
  610:     # (Keep in mind that this is memory intensive, cache the result to spare
  611      # resources)
  612      def count
  ...
  890        end
  891  
  892:       # Returns the currently defined cache file, if any.
  893:       def cache_file
  894:         ENV['RUBY_MIME_TYPES_CACHE']
  895        end
  896  
  897        private
  898:       def load_mime_types_from_cache
  899:         load_mime_types_from_cache! if cache_file
  900        end
  901  
  902:       def load_mime_types_from_cache!
  903:         raise ArgumentError, "No RUBY_MIME_TYPES_CACHE set." unless cache_file
  904:         return false unless File.exists? cache_file
  905  
  906          begin
  907:           data      = File.read(cache_file)
  908            container = Marshal.load(data)
  909  
  ...
  915            end
  916          rescue => e
  917:           warn "Could not load MIME::Types cache: #{e}"
  918            false
  919          end
  920        end
  921  
  922:       def write_mime_types_to_cache
  923:         write_mime_types_to_cache! if cache_file
  924        end
  925  
  926:       def write_mime_types_to_cache!
  927:         raise ArgumentError, "No RUBY_MIME_TYPES_CACHE set." unless cache_file
  928  
  929:         File.open(cache_file, 'w') do |f|
  930:           cache = MIME::Types::CacheContainer.new(VERSION,
  931                                                    Marshal.dump(__types__))
  932:           f.write Marshal.dump(cache)
  933          end
  934  
  ...
  955        def load_mime_types
  956          @__types__ = new(VERSION)
  957:         unless load_mime_types_from_cache
  958            load_and_parse_mime_types
  959:           write_mime_types_to_cache
  960          end
  961        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/lib/mime/types/application:
  750  application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml 'IANA,[Murata]
  751  application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml 'IANA,[Murata]
  752: application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml 'IANA,[Murata]
  753: application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml 'IANA,[Murata]
  754  application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml 'IANA,[Murata]
  755  application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml 'IANA,[Murata]
  ...
  915  application/vnd.uplanet.bearer-choice 'IANA,[Martin]
  916  application/vnd.uplanet.bearer-choice-wbxml 'IANA,[Martin]
  917: application/vnd.uplanet.cacheop 'IANA,[Martin]
  918: application/vnd.uplanet.cacheop-wbxml 'IANA,[Martin]
  919  application/vnd.uplanet.channel 'IANA,[Martin]
  920  application/vnd.uplanet.channel-wbxml 'IANA,[Martin]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/lib/mime/types/text.nonstandard:
    1: text/cache-manifest @appcache,manifest
    2  text/x-coffescript @coffee :8bit
    3  text/x-component @htc :8bit

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/Manifest.txt:
   39  test/test_mime_type.rb
   40  test/test_mime_types.rb
   41: test/test_mime_types_cache.rb
   42  test/test_mime_types_lazy.rb
   43  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/Rakefile:
   49    $LOAD_PATH.unshift 'lib'
   50  
   51:   cache_file = File.expand_path('../cache.mtx', __FILE__)
   52:   rm cache_file if File.exist? cache_file
   53  
   54    Benchmark.bm(17) do |x|
   ..
   61      ENV.delete('RUBY_MIME_TYPES_LAZY_LOAD')
   62  
   63:     ENV['RUBY_MIME_TYPES_CACHE'] = cache_file
   64      reload_mime_types
   65  
   66:     x.report("Cached:") { reload_mime_types repeats }
   67      ENV['RUBY_MIME_TYPES_LAZY_LOAD'] = 'yes'
   68:     x.report("Lazy Cached:") { reload_mime_types repeats }
   69:     x.report("Lazy Cached Load:") { reload_mime_types repeats, true }
   70  
   71    end
   72  
   73:   rm cache_file
   74  end
   75  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/README.rdoc:
   19  were initially implemented by Greg Brockman (gdb). As these features are
   20  experimental, they are disabled by default and must be enabled through the use
   21: of environment variables. The cache is invalidated on a per-version basis; the
   22: cache for version 1.25 will not be reused for any later version.
   23  
   24  To use lazy loading, set the environment variable +RUBY_MIME_TYPES_LAZY_LOAD+
   ..
   28  generally useful, however, as the MIME::Types database has not been loaded.
   29  Lazy startup and load is just *slightly* faster—around 1 ms. The real advantage
   30: comes from using the cache.
   31  
   32: To enable the cache, set the environment variable +RUBY_MIME_TYPES_CACHE+ to a
   33  filename where MIME::Types will have read-write access. The first time a new
   34  version of MIME::Types is run using this file, it will be created, taking a
   35: little longer than normal. Subsequent loads using the same cache file will be
   36  approximately 3½× faster (25 ms) than normal loads. This can be combined with
   37  +RUBY_MIME_TYPES_LAZY_LOAD+, but this is *not* recommended in a multithreaded
   38  or multiprocess environment where all threads or processes will be using the
   39: same cache file.
   40  
   41: As the caching interface is still experimental, the only values cached are the
   42  default MIME::Types database, not any custom MIME::Types added by users.
   43  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/test/test_mime_types_cache.rb:
    3  require 'mime/types'
    4  
    5: class TestMIMETypesCache < Minitest::Test
    6    def setup
    7      require 'fileutils'
    8:     @cache_file = File.expand_path('../cache.tst', __FILE__)
    9:     ENV['RUBY_MIME_TYPES_CACHE'] = @cache_file
   10:     clear_cache_file
   11    end
   12  
   13    def teardown
   14:     clear_cache_file
   15:     ENV.delete('RUBY_MIME_TYPES_CACHE')
   16    end
   17  
   ..
   21    end
   22  
   23:   def clear_cache_file
   24:     FileUtils.rm @cache_file if File.exist? @cache_file
   25    end
   26  
   27:   def test_uses_correct_cache_file
   28:     assert_equal(@cache_file, MIME::Types.cache_file)
   29    end
   30  
   31:   def test_does_not_use_cache_when_unset
   32:     ENV.delete('RUBY_MIME_TYPES_CACHE')
   33:     assert_equal(nil, MIME::Types.send(:load_mime_types_from_cache))
   34    end
   35  
   36:   def test_raises_exception_when_load_forced_without_cache_file
   37      assert_raises(ArgumentError) {
   38:       ENV.delete('RUBY_MIME_TYPES_CACHE')
   39:       MIME::Types.send(:load_mime_types_from_cache!)
   40      }
   41    end
   42  
   43:   def test_does_not_use_cache_when_missing
   44:     assert_equal(false, MIME::Types.send(:load_mime_types_from_cache))
   45    end
   46  
   47:   def test_does_not_create_cache_when_unset
   48:     ENV.delete('RUBY_MIME_TYPES_CACHE')
   49:     assert_equal(nil, MIME::Types.send(:write_mime_types_to_cache))
   50    end
   51  
   52:   def test_raises_exception_when_write_forced_without_cache_file
   53      assert_raises(ArgumentError) {
   54:       ENV.delete('RUBY_MIME_TYPES_CACHE')
   55:       MIME::Types.send(:write_mime_types_to_cache!)
   56      }
   57    end
   58  
   59:   def test_creates_cache
   60:     assert_equal(false, File.exist?(@cache_file))
   61:     MIME::Types.send(:write_mime_types_to_cache)
   62:     assert_equal(true, File.exist?(@cache_file))
   63    end
   64  
   65:   def test_uses_cache
   66      html = MIME::Types['text/html'].first
   67      html.extensions << 'hex'
   68:     MIME::Types.send(:write_mime_types_to_cache)
   69      MIME::Types.instance_variable_set(:@__types__, nil)
   70  
   71:     assert_equal(true, MIME::Types.send(:load_mime_types_from_cache))
   72      html = MIME::Types['text/html'].first
   73      assert_includes(html.extensions, 'hex')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/mime-types-1.25.1/test/test_mime_types_lazy.rb:
    6    def setup
    7      ENV['RUBY_MIME_TYPES_LAZY_LOAD'] = 'true'
    8:     ENV['RUBY_MIME_TYPES_CACHE'] = File.expand_path('../cache.tst', __FILE__)
    9:     MIME::Types.send(:write_mime_types_to_cache)
   10    end
   11  
   12    def teardown
   13      reset_mime_types
   14:     if File.exist? ENV['RUBY_MIME_TYPES_CACHE']
   15:       FileUtils.rm ENV['RUBY_MIME_TYPES_CACHE']
   16:       ENV.delete('RUBY_MIME_TYPES_CACHE')
   17      end
   18      ENV.delete('RUBY_MIME_TYPES_LAZY_LOAD')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_json-1.9.3/CHANGELOG.md:
   61  1.7.4
   62  -----
   63: * [Cache options for better performance](https://github.com/intridea/multi_json/commit/8a26ee93140c4bed36194ed9fb887a1b6919257b)
   64  
   65  1.7.3

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_json-1.9.3/lib/multi_json.rb:
    9  
   10    class << self
   11:     def cached_options
   12:       @cached_options ||= {}
   13      end
   14  
   15:     def reset_cached_options!
   16:       @cached_options = {}
   17      end
   18    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_json-1.9.3/lib/multi_json/adapter.rb:
   28  
   29        def collect_load_options(options)
   30:         cache('load', options){ collect_options(:load_options, options).merge(options) }
   31        end
   32  
   33        def collect_dump_options(options)
   34:         cache('dump', options){ collect_options(:dump_options, options).merge(options) }
   35        end
   36  
   ..
   40        end
   41  
   42:       def cache(method, options)
   43:         cache_key = [self, options].map(&:hash).join + method
   44:         MultiJson.cached_options[cache_key] ||= yield
   45        end
   46  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_json-1.9.3/lib/multi_json/options.rb:
    3  
    4      def load_options=(options)
    5:       MultiJson.reset_cached_options!
    6        @load_options = options
    7      end
    8  
    9      def dump_options=(options)
   10:       MultiJson.reset_cached_options!
   11        @dump_options = options
   12      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_json-1.9.3/spec/multi_json_spec.rb:
   36      let(:json_string){ '{"abc":"def"}' }
   37  
   38:     it 'busts caches on global options change' do
   39        MultiJson.load_options = { :symbolize_keys => true }
   40        expect(MultiJson.load(json_string)).to eq(:abc => 'def')
   ..
   43      end
   44  
   45:     it 'busts caches on per-adapter options change' do
   46        adapter.load_options = { :symbolize_keys => true }
   47        expect(MultiJson.load(json_string)).to eq(:abc => 'def')
   ..
   52  
   53    it 'defaults to the best available gem' do
   54:     # Clear cache variable already set by previous tests
   55      MultiJson.send(:remove_instance_variable, :@adapter) if MultiJson.instance_variable_defined?(:@adapter)
   56  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multi_xml-0.5.5/spec/multi_xml_spec.rb:
   12  
   13      it "defaults to the best available gem" do
   14:       # Clear cache variable already set by previous tests
   15        MultiXml.send(:remove_instance_variable, :@parser)
   16        expect(MultiXml.parser.name).to eq('MultiXml::Parsers::Ox')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/multipart-post-1.2.0/Gemfile.lock:
    9      archive-tar-minitar (0.5.2)
   10      columnize (0.3.6)
   11:     linecache (0.43)
   12:     linecache19 (0.5.12)
   13        ruby_core_source (>= 0.1.4)
   14      rake (0.9.2.2)
   ..
   17        ruby-debug-base (~> 0.10.3.0)
   18      ruby-debug-base (0.10.3)
   19:       linecache (>= 0.3)
   20      ruby-debug-base19 (0.11.25)
   21        columnize (>= 0.3.1)
   22:       linecache19 (>= 0.5.11)
   23        ruby_core_source (>= 0.1.4)
   24      ruby-debug19 (0.11.6)
   25        columnize (>= 0.3.1)
   26:       linecache19 (>= 0.5.11)
   27        ruby-debug-base19 (>= 0.11.19)
   28      ruby_core_source (0.1.5)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/net-ldap-0.3.1/lib/net/ldap.rb:
  702    #
  703    # You don't have to create a new instance of Net::LDAP every time you
  704:   # perform a binding in this way. If you prefer, you can cache the
  705    # Net::LDAP object and re-use it to perform subsequent bindings,
  706    # <i>provided</i> you call #auth to specify a new credential before

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/CHANGELOG.rdoc:
  596  
  597    * extconf.rb checks for optional RelaxNG and Schema functions
  598:   * Namespace nodes are added to the Document node cache
  599  
  600  
  ...
  755  * Bugfixes
  756  
  757:   * Mutex lock on CSS cache access
  758    * Fixed build problems with GCC 3.3.5
  759    * XML::Node#to_xml now takes an indentation argument
  ...
  782    * filter() and not() hpricot compatibility added
  783    * CSS searches via Node#search are now always relative
  784:   * CSS to XPath conversion is now cached
  785  
  786  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/configure.log:
   72  checking if gcc supports -c -o file.o... /bin/rm: cannot remove `conftest*': No such file or directory
   73  yes
   74: checking if gcc supports -c -o file.o... (cached) yes
   75  checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
   76  checking whether -lc should be explicitly linked in... /bin/rm: cannot remove `conftest*': No such file or directory
   ..
   94  checking for dirent.h that defines DIR... yes
   95  checking for library containing opendir... none required
   96: checking for ANSI C header files... (cached) yes
   97  checking fcntl.h usability... yes
   98  checking fcntl.h presence... yes
   99  checking for fcntl.h... yes
  100: checking for unistd.h... (cached) yes
  101  checking ctype.h usability... yes
  102  checking ctype.h presence... yes
  ...
  114  checking stdarg.h presence... yes
  115  checking for stdarg.h... yes
  116: checking for sys/stat.h... (cached) yes
  117: checking for sys/types.h... (cached) yes
  118: checking for stdint.h... (cached) yes
  119: checking for inttypes.h... (cached) yes
  120  checking time.h usability... yes
  121  checking time.h presence... yes
  ...
  142  checking float.h presence... yes
  143  checking for float.h... yes
  144: checking for stdlib.h... (cached) yes
  145  checking for sys/socket.h... yes
  146  checking for netinet/in.h... yes
  ...
  172  checking dl.h presence... no
  173  checking for dl.h... no
  174: checking for dlfcn.h... (cached) yes
  175  Checking libraries
  176  checking for strftime... yes
  ...
  183  checking for class... no
  184  checking for fpclass... no
  185: checking for strftime... (cached) yes
  186  checking for localtime... yes
  187  checking for gettimeofday... yes

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/aclocal.m4:
  165  # See how the compiler implements dependency checking.
  166  # NAME is "CC", "CXX", "GCJ", or "OBJC".
  167: # We try a few techniques and use that to set a single cache variable.
  168  #
  169  # We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was
  ...
  184                     [depcc="$$1"   am_compiler_list=])
  185  
  186: AC_CACHE_CHECK([dependency style of $depcc],
  187                 [am_cv_$1_dependencies_compiler_type],
  188  [if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  ...
  966    esac
  967  
  968:   # If the value was cached, stop now.  We just wanted to have am__tar
  969    # and am__untar set.
  970    test -n "${am_cv_prog_tar_$1}" && break
  ...
  983  rm -rf conftest.dir
  984  
  985: AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
  986  AC_MSG_RESULT([$am_cv_prog_tar_$1])])
  987  AC_SUBST([am__tar])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/ChangeLog:
 1753  	  that xmlSchemaIDCMatcher structs are massively recreated
 1754  	  although only a maximum of 3 structs is used at the same
 1755: 	  time; added a cache for those structures to the
 1756  	  validation context.
 1757  
 ....
 1986  	* xpath.c include/libxml/xpath.h runsuite.c:
 1987  	  Changed the name of the recently added public function
 1988: 	  xmlXPathContextSetObjectCache() to
 1989: 	  xmlXPathContextSetCache(); so a more generic one, in
 1990: 	  case we decide to cache more things than only XPath
 1991  	  objects.
 1992  
 ....
 2005  	  node-collecting traversal of the descendant-or-self axis.
 2006  	  Some tests indicate that this can reduce execution time of
 2007: 	  "//foo" to 50%. Together with the XPath object cache this
 2008  	  all significantly speeds up libxslt.
 2009  
 ....
 2033  Mon May 29 18:06:17 CEST 2006 Kasimier Buchcik <libxml2-cvs@cazic.net>
 2034  
 2035: 	* xpath.c include/libxml/xpath.h: Added an XPath object cache.
 2036  	  It sits on an xmlXPathContext and need to be explicitely
 2037  	  activated (or deactivated again) with
 2038: 	  xmlXPathContextSetObjectCache(). The cache consists of 5
 2039  	  lists for node-set, string, number, boolean and misc XPath
 2040  	  objects. Internally the xpath.c module will use object-
 2041  	  deposition and -acquisition functions which will try to reuse
 2042  	  as many XPath objects as possible, and fallback to normal
 2043: 	  free/create behaviour if no cache is available or if the cache
 2044  	  is full.
 2045: 	* runsuite.c: Adjusted to deactivate the cache for XML Schema
 2046: 	  tests if a cache-creation is turned on by default for the whole
 2047: 	  library, e.g. for testing purposes of the cache. It is
 2048  	  deactivated here in order to avoid confusion of the memory leak
 2049  	  detection in runsuite.c.
 ....
 16739  
 16740  	* xpath.c: simple and efficient optimization, XPath functions
 16741: 	  aways bind to the same code, cache this
 16742  	* TODO: updated (by saying some is obsolete)
 16743  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/config.log:
 2480  
 2481  ## ---------------- ##
 2482: ## Cache variables. ##
 2483  ## ---------------- ##
 2484  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/configure.in:
 1330  	if test "$WITH_ICONV" = "1" ; then
 1331  		AC_MSG_CHECKING([for iconv declaration])
 1332: 		AC_CACHE_VAL(xml_cv_iconv_arg2, [
 1333  			AC_TRY_COMPILE([#include <stdlib.h>
 1334  #include <iconv.h>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk1.html:
   85  </dd><dt>CVS</dt><dd><a href="html/libxml-xmlversion.html#LIBXML_VERSION_EXTRA">LIBXML_VERSION_EXTRA</a><br />
   86  </dd><dt>CWD</dt><dd><a href="html/libxml-nanoftp.html#xmlNanoFTPCwd">xmlNanoFTPCwd</a><br />
   87: </dd><dt>Cache</dt><dd><a href="html/libxml-xpath.html#_xmlXPathContext">_xmlXPathContext</a><br />
   88  </dd><dt>Call</dt><dd><a href="html/libxml-parserInternals.html#htmlInitAutoClose">htmlInitAutoClose</a><br />
   89  <a href="html/libxml-parser.html#xmlInitParser">xmlInitParser</a><br />
   ..
  314  <a href="html/libxml-tree.html#xmlNewDoc">xmlNewDoc</a><br />
  315  <a href="html/libxml-xinclude.html#xmlXIncludeNewContext">xmlXIncludeNewContext</a><br />
  316: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  317  </dd><dt>Creation</dt><dd><a href="html/libxml-tree.html#xmlNewCDataBlock">xmlNewCDataBlock</a><br />
  318  <a href="html/libxml-tree.html#xmlNewCharRef">xmlNewCharRef</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk10.html:
  149  <a href="html/libxml-xmlreader.html#xmlTextReaderSchemaValidateCtxt">xmlTextReaderSchemaValidateCtxt</a><br />
  150  <a href="html/libxml-xmlreader.html#xmlTextReaderSetSchema">xmlTextReaderSetSchema</a><br />
  151: </dd><dt>activates</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  152  </dd><dt>activation</dt><dd><a href="html/libxml-tree.html#xmlGetLineNo">xmlGetLineNo</a><br />
  153  </dd><dt>acts</dt><dd><a href="html/libxml-tree.html#xmlGetProp">xmlGetProp</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk12.html:
   42  <a href="html/libxml-c14n.html#xmlC14NDocSaveTo">xmlC14NDocSaveTo</a><br />
   43  <a href="html/libxml-c14n.html#xmlC14NExecute">xmlC14NExecute</a><br />
   44: </dd><dt>cache</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   45: </dd><dt>cached</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   46: </dd><dt>caching:</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   47  </dd><dt>calculated</dt><dd><a href="html/libxml-xmlstring.html#xmlStrncatNew">xmlStrncatNew</a><br />
   48  </dd><dt>calculates</dt><dd><a href="html/libxml-xmlstring.html#xmlUTF8Size">xmlUTF8Size</a><br />
   ..
  850  <a href="html/libxml-uri.html#xmlCreateURI">xmlCreateURI</a><br />
  851  <a href="html/libxml-xmlstring.html#xmlStrncatNew">xmlStrncatNew</a><br />
  852: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  853  </dd><dt>creating</dt><dd><a href="html/libxml-tree.html#xmlDOMWrapAdoptNode">xmlDOMWrapAdoptNode</a><br />
  854  <a href="html/libxml-tree.html#xmlDOMWrapCloneNode">xmlDOMWrapCloneNode</a><br />
  ...
  883  <a href="html/libxml-xmlIO.html#xmlOutputBufferCreateFilename">xmlOutputBufferCreateFilename</a><br />
  884  <a href="html/libxml-xmlschemas.html#xmlSchemaValidateFile">xmlSchemaValidateFile</a><br />
  885: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  886  </dd><dt>custom</dt><dd><a href="html/libxml-tree.html#xmlDOMWrapAdoptNode">xmlDOMWrapAdoptNode</a><br />
  887  <a href="html/libxml-tree.html#xmlDOMWrapCloneNode">xmlDOMWrapCloneNode</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk13.html:
  225  </dd><dt>delete</dt><dd><a href="html/libxml-nanoftp.html#xmlNanoFTPDele">xmlNanoFTPDele</a><br />
  226  </dd><dt>deletion</dt><dd><a href="html/libxml-catalog.html#xmlCatalogSetDefaultPrefer">xmlCatalogSetDefaultPrefer</a><br />
  227: </dd><dt>dependant</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  228  </dd><dt>depending</dt><dd><a href="html/libxml-valid.html#xmlIsID">xmlIsID</a><br />
  229  <a href="html/libxml-valid.html#xmlIsRef">xmlIsRef</a><br />
  ...
  470  <a href="html/libxml-parser.html#_xmlParserCtxt">_xmlParserCtxt</a><br />
  471  <a href="html/libxml-uri.html#xmlParseURIRaw">xmlParseURIRaw</a><br />
  472: </dd><dt>disables</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  473  </dd><dt>disabling</dt><dd><a href="html/libxml-xmlIO.html#xmlNoNetExternalEntityLoader">xmlNoNetExternalEntityLoader</a><br />
  474  </dd><dt>disallowed</dt><dd><a href="html/libxml-schemasInternals.html#XML_SCHEMAS_ELEM_BLOCK_EXTENSION">XML_SCHEMAS_ELEM_BLOCK_EXTENSION</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk14.html:
   51  <a href="html/libxml-xpathInternals.html#xmlXPathSubstringFunction">xmlXPathSubstringFunction</a><br />
   52  </dd><dt>edition</dt><dd><a href="html/libxml-parserInternals.html#xmlCheckLanguageID">xmlCheckLanguageID</a><br />
   53: </dd><dt>effect</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   54  </dd><dt>effective</dt><dd><a href="html/libxml-catalog.html#xmlLoadCatalog">xmlLoadCatalog</a><br />
   55  <a href="html/libxml-catalog.html#xmlLoadCatalogs">xmlLoadCatalogs</a><br />
   ..
  121  </dd><dt>enabled</dt><dd><a href="html/libxml-tree.html#xmlSaveFile">xmlSaveFile</a><br />
  122  <a href="html/libxml-tree.html#xmlSaveFormatFile">xmlSaveFormatFile</a><br />
  123: </dd><dt>enables</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  124  </dd><dt>enabling</dt><dd><a href="html/libxml-parser.html#xmlLineNumbersDefault">xmlLineNumbersDefault</a><br />
  125  <a href="html/libxml-parser.html#xmlPedanticParserDefault">xmlPedanticParserDefault</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk15.html:
  254  <a href="html/libxml-xmlIO.html#xmlOutputMatchCallback">xmlOutputMatchCallback</a><br />
  255  </dd><dt>for:</dt><dd><a href="html/libxml-xmlschemastypes.html#xmlSchemaGetCanonValue">xmlSchemaGetCanonValue</a><br />
  256: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  257  </dd><dt>forbid</dt><dd><a href="html/libxml-xpath.html#XML_XPATH_NOVAR">XML_XPATH_NOVAR</a><br />
  258  </dd><dt>force</dt><dd><a href="html/libxml-parser.html#xmlKeepBlanksDefault">xmlKeepBlanksDefault</a><br />
  ...
  332  <a href="html/libxml-uri.html#xmlPathToURI">xmlPathToURI</a><br />
  333  </dd><dt>frees</dt><dd><a href="html/libxml-tree.html#xmlBufferFree">xmlBufferFree</a><br />
  334: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  335  </dd><dt>front</dt><dd><a href="html/libxml-tree.html#xmlValidateNCName">xmlValidateNCName</a><br />
  336  <a href="html/libxml-tree.html#xmlValidateNMToken">xmlValidateNMToken</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk17.html:
  488  <a href="html/libxml-valid.html#xmlRemoveRef">xmlRemoveRef</a><br />
  489  <a href="html/libxml-xmlschemas.html#xmlSchemaValidateFile">xmlSchemaValidateFile</a><br />
  490: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  491  </dd><dt>interned</dt><dd><a href="html/libxml-pattern.html#xmlPatterncompile">xmlPatterncompile</a><br />
  492  <a href="html/libxml-xmlreader.html#xmlTextReaderConstString">xmlTextReaderConstString</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk19.html:
  153  <a href="html/libxml-xmlregexp.html#xmlExpNewCtxt">xmlExpNewCtxt</a><br />
  154  <a href="html/libxml-pattern.html#xmlPatternMaxDepth">xmlPatternMaxDepth</a><br />
  155: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  156  </dd><dt>maybe</dt><dd><a href="html/libxml-schemasInternals.html#_xmlSchemaElement">_xmlSchemaElement</a><br />
  157  </dd><dt>mean</dt><dd><a href="html/libxml-pattern.html#xmlPatternMinDepth">xmlPatternMinDepth</a><br />
  ...
  234  </dd><dt>minus</dt><dd><a href="html/libxml-xpathInternals.html#xmlXPathStringFunction">xmlXPathStringFunction</a><br />
  235  </dd><dt>minute</dt><dd><a href="html/libxml-nanoftp.html#ftpListCallback">ftpListCallback</a><br />
  236: </dd><dt>misc</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  237  </dd><dt>misleading</dt><dd><a href="html/libxml-parser.html#xmlCleanupParser">xmlCleanupParser</a><br />
  238  <a href="html/libxml-parserInternals.html#xmlParsePEReference">xmlParsePEReference</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk21.html:
   42  </dd><dt>objects</dt><dd><a href="html/libxml-xpath.html#_xmlXPathContext">_xmlXPathContext</a><br />
   43  <a href="html/libxml-xpathInternals.html#xmlXPathCompareValues">xmlXPathCompareValues</a><br />
   44: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   45  <a href="html/libxml-xpathInternals.html#xmlXPathDivValues">xmlXPathDivValues</a><br />
   46  <a href="html/libxml-xpathInternals.html#xmlXPathEqualValues">xmlXPathEqualValues</a><br />
   ..
  252  <a href="html/libxml-xmlreader.html#xmlTextReaderSchemaValidateCtxt">xmlTextReaderSchemaValidateCtxt</a><br />
  253  <a href="html/libxml-xmlreader.html#xmlTextReaderSetup">xmlTextReaderSetup</a><br />
  254: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  255  </dd><dt>ordered</dt><dd><a href="html/libxml-list.html#xmlListAppend">xmlListAppend</a><br />
  256  <a href="html/libxml-list.html#xmlListInsert">xmlListInsert</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk22.html:
  151  <a href="html/libxml-parserInternals.html#xmlParseAttributeType">xmlParseAttributeType</a><br />
  152  <a href="html/libxml-valid.html#xmlValidateElementDecl">xmlValidateElementDecl</a><br />
  153: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  154  </dd><dt>performance</dt><dd><a href="html/libxml-tree.html#xmlGetBufferAllocationScheme">xmlGetBufferAllocationScheme</a><br />
  155  <a href="html/libxml-tree.html#xmlSetBufferAllocationScheme">xmlSetBufferAllocationScheme</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk23.html:
  545  <a href="html/libxml-xmlregexp.html#xmlRegExecPushString">xmlRegExecPushString</a><br />
  546  <a href="html/libxml-xmlregexp.html#xmlRegExecPushString2">xmlRegExecPushString2</a><br />
  547: </dd><dt>reused</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  548  </dd><dt>reuses</dt><dd><a href="html/libxml-HTMLparser.html#htmlCtxtReadDoc">htmlCtxtReadDoc</a><br />
  549  <a href="html/libxml-HTMLparser.html#htmlCtxtReadFd">htmlCtxtReadFd</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk24.html:
  192  </dd><dt>semantic</dt><dd><a href="html/libxml-xmlautomata.html#xmlAutomataNewNegTrans">xmlAutomataNewNegTrans</a><br />
  193  <a href="html/libxml-xpathInternals.html#xmlXPathNodeSetFreeNs">xmlXPathNodeSetFreeNs</a><br />
  194: </dd><dt>semantics</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  195  </dd><dt>sense</dt><dd><a href="html/libxml-entities.html#xmlCreateEntitiesTable">xmlCreateEntitiesTable</a><br />
  196  </dd><dt>separated</dt><dd><a href="html/libxml-catalog.html#xmlLoadCatalogs">xmlLoadCatalogs</a><br />
  ...
  275  <a href="html/libxml-xpathInternals.html#xmlXPathIntersection">xmlXPathIntersection</a><br />
  276  </dd><dt>setting</dt><dd><a href="html/libxml-xmlerror.html#xmlSetGenericErrorFunc">xmlSetGenericErrorFunc</a><br />
  277: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  278  </dd><dt>setups</dt><dd><a href="html/libxml-parserInternals.html#xmlParseEncodingDecl">xmlParseEncodingDecl</a><br />
  279  </dd><dt>severity</dt><dd><a href="html/libxml-xmlreader.html#xmlTextReaderErrorFunc">xmlTextReaderErrorFunc</a><br />
  ...
  414  <a href="html/libxml-parserInternals.html#xmlParseElementMixedContentDecl">xmlParseElementMixedContentDecl</a><br />
  415  <a href="html/libxml-parserInternals.html#xmlSkipBlankChars">xmlSkipBlankChars</a><br />
  416: </dd><dt>slot</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  417: </dd><dt>slots</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  418  </dd><dt>small</dt><dd><a href="html/libxml-tree.html#xmlGetBufferAllocationScheme">xmlGetBufferAllocationScheme</a><br />
  419  </dd><dt>smaller</dt><dd><a href="html/libxml-uri.html#xmlURIUnescapeString">xmlURIUnescapeString</a><br />
  ...
  871  <a href="html/libxml-xmlschemastypes.html#xmlSchemaValueAppend">xmlSchemaValueAppend</a><br />
  872  <a href="html/libxml-xpathInternals.html#xmlXPathCompareValues">xmlXPathCompareValues</a><br />
  873: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  874  </dd><dt>succeeds</dt><dd><a href="html/libxml-xmlIO.html#xmlCheckFilename">xmlCheckFilename</a><br />
  875  <a href="html/libxml-xmlwriter.html#xmlNewTextWriterPushParser">xmlNewTextWriterPushParser</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk28.html:
  479  <a href="html/libxml-xpathInternals.html#xmlXPathFunctionLookupNS">xmlXPathFunctionLookupNS</a><br />
  480  </dd><dt>xmlXPathNodeTrailingSorted</dt><dd><a href="html/libxml-xpathInternals.html#xmlXPathNodeTrailing">xmlXPathNodeTrailing</a><br />
  481: </dd><dt>xmlXPathObject</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  482  </dd><dt>xmlXPathObjectPtr</dt><dd><a href="html/libxml-xpath.html#xmlXPathCompiledEval">xmlXPathCompiledEval</a><br />
  483  <a href="html/libxml-xpath.html#xmlXPathEval">xmlXPathEval</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk5.html:
   72  </dd><dt>Oriya</dt><dd><a href="html/libxml-xmlunicode.html#xmlUCSIsOriya">xmlUCSIsOriya</a><br />
   73  </dd><dt>Osmanya</dt><dd><a href="html/libxml-xmlunicode.html#xmlUCSIsOsmanya">xmlUCSIsOsmanya</a><br />
   74: </dd><dt>Other</dt><dd><a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
   75  </dd><dt>Otherwise</dt><dd><a href="html/libxml-pattern.html#xmlStreamPush">xmlStreamPush</a><br />
   76  <a href="html/libxml-pattern.html#xmlStreamPushAttr">xmlStreamPushAttr</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIchunk8.html:
  115  </dd><dt>Then</dt><dd><a href="html/libxml-valid.html#xmlValidateOneElement">xmlValidateOneElement</a><br />
  116  </dd><dt>There</dt><dd><a href="html/libxml-xmlregexp.html#xmlExpParse">xmlExpParse</a><br />
  117: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  118  </dd><dt>Those</dt><dd><a href="html/libxml-parser.html#_xmlParserCtxt">_xmlParserCtxt</a><br />
  119  </dd><dt>Thus:</dt><dd><a href="html/libxml-xpathInternals.html#xmlXPathSubstringFunction">xmlXPathSubstringFunction</a><br />
  ...
  255  <a href="html/libxml-xmlreader.html#xmlTextReaderSchemaValidateCtxt">xmlTextReaderSchemaValidateCtxt</a><br />
  256  <a href="html/libxml-xmlreader.html#xmlTextReaderSetSchema">xmlTextReaderSetSchema</a><br />
  257: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
  258  </dd><dt>Used</dt><dd><a href="html/libxml-schemasInternals.html#XML_SCHEMAS_ANY_LAX">XML_SCHEMAS_ANY_LAX</a><br />
  259  <a href="html/libxml-schemasInternals.html#XML_SCHEMAS_ANY_STRICT">XML_SCHEMAS_ANY_STRICT</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIfiles.html:
 3347  <a href="html/libxml-xpath.html#xmlXPathContext">xmlXPathContext</a><br />
 3348  <a href="html/libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a><br />
 3349: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
 3350  <a href="html/libxml-xpath.html#xmlXPathConvertBoolean">xmlXPathConvertBoolean</a><br />
 3351  <a href="html/libxml-xpath.html#xmlXPathConvertFunc">xmlXPathConvertFunc</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIfunctions.html:
 2194  </p><h2>Type xmlXPathContextPtr:</h2><p><a href="html/libxml-xpath.html#xmlXPathCompiledEval">xmlXPathCompiledEval</a><br />
 2195  <a href="html/libxml-xpath.html#xmlXPathCompiledEvalToBoolean">xmlXPathCompiledEvalToBoolean</a><br />
 2196: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
 2197  <a href="html/libxml-xpath.html#xmlXPathCtxtCompile">xmlXPathCtxtCompile</a><br />
 2198  <a href="html/libxml-xpath.html#xmlXPathEval">xmlXPathEval</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/APIsymbols.html:
 3365  <a href="html/libxml-xpath.html#xmlXPathContext">xmlXPathContext</a><br />
 3366  <a href="html/libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a><br />
 3367: <a href="html/libxml-xpath.html#xmlXPathContextSetCache">xmlXPathContextSetCache</a><br />
 3368  <a href="html/libxml-xpath.html#xmlXPathConvertBoolean">xmlXPathConvertBoolean</a><br />
 3369  <a href="html/libxml-xpath.html#xmlXPathConvertFunc">xmlXPathConvertFunc</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/catalog.html:
   37      <p>"http://www.oasis-open.org/committes/entity/stylesheets/base/tr.xsl"</p>
   38    </li>
   39:   <li>providing a local cache mechanism allowing to load the entities
   40      associated to public identifiers or remote resources, this is a really
   41      important feature for any significant deployment of XML or SGML since it
   ..
   83  any URI starting with a given prefix should be looked at another  URI
   84  constructed by replacing the prefix with an new one. In effect this acts like
   85: a cache system for a full area of the Web. In practice it is extremely useful
   86  with a file prefix if you have installed a copy of those resources on your
   87  local system.</p><pre>...

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/devhelp/libxml2-xpath.html:
   73  <a href="libxml2-xmlstring.html#xmlChar">xmlChar</a> *	<a href="#xmlXPathCastNodeToString">xmlXPathCastNodeToString</a>	(<a href="libxml2-tree.html#xmlNodePtr">xmlNodePtr</a> node);
   74  int	<a href="#xmlXPathIsNaN">xmlXPathIsNaN</a>			(double val);
   75: int	<a href="#xmlXPathContextSetCache">xmlXPathContextSetCache</a>		(<a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br/>					 int active, <br/>					 int value, <br/>					 int options);
   76  <a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathConvertString">xmlXPathConvertString</a>	(<a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val);
   77  int	<a href="#xmlXPathCompiledEvalToBoolean">xmlXPathCompiledEvalToBoolean</a>	(<a href="libxml2-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br/>					 <a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt);
   ..
  212      <a href="libxml2-tree.html#xmlNodePtr">xmlNodePtr</a>	debugNode	: the source node XSLT dictionary
  213      <a href="libxml2-dict.html#xmlDictPtr">xmlDictPtr</a>	dict	: dictionary if any
  214:     int	flags	: flags to control compilation Cache for reusal of XPath objects
  215:     void *	cache
  216  } xmlXPathContext;
  217  </pre><p/>
  ...
  446  <div class="variablelist"><table border="0"><col align="left"/><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors.</td></tr></tbody></table></div></div>
  447          <hr/>
  448:         <div class="refsect2" lang="en"><h3><a name="xmlXPathContextSetCache"/>xmlXPathContextSetCache ()</h3><pre class="programlisting">int	xmlXPathContextSetCache		(<a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br/>					 int active, <br/>					 int value, <br/>					 int options)<br/>
  449: </pre><p>Creates/frees an object cache on the XPath context. If activates XPath objects (xmlXPathObject) will be cached internally to be reused. @options: 0: This will set the XPath object caching: @value: This will set the maximum number of XPath objects to be cached per slot There are 5 slots for: node-set, string, number, boolean, and misc objects. Use &lt;0 for the default number (100). Other values for @options have currently no effect.</p>
  450: <div class="variablelist"><table border="0"><col align="left"/><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>active</tt></i>:</span></td><td>enables/disables (creates/frees) the cache</td></tr><tr><td><span class="term"><i><tt>value</tt></i>:</span></td><td>a value with semantics dependant on @options</td></tr><tr><td><span class="term"><i><tt>options</tt></i>:</span></td><td>options (currently only the value 0 is used)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 if the setting succeeded, and -1 on API or internal errors.</td></tr></tbody></table></div></div>
  451          <hr/>
  452          <div class="refsect2" lang="en"><h3><a name="xmlXPathConvertBoolean"/>xmlXPathConvertBoolean ()</h3><pre class="programlisting"><a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	xmlXPathConvertBoolean	(<a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)<br/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/devhelp/libxml2.devhelp:
 3392      <function name="xmlXPathConcatFunction ()" link="libxml2-xpathInternals.html#xmlXPathConcatFunction"/>
 3393      <function name="xmlXPathContainsFunction ()" link="libxml2-xpathInternals.html#xmlXPathContainsFunction"/>
 3394:     <function name="xmlXPathContextSetCache ()" link="libxml2-xpath.html#xmlXPathContextSetCache"/>
 3395      <function name="xmlXPathConvertBoolean ()" link="libxml2-xpath.html#xmlXPathConvertBoolean"/>
 3396      <function name="xmlXPathConvertNumber ()" link="libxml2-xpath.html#xmlXPathConvertNumber"/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/encoding.html:
   73          for right now (RPM RDF catalogs, advogato data, various configuration
   74          file formats, etc.) and the key point for today's computer
   75:         architecture is efficient uses of caches. If one nearly double the
   76          memory requirement to store the same amount of data, this will trash
   77:         caches (main memory/external caches/internal caches) and my take is
   78          that this harms the system far more than the CPU requirements needed
   79          for the conversion to UTF-8</li>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/guidelines.html:
  207  defined by the user). They are a tree of XML documents defining the mappings
  208  between the canonical naming space and the local installed ones, this can be
  209: seen as a static cache structure.</p>
  210  
  211  <p>When the XML processor is asked to process a resource it will
  ...
  224  <h3>Usual catalog setup:</h3>
  225  
  226: <p>Usually catalogs for a project are setup as a 2 level hierarchical cache,
  227  the root catalog containing only "delegates" indicating a separate subcatalog
  228  dedicated to the project. The goal is to keep the root catalog clean and
  ...
  244  decision is left to the sysadmin or the packager for that system and may
  245  obey different rules, but the actual place on the filesystem (or on a
  246: resource cache on the local network) will not influence the processing as
  247  long as it is available. The first rule indicate that if the reference uses a
  248  PUBLIC identifier beginning with the</p>
  ...
  287      them with the local resource containing the DTD, the 2 last ones are
  288      rewrite rules allowing to build the local filename for any URL based on
  289:     "http://www.w3.org/TR/xhtml1/DTD", the local cache simplifies the rules by
  290      keeping the same structure as the on-line server at the Canonical URL</li>
  291    <li>the local resources are designated using URI references (the uri or

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/html/libxml-xpath.html:
   53  <pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathCompiledEval">xmlXPathCompiledEval</a>	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />						 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctx)</pre>
   54  <pre class="programlisting">int	<a href="#xmlXPathCompiledEvalToBoolean">xmlXPathCompiledEvalToBoolean</a>	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />					 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt)</pre>
   55: <pre class="programlisting">int	<a href="#xmlXPathContextSetCache">xmlXPathContextSetCache</a>		(<a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br />					 int active, <br />					 int value, <br />					 int options)</pre>
   56  <pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathConvertBoolean">xmlXPathConvertBoolean</a>	(<a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)</pre>
   57  <pre class="programlisting">Function type: <a href="#xmlXPathConvertFunc">xmlXPathConvertFunc</a>
   ..
  141      <a href="libxml-tree.html#xmlNodePtr">xmlNodePtr</a>	debugNode	: the source node XSLT dictionary
  142      <a href="libxml-dict.html#xmlDictPtr">xmlDictPtr</a>	dict	: dictionary if any
  143:     int	flags	: flags to control compilation Cache for
  144:     void *	cache
  145  }</pre><h3>Enum <a name="xmlXPathError" id="xmlXPathError">xmlXPathError</a></h3><pre class="programlisting">Enum xmlXPathError {
  146      <a name="XPATH_EXPRESSION_OK" id="XPATH_EXPRESSION_OK">XPATH_EXPRESSION_OK</a> = 0
  ...
  252  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctx</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>the <a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> resulting from the evaluation or NULL. the caller has to free the object.</td></tr></tbody></table></div><h3><a name="xmlXPathCompiledEvalToBoolean" id="xmlXPathCompiledEvalToBoolean"></a>Function: xmlXPathCompiledEvalToBoolean</h3><pre class="programlisting">int	xmlXPathCompiledEvalToBoolean	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />					 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt)<br />
  253  </pre><p>Applies the XPath boolean() function on the result of the given compiled expression.</p>
  254: <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors.</td></tr></tbody></table></div><h3><a name="xmlXPathContextSetCache" id="xmlXPathContextSetCache"></a>Function: xmlXPathContextSetCache</h3><pre class="programlisting">int	xmlXPathContextSetCache		(<a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br />					 int active, <br />					 int value, <br />					 int options)<br />
  255: </pre><p>Creates/frees an object cache on the XPath context. If activates XPath objects (xmlXPathObject) will be cached internally to be reused. @options: 0: This will set the XPath object caching: @value: This will set the maximum number of XPath objects to be cached per slot There are 5 slots for: node-set, string, number, boolean, and misc objects. Use &lt;0 for the default number (100). Other values for @options have currently no effect.</p>
  256: <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>active</tt></i>:</span></td><td>enables/disables (creates/frees) the cache</td></tr><tr><td><span class="term"><i><tt>value</tt></i>:</span></td><td>a value with semantics dependant on @options</td></tr><tr><td><span class="term"><i><tt>options</tt></i>:</span></td><td>options (currently only the value 0 is used)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 if the setting succeeded, and -1 on API or internal errors.</td></tr></tbody></table></div><h3><a name="xmlXPathConvertBoolean" id="xmlXPathConvertBoolean"></a>Function: xmlXPathConvertBoolean</h3><pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	xmlXPathConvertBoolean	(<a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)<br />
  257  </pre><p>Converts an existing object to its boolean() equivalent</p>
  258  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>val</tt></i>:</span></td><td>an XPath object</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>the new object, the old one is freed (or the operation is done directly on @val)</td></tr></tbody></table></div><h3><a name="xmlXPathConvertFunc" id="xmlXPathConvertFunc"></a>Function type: xmlXPathConvertFunc</h3><pre class="programlisting">Function type: xmlXPathConvertFunc

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/libxml2-api.xml:
 3570       <exports symbol='xmlXPathCastNodeToString' type='function'/>
 3571       <exports symbol='xmlXPathIsNaN' type='function'/>
 3572:      <exports symbol='xmlXPathContextSetCache' type='function'/>
 3573       <exports symbol='xmlXPathConvertString' type='function'/>
 3574       <exports symbol='xmlXPathCompiledEvalToBoolean' type='function'/>
 ....
 6867        <field name='debugNode' type='xmlNodePtr' info=' the source node XSLT dictionary'/>
 6868        <field name='dict' type='xmlDictPtr' info=' dictionary if any'/>
 6869:       <field name='flags' type='int' info=' flags to control compilation Cache for reusal of XPath objects'/>
 6870:       <field name='cache' type='void *' info=''/>
 6871      </struct>
 6872      <typedef name='xmlXPathContextPtr' file='xpath' type='xmlXPathContext *'/>
 ....
 17299        <arg name='nargs' type='int' info='the number of arguments'/>
 17300      </function>
 17301:     <function name='xmlXPathContextSetCache' file='xpath' module='xpath'>
 17302        <cond>defined(LIBXML_XPATH_ENABLED)</cond>
 17303:       <info>Creates/frees an object cache on the XPath context. If activates XPath objects (xmlXPathObject) will be cached internally to be reused. @options: 0: This will set the XPath object caching: @value: This will set the maximum number of XPath objects to be cached per slot There are 5 slots for: node-set, string, number, boolean, and misc objects. Use &lt;0 for the default number (100). Other values for @options have currently no effect.</info>
 17304        <return type='int' info='0 if the setting succeeded, and -1 on API or internal errors.'/>
 17305        <arg name='ctxt' type='xmlXPathContextPtr' info='the XPath context'/>
 17306:       <arg name='active' type='int' info='enables/disables (creates/frees) the cache'/>
 17307        <arg name='value' type='int' info='a value with semantics dependant on @options'/>
 17308        <arg name='options' type='int' info='options (currently only the value 0 is used)'/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/news.html:
  544        equality and comparison (Andreas Pakulat), xmlXPathCollectAndTest
  545        improvememt (Kasimier), expose if library was compiled with zlib 
  546:       support (Andrew Nosenko), cache for xmlSchemaIDCMatcher structs
  547        (Kasimier), xmlTextConcat should work with comments and PIs (Rob
  548        Richards), export htmlNewParserCtxt needed by Michael Day, refactoring
  ...
  596      selfdocument.</li>
  597    <li>improvements: Xpath optimizations (Kasimier), XPath object
  598:     cache(Kasimier)</li>
  599  </ul><h3>2.6.25: Jun 6 2006:</h3><p>Do not use or package 2.6.25</p><h3>2.6.24: Apr 28 2006</h3><ul><li>Portability fixes: configure on Windows, testapi compile on windows
  600        (Kasimier Buchcik, venkat naidu), Borland C++ 6 compile (Eric Zurcher),

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/symbols.xml:
 1709    </release>
 1710    <release version="2.6.25">
 1711:     <symbol file="xpath">xmlXPathContextSetCache</symbol>
 1712    </release>
 1713    <release version="2.6.27">

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/upgrade.html:
   93    <li>install libxml2-2.3.x and  libxml2-devel-2.3.x (libxml-1.8.y and
   94      libxml-devel-1.8.y can be kept simultaneously)</li>
   95:   <li>remove your config.cache, relaunch your configuration mechanism, and
   96      recompile, if steps 2 and 3 were done right it should compile as-is</li>
   97    <li>Test that your application is still running correctly, if not this may

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/doc/xml.html:
 1300        equality and comparison (Andreas Pakulat), xmlXPathCollectAndTest
 1301        improvememt (Kasimier), expose if library was compiled with zlib 
 1302:       support (Andrew Nosenko), cache for xmlSchemaIDCMatcher structs
 1303        (Kasimier), xmlTextConcat should work with comments and PIs (Rob
 1304        Richards), export htmlNewParserCtxt needed by Michael Day, refactoring
 ....
 1355      selfdocument.</li>
 1356    <li>improvements: Xpath optimizations (Kasimier), XPath object
 1357:     cache(Kasimier)</li>
 1358  </ul>
 1359  
 ....
 4076          for right now (RPM RDF catalogs, advogato data, various configuration
 4077          file formats, etc.) and the key point for today's computer
 4078:         architecture is efficient uses of caches. If one nearly double the
 4079          memory requirement to store the same amount of data, this will trash
 4080:         caches (main memory/external caches/internal caches) and my take is
 4081          that this harms the system far more than the CPU requirements needed
 4082          for the conversion to UTF-8</li>
 ....
 4467      <p>"http://www.oasis-open.org/committes/entity/stylesheets/base/tr.xsl"</p>
 4468    </li>
 4469:   <li>providing a local cache mechanism allowing to load the entities
 4470      associated to public identifiers or remote resources, this is a really
 4471      important feature for any significant deployment of XML or SGML since it
 ....
 4543  any URI starting with a given prefix should be looked at another  URI
 4544  constructed by replacing the prefix with an new one. In effect this acts like
 4545: a cache system for a full area of the Web. In practice it is extremely useful
 4546  with a file prefix if you have installed a copy of those resources on your
 4547  local system.</p>
 ....
 5279    <li>install libxml2-2.3.x and  libxml2-devel-2.3.x (libxml-1.8.y and
 5280      libxml-devel-1.8.y can be kept simultaneously)</li>
 5281:   <li>remove your config.cache, relaunch your configuration mechanism, and
 5282      recompile, if steps 2 and 3 were done right it should compile as-is</li>
 5283    <li>Test that your application is still running correctly, if not this may

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/elfgcchack.h:
 15804  #if defined(LIBXML_XPATH_ENABLED)
 15805  #ifdef bottom_xpath
 15806: #undef xmlXPathContextSetCache
 15807: extern __typeof (xmlXPathContextSetCache) xmlXPathContextSetCache __attribute((alias("xmlXPathContextSetCache__internal_alias")));
 15808  #else
 15809: #ifndef xmlXPathContextSetCache
 15810: extern __typeof (xmlXPathContextSetCache) xmlXPathContextSetCache__internal_alias __attribute((visibility("hidden")));
 15811: #define xmlXPathContextSetCache xmlXPathContextSetCache__internal_alias
 15812  #endif
 15813  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/include/libxml/xpath.h:
  350      int flags;				/* flags to control compilation */
  351  
  352:     /* Cache for reusal of XPath objects */
  353:     void *cache;
  354  };
  355  
  ...
  499  		    xmlXPathFreeContext		(xmlXPathContextPtr ctxt);
  500  XMLPUBFUN int XMLCALL
  501: 		    xmlXPathContextSetCache(xmlXPathContextPtr ctxt,
  502  				            int active,
  503  					    int value,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/INSTALL:
   31  debugging `configure').
   32  
   33:    It can also use an optional file (typically called `config.cache'
   34: and enabled with `--cache-file=config.cache' or simply `-C') that saves
   35  the results of its tests to speed up reconfiguring.  Caching is
   36  disabled by default to prevent problems with accidental use of stale
   37: cache files.
   38  
   39     If you need to do unusual things to compile the package, please try
   40  to figure out how `configure' could check whether to do them, and mail
   41  diffs or instructions to the address given in the `README' so they can
   42: be considered for the next release.  If you are using the cache, and at
   43: some point `config.cache' contains results you don't want to keep, you
   44  may remove or edit it.
   45  
   ..
  284     If you want to set default values for `configure' scripts to share,
  285  you can create a site shell script called `config.site' that gives
  286: default values for variables like `CC', `cache_file', and `prefix'.
  287  `configure' looks for `PREFIX/share/config.site' if it exists, then
  288  `PREFIX/etc/config.site' if it exists.  Or, you can set the
  ...
  331       script, and exit.
  332  
  333: `--cache-file=FILE'
  334:      Enable the cache: use and save the results of the tests in FILE,
  335:      traditionally `config.cache'.  FILE defaults to `/dev/null' to
  336       disable caching.
  337  
  338: `--config-cache'
  339  `-C'
  340:      Alias for `--cache-file=config.cache'.
  341  
  342  `--quiet'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/libxml2.syms:
 2158  
 2159  # xpath
 2160:   xmlXPathContextSetCache;
 2161  } LIBXML2_2.6.24;
 2162  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/m4/libtool.m4:
  118  [for cc_temp in $1""; do
  119    case $cc_temp in
  120:     compile | *[[\\/]]compile | ccache | *[[\\/]]ccache ) ;;
  121      distcc | *[[\\/]]distcc | purify | *[[\\/]]purify ) ;;
  122      \-*) ;;
  ...
  941        [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])
  942  
  943:     AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],
  944        [lt_cv_apple_cc_single_mod=no
  945        if test -z "${LT_MULTI_MODULE}"; then
  ...
  963  	rm -f conftest.*
  964        fi])
  965:     AC_CACHE_CHECK([for -exported_symbols_list linker flag],
  966        [lt_cv_ld_exported_symbols_list],
  967        [lt_cv_ld_exported_symbols_list=no
  ...
  974  	LDFLAGS="$save_LDFLAGS"
  975      ])
  976:     AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],
  977        [lt_cv_ld_force_load=no
  978        cat > conftest.c << _LT_EOF
  ...
 1089    aix_libpath=$lt_cv_aix_libpath
 1090  else
 1091:   AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],
 1092    [AC_LINK_IFELSE([AC_LANG_PROGRAM],[
 1093    lt_aix_libpath_sed='[
 ....
 1322    SAVE_CFLAGS="$CFLAGS"
 1323    CFLAGS="$CFLAGS -belf"
 1324:   AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,
 1325      [AC_LANG_PUSH(C)
 1326       AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])
 ....
 1365  _LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])
 1366  
 1367: AC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],
 1368    [lt_cv_ar_at_file=no
 1369     AC_COMPILE_IFELSE([AC_LANG_PROGRAM],
 ....
 1446  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1447  m4_require([_LT_DECL_SED])dnl
 1448: AC_CACHE_CHECK([$1], [$2],
 1449    [$2=no
 1450     m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
 ....
 1497  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1498  m4_require([_LT_DECL_SED])dnl
 1499: AC_CACHE_CHECK([$1], [$2],
 1500    [$2=no
 1501     save_LDFLAGS="$LDFLAGS"
 ....
 1540  # find the maximum length of command line arguments
 1541  AC_MSG_CHECKING([the maximum length of command line arguments])
 1542: AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
 1543    i=0
 1544    teststring="ABCD"
 ....
 1855      LIBS="$lt_cv_dlopen_libs $LIBS"
 1856  
 1857:     AC_CACHE_CHECK([whether a program can dlopen itself],
 1858  	  lt_cv_dlopen_self, [dnl
 1859  	  _LT_TRY_DLOPEN_SELF(
 ....
 1864      if test "x$lt_cv_dlopen_self" = xyes; then
 1865        wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
 1866:       AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
 1867  	  lt_cv_dlopen_self_static, [dnl
 1868  	  _LT_TRY_DLOPEN_SELF(
 ....
 1910  m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1911  m4_require([_LT_TAG_COMPILER])dnl
 1912: AC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],
 1913    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],
 1914    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no
 ....
 1991  # ----------------
 1992  m4_defun([_LT_CHECK_OBJDIR],
 1993: [AC_CACHE_CHECK([for objdir], [lt_cv_objdir],
 1994  [rm -f .libs 2>/dev/null
 1995  mkdir .libs 2>/dev/null
 ....
 2592  
 2593    # Some binutils ld are patched to set DT_RUNPATH
 2594:   AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],
 2595      [lt_cv_shlibpath_overrides_runpath=no
 2596      save_LDFLAGS=$LDFLAGS
 ....
 2876  [m4_require([_LT_DECL_EGREP])dnl
 2877  AC_MSG_CHECKING([for $1])
 2878: AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
 2879  [case $MAGIC_CMD in
 2880  [[\\/*] |  ?:[\\/]*])
 ....
 3008    AC_MSG_CHECKING([for non-GNU ld])
 3009  fi
 3010: AC_CACHE_VAL(lt_cv_path_LD,
 3011  [if test -z "$LD"; then
 3012    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
 ....
 3057  #- --------------
 3058  m4_defun([_LT_PATH_LD_GNU],
 3059: [AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,
 3060  [# I'd rather use --version here, but apparently some GNU lds only accept -v.
 3061  case `$LD -v 2>&1 </dev/null` in
 ....
 3076  #   -- PORTME Some linkers may need a different reload flag.
 3077  m4_defun([_LT_CMD_RELOAD],
 3078: [AC_CACHE_CHECK([for $LD option to reload object files],
 3079    lt_cv_ld_reload_flag,
 3080    [lt_cv_ld_reload_flag='-r'])
 ....
 3111  [m4_require([_LT_DECL_EGREP])
 3112  m4_require([_LT_DECL_OBJDUMP])
 3113: AC_CACHE_CHECK([how to recognize dependent libraries],
 3114  lt_cv_deplibs_check_method,
 3115  [lt_cv_file_magic_cmd='$MAGIC_CMD'
 ....
 3344  AC_DEFUN([LT_PATH_NM],
 3345  [AC_REQUIRE([AC_PROG_CC])dnl
 3346: AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
 3347  [if test -n "$NM"; then
 3348    # Let the user override the test.
 ....
 3414  _LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl
 3415  
 3416: AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
 3417    [lt_cv_nm_interface="BSD nm"
 3418    echo "int some_variable = 0;" > conftest.$ac_ext
 ....
 3447  m4_require([_LT_DECL_OBJDUMP])
 3448  m4_require([_LT_DECL_DLLTOOL])
 3449: AC_CACHE_CHECK([how to associate runtime and link libraries],
 3450  lt_cv_sharedlib_from_linklib_cmd,
 3451  [lt_cv_sharedlib_from_linklib_cmd='unknown'
 ....
 3484  [AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)
 3485  test -z "$MANIFEST_TOOL" && MANIFEST_TOOL=mt
 3486: AC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],
 3487    [lt_cv_path_mainfest_tool=no
 3488    echo "$as_me:$LINENO: $MANIFEST_TOOL '-?'" >&AS_MESSAGE_LOG_FD
 ....
 3566  # Check for command to grab the raw symbol name followed by C symbol from nm.
 3567  AC_MSG_CHECKING([command to parse $NM output from $compiler object])
 3568: AC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],
 3569  [
 3570  # These are sane defaults that work on at least a few old systems.
 ....
 4426  esac
 4427  
 4428: AC_CACHE_CHECK([for $compiler option to produce PIC],
 4429    [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],
 4430    [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])
 ....
 5242  	# work, assume that -exports_file does not work either and
 5243  	# implicitly export all symbols.
 5244: 	# This should be the same for all languages, so no per-tag cache variable.
 5245: 	AC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],
 5246  	  [lt_cv_irix_exported_symbol],
 5247  	  [save_LDFLAGS="$LDFLAGS"
 ....
 5544        # systems, -lgcc has to come before -lc. If gcc already passes -lc
 5545        # to ld, don't add -lc before -lgcc.
 5546:       AC_CACHE_CHECK([whether -lc should be explicitly linked in],
 5547  	[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),
 5548  	[$RM conftest*
 ....
 7566  m4_defun([AC_PROG_SED],
 7567  [AC_MSG_CHECKING([for a sed that does not truncate output])
 7568: AC_CACHE_VAL(lt_cv_path_SED,
 7569  [# Loop through the user's path and test for sed and gsed.
 7570  # Then use that list of sed's as ones to test for truncation.
 ....
 7777  AC_REQUIRE([AC_CANONICAL_BUILD])dnl
 7778  AC_MSG_CHECKING([how to convert $build file names to $host format])
 7779: AC_CACHE_VAL(lt_cv_to_host_file_cmd,
 7780  [case $host in
 7781    *-*-mingw* )
 ....
 7816  
 7817  AC_MSG_CHECKING([how to convert $build file names to toolchain format])
 7818: AC_CACHE_VAL(lt_cv_to_tool_file_cmd,
 7819  [#assume ordinary cross tools, or native build.
 7820  lt_cv_to_tool_file_cmd=func_convert_file_noop

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/Makefile:
   61  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   62  	$(ACLOCAL_M4)
   63: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   64   configure.lineno config.status.lineno
   65  mkinstalldirs = $(install_sh) -d
   ..
 1667  maintainer-clean: maintainer-clean-recursive
 1668  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 1669: 	-rm -rf $(top_srcdir)/autom4te.cache
 1670  	-rm -rf ./$(DEPDIR)
 1671  	-rm -f Makefile

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/Makefile.in:
   61  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   62  	$(ACLOCAL_M4)
   63: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   64   configure.lineno config.status.lineno
   65  mkinstalldirs = $(install_sh) -d
   ..
 1667  maintainer-clean: maintainer-clean-recursive
 1668  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 1669: 	-rm -rf $(top_srcdir)/autom4te.cache
 1670  	-rm -rf ./$(DEPDIR)
 1671  	-rm -f Makefile

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/NEWS:
  352        equality and comparison (Andreas Pakulat), xmlXPathCollectAndTest
  353        improvememt (Kasimier), expose if library was compiled with zlib 
  354:       support (Andrew Nosenko), cache for xmlSchemaIDCMatcher structs
  355        (Kasimier), xmlTextConcat should work with comments and PIs (Rob
  356        Richards), export htmlNewParserCtxt needed by Michael Day, refactoring
  ...
  407      selfdocument.
  408     - improvements: Xpath optimizations (Kasimier), XPath object
  409:     cache(Kasimier)
  410  
  411  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/python/drv_libxml2.py:
   27      - Incremental parser
   28      - additional performance tuning:
   29:       - one might cache callbacks to avoid some name lookups
   30        - one might implement a smarter way to pass attributes to startElement
   31          (some kind of lazy evaluation?)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/runsuite.c:
  222      ctxtXPath = xmlXPathNewContext(NULL);
  223      /*
  224:     * Deactivate the cache if created; otherwise we have to create/free it
  225      * for every test, since it will confuse the memory leak detection.
  226:     * Note that normally this need not be done, since the cache is not
  227:     * created until set explicitely with xmlXPathContextSetCache();
  228      * but for test purposes it is sometimes usefull to activate the
  229:     * cache by default for the whole library.
  230      */
  231:     if (ctxtXPath->cache != NULL)
  232: 	xmlXPathContextSetCache(ctxtXPath, 0, -1, 0);
  233      /* used as default nanemspace in xstc tests */
  234      xmlXPathRegisterNs(ctxtXPath, BAD_CAST "ts", BAD_CAST "TestSuite");

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/runxmlconf.c:
  169      ctxtXPath = xmlXPathNewContext(NULL);
  170      /*
  171:     * Deactivate the cache if created; otherwise we have to create/free it
  172      * for every test, since it will confuse the memory leak detection.
  173:     * Note that normally this need not be done, since the cache is not
  174:     * created until set explicitely with xmlXPathContextSetCache();
  175      * but for test purposes it is sometimes usefull to activate the
  176:     * cache by default for the whole library.
  177      */
  178:     if (ctxtXPath->cache != NULL)
  179: 	xmlXPathContextSetCache(ctxtXPath, 0, -1, 0);
  180      xmlSetStructuredErrorFunc(NULL, testErrorHandler);
  181  }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/test/relaxng/libvirt.rng:
  437            <ref name="driverFormat"/>
  438            <optional>
  439:             <ref name="driverCache"/>
  440            </optional>
  441          </group>
  ...
  444              <ref name="driverFormat"/>
  445            </optional>
  446:           <ref name="driverCache"/>
  447          </group>
  448        </choice>
  ...
  460      </optional>
  461    </define>
  462:   <define name="driverCache">
  463:     <attribute name="cache">
  464        <choice>
  465          <value>none</value>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/test/schemas/nvdcve_0.xml:
  652      <entry CVSS_vector="(AV:N/AC:L/Au:N/C:P/I:P/A:P)" CVSS_base_score="7.5" CVSS_exploit_subscore="10.0" CVSS_impact_subscore="6.4" name="CVE-2008-4529" seq="2008-4529" severity="High" type="CVE" published="2008-10-09" CVSS_version="2.0" CVSS_score="7.5" modified="2008-10-11">
  653          <desc>
  654:             <descript source="cve">Multiple PHP remote file inclusion vulnerabilities in asiCMS alpha 0.208 allow remote attackers to execute arbitrary PHP code via a URL in the _ENV[asicms][path] parameter to (1) Association.php, (2) BigMath.php, (3) DiffieHellman.php, (4) DumbStore.php, (5) Extension.php, (6) FileStore.php, (7) HMAC.php, (8) MemcachedStore.php, (9) Message.php, (10) Nonce.php, (11) SQLStore.php, (12) SReg.php, (13) TrustRoot.php, and (14) URINorm.php in classes/Auth/OpenID/; and (15) XRDS.php, (16) XRI.php and (17) XRIRes.php in classes/Auth/Yadis/.</descript>
  655          </desc>
  656          <loss_types>
  ...
 3836      <entry CVSS_vector="(AV:N/AC:M/Au:N/C:C/I:C/A:C)" CVSS_base_score="9.3" CVSS_exploit_subscore="8.6" CVSS_impact_subscore="10.0" name="CVE-2008-3477" seq="2008-3477" severity="High" type="CVE" published="2008-10-14" CVSS_version="2.0" CVSS_score="9.3" modified="2008-10-15">
 3837          <desc>
 3838:             <descript source="cve">Microsoft Excel 2000 SP3, 2002 SP3, and 2003 SP2 and SP3 does not properly validate data in the VBA Performance Cache, which allows remote attackers to execute arbitrary code via a crafted Excel file, aka "Calendar Object Validation Vulnerability."</descript>
 3839          </desc>
 3840          <loss_types>
 ....
 4754      <entry CVSS_vector="(AV:N/AC:M/Au:N/C:P/I:N/A:N)" CVSS_base_score="4.3" CVSS_exploit_subscore="8.6" CVSS_impact_subscore="2.9" name="CVE-2008-4582" seq="2008-4582" severity="Medium" type="CVE" published="2008-10-15" CVSS_version="2.0" CVSS_score="4.3" modified="2008-10-16">
 4755          <desc>
 4756:             <descript source="cve">Mozilla Firefox 3.0.1 through 3.0.3 on Windows does not properly identify the context of Windows .url shortcut files, which allows user-assisted remote attackers to bypass the Same Origin Policy and obtain sensitive information via an HTML document that is directly accessible through a filesystem, as demonstrated by documents in (1) local folders, (2) Windows share folders, and (3) RAR archives, and as demonstrated by IFRAMEs referencing shortcuts that point to (a) about:cache?device=memory and (b) about:cache?device=disk, a variant of CVE-2008-2810.</descript>
 4757          </desc>
 4758          <loss_types>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/testapi.c:
 46147  
 46148  static int
 46149: test_xmlXPathContextSetCache(void) {
 46150      int test_ret = 0;
 46151  
 .....
 46155      xmlXPathContextPtr ctxt; /* the XPath context */
 46156      int n_ctxt;
 46157:     int active; /* enables/disables (creates/frees) the cache */
 46158      int n_active;
 46159      int value; /* a value with semantics dependant on @options */
 .....
 46172          options = gen_int(n_options, 3);
 46173  
 46174:         ret_val = xmlXPathContextSetCache(ctxt, active, value, options);
 46175          desret_int(ret_val);
 46176          call_tests++;
 .....
 46181          xmlResetLastError();
 46182          if (mem_base != xmlMemBlocks()) {
 46183:             printf("Leak of %d blocks found in xmlXPathContextSetCache",
 46184  	           xmlMemBlocks() - mem_base);
 46185  	    test_ret++;
 .....
 46666      test_ret += test_xmlXPathCompiledEval();
 46667      test_ret += test_xmlXPathCompiledEvalToBoolean();
 46668:     test_ret += test_xmlXPathContextSetCache();
 46669      test_ret += test_xmlXPathConvertBoolean();
 46670      test_ret += test_xmlXPathConvertNumber();

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/TODO:
   86  - Add HTML validation using the XHTML DTD
   87    - problem: do we want to keep and maintain the code for handling
   88:     DTD/System ID cache directly in libxml ?
   89    => not really done that way, but there are new APIs to check elements
   90       or attributes. Otherwise XHTML validation directly ...
   ..
   96  - XmlTextReader streaming API + validation
   97  
   98: - Add a DTD cache prefilled with xhtml DTDs and entities and a program to
   99    manage them -> like the /usr/bin/install-catalog from SGML
  100    right place seems $datadir/xmldtds
  ...
  207       I plan to keep everything internally as UTF-8 (or ISO-Latin-X)
  208       this is slightly more costly but more compact, and recent processors
  209:      efficiency is cache related. The key for good performances is keeping
  210       the data set small, so will I.
  211    => the new progressive reading routines call the detection code

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/tree.c:
 6162      xmlNsPtr *oldNs = NULL;
 6163      xmlNsPtr *newNs = NULL;
 6164:     int sizeCache = 0;
 6165:     int nbCache = 0;
 6166  
 6167      xmlNsPtr n;
 ....
 6179  	if (node->ns != NULL) {
 6180  	    /*
 6181: 	     * initialize the cache if needed
 6182  	     */
 6183: 	    if (sizeCache == 0) {
 6184: 		sizeCache = 10;
 6185: 		oldNs = (xmlNsPtr *) xmlMalloc(sizeCache *
 6186  					       sizeof(xmlNsPtr));
 6187  		if (oldNs == NULL) {
 ....
 6189  		    return(-1);
 6190  		}
 6191: 		newNs = (xmlNsPtr *) xmlMalloc(sizeCache *
 6192  					       sizeof(xmlNsPtr));
 6193  		if (newNs == NULL) {
 ....
 6197  		}
 6198  	    }
 6199: 	    for (i = 0;i < nbCache;i++) {
 6200  	        if (oldNs[i] == node->ns) {
 6201  		    node->ns = newNs[i];
 ....
 6203  		}
 6204  	    }
 6205: 	    if (i == nbCache) {
 6206  	        /*
 6207  		 * OK we need to recreate a new namespace definition
 ....
 6210  		if (n != NULL) { /* :-( what if else ??? */
 6211  		    /*
 6212: 		     * check if we need to grow the cache buffers.
 6213  		     */
 6214: 		    if (sizeCache <= nbCache) {
 6215: 		        sizeCache *= 2;
 6216: 			oldNs = (xmlNsPtr *) xmlRealloc(oldNs, sizeCache *
 6217  			                               sizeof(xmlNsPtr));
 6218  		        if (oldNs == NULL) {
 ....
 6221  			    return(-1);
 6222  			}
 6223: 			newNs = (xmlNsPtr *) xmlRealloc(newNs, sizeCache *
 6224  			                               sizeof(xmlNsPtr));
 6225  		        if (newNs == NULL) {
 ....
 6229  			}
 6230  		    }
 6231: 		    newNs[nbCache] = n;
 6232: 		    oldNs[nbCache++] = node->ns;
 6233  		    node->ns = n;
 6234                  }
 ....
 6243  		if (attr->ns != NULL) {
 6244  		    /*
 6245: 		     * initialize the cache if needed
 6246  		     */
 6247: 		    if (sizeCache == 0) {
 6248: 			sizeCache = 10;
 6249: 			oldNs = (xmlNsPtr *) xmlMalloc(sizeCache *
 6250  						       sizeof(xmlNsPtr));
 6251  			if (oldNs == NULL) {
 ....
 6253  			    return(-1);
 6254  			}
 6255: 			newNs = (xmlNsPtr *) xmlMalloc(sizeCache *
 6256  						       sizeof(xmlNsPtr));
 6257  			if (newNs == NULL) {
 ....
 6261  			}
 6262  		    }
 6263: 		    for (i = 0;i < nbCache;i++) {
 6264  			if (oldNs[i] == attr->ns) {
 6265  			    attr->ns = newNs[i];
 ....
 6267  			}
 6268  		    }
 6269: 		    if (i == nbCache) {
 6270  			/*
 6271  			 * OK we need to recreate a new namespace definition
 ....
 6274  			if (n != NULL) { /* :-( what if else ??? */
 6275  			    /*
 6276: 			     * check if we need to grow the cache buffers.
 6277  			     */
 6278: 			    if (sizeCache <= nbCache) {
 6279: 				sizeCache *= 2;
 6280  				oldNs = (xmlNsPtr *) xmlRealloc(oldNs,
 6281: 				           sizeCache * sizeof(xmlNsPtr));
 6282  				if (oldNs == NULL) {
 6283  				    xmlTreeErrMemory("fixing namespaces");
 ....
 6286  				}
 6287  				newNs = (xmlNsPtr *) xmlRealloc(newNs,
 6288: 				           sizeCache * sizeof(xmlNsPtr));
 6289  				if (newNs == NULL) {
 6290  				    xmlTreeErrMemory("fixing namespaces");
 ....
 6293  				}
 6294  			    }
 6295: 			    newNs[nbCache] = n;
 6296: 			    oldNs[nbCache++] = attr->ns;
 6297  			    attr->ns = n;
 6298  			}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/trionan.c:
  258  trio_pinf(TRIO_NOARGS)
  259  {
  260:   /* Cache the result */
  261    static double result = 0.0;
  262  
  ...
  323  trio_nan(TRIO_NOARGS)
  324  {
  325:   /* Cache the result */
  326    static double result = 0.0;
  327  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/win32/libxml2.def.src:
 2710  #endif
 2711  #ifdef LIBXML_XPATH_ENABLED
 2712: xmlXPathContextSetCache
 2713  #endif
 2714  #ifdef LIBXML_XPATH_ENABLED

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/xmlschemas.c:
  845      int depth; /* the tree depth at creation time */
  846      xmlSchemaIDCMatcherPtr next; /* next in the list */
  847:     xmlSchemaIDCMatcherPtr nextCached; /* next in the cache list */
  848      xmlSchemaIDCAugPtr aidc; /* the augmented IDC item */
  849      int idcType;
  ...
 1002      xmlSchemaIDCStateObjPtr xpathStates; /* first active state object. */
 1003      xmlSchemaIDCStateObjPtr xpathStatePool; /* first stored state object. */
 1004:     xmlSchemaIDCMatcherPtr idcMatcherCache; /* Cache for IDC matcher objects. */
 1005  
 1006      xmlSchemaPSVIIDCNodePtr *idcNodes; /* list of all IDC node-table entries*/
 ....
 22288   * @matcher: the first IDC matcher in the list
 22289   *
 22290:  * Caches a list of IDC matchers for reuse.
 22291   */
 22292  static void
 .....
 22330  	matcher->next = NULL;
 22331  	/*
 22332: 	* Cache the matcher.
 22333  	*/
 22334: 	if (vctxt->idcMatcherCache != NULL)
 22335: 	    matcher->nextCached = vctxt->idcMatcherCache;
 22336: 	vctxt->idcMatcherCache = matcher;
 22337  
 22338  	matcher = next;
 .....
 23033  	    } else {
 23034  		/*
 23035: 		* Save a cached QName for this node on the IDC node, to be
 23036  		* able to report it, even if the node is not saved.
 23037  		*/
 .....
 23217  	* Create an IDC matcher for every IDC definition.
 23218  	*/
 23219: 	if (vctxt->idcMatcherCache != NULL) {
 23220  	    /*
 23221: 	    * Reuse a cached matcher.
 23222  	    */
 23223: 	    matcher = vctxt->idcMatcherCache;
 23224: 	    vctxt->idcMatcherCache = matcher->nextCached;
 23225: 	    matcher->nextCached = NULL;
 23226  	} else {
 23227  	    matcher = (xmlSchemaIDCMatcherPtr)
 .....
 27492  	vctxt->aidcs = NULL;
 27493      }
 27494:     if (vctxt->idcMatcherCache != NULL) {
 27495: 	xmlSchemaIDCMatcherPtr matcher = vctxt->idcMatcherCache, tmp;
 27496  
 27497  	while (matcher) {
 27498  	    tmp = matcher;
 27499: 	    matcher = matcher->nextCached;
 27500  	    xmlSchemaIDCFreeMatcherList(tmp);
 27501  	}
 27502: 	vctxt->idcMatcherCache = NULL;
 27503      }
 27504  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxml2/2.8.0/libxml2-2.8.0/xpath.c:
  567      void *value4;
  568      void *value5;
  569:     void *cache;
  570:     void *cacheURI;
  571      int rewriteType;
  572  };
  ...
  761  	comp->steps[comp->nbStep].value5 = value5;
  762      }
  763:     comp->steps[comp->nbStep].cache = NULL;
  764      return(comp->nbStep++);
  765  }
  ...
  810  /************************************************************************
  811   *									*
  812:  *		XPath object cache structures				*
  813   *									*
  814   ************************************************************************/
  815  
  816: /* #define XP_DEFAULT_CACHE_ON */
  817  
  818: #define XP_HAS_CACHE(c) ((c != NULL) && ((c)->cache != NULL))
  819  
  820: typedef struct _xmlXPathContextCache xmlXPathContextCache;
  821: typedef xmlXPathContextCache *xmlXPathContextCachePtr;
  822: struct _xmlXPathContextCache {
  823      xmlPointerListPtr nodesetObjs;  /* contains xmlXPathObjectPtr */
  824      xmlPointerListPtr stringObjs;   /* contains xmlXPathObjectPtr */
  ...
  832      int maxMisc;
  833  #ifdef XP_DEBUG_OBJ_USAGE
  834:     int dbgCachedAll;
  835:     int dbgCachedNodeset;
  836:     int dbgCachedString;
  837:     int dbgCachedBool;
  838:     int dbgCachedNumber;
  839:     int dbgCachedPoint;
  840:     int dbgCachedRange;
  841:     int dbgCachedLocset;
  842:     int dbgCachedUsers;
  843:     int dbgCachedXSLTTree;
  844:     int dbgCachedUndefined;
  845  
  846  
  ...
 1354  {
 1355      if (ctxt != NULL) {
 1356: 	if (ctxt->cache != NULL) {
 1357: 	    xmlXPathContextCachePtr cache =
 1358: 		(xmlXPathContextCachePtr) ctxt->cache;
 1359  
 1360: 	    cache->dbgCachedAll = 0;
 1361: 	    cache->dbgCachedNodeset = 0;
 1362: 	    cache->dbgCachedString = 0;
 1363: 	    cache->dbgCachedBool = 0;
 1364: 	    cache->dbgCachedNumber = 0;
 1365: 	    cache->dbgCachedPoint = 0;
 1366: 	    cache->dbgCachedRange = 0;
 1367: 	    cache->dbgCachedLocset = 0;
 1368: 	    cache->dbgCachedUsers = 0;
 1369: 	    cache->dbgCachedXSLTTree = 0;
 1370: 	    cache->dbgCachedUndefined = 0;
 1371  
 1372: 	    cache->dbgReusedAll = 0;
 1373: 	    cache->dbgReusedNodeset = 0;
 1374: 	    cache->dbgReusedString = 0;
 1375: 	    cache->dbgReusedBool = 0;
 1376: 	    cache->dbgReusedNumber = 0;
 1377: 	    cache->dbgReusedPoint = 0;
 1378: 	    cache->dbgReusedRange = 0;
 1379: 	    cache->dbgReusedLocset = 0;
 1380: 	    cache->dbgReusedUsers = 0;
 1381: 	    cache->dbgReusedXSLTTree = 0;
 1382: 	    cache->dbgReusedUndefined = 0;
 1383  	}
 1384      }
 ....
 1426  			      xmlXPathObjectType objType)
 1427  {
 1428:     int isCached = 0;
 1429  
 1430      if (ctxt != NULL) {
 1431: 	if (ctxt->cache != NULL) {
 1432: 	    xmlXPathContextCachePtr cache =
 1433: 		(xmlXPathContextCachePtr) ctxt->cache;
 1434  
 1435: 	    isCached = 1;
 1436  
 1437: 	    cache->dbgReusedAll++;
 1438  	    switch (objType) {
 1439  		case XPATH_UNDEFINED:
 1440: 		    cache->dbgReusedUndefined++;
 1441  		    break;
 1442  		case XPATH_NODESET:
 1443: 		    cache->dbgReusedNodeset++;
 1444  		    break;
 1445  		case XPATH_BOOLEAN:
 1446: 		    cache->dbgReusedBool++;
 1447  		    break;
 1448  		case XPATH_NUMBER:
 1449: 		    cache->dbgReusedNumber++;
 1450  		    break;
 1451  		case XPATH_STRING:
 1452: 		    cache->dbgReusedString++;
 1453  		    break;
 1454  		case XPATH_POINT:
 1455: 		    cache->dbgReusedPoint++;
 1456  		    break;
 1457  		case XPATH_RANGE:
 1458: 		    cache->dbgReusedRange++;
 1459  		    break;
 1460  		case XPATH_LOCATIONSET:
 1461: 		    cache->dbgReusedLocset++;
 1462  		    break;
 1463  		case XPATH_USERS:
 1464: 		    cache->dbgReusedUsers++;
 1465  		    break;
 1466  		case XPATH_XSLT_TREE:
 1467: 		    cache->dbgReusedXSLTTree++;
 1468  		    break;
 1469  		default:
 ....
 1475      switch (objType) {
 1476  	case XPATH_UNDEFINED:
 1477: 	    if (! isCached)
 1478  		xmlXPathDebugObjTotalUndefined++;
 1479  	    xmlXPathDebugObjCounterUndefined++;
 ....
 1484  	    break;
 1485  	case XPATH_NODESET:
 1486: 	    if (! isCached)
 1487  		xmlXPathDebugObjTotalNodeset++;
 1488  	    xmlXPathDebugObjCounterNodeset++;
 ....
 1493  	    break;
 1494  	case XPATH_BOOLEAN:
 1495: 	    if (! isCached)
 1496  		xmlXPathDebugObjTotalBool++;
 1497  	    xmlXPathDebugObjCounterBool++;
 ....
 1502  	    break;
 1503  	case XPATH_NUMBER:
 1504: 	    if (! isCached)
 1505  		xmlXPathDebugObjTotalNumber++;
 1506  	    xmlXPathDebugObjCounterNumber++;
 ....
 1511  	    break;
 1512  	case XPATH_STRING:
 1513: 	    if (! isCached)
 1514  		xmlXPathDebugObjTotalString++;
 1515  	    xmlXPathDebugObjCounterString++;
 ....
 1520  	    break;
 1521  	case XPATH_POINT:
 1522: 	    if (! isCached)
 1523  		xmlXPathDebugObjTotalPoint++;
 1524  	    xmlXPathDebugObjCounterPoint++;
 ....
 1529  	    break;
 1530  	case XPATH_RANGE:
 1531: 	    if (! isCached)
 1532  		xmlXPathDebugObjTotalRange++;
 1533  	    xmlXPathDebugObjCounterRange++;
 ....
 1538  	    break;
 1539  	case XPATH_LOCATIONSET:
 1540: 	    if (! isCached)
 1541  		xmlXPathDebugObjTotalLocset++;
 1542  	    xmlXPathDebugObjCounterLocset++;
 ....
 1547  	    break;
 1548  	case XPATH_USERS:
 1549: 	    if (! isCached)
 1550  		xmlXPathDebugObjTotalUsers++;
 1551  	    xmlXPathDebugObjCounterUsers++;
 ....
 1556  	    break;
 1557  	case XPATH_XSLT_TREE:
 1558: 	    if (! isCached)
 1559  		xmlXPathDebugObjTotalXSLTTree++;
 1560  	    xmlXPathDebugObjCounterXSLTTree++;
 ....
 1567  	    break;
 1568      }
 1569:     if (! isCached)
 1570  	xmlXPathDebugObjTotalAll++;
 1571      xmlXPathDebugObjCounterAll++;
 ....
 1580  			      xmlXPathObjectType objType)
 1581  {
 1582:     int isCached = 0;
 1583  
 1584      if (ctxt != NULL) {
 1585: 	if (ctxt->cache != NULL) {
 1586: 	    xmlXPathContextCachePtr cache =
 1587: 		(xmlXPathContextCachePtr) ctxt->cache;
 1588  
 1589: 	    isCached = 1;
 1590  
 1591: 	    cache->dbgCachedAll++;
 1592  	    switch (objType) {
 1593  		case XPATH_UNDEFINED:
 1594: 		    cache->dbgCachedUndefined++;
 1595  		    break;
 1596  		case XPATH_NODESET:
 1597: 		    cache->dbgCachedNodeset++;
 1598  		    break;
 1599  		case XPATH_BOOLEAN:
 1600: 		    cache->dbgCachedBool++;
 1601  		    break;
 1602  		case XPATH_NUMBER:
 1603: 		    cache->dbgCachedNumber++;
 1604  		    break;
 1605  		case XPATH_STRING:
 1606: 		    cache->dbgCachedString++;
 1607  		    break;
 1608  		case XPATH_POINT:
 1609: 		    cache->dbgCachedPoint++;
 1610  		    break;
 1611  		case XPATH_RANGE:
 1612: 		    cache->dbgCachedRange++;
 1613  		    break;
 1614  		case XPATH_LOCATIONSET:
 1615: 		    cache->dbgCachedLocset++;
 1616  		    break;
 1617  		case XPATH_USERS:
 1618: 		    cache->dbgCachedUsers++;
 1619  		    break;
 1620  		case XPATH_XSLT_TREE:
 1621: 		    cache->dbgCachedXSLTTree++;
 1622  		    break;
 1623  		default:
 ....
 1687  
 1688      if (ctxt != NULL) {
 1689: 	if (ctxt->cache != NULL) {
 1690: 	    xmlXPathContextCachePtr cache =
 1691: 		(xmlXPathContextCachePtr) ctxt->cache;
 1692  
 1693: 	    reAll = cache->dbgReusedAll;
 1694  	    reqAll += reAll;
 1695: 	    reNodeset = cache->dbgReusedNodeset;
 1696  	    reqNodeset += reNodeset;
 1697: 	    reString = cache->dbgReusedString;
 1698  	    reqString += reString;
 1699: 	    reBool = cache->dbgReusedBool;
 1700  	    reqBool += reBool;
 1701: 	    reNumber = cache->dbgReusedNumber;
 1702  	    reqNumber += reNumber;
 1703: 	    reXSLTTree = cache->dbgReusedXSLTTree;
 1704  	    reqXSLTTree += reXSLTTree;
 1705: 	    reUndefined = cache->dbgReusedUndefined;
 1706  	    reqUndefined += reUndefined;
 1707  
 1708: 	    caAll = cache->dbgCachedAll;
 1709: 	    caBool = cache->dbgCachedBool;
 1710: 	    caNodeset = cache->dbgCachedNodeset;
 1711: 	    caString = cache->dbgCachedString;
 1712: 	    caNumber = cache->dbgCachedNumber;
 1713: 	    caXSLTTree = cache->dbgCachedXSLTTree;
 1714: 	    caUndefined = cache->dbgCachedUndefined;
 1715  
 1716: 	    if (cache->nodesetObjs)
 1717: 		leftObjs -= cache->nodesetObjs->number;
 1718: 	    if (cache->stringObjs)
 1719: 		leftObjs -= cache->stringObjs->number;
 1720: 	    if (cache->booleanObjs)
 1721: 		leftObjs -= cache->booleanObjs->number;
 1722: 	    if (cache->numberObjs)
 1723: 		leftObjs -= cache->numberObjs->number;
 1724: 	    if (cache->miscObjs)
 1725: 		leftObjs -= cache->miscObjs->number;
 1726  	}
 1727      }
 ....
 1783  
 1784  /**
 1785:  * xmlXPathNewCache:
 1786   *
 1787:  * Create a new object cache
 1788   *
 1789:  * Returns the xmlXPathCache just allocated.
 1790   */
 1791: static xmlXPathContextCachePtr
 1792: xmlXPathNewCache(void)
 1793  {
 1794:     xmlXPathContextCachePtr ret;
 1795  
 1796:     ret = (xmlXPathContextCachePtr) xmlMalloc(sizeof(xmlXPathContextCache));
 1797      if (ret == NULL) {
 1798:         xmlXPathErrMemory(NULL, "creating object cache\n");
 1799  	return(NULL);
 1800      }
 1801:     memset(ret, 0 , (size_t) sizeof(xmlXPathContextCache));
 1802      ret->maxNodeset = 100;
 1803      ret->maxString = 100;
 ....
 1809  
 1810  static void
 1811: xmlXPathCacheFreeObjectList(xmlPointerListPtr list)
 1812  {
 1813      int i;
 ....
 1837  
 1838  static void
 1839: xmlXPathFreeCache(xmlXPathContextCachePtr cache)
 1840  {
 1841:     if (cache == NULL)
 1842  	return;
 1843:     if (cache->nodesetObjs)
 1844: 	xmlXPathCacheFreeObjectList(cache->nodesetObjs);
 1845:     if (cache->stringObjs)
 1846: 	xmlXPathCacheFreeObjectList(cache->stringObjs);
 1847:     if (cache->booleanObjs)
 1848: 	xmlXPathCacheFreeObjectList(cache->booleanObjs);
 1849:     if (cache->numberObjs)
 1850: 	xmlXPathCacheFreeObjectList(cache->numberObjs);
 1851:     if (cache->miscObjs)
 1852: 	xmlXPathCacheFreeObjectList(cache->miscObjs);
 1853:     xmlFree(cache);
 1854  }
 1855  
 1856  /**
 1857:  * xmlXPathContextSetCache:
 1858   *
 1859   * @ctxt:  the XPath context
 1860:  * @active: enables/disables (creates/frees) the cache
 1861   * @value: a value with semantics dependant on @options
 1862   * @options: options (currently only the value 0 is used)
 1863   *
 1864:  * Creates/frees an object cache on the XPath context.
 1865:  * If activates XPath objects (xmlXPathObject) will be cached internally
 1866   * to be reused.
 1867   * @options:
 ....
 1869   *      @value:
 1870   *        This will set the maximum number of XPath objects
 1871:  *        to be cached per slot
 1872   *        There are 5 slots for: node-set, string, number, boolean, and
 1873   *        misc objects. Use <0 for the default number (100).
 ....
 1877   */
 1878  int
 1879: xmlXPathContextSetCache(xmlXPathContextPtr ctxt,
 1880  			int active,
 1881  			int value,
 ....
 1885  	return(-1);
 1886      if (active) {
 1887: 	xmlXPathContextCachePtr cache;
 1888  
 1889: 	if (ctxt->cache == NULL) {
 1890: 	    ctxt->cache = xmlXPathNewCache();
 1891: 	    if (ctxt->cache == NULL)
 1892  		return(-1);
 1893  	}
 1894: 	cache = (xmlXPathContextCachePtr) ctxt->cache;
 1895  	if (options == 0) {
 1896  	    if (value < 0)
 1897  		value = 100;
 1898: 	    cache->maxNodeset = value;
 1899: 	    cache->maxString = value;
 1900: 	    cache->maxNumber = value;
 1901: 	    cache->maxBoolean = value;
 1902: 	    cache->maxMisc = value;
 1903  	}
 1904:     } else if (ctxt->cache != NULL) {
 1905: 	xmlXPathFreeCache((xmlXPathContextCachePtr) ctxt->cache);
 1906: 	ctxt->cache = NULL;
 1907      }
 1908      return(0);
 ....
 1910  
 1911  /**
 1912:  * xmlXPathCacheWrapNodeSet:
 1913   * @ctxt: the XPath context
 1914   * @val:  the NodePtr value
 1915   *
 1916:  * This is the cached version of xmlXPathWrapNodeSet().
 1917   * Wrap the Nodeset @val in a new xmlXPathObjectPtr
 1918   *
 ....
 1920   */
 1921  static xmlXPathObjectPtr
 1922: xmlXPathCacheWrapNodeSet(xmlXPathContextPtr ctxt, xmlNodeSetPtr val)
 1923  {
 1924:     if ((ctxt != NULL) && (ctxt->cache != NULL)) {
 1925: 	xmlXPathContextCachePtr cache =
 1926: 	    (xmlXPathContextCachePtr) ctxt->cache;
 1927  
 1928: 	if ((cache->miscObjs != NULL) &&
 1929: 	    (cache->miscObjs->number != 0))
 1930  	{
 1931  	    xmlXPathObjectPtr ret;
 1932  
 1933  	    ret = (xmlXPathObjectPtr)
 1934: 		cache->miscObjs->items[--cache->miscObjs->number];
 1935  	    ret->type = XPATH_NODESET;
 1936  	    ret->nodesetval = val;
 ....
 1947  
 1948  /**
 1949:  * xmlXPathCacheWrapString:
 1950   * @ctxt: the XPath context
 1951   * @val:  the xmlChar * value
 1952   *
 1953:  * This is the cached version of xmlXPathWrapString().
 1954   * Wraps the @val string into an XPath object.
 1955   *
 ....
 1957   */
 1958  static xmlXPathObjectPtr
 1959: xmlXPathCacheWrapString(xmlXPathContextPtr ctxt, xmlChar *val)
 1960  {
 1961:     if ((ctxt != NULL) && (ctxt->cache != NULL)) {
 1962: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 1963  
 1964: 	if ((cache->stringObjs != NULL) &&
 1965: 	    (cache->stringObjs->number != 0))
 1966  	{
 1967  
 ....
 1969  
 1970  	    ret = (xmlXPathObjectPtr)
 1971: 		cache->stringObjs->items[--cache->stringObjs->number];
 1972  	    ret->type = XPATH_STRING;
 1973  	    ret->stringval = val;
 ....
 1976  #endif
 1977  	    return(ret);
 1978: 	} else if ((cache->miscObjs != NULL) &&
 1979: 	    (cache->miscObjs->number != 0))
 1980  	{
 1981  	    xmlXPathObjectPtr ret;
 1982  	    /*
 1983: 	    * Fallback to misc-cache.
 1984  	    */
 1985  	    ret = (xmlXPathObjectPtr)
 1986: 		cache->miscObjs->items[--cache->miscObjs->number];
 1987  
 1988  	    ret->type = XPATH_STRING;
 ....
 1998  
 1999  /**
 2000:  * xmlXPathCacheNewNodeSet:
 2001   * @ctxt: the XPath context
 2002   * @val:  the NodePtr value
 2003   *
 2004:  * This is the cached version of xmlXPathNewNodeSet().
 2005   * Acquire an xmlXPathObjectPtr of type NodeSet and initialize
 2006   * it with the single Node @val
 ....
 2009   */
 2010  static xmlXPathObjectPtr
 2011: xmlXPathCacheNewNodeSet(xmlXPathContextPtr ctxt, xmlNodePtr val)
 2012  {
 2013:     if ((ctxt != NULL) && (ctxt->cache)) {
 2014: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 2015  
 2016: 	if ((cache->nodesetObjs != NULL) &&
 2017: 	    (cache->nodesetObjs->number != 0))
 2018  	{
 2019  	    xmlXPathObjectPtr ret;
 2020  	    /*
 2021: 	    * Use the nodset-cache.
 2022  	    */
 2023  	    ret = (xmlXPathObjectPtr)
 2024: 		cache->nodesetObjs->items[--cache->nodesetObjs->number];
 2025  	    ret->type = XPATH_NODESET;
 2026  	    ret->boolval = 0;
 ....
 2039  #endif
 2040  	    return(ret);
 2041: 	} else if ((cache->miscObjs != NULL) &&
 2042: 	    (cache->miscObjs->number != 0))
 2043  	{
 2044  	    xmlXPathObjectPtr ret;
 2045  	    /*
 2046: 	    * Fallback to misc-cache.
 2047  	    */
 2048  
 2049  	    ret = (xmlXPathObjectPtr)
 2050: 		cache->miscObjs->items[--cache->miscObjs->number];
 2051  
 2052  	    ret->type = XPATH_NODESET;
 ....
 2063  
 2064  /**
 2065:  * xmlXPathCacheNewCString:
 2066   * @ctxt: the XPath context
 2067   * @val:  the char * value
 2068   *
 2069:  * This is the cached version of xmlXPathNewCString().
 2070   * Acquire an xmlXPathObjectPtr of type string and of value @val
 2071   *
 ....
 2073   */
 2074  static xmlXPathObjectPtr
 2075: xmlXPathCacheNewCString(xmlXPathContextPtr ctxt, const char *val)
 2076  {
 2077:     if ((ctxt != NULL) && (ctxt->cache)) {
 2078: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 2079  
 2080: 	if ((cache->stringObjs != NULL) &&
 2081: 	    (cache->stringObjs->number != 0))
 2082  	{
 2083  	    xmlXPathObjectPtr ret;
 2084  
 2085  	    ret = (xmlXPathObjectPtr)
 2086: 		cache->stringObjs->items[--cache->stringObjs->number];
 2087  
 2088  	    ret->type = XPATH_STRING;
 ....
 2092  #endif
 2093  	    return(ret);
 2094: 	} else if ((cache->miscObjs != NULL) &&
 2095: 	    (cache->miscObjs->number != 0))
 2096  	{
 2097  	    xmlXPathObjectPtr ret;
 2098  
 2099  	    ret = (xmlXPathObjectPtr)
 2100: 		cache->miscObjs->items[--cache->miscObjs->number];
 2101  
 2102  	    ret->type = XPATH_STRING;
 ....
 2112  
 2113  /**
 2114:  * xmlXPathCacheNewString:
 2115   * @ctxt: the XPath context
 2116   * @val:  the xmlChar * value
 2117   *
 2118:  * This is the cached version of xmlXPathNewString().
 2119   * Acquire an xmlXPathObjectPtr of type string and of value @val
 2120   *
 ....
 2122   */
 2123  static xmlXPathObjectPtr
 2124: xmlXPathCacheNewString(xmlXPathContextPtr ctxt, const xmlChar *val)
 2125  {
 2126:     if ((ctxt != NULL) && (ctxt->cache)) {
 2127: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 2128  
 2129: 	if ((cache->stringObjs != NULL) &&
 2130: 	    (cache->stringObjs->number != 0))
 2131  	{
 2132  	    xmlXPathObjectPtr ret;
 2133  
 2134  	    ret = (xmlXPathObjectPtr)
 2135: 		cache->stringObjs->items[--cache->stringObjs->number];
 2136  	    ret->type = XPATH_STRING;
 2137  	    if (val != NULL)
 ....
 2143  #endif
 2144  	    return(ret);
 2145: 	} else if ((cache->miscObjs != NULL) &&
 2146: 	    (cache->miscObjs->number != 0))
 2147  	{
 2148  	    xmlXPathObjectPtr ret;
 2149  
 2150  	    ret = (xmlXPathObjectPtr)
 2151: 		cache->miscObjs->items[--cache->miscObjs->number];
 2152  
 2153  	    ret->type = XPATH_STRING;
 ....
 2166  
 2167  /**
 2168:  * xmlXPathCacheNewBoolean:
 2169   * @ctxt: the XPath context
 2170   * @val:  the boolean value
 2171   *
 2172:  * This is the cached version of xmlXPathNewBoolean().
 2173   * Acquires an xmlXPathObjectPtr of type boolean and of value @val
 2174   *
 ....
 2176   */
 2177  static xmlXPathObjectPtr
 2178: xmlXPathCacheNewBoolean(xmlXPathContextPtr ctxt, int val)
 2179  {
 2180:     if ((ctxt != NULL) && (ctxt->cache)) {
 2181: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 2182  
 2183: 	if ((cache->booleanObjs != NULL) &&
 2184: 	    (cache->booleanObjs->number != 0))
 2185  	{
 2186  	    xmlXPathObjectPtr ret;
 2187  
 2188  	    ret = (xmlXPathObjectPtr)
 2189: 		cache->booleanObjs->items[--cache->booleanObjs->number];
 2190  	    ret->type = XPATH_BOOLEAN;
 2191  	    ret->boolval = (val != 0);
 ....
 2194  #endif
 2195  	    return(ret);
 2196: 	} else if ((cache->miscObjs != NULL) &&
 2197: 	    (cache->miscObjs->number != 0))
 2198  	{
 2199  	    xmlXPathObjectPtr ret;
 2200  
 2201  	    ret = (xmlXPathObjectPtr)
 2202: 		cache->miscObjs->items[--cache->miscObjs->number];
 2203  
 2204  	    ret->type = XPATH_BOOLEAN;
 ....
 2214  
 2215  /**
 2216:  * xmlXPathCacheNewFloat:
 2217   * @ctxt: the XPath context
 2218   * @val:  the double value
 2219   *
 2220:  * This is the cached version of xmlXPathNewFloat().
 2221   * Acquires an xmlXPathObjectPtr of type double and of value @val
 2222   *
 ....
 2224   */
 2225  static xmlXPathObjectPtr
 2226: xmlXPathCacheNewFloat(xmlXPathContextPtr ctxt, double val)
 2227  {
 2228:      if ((ctxt != NULL) && (ctxt->cache)) {
 2229: 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;
 2230  
 2231: 	if ((cache->numberObjs != NULL) &&
 2232: 	    (cache->numberObjs->number != 0))
 2233  	{
 2234  	    xmlXPathObjectPtr ret;
 2235  
 2236  	    ret = (xmlXPathObjectPtr)
 2237: 		cache->numberObjs->items[--cache->numberObjs->number];
 2238  	    ret->type = XPATH_NUMBER;
 2239  	    ret->floatval = val;
 ....
 2242  #endif
 2243  	    return(ret);
 2244: 	} else if ((cache->miscObjs != NULL) &&
 2245: 	    (cache->miscObjs->number != 0))
 2246  	{
 2247  	    xmlXPathObjectPtr ret;
 2248  
 2249  	    ret = (xmlXPathObjectPtr)
 2250: 		cache->miscObjs->items[--cache->miscObjs->number];
 2251  
 2252  	    ret->type = XPATH_NUMBER;
 ....
 2262  
 2263  /**
 2264:  * xmlXPathCacheConvertString:
 2265   * @ctxt: the XPath context
 2266   * @val:  an XPath object
 2267   *
 2268:  * This is the cached version of xmlXPathConvertString().
 2269   * Converts an existing object to its string() equivalent
 2270   *
 2271:  * Returns a created or reused object, the old one is freed (cached)
 2272   *         (or the operation is done directly on @val)
 2273   */
 2274  
 2275  static xmlXPathObjectPtr
 2276: xmlXPathCacheConvertString(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
 2277      xmlChar *res = NULL;
 2278  
 2279      if (val == NULL)
 2280: 	return(xmlXPathCacheNewCString(ctxt, ""));
 2281  
 2282      switch (val->type) {
 ....
 2307      xmlXPathReleaseObject(ctxt, val);
 2308      if (res == NULL)
 2309: 	return(xmlXPathCacheNewCString(ctxt, ""));
 2310:     return(xmlXPathCacheWrapString(ctxt, res));
 2311  }
 2312  
 2313  /**
 2314:  * xmlXPathCacheObjectCopy:
 2315   * @ctxt: the XPath context
 2316   * @val:  the original object
 2317   *
 2318:  * This is the cached version of xmlXPathObjectCopy().
 2319   * Acquire a copy of a given object
 2320   *
 ....
 2322   */
 2323  static xmlXPathObjectPtr
 2324: xmlXPathCacheObjectCopy(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val)
 2325  {
 2326      if (val == NULL)
 2327  	return(NULL);
 2328  
 2329:     if (XP_HAS_CACHE(ctxt)) {
 2330  	switch (val->type) {
 2331  	    case XPATH_NODESET:
 2332: 		return(xmlXPathCacheWrapNodeSet(ctxt,
 2333  		    xmlXPathNodeSetMerge(NULL, val->nodesetval)));
 2334  	    case XPATH_STRING:
 2335: 		return(xmlXPathCacheNewString(ctxt, val->stringval));
 2336  	    case XPATH_BOOLEAN:
 2337: 		return(xmlXPathCacheNewBoolean(ctxt, val->boolval));
 2338  	    case XPATH_NUMBER:
 2339: 		return(xmlXPathCacheNewFloat(ctxt, val->floatval));
 2340  	    default:
 2341  		break;
 ....
 2346  
 2347  /**
 2348:  * xmlXPathCacheConvertBoolean:
 2349   * @ctxt: the XPath context
 2350   * @val:  an XPath object
 2351   *
 2352:  * This is the cached version of xmlXPathConvertBoolean().
 2353   * Converts an existing object to its boolean() equivalent
 2354   *
 ....
 2357   */
 2358  static xmlXPathObjectPtr
 2359: xmlXPathCacheConvertBoolean(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
 2360      xmlXPathObjectPtr ret;
 2361  
 2362      if (val == NULL)
 2363: 	return(xmlXPathCacheNewBoolean(ctxt, 0));
 2364      if (val->type == XPATH_BOOLEAN)
 2365  	return(val);
 2366:     ret = xmlXPathCacheNewBoolean(ctxt, xmlXPathCastToBoolean(val));
 2367      xmlXPathReleaseObject(ctxt, val);
 2368      return(ret);
 ....
 2370  
 2371  /**
 2372:  * xmlXPathCacheConvertNumber:
 2373   * @ctxt: the XPath context
 2374   * @val:  an XPath object
 2375   *
 2376:  * This is the cached version of xmlXPathConvertNumber().
 2377   * Converts an existing object to its number() equivalent
 2378   *
 ....
 2381   */
 2382  static xmlXPathObjectPtr
 2383: xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
 2384      xmlXPathObjectPtr ret;
 2385  
 2386      if (val == NULL)
 2387: 	return(xmlXPathCacheNewFloat(ctxt, 0.0));
 2388      if (val->type == XPATH_NUMBER)
 2389  	return(val);
 2390:     ret = xmlXPathCacheNewFloat(ctxt, xmlXPathCastToNumber(val));
 2391      xmlXPathReleaseObject(ctxt, val);
 2392      return(ret);
 ....
 5026  	return(NULL);
 5027  
 5028:     return(xmlXPathCacheObjectCopy(ctxt, (xmlXPathObjectPtr)
 5029  		xmlHashLookup2(ctxt->varHash, name, ns_uri)));
 5030  }
 ....
 5439  /**
 5440   * xmlXPathReleaseObject:
 5441:  * @obj:  the xmlXPathObjectPtr to free or to cache
 5442   *
 5443:  * Depending on the state of the cache this frees the given
 5444:  * XPath object or stores it in the cache.
 5445   */
 5446  static void
 5447  xmlXPathReleaseObject(xmlXPathContextPtr ctxt, xmlXPathObjectPtr obj)
 5448  {
 5449: #define XP_CACHE_ADD(sl, o) if (sl == NULL) { \
 5450  	sl = xmlPointerListCreate(10); if (sl == NULL) goto free_obj; } \
 5451      if (xmlPointerListAddSize(sl, obj, 0) == -1) goto free_obj;
 5452  
 5453: #define XP_CACHE_WANTS(sl, n) ((sl == NULL) || ((sl)->number < n))
 5454  
 5455      if (obj == NULL)
 5456  	return;
 5457:     if ((ctxt == NULL) || (ctxt->cache == NULL)) {
 5458  	 xmlXPathFreeObject(obj);
 5459      } else {
 5460: 	xmlXPathContextCachePtr cache =
 5461: 	    (xmlXPathContextCachePtr) ctxt->cache;
 5462  
 5463  	switch (obj->type) {
 ....
 5475  			obj->nodesetval = NULL;
 5476  		    } else if ((obj->nodesetval->nodeMax <= 40) &&
 5477: 			(XP_CACHE_WANTS(cache->nodesetObjs,
 5478: 					cache->maxNodeset)))
 5479  		    {
 5480: 			XP_CACHE_ADD(cache->nodesetObjs, obj);
 5481: 			goto obj_cached;
 5482  		    } else {
 5483  			xmlXPathFreeNodeSet(obj->nodesetval);
 ....
 5490  		    xmlFree(obj->stringval);
 5491  
 5492: 		if (XP_CACHE_WANTS(cache->stringObjs, cache->maxString)) {
 5493: 		    XP_CACHE_ADD(cache->stringObjs, obj);
 5494: 		    goto obj_cached;
 5495  		}
 5496  		break;
 5497  	    case XPATH_BOOLEAN:
 5498: 		if (XP_CACHE_WANTS(cache->booleanObjs, cache->maxBoolean)) {
 5499: 		    XP_CACHE_ADD(cache->booleanObjs, obj);
 5500: 		    goto obj_cached;
 5501  		}
 5502  		break;
 5503  	    case XPATH_NUMBER:
 5504: 		if (XP_CACHE_WANTS(cache->numberObjs, cache->maxNumber)) {
 5505: 		    XP_CACHE_ADD(cache->numberObjs, obj);
 5506: 		    goto obj_cached;
 5507  		}
 5508  		break;
 ....
 5521  	* Fallback to adding to the misc-objects slot.
 5522  	*/
 5523: 	if (XP_CACHE_WANTS(cache->miscObjs, cache->maxMisc)) {
 5524: 	    XP_CACHE_ADD(cache->miscObjs, obj);
 5525  	} else
 5526  	    goto free_obj;
 5527  
 5528: obj_cached:
 5529  
 5530  #ifdef XP_DEBUG_OBJ_USAGE
 ....
 5568  free_obj:
 5569  	/*
 5570: 	* Cache is full; free the object.
 5571  	*/
 5572  	if (obj->nodesetval != NULL)
 ....
 6064      ret->proximityPosition = -1;
 6065  
 6066: #ifdef XP_DEFAULT_CACHE_ON
 6067:     if (xmlXPathContextSetCache(ret, 1, -1, 0) == -1) {
 6068  	xmlXPathFreeContext(ret);
 6069  	return(NULL);
 ....
 6086      if (ctxt == NULL) return;
 6087  
 6088:     if (ctxt->cache != NULL)
 6089: 	xmlXPathFreeCache((xmlXPathContextCachePtr) ctxt->cache);
 6090      xmlXPathRegisteredNsCleanup(ctxt);
 6091      xmlXPathRegisteredFuncsCleanup(ctxt);
 ....
 6415  	     if (str2 != NULL) {
 6416  		 valuePush(ctxt,
 6417: 			   xmlXPathCacheNewString(ctxt->context, str2));
 6418  		 xmlFree(str2);
 6419  		 xmlXPathNumberFunction(ctxt, 1);
 6420: 		 valuePush(ctxt, xmlXPathCacheObjectCopy(ctxt->context, f));
 6421  		 ret = xmlXPathCompareValues(ctxt, inf, strict);
 6422  		 if (ret)
 ....
 6470  	     if (str2 != NULL) {
 6471  		 valuePush(ctxt,
 6472: 			   xmlXPathCacheNewString(ctxt->context, str2));
 6473  		 xmlFree(str2);
 6474: 		 valuePush(ctxt, xmlXPathCacheObjectCopy(ctxt->context, s));
 6475  		 ret = xmlXPathCompareValues(ctxt, inf, strict);
 6476  		 if (ret)
 ....
 6724  	    str2 = xmlXPathCastNodeToString(ns->nodeTab[i]);
 6725  	    if (str2 != NULL) {
 6726: 		valuePush(ctxt, xmlXPathCacheNewString(ctxt->context, str2));
 6727  		xmlFree(str2);
 6728  		xmlXPathNumberFunction(ctxt, 1);
 ....
 8380  	return;
 8381      ctxt->context->node = (xmlNodePtr) ctxt->context->doc;
 8382:     valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 8383  	ctxt->context->node));
 8384  }
 ....
 8406      if (ctxt->context->contextSize >= 0) {
 8407  	valuePush(ctxt,
 8408: 	    xmlXPathCacheNewFloat(ctxt->context,
 8409  		(double) ctxt->context->contextSize));
 8410  #ifdef DEBUG_EXPR
 ....
 8433      if (ctxt->context->proximityPosition >= 0) {
 8434  	valuePush(ctxt,
 8435: 	      xmlXPathCacheNewFloat(ctxt->context,
 8436  		(double) ctxt->context->proximityPosition));
 8437  #ifdef DEBUG_EXPR
 ....
 8464  
 8465      if ((cur == NULL) || (cur->nodesetval == NULL))
 8466: 	valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) 0));
 8467      else if ((cur->type == XPATH_NODESET) || (cur->type == XPATH_XSLT_TREE)) {
 8468: 	valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,
 8469  	    (double) cur->nodesetval->nodeNr));
 8470      } else {
 8471  	if ((cur->nodesetval->nodeNr != 1) ||
 8472  	    (cur->nodesetval->nodeTab == NULL)) {
 8473: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) 0));
 8474  	} else {
 8475  	    xmlNodePtr tmp;
 ....
 8484  		}
 8485  	    }
 8486: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) i));
 8487  	}
 8488      }
 ....
 8597  	}
 8598  	xmlXPathReleaseObject(ctxt->context, obj);
 8599: 	valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, ret));
 8600  	return;
 8601      }
 8602:     obj = xmlXPathCacheConvertString(ctxt->context, obj);
 8603      ret = xmlXPathGetElementsByIds(ctxt->context->doc, obj->stringval);
 8604:     valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, ret));
 8605      xmlXPathReleaseObject(ctxt->context, obj);
 8606      return;
 ....
 8627  
 8628      if (nargs == 0) {
 8629: 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 8630  	    ctxt->context->node));
 8631  	nargs = 1;
 ....
 8640  
 8641      if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {
 8642: 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8643      } else {
 8644  	int i = 0; /* Should be first in document order !!!!! */
 ....
 8648  	case XML_PI_NODE:
 8649  	    if (cur->nodesetval->nodeTab[i]->name[0] == ' ')
 8650: 		valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8651  	    else
 8652  		valuePush(ctxt,
 8653: 		      xmlXPathCacheNewString(ctxt->context,
 8654  			cur->nodesetval->nodeTab[i]->name));
 8655  	    break;
 8656  	case XML_NAMESPACE_DECL:
 8657: 	    valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 8658  			((xmlNsPtr)cur->nodesetval->nodeTab[i])->prefix));
 8659  	    break;
 8660  	default:
 8661: 	    valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8662  	}
 8663      }
 ....
 8686  
 8687      if (nargs == 0) {
 8688: 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 8689  	    ctxt->context->node));
 8690  	nargs = 1;
 ....
 8698  
 8699      if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {
 8700: 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8701      } else {
 8702  	int i = 0; /* Should be first in document order !!!!! */
 ....
 8705  	case XML_ATTRIBUTE_NODE:
 8706  	    if (cur->nodesetval->nodeTab[i]->ns == NULL)
 8707: 		valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8708  	    else
 8709: 		valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 8710  			  cur->nodesetval->nodeTab[i]->ns->href));
 8711  	    break;
 8712  	default:
 8713: 	    valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8714  	}
 8715      }
 ....
 8745  
 8746      if (nargs == 0) {
 8747: 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 8748  	    ctxt->context->node));
 8749          nargs = 1;
 ....
 8758  
 8759      if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {
 8760:         valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 8761      } else {
 8762          int i = 0;              /* Should be first in document order !!!!! */
 ....
 8767  		if (cur->nodesetval->nodeTab[i]->name[0] == ' ')
 8768  		    valuePush(ctxt,
 8769: 			xmlXPathCacheNewCString(ctxt->context, ""));
 8770  		else if ((cur->nodesetval->nodeTab[i]->ns == NULL) ||
 8771                           (cur->nodesetval->nodeTab[i]->ns->prefix == NULL)) {
 8772  		    valuePush(ctxt,
 8773: 		        xmlXPathCacheNewString(ctxt->context,
 8774  			    cur->nodesetval->nodeTab[i]->name));
 8775  		} else {
 ....
 8784  			XP_ERROR(XPATH_MEMORY_ERROR);
 8785  		    }
 8786: 		    valuePush(ctxt, xmlXPathCacheWrapString(
 8787  			ctxt->context, fullname));
 8788                  }
 8789                  break;
 8790              default:
 8791: 		valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 8792  		    cur->nodesetval->nodeTab[i]));
 8793                  xmlXPathLocalNameFunction(ctxt, 1);
 ....
 8841      if (nargs == 0) {
 8842      valuePush(ctxt,
 8843: 	xmlXPathCacheWrapString(ctxt->context,
 8844  	    xmlXPathCastNodeToString(ctxt->context->node)));
 8845  	return;
 ....
 8849      cur = valuePop(ctxt);
 8850      if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);
 8851:     valuePush(ctxt, xmlXPathCacheConvertString(ctxt->context, cur));
 8852  }
 8853  
 ....
 8872  	    return;
 8873  	if (ctxt->context->node == NULL) {
 8874: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0));
 8875  	} else {
 8876  	    xmlChar *content;
 8877  
 8878  	    content = xmlXPathCastNodeToString(ctxt->context->node);
 8879: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,
 8880  		xmlUTF8Strlen(content)));
 8881  	    xmlFree(content);
 ....
 8887      CHECK_TYPE(XPATH_STRING);
 8888      cur = valuePop(ctxt);
 8889:     valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,
 8890  	xmlUTF8Strlen(cur->stringval)));
 8891      xmlXPathReleaseObject(ctxt->context, cur);
 ....
 8963      }
 8964      if (xmlStrstr(hay->stringval, needle->stringval))
 8965: 	valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));
 8966      else
 8967: 	valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));
 8968      xmlXPathReleaseObject(ctxt->context, hay);
 8969      xmlXPathReleaseObject(ctxt->context, needle);
 ....
 8999      n = xmlStrlen(needle->stringval);
 9000      if (xmlStrncmp(hay->stringval, needle->stringval, n))
 9001:         valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));
 9002      else
 9003:         valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));
 9004      xmlXPathReleaseObject(ctxt->context, hay);
 9005      xmlXPathReleaseObject(ctxt->context, needle);
 ....
 9122      }
 9123      if (ret == NULL)
 9124: 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));
 9125      else {
 9126: 	valuePush(ctxt, xmlXPathCacheNewString(ctxt->context, ret));
 9127  	xmlFree(ret);
 9128      }
 ....
 9164        xmlBufferAdd(target, str->stringval, offset);
 9165      }
 9166:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 9167  	xmlBufferContent(target)));
 9168      xmlBufferFree(target);
 ....
 9208  		   xmlStrlen(str->stringval) - offset);
 9209      }
 9210:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 9211  	xmlBufferContent(target)));
 9212      xmlBufferFree(target);
 ....
 9241      /* Use current context node */
 9242        valuePush(ctxt,
 9243: 	  xmlXPathCacheWrapString(ctxt->context,
 9244  	    xmlXPathCastNodeToString(ctxt->context->node)));
 9245      nargs = 1;
 ....
 9273        source++;
 9274      }
 9275:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 9276  	xmlBufferContent(target)));
 9277      xmlBufferFree(target);
 ....
 9358  	}
 9359      }
 9360:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 9361  	xmlBufferContent(target)));
 9362      xmlBufferFree(target);
 ....
 9386      cur = valuePop(ctxt);
 9387      if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);
 9388:     cur = xmlXPathCacheConvertBoolean(ctxt->context, cur);
 9389      valuePush(ctxt, cur);
 9390  }
 ....
 9419  xmlXPathTrueFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 9420      CHECK_ARITY(0);
 9421:     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));
 9422  }
 9423  
 ....
 9433  xmlXPathFalseFunction(xmlXPathParserContextPtr ctxt, int nargs) {
 9434      CHECK_ARITY(0);
 9435:     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));
 9436  }
 9437  
 ....
 9483  
 9484      xmlXPathReleaseObject(ctxt->context, val);
 9485:     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, ret));
 9486  }
 9487  
 ....
 9502      if (nargs == 0) {
 9503  	if (ctxt->context->node == NULL) {
 9504: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0.0));
 9505  	} else {
 9506  	    xmlChar* content = xmlNodeGetContent(ctxt->context->node);
 9507  
 9508  	    res = xmlXPathStringEvalNumber(content);
 9509: 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, res));
 9510  	    xmlFree(content);
 9511  	}
 ....
 9515      CHECK_ARITY(1);
 9516      cur = valuePop(ctxt);
 9517:     valuePush(ctxt, xmlXPathCacheConvertNumber(ctxt->context, cur));
 9518  }
 9519  
 ....
 9546  	}
 9547      }
 9548:     valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, res));
 9549      xmlXPathReleaseObject(ctxt->context, cur);
 9550  }
 ....
 10162      }
 10163      PUSH_LONG_EXPR(XPATH_OP_VALUE, XPATH_NUMBER, 0, 0,
 10164:                    xmlXPathCacheNewFloat(ctxt->context, ret), NULL);
 10165  }
 10166  
 .....
 10252      if (ret == NULL) return;
 10253      PUSH_LONG_EXPR(XPATH_OP_VALUE, XPATH_STRING, 0, 0,
 10254: 	           xmlXPathCacheNewString(ctxt->context, ret), NULL);
 10255      xmlFree(ret);
 10256  }
 .....
 11655  	    */
 11656  	    if (contextObj == NULL)
 11657: 		contextObj = xmlXPathCacheNewNodeSet(xpctxt, contextNode);
 11658  	    else
 11659  		xmlXPathNodeSetAddUnique(contextObj->nodesetval,
 .....
 11803  	    */
 11804  	    if (contextObj == NULL)
 11805: 		contextObj = xmlXPathCacheNewNodeSet(xpctxt, contextNode);
 11806  	    else
 11807  		xmlXPathNodeSetAddUnique(contextObj->nodesetval,
 .....
 12153      if ((contextSeq == NULL) || (contextSeq->nodeNr <= 0)) {
 12154  	xmlXPathReleaseObject(xpctxt, obj);
 12155:         valuePush(ctxt, xmlXPathCacheWrapNodeSet(xpctxt, NULL));
 12156          return(0);
 12157      }
 .....
 12601      * case of errors.
 12602      */
 12603:     valuePush(ctxt, xmlXPathCacheWrapNodeSet(xpctxt, outSeq));
 12604      /*
 12605      * Reset the context node.
 .....
 12695                  total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 12696  	    CHECK_ERROR0;
 12697: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 12698  		ctxt->context->node));
 12699              return (total);
 .....
 12719          case XPATH_OP_VALUE:
 12720              valuePush(ctxt,
 12721:                       xmlXPathCacheObjectCopy(ctxt->context,
 12722  			(xmlXPathObjectPtr) op->value4));
 12723              return (0);
 .....
 12830                  total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 12831  	    CHECK_ERROR0;
 12832: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 12833  		ctxt->context->node));
 12834              return (total);
 .....
 12854          case XPATH_OP_VALUE:
 12855              valuePush(ctxt,
 12856:                       xmlXPathCacheObjectCopy(ctxt->context,
 12857  			(xmlXPathObjectPtr) op->value4));
 12858              return (0);
 .....
 12986  	    ctxt->context->proximityPosition = i + 1;
 12987  	    if (tmp == NULL) {
 12988: 		tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 12989  		    ctxt->context->node);
 12990  	    } else {
 .....
 13006  	    if (xmlXPathEvaluatePredicateResult(ctxt, res)) {
 13007  		xmlXPtrLocationSetAdd(newlocset,
 13008: 		    xmlXPathCacheObjectCopy(ctxt->context,
 13009  			oldlocset->locTab[i]));
 13010  	    }
 .....
 13100  		ctxt->context->doc = oldset->nodeTab[i]->doc;
 13101  	    if (tmp == NULL) {
 13102: 		tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 13103  		    ctxt->context->node);
 13104  	    } else {
 .....
 13161  	/* may want to move this past the '}' later */
 13162  	ctxt->context->doc = oldDoc;
 13163: 	valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, newset));
 13164      }
 13165      ctxt->context->node = oldnode;
 .....
 13262  	    else
 13263  		equal = xmlXPathNotEqualValues(ctxt);
 13264: 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, equal));
 13265              return (total);
 13266          case XPATH_OP_CMP:
 .....
 13278  	    CHECK_ERROR0;
 13279              ret = xmlXPathCompareValues(ctxt, op->value, op->value2);
 13280: 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, ret));
 13281              return (total);
 13282          case XPATH_OP_PLUS:
 .....
 13366                  total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 13367  	    CHECK_ERROR0;
 13368: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 13369  		ctxt->context->node));
 13370              return (total);
 .....
 13390          case XPATH_OP_VALUE:
 13391              valuePush(ctxt,
 13392:                       xmlXPathCacheObjectCopy(ctxt->context,
 13393  			(xmlXPathObjectPtr) op->value4));
 13394              return (total);
 .....
 13453  		    }
 13454                  }
 13455:                 if (op->cache != NULL)
 13456:                     XML_CAST_FPTR(func) = op->cache;
 13457                  else {
 13458                      const xmlChar *URI = NULL;
 .....
 13481                          XP_ERROR0(XPATH_UNKNOWN_FUNC_ERROR);
 13482                      }
 13483:                     op->cache = XML_CAST_FPTR(func);
 13484:                     op->cacheURI = (void *) URI;
 13485                  }
 13486                  oldFunc = ctxt->context->function;
 13487                  oldFuncURI = ctxt->context->functionURI;
 13488                  ctxt->context->function = op->value4;
 13489:                 ctxt->context->functionURI = op->cacheURI;
 13490                  func(ctxt, op->value);
 13491                  ctxt->context->function = oldFunc;
 .....
 13674                          ctxt->context->contextSize = oldlocset->locNr;
 13675                          ctxt->context->proximityPosition = i + 1;
 13676: 			tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 13677  			    ctxt->context->node);
 13678                          valuePush(ctxt, tmp);
 .....
 13798  		            ctxt->context->doc = oldset->nodeTab[i]->doc;
 13799  			if (tmp == NULL) {
 13800: 			    tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 13801  				ctxt->context->node);
 13802  			} else {
 .....
 13865  		    ctxt->context->doc = oldDoc;
 13866  		    valuePush(ctxt,
 13867: 			xmlXPathCacheWrapNodeSet(ctxt->context, newset));
 13868                  }
 13869                  ctxt->context->node = oldnode;
 .....
 13931                          ctxt->context->contextSize = oldlocset->locNr;
 13932                          ctxt->context->proximityPosition = i + 1;
 13933: 			tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 13934  			    ctxt->context->node);
 13935                          valuePush(ctxt, tmp);
 .....
 13997  			    * OPTIMIZE TODO: Avoid recreation for every iteration.
 13998  			    */
 13999: 			    tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 14000  				ctxt->context->node);
 14001                              valuePush(ctxt, tmp);
 .....
 14181  	if (resultSeq == NULL)
 14182  	    return(-1);
 14183: 	*resultSeq = xmlXPathCacheNewNodeSet(ctxt, NULL);
 14184  	if (*resultSeq == NULL)
 14185  	    return(-1);
 .....
 15149  	}
 15150      }
 15151:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,
 15152  	xmlBufferContent(target)));
 15153      xmlBufferFree(target);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/configure.log:
   36  checking dependency style of gcc... gcc3
   37  checking for library containing strerror... none required
   38: checking for gcc... (cached) gcc
   39: checking whether we are using the GNU C compiler... (cached) yes
   40: checking whether gcc accepts -g... (cached) yes
   41: checking for gcc option to accept ISO C89... (cached) none needed
   42  checking for a BSD-compatible install... /usr/bin/install -c
   43  checking how to run the C preprocessor... gcc -E
   ..
   47  checking for xmllint... /home/git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/bin/xmllint
   48  checking for xsltproc... /usr/bin/xsltproc
   49: checking for ANSI C header files... (cached) yes
   50  checking for a sed that does not truncate output... /bin/sed
   51  checking for fgrep... /bin/grep -F
   ..
   73  checking if gcc supports -c -o file.o... /bin/rm: cannot remove `conftest*': No such file or directory
   74  yes
   75: checking if gcc supports -c -o file.o... (cached) yes
   76  checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
   77  checking whether -lc should be explicitly linked in... /bin/rm: cannot remove `conftest*': No such file or directory
   ..
   83  checking whether to build shared libraries... yes
   84  checking whether to build static libraries... no
   85: checking for sys/types.h... (cached) yes
   86  checking sys/time.h usability... yes
   87  checking sys/time.h presence... yes
   88  checking for sys/time.h... yes
   89: checking for stdlib.h... (cached) yes
   90: checking for unistd.h... (cached) yes
   91: checking for string.h... (cached) yes
   92  checking pthread.h usability... yes
   93  checking pthread.h presence... yes
   ..
  125  checking time.h presence... yes
  126  checking for time.h... yes
  127: checking for sys/stat.h... (cached) yes
  128  checking sys/select.h usability... yes
  129  checking sys/select.h presence... yes

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/aclocal.m4:
  134  [for cc_temp in $1""; do
  135    case $cc_temp in
  136:     compile | *[[\\/]]compile | ccache | *[[\\/]]ccache ) ;;
  137      distcc | *[[\\/]]distcc | purify | *[[\\/]]purify ) ;;
  138      \-*) ;;
  ...
  923        [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])
  924  
  925:     AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],
  926        [lt_cv_apple_cc_single_mod=no
  927        if test -z "${LT_MULTI_MODULE}"; then
  ...
  945  	rm -f conftest.*
  946        fi])
  947:     AC_CACHE_CHECK([for -exported_symbols_list linker flag],
  948        [lt_cv_ld_exported_symbols_list],
  949        [lt_cv_ld_exported_symbols_list=no
  ...
 1336    SAVE_CFLAGS="$CFLAGS"
 1337    CFLAGS="$CFLAGS -belf"
 1338:   AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,
 1339      [AC_LANG_PUSH(C)
 1340       AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])
 ....
 1418  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1419  m4_require([_LT_DECL_SED])dnl
 1420: AC_CACHE_CHECK([$1], [$2],
 1421    [$2=no
 1422     m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
 ....
 1469  [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1470  m4_require([_LT_DECL_SED])dnl
 1471: AC_CACHE_CHECK([$1], [$2],
 1472    [$2=no
 1473     save_LDFLAGS="$LDFLAGS"
 ....
 1512  # find the maximum length of command line arguments
 1513  AC_MSG_CHECKING([the maximum length of command line arguments])
 1514: AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
 1515    i=0
 1516    teststring="ABCD"
 ....
 1812      LIBS="$lt_cv_dlopen_libs $LIBS"
 1813  
 1814:     AC_CACHE_CHECK([whether a program can dlopen itself],
 1815  	  lt_cv_dlopen_self, [dnl
 1816  	  _LT_TRY_DLOPEN_SELF(
 ....
 1821      if test "x$lt_cv_dlopen_self" = xyes; then
 1822        wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
 1823:       AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
 1824  	  lt_cv_dlopen_self_static, [dnl
 1825  	  _LT_TRY_DLOPEN_SELF(
 ....
 1867  m4_require([_LT_FILEUTILS_DEFAULTS])dnl
 1868  m4_require([_LT_TAG_COMPILER])dnl
 1869: AC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],
 1870    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],
 1871    [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no
 ....
 1948  # ----------------
 1949  m4_defun([_LT_CHECK_OBJDIR],
 1950: [AC_CACHE_CHECK([for objdir], [lt_cv_objdir],
 1951  [rm -f .libs 2>/dev/null
 1952  mkdir .libs 2>/dev/null
 ....
 2748  [m4_require([_LT_DECL_EGREP])dnl
 2749  AC_MSG_CHECKING([for $1])
 2750: AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
 2751  [case $MAGIC_CMD in
 2752  [[\\/*] |  ?:[\\/]*])
 ....
 2879    AC_MSG_CHECKING([for non-GNU ld])
 2880  fi
 2881: AC_CACHE_VAL(lt_cv_path_LD,
 2882  [if test -z "$LD"; then
 2883    lt_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
 ....
 2928  #- --------------
 2929  m4_defun([_LT_PATH_LD_GNU],
 2930: [AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,
 2931  [# I'd rather use --version here, but apparently some GNU lds only accept -v.
 2932  case `$LD -v 2>&1 </dev/null` in
 ....
 2947  #   -- PORTME Some linkers may need a different reload flag.
 2948  m4_defun([_LT_CMD_RELOAD],
 2949: [AC_CACHE_CHECK([for $LD option to reload object files],
 2950    lt_cv_ld_reload_flag,
 2951    [lt_cv_ld_reload_flag='-r'])
 ....
 2977  [m4_require([_LT_DECL_EGREP])
 2978  m4_require([_LT_DECL_OBJDUMP])
 2979: AC_CACHE_CHECK([how to recognize dependent libraries],
 2980  lt_cv_deplibs_check_method,
 2981  [lt_cv_file_magic_cmd='$MAGIC_CMD'
 ....
 3185  AC_DEFUN([LT_PATH_NM],
 3186  [AC_REQUIRE([AC_PROG_CC])dnl
 3187: AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
 3188  [if test -n "$NM"; then
 3189    # Let the user override the test.
 ....
 3243  _LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl
 3244  
 3245: AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
 3246    [lt_cv_nm_interface="BSD nm"
 3247    echo "int some_variable = 0;" > conftest.$ac_ext
 ....
 3328  # Check for command to grab the raw symbol name followed by C symbol from nm.
 3329  AC_MSG_CHECKING([command to parse $NM output from $compiler object])
 3330: AC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],
 3331  [
 3332  # These are sane defaults that work on at least a few old systems.
 ....
 7050  m4_defun([AC_PROG_SED],
 7051  [AC_MSG_CHECKING([for a sed that does not truncate output])
 7052: AC_CACHE_VAL(lt_cv_path_SED,
 7053  [# Loop through the user's path and test for sed and gsed.
 7054  # Then use that list of sed's as ones to test for truncation.
 ....
 8114  # See how the compiler implements dependency checking.
 8115  # NAME is "CC", "CXX", "GCJ", or "OBJC".
 8116: # We try a few techniques and use that to set a single cache variable.
 8117  #
 8118  # We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was
 ....
 8133                     [depcc="$$1"   am_compiler_list=])
 8134  
 8135: AC_CACHE_CHECK([dependency style of $depcc],
 8136                 [am_cv_$1_dependencies_compiler_type],
 8137  [if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
 ....
 8888    esac
 8889  
 8890:   # If the value was cached, stop now.  We just wanted to have am__tar
 8891    # and am__untar set.
 8892    test -n "${am_cv_prog_tar_$1}" && break
 ....
 8905  rm -rf conftest.dir
 8906  
 8907: AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
 8908  AC_MSG_RESULT([$am_cv_prog_tar_$1])])
 8909  AC_SUBST([am__tar])

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/ChangeLog:
  334  Thu Apr 26 11:10:18 HKT 2007 William Brack <wbrack@mmm.com.hk>
  335  
  336: 	* libxslt/transform.c: fixed (another) problem with cached
  337  	  RVT's (from re-opened #378766).
  338  
  ...
  482  Sat Nov 25 11:48:28 HKT 2006 William Brack <wbrack@mmm.com.hk>
  483  
  484: 	* libxslt/variables.c: fixed problem with cached RVT's,
  485  	  bug #378766
  486  
  ...
  798  	  Next step in the refactored code: enhanced xsl:attribute;
  799  	  enhanced xsltCopyProp.
  800: 	  Added the creation of an XPath cache in
  801  	  xsltNewTransformContext().
  802  
  ...
 4510  	  libxslt/variables.c: chaing result tree values which may
 4511  	  be deallocated and must not be kept in the template 
 4512: 	  pattern lookup cache. Thanks to Valgrin to allow finding
 4513  	  the real problem in bug #74857
 4514  
 ....
 4915  
 4916  	* libxslt/numbers.c: the xsl:number implementation incorrectly
 4917: 	  cached the format string in some case. Fixes bug #65391
 4918  
 4919  Mon Jan 14 10:35:27 CET 2002 Daniel Veillard <daniel@veillard.com>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/config.log:
 1628  
 1629  ## ---------------- ##
 1630: ## Cache variables. ##
 1631  ## ---------------- ##
 1632  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/APIchunk3.html:
  118  <a href="html/libxslt-xsltutils.html#xsltSaveResultToFd">xsltSaveResultToFd</a><br />
  119  <a href="html/libxslt-xsltutils.html#xsltSaveResultToFile">xsltSaveResultToFile</a><br />
  120: </dd></dl><h2>Letter c:</h2><dl><dt>cache</dt><dd><a href="html/libxslt-xsltInternals.html#_xsltStackElem">_xsltStackElem</a><br />
  121  <a href="html/libxslt-xsltInternals.html#xsltReleaseRVT">xsltReleaseRVT</a><br />
  122  </dd><dt>calibration</dt><dd><a href="html/libxslt-xsltutils.html#xsltCalibrateAdjust">xsltCalibrateAdjust</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/APIfiles.html:
  326  <a href="html/libxslt-xsltInternals.html#_xsltStylesheet">_xsltStylesheet</a><br />
  327  <a href="html/libxslt-xsltInternals.html#_xsltTemplate">_xsltTemplate</a><br />
  328: <a href="html/libxslt-xsltInternals.html#_xsltTransformCache">_xsltTransformCache</a><br />
  329  <a href="html/libxslt-xsltInternals.html#_xsltTransformContext">_xsltTransformContext</a><br />
  330  <a href="html/libxslt-xsltInternals.html#_xsltVarInfo">_xsltVarInfo</a><br />
  ...
  473  <a href="html/libxslt-xsltInternals.html#xsltTransStorageAdd">xsltTransStorageAdd</a><br />
  474  <a href="html/libxslt-xsltInternals.html#xsltTransStorageRemove">xsltTransStorageRemove</a><br />
  475: <a href="html/libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a><br />
  476: <a href="html/libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a><br />
  477  <a href="html/libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a><br />
  478  <a href="html/libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/APIsymbols.html:
  181  <a href="html/libxslt-xsltInternals.html#_xsltStylesheet">_xsltStylesheet</a><br />
  182  <a href="html/libxslt-xsltInternals.html#_xsltTemplate">_xsltTemplate</a><br />
  183: <a href="html/libxslt-xsltInternals.html#_xsltTransformCache">_xsltTransformCache</a><br />
  184  <a href="html/libxslt-xsltInternals.html#_xsltTransformContext">_xsltTransformContext</a><br />
  185  <a href="html/libxslt-xsltInternals.html#_xsltVarInfo">_xsltVarInfo</a><br />
  ...
  555  <a href="html/libxslt-xsltInternals.html#xsltTransStorageAdd">xsltTransStorageAdd</a><br />
  556  <a href="html/libxslt-xsltInternals.html#xsltTransStorageRemove">xsltTransStorageRemove</a><br />
  557: <a href="html/libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a><br />
  558: <a href="html/libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a><br />
  559  <a href="html/libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a><br />
  560  <a href="html/libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/html/libxslt-documents.html:
    8  H3 {font-family: Verdana,Arial,Helvetica}
    9  A:link, A:visited, A:active { text-decoration: underline }
   10:     </style><title>Module documents from libxslt</title></head><body bgcolor="#8b7765" text="#000000" link="#a06060" vlink="#000000"><table border="0" width="100%" cellpadding="5" cellspacing="0" align="center"><tr><td width="120"><a href="http://swpat.ffii.org/"><img src="../epatents.png" alt="Action against software patents" /></a></td><td width="180"><a href="http://www.gnome.org/"><img src="../gnome2.png" alt="GNOME2 Logo" /></a><a href="http://www.w3.org/Status"><img src="../w3c.png" alt="W3C logo" /></a><a href="http://www.redhat.com"><img src="../redhat.gif" alt="Red Hat Logo" /></a><div align="left"><a href="http://xmlsoft.org/XSLT/"><img src="../Libxslt-Logo-180x168.gif" alt="Made with Libxslt Logo" /></a></div></td><td><table border="0" width="90%" cellpadding="2" cellspacing="0" align="center" bgcolor="#000000"><tr><td><table width="100%" border="0" cellspacing="1" cellpadding="3" bgcolor="#fffacd"><tr><td align="center"><h1>The XSLT C library for GNOME</h1><h2>Module documents from libxslt</h2></td></tr></table></td></tr></table></td></tr></table><table border="0" cellpadding="4" cellspacing="0" width="100%" align="center"><tr><td bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="2" width="100%"><tr><td valign="top" width="200" bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="1" width="100%" bgcolor="#000000"><tr><td><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>API Menu</b></center></td></tr><tr><td bgcolor="#fffacd"><form action="../search.php" enctype="application/x-www-form-urlencoded" method="get"><input name="query" type="text" size="20" value="" /><input name="submit" type="submit" value="Search ..." /></form><ul><li><a style="font-weight:bold" href="../index.html">Main Menu</a></li><li><a style="font-weight:bold" href="../docs.html">Developer Menu</a></li><li><a style="font-weight:bold" href="index.html">API Menu</a></li><li><a href="../ChangeLog.html">ChangeLog</a></li></ul></td></tr></table><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>Related links</b></center></td></tr><tr><td bgcolor="#fffacd"><ul><li><a href="http://mail.gnome.org/archives/xslt/">Mail archive</a></li><li><a href="http://xmlsoft.org/">XML libxml2</a></li><li><a href="ftp://xmlsoft.org/">FTP</a></li><li><a href="http://www.zlatkovic.com/projects/libxml/">Windows binaries</a></li><li><a href="http://garypennington.net/libxml2/">Solaris binaries</a></li><li><a href="http://www.explain.com.au/oss/libxml2xslt.html">MacOsX binaries</a></li><li><a href="http://bugzilla.gnome.org/buglist.cgi?product=libxslt">Bug Tracker</a></li><li><a href="http://codespeak.net/lxml/">lxml Python bindings</a></li><li><a href="http://cpan.uwinnipeg.ca/dist/XML-LibXSLT">Perl XSLT bindings</a></li><li><a href="http://www.zend.com/php5/articles/php5-xmlphp.php#Heading17">XSLT with PHP</a></li><li><a href="http://www.mod-xslt2.com/">Apache module</a></li><li><a href="http://sourceforge.net/projects/libxml2-pas/">Pascal bindings</a></li><li><a href="http://xsldbg.sourceforge.net/">Xsldbg Debugger</a></li></ul></td></tr></table><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>API Indexes</b></center></td></tr><tr><td bgcolor="#fffacd"><ul><li><a href="../APIchunk0.html">Alphabetic</a></li><li><a href="../APIconstructors.html">Constructors</a></li><li><a href="../APIfunctions.html">Functions/Types</a></li><li><a href="../APIfiles.html">Modules</a></li><li><a href="../APIsymbols.html">Symbols</a></li></ul></td></tr></table></td></tr></table></td><td valign="top" bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="1" width="100%"><tr><td><table border="0" cellspacing="0" cellpadding="1" width="100%" bgcolor="#000000"><tr><td><table border="0" cellpadding="3" cellspacing="1" width="100%"><tr><td bgcolor="#fffacd"><table class="navigation" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2"><tr valign="middle"><td><a accesskey="p" href="libxslt-attributes.html"><img src="left.png" width="24" height="24" border="0" alt="Prev" /></a></td><th align="left"><a href="libxslt-attributes.html">attributes</a></th><td><a accesskey="u" href="index.html"><img src="up.png" width="24" height="24" border="0" alt="Up" /></a></td><th align="left"><a href="index.html">API documentation</a></th><td><a accesskey="h" href="../index.html"><img src="home.png" width="24" height="24" border="0" alt="Home" /></a></td><th align="center"><a href="../index.html">Home</a></th><th align="right"><a href="libxslt-extensions.html">extensions</a></th><td><a accesskey="n" href="libxslt-extensions.html"><img src="right.png" width="24" height="24" border="0" alt="Next" /></a></td></tr></table><p>implements document loading and cache (multiple document() reference for the same resources must be equal. </p><h2>Table of Contents</h2><pre class="programlisting">Enum <a href="#xsltLoadType">xsltLoadType</a>
   11  </pre><pre class="programlisting">Function type: <a href="#xsltDocLoaderFunc">xsltDocLoaderFunc</a>
   12  xmlDocPtr	<a href="#xsltDocLoaderFunc">xsltDocLoaderFunc</a>	(const xmlChar * URI, <br />					 xmlDictPtr dict, <br />					 int options, <br />					 void * ctxt, <br />					 <a href="libxslt-documents.html#xsltLoadType">xsltLoadType</a> type)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/html/libxslt-xsltInternals.html:
  114  </pre><pre class="programlisting">Structure <a href="#xsltTemplate">xsltTemplate</a><br />struct _xsltTemplate
  115  </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTemplate">xsltTemplate</a> * <a name="xsltTemplatePtr" id="xsltTemplatePtr">xsltTemplatePtr</a>
  116: </pre><pre class="programlisting">Structure <a href="#xsltTransformCache">xsltTransformCache</a><br />struct _xsltTransformCache
  117: </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a> * <a name="xsltTransformCachePtr" id="xsltTransformCachePtr">xsltTransformCachePtr</a>
  118  </pre><pre class="programlisting">Structure <a href="#xsltTransformContext">xsltTransformContext</a><br />struct _xsltTransformContext
  119  </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a> * <a name="xsltTransformContextPtr" id="xsltTransformContextPtr">xsltTransformContextPtr</a>
  ...
  578      unsigned long	time	: the time spent in this template
  579      void *	params	: xsl:param instructions
  580: }</pre><h3><a name="xsltTransformCache" id="xsltTransformCache">Structure xsltTransformCache</a></h3><pre class="programlisting">Structure xsltTransformCache<br />struct _xsltTransformCache {
  581      xmlDocPtr	RVT
  582      int	nbRVT
  583      <a href="libxslt-xsltInternals.html#xsltStackElemPtr">xsltStackElemPtr</a>	stackItems
  584      int	nbStackItems
  585:     int	dbgCachedRVTs
  586      int	dbgReusedRVTs
  587:     int	dbgCachedVars
  588      int	dbgReusedVars
  589  }</pre><h3><a name="xsltTransformContext" id="xsltTransformContext">Structure xsltTransformContext</a></h3><pre class="programlisting">Structure xsltTransformContext<br />struct _xsltTransformContext {
  ...
  647      xmlNodePtr	initialContextNode
  648      xmlDocPtr	initialContextDoc
  649:     <a href="libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a>	cache
  650      void *	contextVariable	: the current variable item
  651      xmlDocPtr	localRVT	: list of local tree fragments; will be f
  ...
  736  </pre><p>Registers the result value tree (XSLT 1.0 term: Result Tree Fragment) in the garbage collector. The fragment will be freed at the exit of the currently instantiated xsl:template. Obsolete; this function might produce massive memory overhead, since the fragment is only freed when the current xsl:template exits. Use xsltRegisterLocalRVT() instead.</p>
  737  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>an XSLT transformation context</td></tr><tr><td><span class="term"><i><tt>RVT</tt></i>:</span></td><td>a result value tree (Result Tree Fragment)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 in case of success and -1 in case of API or internal errors.</td></tr></tbody></table></div><h3><a name="xsltReleaseRVT" id="xsltReleaseRVT"></a>Function: xsltReleaseRVT</h3><pre class="programlisting">void	xsltReleaseRVT			(<a href="libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a> ctxt, <br />					 xmlDocPtr RVT)<br />
  738: </pre><p>Either frees the RVT (which is an xmlDoc) or stores it in the context's cache for later reuse.</p>
  739  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>an XSLT transformation context</td></tr><tr><td><span class="term"><i><tt>RVT</tt></i>:</span></td><td>a result value tree (Result Tree Fragment)</td></tr></tbody></table></div><h3><a name="xsltRestoreDocumentNamespaces" id="xsltRestoreDocumentNamespaces"></a>Function: xsltRestoreDocumentNamespaces</h3><pre class="programlisting">int	xsltRestoreDocumentNamespaces	(<a href="libxslt-xsltInternals.html#xsltNsMapPtr">xsltNsMapPtr</a> ns, <br />					 xmlDocPtr doc)<br />
  740  </pre><p>Restore the namespaces for the document</p>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/libxslt-api.xml:
   13      <file name='documents'>
   14       <summary>interface for the document handling</summary>
   15:      <description>implements document loading and cache (multiple document() reference for the same resources must be equal. </description>
   16       <author>Daniel Veillard </author>
   17       <exports symbol='XSLT_LOAD_START' type='enum'/>
   ..
  380       <exports symbol='xsltStyleItemCopyOf' type='typedef'/>
  381       <exports symbol='xsltStyleItemCallTemplatePtr' type='typedef'/>
  382:      <exports symbol='xsltTransformCache' type='typedef'/>
  383       <exports symbol='xsltStyleItemCopyOfPtr' type='typedef'/>
  384       <exports symbol='xsltNsMap' type='typedef'/>
  ...
  405       <exports symbol='xsltVarInfoPtr' type='typedef'/>
  406       <exports symbol='xsltStyleItemSort' type='typedef'/>
  407:      <exports symbol='xsltTransformCachePtr' type='typedef'/>
  408       <exports symbol='xsltStyleItemExtElementPtr' type='typedef'/>
  409       <exports symbol='xsltNsAliasPtr' type='typedef'/>
  ...
  498       <exports symbol='_xsltStyleItemNumber' type='struct'/>
  499       <exports symbol='_xsltStylePreComp' type='struct'/>
  500:      <exports symbol='_xsltTransformCache' type='struct'/>
  501       <exports symbol='_xsltCompilerNodeInfo' type='struct'/>
  502       <exports symbol='_xsltNsMap' type='struct'/>
  ...
 1141        <field name='level' type='int' info=' the depth in the tree;
 1142  -1 if persistent (e.g. a given xsl:with-param)'/>
 1143:       <field name='context' type='xsltTransformContextPtr' info=' The transformation context; needed to cache
 1144  the variables'/>
 1145        <field name='flags' type='int' info=''/>
 ....
 1451      </struct>
 1452      <typedef name='xsltTemplatePtr' file='xsltInternals' type='xsltTemplate *'/>
 1453:     <struct name='xsltTransformCache' file='xsltInternals' type='struct _xsltTransformCache'>
 1454        <field name='RVT' type='xmlDocPtr' info=''/>
 1455        <field name='nbRVT' type='int' info=''/>
 1456        <field name='stackItems' type='xsltStackElemPtr' info=''/>
 1457        <field name='nbStackItems' type='int' info=''/>
 1458:       <field name='dbgCachedRVTs' type='int' info=''/>
 1459        <field name='dbgReusedRVTs' type='int' info=''/>
 1460:       <field name='dbgCachedVars' type='int' info=''/>
 1461        <field name='dbgReusedVars' type='int' info=''/>
 1462      </struct>
 1463:     <typedef name='xsltTransformCachePtr' file='xsltInternals' type='xsltTransformCache *'/>
 1464      <struct name='xsltTransformContext' file='xsltInternals' type='struct _xsltTransformContext'>
 1465        <field name='style' type='xsltStylesheetPtr' info=' the stylesheet used'/>
 ....
 1530        <field name='initialContextNode' type='xmlNodePtr' info=''/>
 1531        <field name='initialContextDoc' type='xmlDocPtr' info=''/>
 1532:       <field name='cache' type='xsltTransformCachePtr' info=''/>
 1533        <field name='contextVariable' type='void *' info=' the current variable item'/>
 1534        <field name='localRVT' type='xmlDocPtr' info=' list of local tree fragments; will be freed when
 ....
 2800      </function>
 2801      <function name='xsltReleaseRVT' file='xsltInternals'>
 2802:       <info>Either frees the RVT (which is an xmlDoc) or stores it in the context&apos;s cache for later reuse.</info>
 2803        <return type='void'/>
 2804        <arg name='ctxt' type='xsltTransformContextPtr' info='an XSLT transformation context'/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/libxslt-refs.xml:
  174      <reference name='_xsltStylesheet' href='html/libxslt-xsltInternals.html#_xsltStylesheet'/>
  175      <reference name='_xsltTemplate' href='html/libxslt-xsltInternals.html#_xsltTemplate'/>
  176:     <reference name='_xsltTransformCache' href='html/libxslt-xsltInternals.html#_xsltTransformCache'/>
  177      <reference name='_xsltTransformContext' href='html/libxslt-xsltInternals.html#_xsltTransformContext'/>
  178      <reference name='_xsltVarInfo' href='html/libxslt-xsltInternals.html#_xsltVarInfo'/>
  ...
  548      <reference name='xsltTransStorageAdd' href='html/libxslt-xsltInternals.html#xsltTransStorageAdd'/>
  549      <reference name='xsltTransStorageRemove' href='html/libxslt-xsltInternals.html#xsltTransStorageRemove'/>
  550:     <reference name='xsltTransformCache' href='html/libxslt-xsltInternals.html#xsltTransformCache'/>
  551:     <reference name='xsltTransformCachePtr' href='html/libxslt-xsltInternals.html#xsltTransformCachePtr'/>
  552      <reference name='xsltTransformContext' href='html/libxslt-xsltInternals.html#xsltTransformContext'/>
  553      <reference name='xsltTransformContextPtr' href='html/libxslt-xsltInternals.html#xsltTransformContextPtr'/>
  ...
  757        <ref name='_xsltStylesheet'/>
  758        <ref name='_xsltTemplate'/>
  759:       <ref name='_xsltTransformCache'/>
  760        <ref name='_xsltTransformContext'/>
  761        <ref name='_xsltVarInfo'/>
  ...
 1133        <ref name='xsltTransStorageAdd'/>
 1134        <ref name='xsltTransStorageRemove'/>
 1135:       <ref name='xsltTransformCache'/>
 1136:       <ref name='xsltTransformCachePtr'/>
 1137        <ref name='xsltTransformContext'/>
 1138        <ref name='xsltTransformContextPtr'/>
 ....
 2276        <ref name='_xsltStylesheet'/>
 2277        <ref name='_xsltTemplate'/>
 2278:       <ref name='_xsltTransformCache'/>
 2279        <ref name='_xsltTransformContext'/>
 2280        <ref name='_xsltVarInfo'/>
 ....
 2423        <ref name='xsltTransStorageAdd'/>
 2424        <ref name='xsltTransStorageRemove'/>
 2425:       <ref name='xsltTransformCache'/>
 2426:       <ref name='xsltTransformCachePtr'/>
 2427        <ref name='xsltTransformContext'/>
 2428        <ref name='xsltTransformContextPtr'/>
 ....
 4058        </letter>
 4059        <letter name='c'>
 4060:         <word name='cache'>
 4061            <ref name='_xsltStackElem'/>
 4062            <ref name='xsltReleaseRVT'/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/news.html:
  101        python space/tab inconsistencies (Andreas Hanke), hook xsl:message
  102        to per transformation error callbacks (Shaun McCance),
  103:       cached RVT problem (William Brack), XPath context maintainance
  104        on choose (William Brack), memory leaks in the math module (William
  105        Brack), exclude-result-prefix induced namespace problem (William
  ...
  142      Buchcik), problem in mixed xsl:value-of and xsl:text uses (Kasimier)</li>
  143    <li>improvements: internal refactoring (Kasimier Buchcik), use of the XPath
  144:     object cache in libxml2-2.6.25 (Kasimier)</li>
  145  </ul><h3>1.1.16: May 01 2006</h3><ul><li>portability fixes: EXSLT date/time on Solaris and IRIX (Albert Chin),
  146        HP-UX  build (Albert Chin), 
  ...
  352  </ul><h3>1.0.27: Feb 24 2003</h3><ul><li>bug fixes: spurious xmlns:nsX="" generation, serialization bug (in
  353      libxml2), a namespace copy problem, errors in the RPM spec prereqs</li>
  354:   <li>Windows path canonicalization and document cache fix (Igor)</li>
  355  </ul><h3>1.0.26: Feb 10 2003</h3><ul><li>Fixed 3 serious bugs in document() and stylesheet compilation which
  356      could lead to a crash</li>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/doc/xslt.html:
  413        python space/tab inconsistencies (Andreas Hanke), hook xsl:message
  414        to per transformation error callbacks (Shaun McCance),
  415:       cached RVT problem (William Brack), XPath context maintainance
  416        on choose (William Brack), memory leaks in the math module (William
  417        Brack), exclude-result-prefix induced namespace problem (William
  ...
  466      Buchcik), problem in mixed xsl:value-of and xsl:text uses (Kasimier)</li>
  467    <li>improvements: internal refactoring (Kasimier Buchcik), use of the XPath
  468:     object cache in libxml2-2.6.25 (Kasimier)</li>
  469  </ul>
  470  
  ...
  774    <li>bug fixes: spurious xmlns:nsX="" generation, serialization bug (in
  775      libxml2), a namespace copy problem, errors in the RPM spec prereqs</li>
  776:   <li>Windows path canonicalization and document cache fix (Igor)</li>
  777  </ul>
  778  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/attributes.c:
   58   * TODO: merge attribute sets from different import precedence.
   59   *       all this should be precomputed just before the transformation
   60:  *       starts or at first hit with a cache in the context.
   61   *       The simple way for now would be to not allow redefinition of
   62   *       attributes once generated in the output tree, possibly costlier.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/documents.h:
    1  /*
    2   * Summary: interface for the document handling
    3:  * Description: implements document loading and cache (multiple
    4   *              document() reference for the same resources must
    5   *              be equal.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/pattern.c:
  526      xmlXPathObjectPtr list;
  527      int ix, j;
  528:     int nocache = 0;
  529      int isRVT;
  530  
  ...
  572  
  573  	if ((parent == NULL) || (node->doc == NULL) || isRVT)
  574: 	    nocache = 1;
  575  	
  576: 	if (nocache == 0) {
  577  	    if (list != NULL)
  578  		xmlXPathFreeObject(list);
  ...
  592      if ((list->nodesetval == NULL) ||
  593  	(list->nodesetval->nodeNr <= 0)) {
  594: 	if (nocache == 1)
  595  	    xmlXPathFreeObject(list);
  596  	return(0);
  ...
  600  	for (j = 0;j < list->nodesetval->nodeNr;j++) {
  601  	    if (list->nodesetval->nodeTab[j] == node) {
  602: 		if (nocache == 1)
  603  		    xmlXPathFreeObject(list);
  604  		return(1);
  ...
  607      } else {
  608      }
  609:     if (nocache == 1)
  610  	xmlXPathFreeObject(list);
  611      return(0);
  ...
  885  		    (node->parent != NULL)) {
  886  		    xmlNodePtr previous;
  887: 		    int ix, nocache = 0;
  888  
  889  		    previous = (xmlNodePtr)
  ...
  943  			    /*
  944  			     * If the node is in a Value Tree we need to
  945: 			     * save len, but cannot cache the node!
  946  			     * (bugs 153137 and 158840)
  947  			     */
  ...
  987  			}
  988  			if ((parent == NULL) || (node->doc == NULL))
  989: 			    nocache = 1;
  990  			else {
  991  			    while (parent->parent != NULL)
  ...
  994  				 (parent->type != XML_HTML_DOCUMENT_NODE)) ||
  995  				 (parent != (xmlNodePtr) node->doc))
  996: 				nocache = 1;
  997  			}
  998  		    }
  ...
 1002  			/*
 1003  			 * If the node is in a Value Tree we cannot
 1004: 			 * cache it !
 1005  			 */
 1006  			if ((!isRVT) && (node->doc != NULL) &&
 1007: 			    (nocache == 0)) {
 1008  			    XSLT_RUNTIME_EXTRA(ctxt, sel->previousExtra, ptr) =
 1009  				node;
 ....
 1017  			   (node->type == XML_ELEMENT_NODE)) {
 1018  		    xmlNodePtr previous;
 1019: 		    int ix, nocache = 0;
 1020  
 1021  		    previous = (xmlNodePtr)
 ....
 1053  			    /*
 1054  			     * If the node is in a Value Tree we cannot
 1055: 			     * cache it !
 1056  			     */
 1057  			    if ((node->doc != NULL) && !isRVT) {
 ....
 1084  			}
 1085  			if ((parent == NULL) || (node->doc == NULL))
 1086: 			    nocache = 1;
 1087  			else {
 1088  			    while (parent->parent != NULL)
 ....
 1091  				 (parent->type != XML_HTML_DOCUMENT_NODE)) ||
 1092  				 (parent != (xmlNodePtr) node->doc))
 1093: 				nocache = 1;
 1094  			}
 1095  		    }
 ....
 1099  			/*
 1100  			 * If the node is in a Value Tree we cannot
 1101: 			 * cache it !
 1102  			 */
 1103: 			if ((node->doc != NULL) && (nocache == 0) && !isRVT) {
 1104  			    XSLT_RUNTIME_EXTRA(ctxt, sel->previousExtra, ptr) =
 1105  				node;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/transform.c:
  349   ************************************************************************/
  350  
  351: static xsltTransformCachePtr
  352: xsltTransformCacheCreate(void)
  353  {
  354:     xsltTransformCachePtr ret;
  355  
  356:     ret = (xsltTransformCachePtr) xmlMalloc(sizeof(xsltTransformCache));
  357      if (ret == NULL) {
  358  	xsltTransformError(NULL, NULL, NULL,
  359: 	    "xsltTransformCacheCreate : malloc failed\n");
  360  	return(NULL);
  361      }
  362:     memset(ret, 0, sizeof(xsltTransformCache));
  363      return(ret);
  364  }
  365  
  366  static void
  367: xsltTransformCacheFree(xsltTransformCachePtr cache)
  368  {
  369:     if (cache == NULL)
  370  	return;
  371      /*
  372      * Free tree fragments.
  373      */
  374:     if (cache->RVT) {
  375: 	xmlDocPtr tmp, cur = cache->RVT;
  376  	while (cur) {
  377  	    tmp = cur;
  ...
  390      * Free vars/params.
  391      */
  392:     if (cache->stackItems) {
  393: 	xsltStackElemPtr tmp, cur = cache->stackItems;
  394  	while (cur) {
  395  	    tmp = cur;
  ...
  402  	}
  403      }
  404:     xmlFree(cache);
  405  }
  406  
  ...
  430      memset(cur, 0, sizeof(xsltTransformContext));
  431  
  432:     cur->cache = xsltTransformCacheCreate();
  433:     if (cur->cache == NULL)
  434  	goto internal_err;
  435      /*
  ...
  490      }
  491      /*
  492:     * Create an XPath cache.
  493      */
  494:     if (xmlXPathContextSetCache(cur->xpathCtxt, 1, -1, 0) == -1)
  495  	goto internal_err;
  496      /*
  ...
  601      xsltFreeCtxtExts(ctxt);
  602      xsltFreeRVTs(ctxt);
  603:     xsltTransformCacheFree(ctxt->cache);
  604      xmlDictFree(ctxt->dict);
  605  #ifdef WITH_XSLT_DEBUG
  ...
 2133   *
 2134   * Fragments which are results of extension instructions
 2135:  * are preserved; all other fragments are freed/cached.
 2136   */
 2137  static void
 ....
 6199      }
 6200  
 6201: #ifdef XSLT_DEBUG_PROFILE_CACHE
 6202:     printf("# Cache:\n");
 6203:     printf("# Reused tree fragments: %d\n", ctxt->cache->dbgReusedRVTs);
 6204:     printf("# Reused variables     : %d\n", ctxt->cache->dbgReusedVars);
 6205  #endif
 6206  
 ....
 6214          xmlFreeDoc(res);
 6215  
 6216: #ifdef XSLT_DEBUG_PROFILE_CACHE
 6217:     printf("# Cache:\n");
 6218:     printf("# Reused tree fragments: %d\n", ctxt->cache->dbgReusedRVTs);
 6219:     printf("# Reused variables     : %d\n", ctxt->cache->dbgReusedVars);
 6220  #endif
 6221  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/variables.c:
   75  
   76      /*
   77:     * Reuse a RTF from the cache if available.
   78      */
   79:     if (ctxt->cache->RVT) {
   80: 	container = ctxt->cache->RVT;
   81: 	ctxt->cache->RVT = (xmlDocPtr) container->next;
   82  	/* clear the internal pointers */
   83  	container->next = NULL;
   84  	container->prev = NULL;
   85: 	if (ctxt->cache->nbRVT > 0)
   86: 	    ctxt->cache->nbRVT--;
   87: #ifdef XSLT_DEBUG_PROFILE_CACHE
   88: 	ctxt->cache->dbgReusedRVTs++;
   89  #endif
   90  	return(container);
   ..
  314   *
  315   * Either frees the RVT (which is an xmlDoc) or stores
  316:  * it in the context's cache for later reuse.
  317   */
  318  void
  ...
  322  	return;
  323  
  324:     if (ctxt && (ctxt->cache->nbRVT < 40)) {
  325  	/*
  326  	* Store the Result Tree Fragment.
  ...
  355  	RVT->psvi = 0;
  356  
  357: 	RVT->next = (xmlNodePtr) ctxt->cache->RVT;
  358: 	ctxt->cache->RVT = RVT;
  359  
  360: 	ctxt->cache->nbRVT++;
  361  
  362: #ifdef XSLT_DEBUG_PROFILE_CACHE
  363: 	ctxt->cache->dbgCachedRVTs++;
  364  #endif
  365  	return;
  ...
  476      xsltStackElemPtr ret;
  477      /*
  478:     * Reuse a stack item from the cache if available.
  479      */
  480:     if (ctxt && ctxt->cache->stackItems) {
  481: 	ret = ctxt->cache->stackItems;
  482: 	ctxt->cache->stackItems = ret->next;
  483  	ret->next = NULL;
  484: 	ctxt->cache->nbStackItems--;
  485: #ifdef XSLT_DEBUG_PROFILE_CACHE
  486: 	ctxt->cache->dbgReusedVars++;
  487  #endif
  488  	return(ret);
  ...
  574      }
  575      /*
  576:     * Cache or free the variable structure.
  577      */
  578:     if (elem->context && (elem->context->cache->nbStackItems < 50)) {
  579  	/*
  580: 	* Store the item in the cache.
  581  	*/
  582  	xsltTransformContextPtr ctxt = elem->context;
  583  	memset(elem, 0, sizeof(xsltStackElem));
  584  	elem->context = ctxt;
  585: 	elem->next = ctxt->cache->stackItems;
  586: 	ctxt->cache->stackItems = elem;	
  587: 	ctxt->cache->nbStackItems++;
  588: #ifdef XSLT_DEBUG_PROFILE_CACHE
  589: 	ctxt->cache->dbgCachedVars++;
  590  #endif
  591  	return;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/libxslt/xsltInternals.h:
   29  #endif
   30  
   31: /* #define XSLT_DEBUG_PROFILE_CACHE */
   32  
   33  /**
   ..
 1437      int level;                  /* the depth in the tree;
 1438                                     -1 if persistent (e.g. a given xsl:with-param) */
 1439:     xsltTransformContextPtr context; /* The transformation context; needed to cache
 1440                                          the variables */
 1441      int flags;
 ....
 1633  };
 1634  
 1635: typedef struct _xsltTransformCache xsltTransformCache;
 1636: typedef xsltTransformCache *xsltTransformCachePtr;
 1637: struct _xsltTransformCache {
 1638      xmlDocPtr RVT;
 1639      int nbRVT;
 1640      xsltStackElemPtr stackItems;
 1641      int nbStackItems;
 1642: #ifdef XSLT_DEBUG_PROFILE_CACHE
 1643:     int dbgCachedRVTs;
 1644      int dbgReusedRVTs;
 1645:     int dbgCachedVars;
 1646      int dbgReusedVars;
 1647  #endif
 ....
 1768      xmlNodePtr initialContextNode;
 1769      xmlDocPtr initialContextDoc;
 1770:     xsltTransformCachePtr cache;
 1771      void *contextVariable; /* the current variable item */
 1772      xmlDocPtr localRVT; /* list of local tree fragments; will be freed when

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/Makefile:
   48  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   49  	$(ACLOCAL_M4)
   50: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   51   configure.lineno config.status.lineno
   52  mkinstalldirs = $(install_sh) -d
   ..
  894  maintainer-clean: maintainer-clean-recursive
  895  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
  896: 	-rm -rf $(top_srcdir)/autom4te.cache
  897  	-rm -f Makefile
  898  maintainer-clean-am: distclean-am maintainer-clean-generic

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/Makefile.in:
   48  am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
   49  	$(ACLOCAL_M4)
   50: am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
   51   configure.lineno config.status.lineno
   52  mkinstalldirs = $(install_sh) -d
   ..
  894  maintainer-clean: maintainer-clean-recursive
  895  	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
  896: 	-rm -rf $(top_srcdir)/autom4te.cache
  897  	-rm -f Makefile
  898  maintainer-clean-am: distclean-am maintainer-clean-generic

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/NEWS:
  118        python space/tab inconsistencies (Andreas Hanke), hook xsl:message
  119        to per transformation error callbacks (Shaun McCance),
  120:       cached RVT problem (William Brack), XPath context maintainance
  121        on choose (William Brack), memory leaks in the math module (William
  122        Brack), exclude-result-prefix induced namespace problem (William
  ...
  172      Buchcik), problem in mixed xsl:value-of and xsl:text uses (Kasimier)
  173     - improvements: internal refactoring (Kasimier Buchcik), use of the XPath
  174:     object cache in libxml2-2.6.25 (Kasimier)
  175  
  176  
  ...
  456     - bug fixes: spurious xmlns:nsX="" generation, serialization bug (in
  457      libxml2), a namespace copy problem, errors in the RPM spec prereqs
  458:    - Windows path canonicalization and document cache fix (Igor)
  459  
  460  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/tests/docs/bug-166.xml:
 2826        <packagereq type="default">automake17</packagereq>
 2827        <packagereq type="default">byacc</packagereq>
 2828:       <packagereq type="default">ccache</packagereq>
 2829        <packagereq type="default">cscope</packagereq>
 2830        <packagereq type="default">ctags</packagereq>
 ....
 9367        <packagereq type="optional">cleanfeed</packagereq>
 9368        <packagereq type="optional">leafnode</packagereq>
 9369:       <packagereq type="optional">newscache</packagereq>
 9370        <packagereq type="optional">suck</packagereq>
 9371      </packagelist>
 ....
 13541        <packagereq type="mandatory">httpd</packagereq>
 13542        <packagereq type="default">crypto-utils</packagereq>
 13543:       <packagereq type="default">distcache</packagereq>
 13544        <packagereq type="default">httpd-manual</packagereq>
 13545        <packagereq type="default">mod_perl</packagereq>
 .....
 13937        <packagereq type="default">libXext-devel</packagereq>
 13938        <packagereq type="default">libXfont-devel</packagereq>
 13939:       <packagereq type="default">libXfontcache-devel</packagereq>
 13940        <packagereq type="default">libXft-devel</packagereq>
 13941        <packagereq type="default">libxkbfile-devel</packagereq>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/tests/general/bug-166.out:
 2827        <packagereq type="default">automake17</packagereq>
 2828        <packagereq type="default">byacc</packagereq>
 2829:       <packagereq type="default">ccache</packagereq>
 2830        <packagereq type="default">cscope</packagereq>
 2831        <packagereq type="default">ctags</packagereq>
 ....
 9368        <packagereq type="optional">cleanfeed</packagereq>
 9369        <packagereq type="optional">leafnode</packagereq>
 9370:       <packagereq type="optional">newscache</packagereq>
 9371        <packagereq type="optional">suck</packagereq>
 9372      </packagelist>
 ....
 13542        <packagereq type="mandatory">httpd</packagereq>
 13543        <packagereq type="default">crypto-utils</packagereq>
 13544:       <packagereq type="default">distcache</packagereq>
 13545        <packagereq type="default">httpd-manual</packagereq>
 13546        <packagereq type="default">mod_perl</packagereq>
 .....
 13938        <packagereq type="default">libXext-devel</packagereq>
 13939        <packagereq type="default">libXfont-devel</packagereq>
 13940:       <packagereq type="default">libXfontcache-devel</packagereq>
 13941        <packagereq type="default">libXft-devel</packagereq>
 13942        <packagereq type="default">libxkbfile-devel</packagereq>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/tests/XSLTMark/xslbench1.out:
    3  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    4  <TITLE>TFI Technology Products</TITLE>
    5: <META content="Memory, Boost, Performance, Memory+, Memory Plus, Crash Protection, StayAlive, Crash, Protector, Crash Protector, TFI, TFI Technology, WatchOut , Access Violation, General Protection Fault, Application Hang, GPF, Screen Freeze, Freeze, Page Fault, Application Recovery, Crash of the Week, Well Known Bug, Bug, Cache, RAM, Virtual Memory, VCache, Memory Tuning, SIMMS, Page File, page faults" name="keywords">
    6  <META content="TFI Technology Ltd, Home of StayAlive, the premier crash protection software and Memory+ the total memory control system." name="description">
    7  <META content="MSHTML 5.00.2920.0" name="GENERATOR">

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/tmp/x86_64-linux-gnu/ports/libxslt/1.1.26/libxslt-1.1.26/tests/XSLTMark/xslbench1.xsl:
   10      <TITLE>TFI Technology Products</TITLE>
   11      <META content="text/html; charset=windows-1252" http-equiv="Content-Type"/>
   12:     <META content="Memory, Boost, Performance, Memory+, Memory Plus, Crash Protection, StayAlive, Crash, Protector, Crash Protector, TFI, TFI Technology, WatchOut , Access Violation, General Protection Fault, Application Hang, GPF, Screen Freeze, Freeze, Page Fault, Application Recovery, Crash of the Week, Well Known Bug, Bug, Cache, RAM, Virtual Memory, VCache, Memory Tuning, SIMMS, Page File, page faults" name="keywords"/>
   13      <META content="TFI Technology Ltd, Home of StayAlive, the premier crash protection software and Memory+ the total memory control system." name="description"/>
   14      <META content="MSHTML 5.00.2920.0" name="GENERATOR"/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/xml_document.c:
  562    );
  563  
  564:   VALUE cache = rb_ary_new();
  565    rb_iv_set(rb_doc, "@decorators", Qnil);
  566:   rb_iv_set(rb_doc, "@node_cache", cache);
  567  
  568    tuple->doc = rb_doc;
  569    tuple->unlinkedNodes = st_init_numtable_with_size(128);
  570:   tuple->node_cache = cache;
  571    doc->_private = tuple ;
  572  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/xml_document.h:
    7    VALUE         doc;
    8    st_table     *unlinkedNodes;
    9:   VALUE         node_cache;
   10  };
   11  typedef struct _nokogiriTuple nokogiriTuple;
   ..
   18  #define DOC_RUBY_OBJECT(x) (((nokogiriTuplePtr)(x->_private))->doc)
   19  #define DOC_UNLINKED_NODE_HASH(x) (((nokogiriTuplePtr)(x->_private))->unlinkedNodes)
   20: #define DOC_NODE_CACHE(x) (((nokogiriTuplePtr)(x->_private))->node_cache)
   21  
   22  extern VALUE cNokogiriXmlDocument ;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/xml_namespace.c:
   37  VALUE Nokogiri_wrap_xml_namespace(xmlDocPtr doc, xmlNsPtr node)
   38  {
   39:   VALUE ns, document, node_cache;
   40  
   41    assert(doc->_private);
   ..
   48    document = DOC_RUBY_OBJECT(doc);
   49  
   50:   node_cache = rb_iv_get(document, "@node_cache");
   51:   rb_ary_push(node_cache, ns);
   52  
   53    rb_iv_set(ns, "@document", DOC_RUBY_OBJECT(doc));

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ext/nokogiri/xml_node.c:
 1372  {
 1373    VALUE document = Qnil ;
 1374:   VALUE node_cache = Qnil ;
 1375    VALUE rb_node = Qnil ;
 1376    nokogiriTuplePtr node_has_a_document;
 ....
 1444    if (node_has_a_document) {
 1445      document = DOC_RUBY_OBJECT(doc);
 1446:     node_cache = DOC_NODE_CACHE(doc);
 1447:     rb_ary_push(node_cache, rb_node);
 1448      rb_funcall(document, decorate, 1, rb_node);
 1449    }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/lib/nokogiri/css/parser_extras.rb:
    4    module CSS
    5      class Parser < Racc::Parser
    6:       @cache_on = true
    7:       @cache    = {}
    8        @mutex    = Mutex.new
    9  
   10        class << self
   11          # Turn on CSS parse caching
   12:         attr_accessor :cache_on
   13:         alias :cache_on? :cache_on
   14:         alias :set_cache :cache_on=
   15  
   16:         # Get the css selector in +string+ from the cache
   17          def [] string
   18:           return unless @cache_on
   19:           @mutex.synchronize { @cache[string] }
   20          end
   21  
   22:         # Set the css selector in +string+ in the cache to +value+
   23          def []= string, value
   24:           return value unless @cache_on
   25:           @mutex.synchronize { @cache[string] = value }
   26          end
   27  
   28:         # Clear the cache
   29:         def clear_cache
   30:           @mutex.synchronize { @cache = {} }
   31          end
   32  
   33:         # Execute +block+ without cache
   34:         def without_cache &block
   35:           tmp = @cache_on
   36:           @cache_on = false
   37            block.call
   38:           @cache_on = tmp
   39          end
   40  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/lib/nokogiri/decorators/slop.rb:
   21            end
   22          else
   23:           CSS::Parser.without_cache do
   24              list = xpath(
   25                *CSS.xpath_for("#{name}#{args.first}", :prefix => prefix)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/Manifest.txt:
   50  ext/java/nokogiri/internals/HtmlDomParserContext.java
   51  ext/java/nokogiri/internals/NokogiriBlockingQueueInputStream.java
   52: ext/java/nokogiri/internals/NokogiriDocumentCache.java
   53  ext/java/nokogiri/internals/NokogiriDomParser.java
   54  ext/java/nokogiri/internals/NokogiriEncodingReaderWrapper.java
   ..
   57  ext/java/nokogiri/internals/NokogiriHandler.java
   58  ext/java/nokogiri/internals/NokogiriHelpers.java
   59: ext/java/nokogiri/internals/NokogiriNamespaceCache.java
   60  ext/java/nokogiri/internals/NokogiriNamespaceContext.java
   61  ext/java/nokogiri/internals/NokogiriNonStrictErrorHandler.java
   ..
  267  test/namespaces/test_namespaces_in_parsed_doc.rb
  268  test/test_convert_xpath.rb
  269: test/test_css_cache.rb
  270  test/test_encoding_handler.rb
  271  test/test_memory_leak.rb

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/include/libxml2/libxml/xpath.h:
  350      int flags;				/* flags to control compilation */
  351  
  352:     /* Cache for reusal of XPath objects */
  353:     void *cache;
  354  };
  355  
  ...
  499  		    xmlXPathFreeContext		(xmlXPathContextPtr ctxt);
  500  XMLPUBFUN int XMLCALL
  501: 		    xmlXPathContextSetCache(xmlXPathContextPtr ctxt,
  502  				            int active,
  503  					    int value,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/share/doc/libxml2-2.8.0/html/encoding.html:
   73          for right now (RPM RDF catalogs, advogato data, various configuration
   74          file formats, etc.) and the key point for today's computer
   75:         architecture is efficient uses of caches. If one nearly double the
   76          memory requirement to store the same amount of data, this will trash
   77:         caches (main memory/external caches/internal caches) and my take is
   78          that this harms the system far more than the CPU requirements needed
   79          for the conversion to UTF-8</li>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/share/doc/libxml2-2.8.0/html/html/libxml-xpath.html:
   53  <pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathCompiledEval">xmlXPathCompiledEval</a>	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />						 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctx)</pre>
   54  <pre class="programlisting">int	<a href="#xmlXPathCompiledEvalToBoolean">xmlXPathCompiledEvalToBoolean</a>	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />					 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt)</pre>
   55: <pre class="programlisting">int	<a href="#xmlXPathContextSetCache">xmlXPathContextSetCache</a>		(<a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br />					 int active, <br />					 int value, <br />					 int options)</pre>
   56  <pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathConvertBoolean">xmlXPathConvertBoolean</a>	(<a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)</pre>
   57  <pre class="programlisting">Function type: <a href="#xmlXPathConvertFunc">xmlXPathConvertFunc</a>
   ..
  141      <a href="libxml-tree.html#xmlNodePtr">xmlNodePtr</a>	debugNode	: the source node XSLT dictionary
  142      <a href="libxml-dict.html#xmlDictPtr">xmlDictPtr</a>	dict	: dictionary if any
  143:     int	flags	: flags to control compilation Cache for
  144:     void *	cache
  145  }</pre><h3>Enum <a name="xmlXPathError" id="xmlXPathError">xmlXPathError</a></h3><pre class="programlisting">Enum xmlXPathError {
  146      <a name="XPATH_EXPRESSION_OK" id="XPATH_EXPRESSION_OK">XPATH_EXPRESSION_OK</a> = 0
  ...
  252  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctx</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>the <a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> resulting from the evaluation or NULL. the caller has to free the object.</td></tr></tbody></table></div><h3><a name="xmlXPathCompiledEvalToBoolean" id="xmlXPathCompiledEvalToBoolean"></a>Function: xmlXPathCompiledEvalToBoolean</h3><pre class="programlisting">int	xmlXPathCompiledEvalToBoolean	(<a href="libxml-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br />					 <a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt)<br />
  253  </pre><p>Applies the XPath boolean() function on the result of the given compiled expression.</p>
  254: <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors.</td></tr></tbody></table></div><h3><a name="xmlXPathContextSetCache" id="xmlXPathContextSetCache"></a>Function: xmlXPathContextSetCache</h3><pre class="programlisting">int	xmlXPathContextSetCache		(<a href="libxml-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br />					 int active, <br />					 int value, <br />					 int options)<br />
  255: </pre><p>Creates/frees an object cache on the XPath context. If activates XPath objects (xmlXPathObject) will be cached internally to be reused. @options: 0: This will set the XPath object caching: @value: This will set the maximum number of XPath objects to be cached per slot There are 5 slots for: node-set, string, number, boolean, and misc objects. Use &lt;0 for the default number (100). Other values for @options have currently no effect.</p>
  256: <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>active</tt></i>:</span></td><td>enables/disables (creates/frees) the cache</td></tr><tr><td><span class="term"><i><tt>value</tt></i>:</span></td><td>a value with semantics dependant on @options</td></tr><tr><td><span class="term"><i><tt>options</tt></i>:</span></td><td>options (currently only the value 0 is used)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 if the setting succeeded, and -1 on API or internal errors.</td></tr></tbody></table></div><h3><a name="xmlXPathConvertBoolean" id="xmlXPathConvertBoolean"></a>Function: xmlXPathConvertBoolean</h3><pre class="programlisting"><a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	xmlXPathConvertBoolean	(<a href="libxml-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)<br />
  257  </pre><p>Converts an existing object to its boolean() equivalent</p>
  258  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>val</tt></i>:</span></td><td>an XPath object</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>the new object, the old one is freed (or the operation is done directly on @val)</td></tr></tbody></table></div><h3><a name="xmlXPathConvertFunc" id="xmlXPathConvertFunc"></a>Function type: xmlXPathConvertFunc</h3><pre class="programlisting">Function type: xmlXPathConvertFunc

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/share/doc/libxml2-2.8.0/html/xml.html:
 1300        equality and comparison (Andreas Pakulat), xmlXPathCollectAndTest
 1301        improvememt (Kasimier), expose if library was compiled with zlib 
 1302:       support (Andrew Nosenko), cache for xmlSchemaIDCMatcher structs
 1303        (Kasimier), xmlTextConcat should work with comments and PIs (Rob
 1304        Richards), export htmlNewParserCtxt needed by Michael Day, refactoring
 ....
 1355      selfdocument.</li>
 1356    <li>improvements: Xpath optimizations (Kasimier), XPath object
 1357:     cache(Kasimier)</li>
 1358  </ul>
 1359  
 ....
 4076          for right now (RPM RDF catalogs, advogato data, various configuration
 4077          file formats, etc.) and the key point for today's computer
 4078:         architecture is efficient uses of caches. If one nearly double the
 4079          memory requirement to store the same amount of data, this will trash
 4080:         caches (main memory/external caches/internal caches) and my take is
 4081          that this harms the system far more than the CPU requirements needed
 4082          for the conversion to UTF-8</li>
 ....
 4467      <p>"http://www.oasis-open.org/committes/entity/stylesheets/base/tr.xsl"</p>
 4468    </li>
 4469:   <li>providing a local cache mechanism allowing to load the entities
 4470      associated to public identifiers or remote resources, this is a really
 4471      important feature for any significant deployment of XML or SGML since it
 ....
 4543  any URI starting with a given prefix should be looked at another  URI
 4544  constructed by replacing the prefix with an new one. In effect this acts like
 4545: a cache system for a full area of the Web. In practice it is extremely useful
 4546  with a file prefix if you have installed a copy of those resources on your
 4547  local system.</p>
 ....
 5279    <li>install libxml2-2.3.x and  libxml2-devel-2.3.x (libxml-1.8.y and
 5280      libxml-devel-1.8.y can be kept simultaneously)</li>
 5281:   <li>remove your config.cache, relaunch your configuration mechanism, and
 5282      recompile, if steps 2 and 3 were done right it should compile as-is</li>
 5283    <li>Test that your application is still running correctly, if not this may

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/share/gtk-doc/html/libxml2/libxml2-xpath.html:
   73  <a href="libxml2-xmlstring.html#xmlChar">xmlChar</a> *	<a href="#xmlXPathCastNodeToString">xmlXPathCastNodeToString</a>	(<a href="libxml2-tree.html#xmlNodePtr">xmlNodePtr</a> node);
   74  int	<a href="#xmlXPathIsNaN">xmlXPathIsNaN</a>			(double val);
   75: int	<a href="#xmlXPathContextSetCache">xmlXPathContextSetCache</a>		(<a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br/>					 int active, <br/>					 int value, <br/>					 int options);
   76  <a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	<a href="#xmlXPathConvertString">xmlXPathConvertString</a>	(<a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val);
   77  int	<a href="#xmlXPathCompiledEvalToBoolean">xmlXPathCompiledEvalToBoolean</a>	(<a href="libxml2-xpath.html#xmlXPathCompExprPtr">xmlXPathCompExprPtr</a> comp, <br/>					 <a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt);
   ..
  212      <a href="libxml2-tree.html#xmlNodePtr">xmlNodePtr</a>	debugNode	: the source node XSLT dictionary
  213      <a href="libxml2-dict.html#xmlDictPtr">xmlDictPtr</a>	dict	: dictionary if any
  214:     int	flags	: flags to control compilation Cache for reusal of XPath objects
  215:     void *	cache
  216  } xmlXPathContext;
  217  </pre><p/>
  ...
  446  <div class="variablelist"><table border="0"><col align="left"/><tbody><tr><td><span class="term"><i><tt>comp</tt></i>:</span></td><td>the compiled XPath expression</td></tr><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>1 if the expression evaluated to true, 0 if to false and -1 in API and internal errors.</td></tr></tbody></table></div></div>
  447          <hr/>
  448:         <div class="refsect2" lang="en"><h3><a name="xmlXPathContextSetCache"/>xmlXPathContextSetCache ()</h3><pre class="programlisting">int	xmlXPathContextSetCache		(<a href="libxml2-xpath.html#xmlXPathContextPtr">xmlXPathContextPtr</a> ctxt, <br/>					 int active, <br/>					 int value, <br/>					 int options)<br/>
  449: </pre><p>Creates/frees an object cache on the XPath context. If activates XPath objects (xmlXPathObject) will be cached internally to be reused. @options: 0: This will set the XPath object caching: @value: This will set the maximum number of XPath objects to be cached per slot There are 5 slots for: node-set, string, number, boolean, and misc objects. Use &lt;0 for the default number (100). Other values for @options have currently no effect.</p>
  450: <div class="variablelist"><table border="0"><col align="left"/><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>the XPath context</td></tr><tr><td><span class="term"><i><tt>active</tt></i>:</span></td><td>enables/disables (creates/frees) the cache</td></tr><tr><td><span class="term"><i><tt>value</tt></i>:</span></td><td>a value with semantics dependant on @options</td></tr><tr><td><span class="term"><i><tt>options</tt></i>:</span></td><td>options (currently only the value 0 is used)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 if the setting succeeded, and -1 on API or internal errors.</td></tr></tbody></table></div></div>
  451          <hr/>
  452          <div class="refsect2" lang="en"><h3><a name="xmlXPathConvertBoolean"/>xmlXPathConvertBoolean ()</h3><pre class="programlisting"><a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a>	xmlXPathConvertBoolean	(<a href="libxml2-xpath.html#xmlXPathObjectPtr">xmlXPathObjectPtr</a> val)<br/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxml2/2.8.0/share/gtk-doc/html/libxml2/libxml2.devhelp:
 3392      <function name="xmlXPathConcatFunction ()" link="libxml2-xpathInternals.html#xmlXPathConcatFunction"/>
 3393      <function name="xmlXPathContainsFunction ()" link="libxml2-xpathInternals.html#xmlXPathContainsFunction"/>
 3394:     <function name="xmlXPathContextSetCache ()" link="libxml2-xpath.html#xmlXPathContextSetCache"/>
 3395      <function name="xmlXPathConvertBoolean ()" link="libxml2-xpath.html#xmlXPathConvertBoolean"/>
 3396      <function name="xmlXPathConvertNumber ()" link="libxml2-xpath.html#xmlXPathConvertNumber"/>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/include/libxslt/documents.h:
    1  /*
    2   * Summary: interface for the document handling
    3:  * Description: implements document loading and cache (multiple
    4   *              document() reference for the same resources must
    5   *              be equal.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/include/libxslt/xsltInternals.h:
   29  #endif
   30  
   31: /* #define XSLT_DEBUG_PROFILE_CACHE */
   32  
   33  /**
   ..
 1437      int level;                  /* the depth in the tree;
 1438                                     -1 if persistent (e.g. a given xsl:with-param) */
 1439:     xsltTransformContextPtr context; /* The transformation context; needed to cache
 1440                                          the variables */
 1441      int flags;
 ....
 1633  };
 1634  
 1635: typedef struct _xsltTransformCache xsltTransformCache;
 1636: typedef xsltTransformCache *xsltTransformCachePtr;
 1637: struct _xsltTransformCache {
 1638      xmlDocPtr RVT;
 1639      int nbRVT;
 1640      xsltStackElemPtr stackItems;
 1641      int nbStackItems;
 1642: #ifdef XSLT_DEBUG_PROFILE_CACHE
 1643:     int dbgCachedRVTs;
 1644      int dbgReusedRVTs;
 1645:     int dbgCachedVars;
 1646      int dbgReusedVars;
 1647  #endif
 ....
 1768      xmlNodePtr initialContextNode;
 1769      xmlDocPtr initialContextDoc;
 1770:     xsltTransformCachePtr cache;
 1771      void *contextVariable; /* the current variable item */
 1772      xmlDocPtr localRVT; /* list of local tree fragments; will be freed when

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/APIchunk3.html:
  118  <a href="html/libxslt-xsltutils.html#xsltSaveResultToFd">xsltSaveResultToFd</a><br />
  119  <a href="html/libxslt-xsltutils.html#xsltSaveResultToFile">xsltSaveResultToFile</a><br />
  120: </dd></dl><h2>Letter c:</h2><dl><dt>cache</dt><dd><a href="html/libxslt-xsltInternals.html#_xsltStackElem">_xsltStackElem</a><br />
  121  <a href="html/libxslt-xsltInternals.html#xsltReleaseRVT">xsltReleaseRVT</a><br />
  122  </dd><dt>calibration</dt><dd><a href="html/libxslt-xsltutils.html#xsltCalibrateAdjust">xsltCalibrateAdjust</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/APIfiles.html:
  326  <a href="html/libxslt-xsltInternals.html#_xsltStylesheet">_xsltStylesheet</a><br />
  327  <a href="html/libxslt-xsltInternals.html#_xsltTemplate">_xsltTemplate</a><br />
  328: <a href="html/libxslt-xsltInternals.html#_xsltTransformCache">_xsltTransformCache</a><br />
  329  <a href="html/libxslt-xsltInternals.html#_xsltTransformContext">_xsltTransformContext</a><br />
  330  <a href="html/libxslt-xsltInternals.html#_xsltVarInfo">_xsltVarInfo</a><br />
  ...
  473  <a href="html/libxslt-xsltInternals.html#xsltTransStorageAdd">xsltTransStorageAdd</a><br />
  474  <a href="html/libxslt-xsltInternals.html#xsltTransStorageRemove">xsltTransStorageRemove</a><br />
  475: <a href="html/libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a><br />
  476: <a href="html/libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a><br />
  477  <a href="html/libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a><br />
  478  <a href="html/libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/APIsymbols.html:
  181  <a href="html/libxslt-xsltInternals.html#_xsltStylesheet">_xsltStylesheet</a><br />
  182  <a href="html/libxslt-xsltInternals.html#_xsltTemplate">_xsltTemplate</a><br />
  183: <a href="html/libxslt-xsltInternals.html#_xsltTransformCache">_xsltTransformCache</a><br />
  184  <a href="html/libxslt-xsltInternals.html#_xsltTransformContext">_xsltTransformContext</a><br />
  185  <a href="html/libxslt-xsltInternals.html#_xsltVarInfo">_xsltVarInfo</a><br />
  ...
  555  <a href="html/libxslt-xsltInternals.html#xsltTransStorageAdd">xsltTransStorageAdd</a><br />
  556  <a href="html/libxslt-xsltInternals.html#xsltTransStorageRemove">xsltTransStorageRemove</a><br />
  557: <a href="html/libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a><br />
  558: <a href="html/libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a><br />
  559  <a href="html/libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a><br />
  560  <a href="html/libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a><br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/html/libxslt-documents.html:
    8  H3 {font-family: Verdana,Arial,Helvetica}
    9  A:link, A:visited, A:active { text-decoration: underline }
   10:     </style><title>Module documents from libxslt</title></head><body bgcolor="#8b7765" text="#000000" link="#a06060" vlink="#000000"><table border="0" width="100%" cellpadding="5" cellspacing="0" align="center"><tr><td width="120"><a href="http://swpat.ffii.org/"><img src="../epatents.png" alt="Action against software patents" /></a></td><td width="180"><a href="http://www.gnome.org/"><img src="../gnome2.png" alt="GNOME2 Logo" /></a><a href="http://www.w3.org/Status"><img src="../w3c.png" alt="W3C logo" /></a><a href="http://www.redhat.com"><img src="../redhat.gif" alt="Red Hat Logo" /></a><div align="left"><a href="http://xmlsoft.org/XSLT/"><img src="../Libxslt-Logo-180x168.gif" alt="Made with Libxslt Logo" /></a></div></td><td><table border="0" width="90%" cellpadding="2" cellspacing="0" align="center" bgcolor="#000000"><tr><td><table width="100%" border="0" cellspacing="1" cellpadding="3" bgcolor="#fffacd"><tr><td align="center"><h1>The XSLT C library for GNOME</h1><h2>Module documents from libxslt</h2></td></tr></table></td></tr></table></td></tr></table><table border="0" cellpadding="4" cellspacing="0" width="100%" align="center"><tr><td bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="2" width="100%"><tr><td valign="top" width="200" bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="1" width="100%" bgcolor="#000000"><tr><td><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>API Menu</b></center></td></tr><tr><td bgcolor="#fffacd"><form action="../search.php" enctype="application/x-www-form-urlencoded" method="get"><input name="query" type="text" size="20" value="" /><input name="submit" type="submit" value="Search ..." /></form><ul><li><a style="font-weight:bold" href="../index.html">Main Menu</a></li><li><a style="font-weight:bold" href="../docs.html">Developer Menu</a></li><li><a style="font-weight:bold" href="index.html">API Menu</a></li><li><a href="../ChangeLog.html">ChangeLog</a></li></ul></td></tr></table><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>Related links</b></center></td></tr><tr><td bgcolor="#fffacd"><ul><li><a href="http://mail.gnome.org/archives/xslt/">Mail archive</a></li><li><a href="http://xmlsoft.org/">XML libxml2</a></li><li><a href="ftp://xmlsoft.org/">FTP</a></li><li><a href="http://www.zlatkovic.com/projects/libxml/">Windows binaries</a></li><li><a href="http://garypennington.net/libxml2/">Solaris binaries</a></li><li><a href="http://www.explain.com.au/oss/libxml2xslt.html">MacOsX binaries</a></li><li><a href="http://bugzilla.gnome.org/buglist.cgi?product=libxslt">Bug Tracker</a></li><li><a href="http://codespeak.net/lxml/">lxml Python bindings</a></li><li><a href="http://cpan.uwinnipeg.ca/dist/XML-LibXSLT">Perl XSLT bindings</a></li><li><a href="http://www.zend.com/php5/articles/php5-xmlphp.php#Heading17">XSLT with PHP</a></li><li><a href="http://www.mod-xslt2.com/">Apache module</a></li><li><a href="http://sourceforge.net/projects/libxml2-pas/">Pascal bindings</a></li><li><a href="http://xsldbg.sourceforge.net/">Xsldbg Debugger</a></li></ul></td></tr></table><table width="100%" border="0" cellspacing="1" cellpadding="3"><tr><td colspan="1" bgcolor="#eecfa1" align="center"><center><b>API Indexes</b></center></td></tr><tr><td bgcolor="#fffacd"><ul><li><a href="../APIchunk0.html">Alphabetic</a></li><li><a href="../APIconstructors.html">Constructors</a></li><li><a href="../APIfunctions.html">Functions/Types</a></li><li><a href="../APIfiles.html">Modules</a></li><li><a href="../APIsymbols.html">Symbols</a></li></ul></td></tr></table></td></tr></table></td><td valign="top" bgcolor="#8b7765"><table border="0" cellspacing="0" cellpadding="1" width="100%"><tr><td><table border="0" cellspacing="0" cellpadding="1" width="100%" bgcolor="#000000"><tr><td><table border="0" cellpadding="3" cellspacing="1" width="100%"><tr><td bgcolor="#fffacd"><table class="navigation" width="100%" summary="Navigation header" cellpadding="2" cellspacing="2"><tr valign="middle"><td><a accesskey="p" href="libxslt-attributes.html"><img src="left.png" width="24" height="24" border="0" alt="Prev" /></a></td><th align="left"><a href="libxslt-attributes.html">attributes</a></th><td><a accesskey="u" href="index.html"><img src="up.png" width="24" height="24" border="0" alt="Up" /></a></td><th align="left"><a href="index.html">API documentation</a></th><td><a accesskey="h" href="../index.html"><img src="home.png" width="24" height="24" border="0" alt="Home" /></a></td><th align="center"><a href="../index.html">Home</a></th><th align="right"><a href="libxslt-extensions.html">extensions</a></th><td><a accesskey="n" href="libxslt-extensions.html"><img src="right.png" width="24" height="24" border="0" alt="Next" /></a></td></tr></table><p>implements document loading and cache (multiple document() reference for the same resources must be equal. </p><h2>Table of Contents</h2><pre class="programlisting">Enum <a href="#xsltLoadType">xsltLoadType</a>
   11  </pre><pre class="programlisting">Function type: <a href="#xsltDocLoaderFunc">xsltDocLoaderFunc</a>
   12  xmlDocPtr	<a href="#xsltDocLoaderFunc">xsltDocLoaderFunc</a>	(const xmlChar * URI, <br />					 xmlDictPtr dict, <br />					 int options, <br />					 void * ctxt, <br />					 <a href="libxslt-documents.html#xsltLoadType">xsltLoadType</a> type)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/html/libxslt-xsltInternals.html:
  114  </pre><pre class="programlisting">Structure <a href="#xsltTemplate">xsltTemplate</a><br />struct _xsltTemplate
  115  </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTemplate">xsltTemplate</a> * <a name="xsltTemplatePtr" id="xsltTemplatePtr">xsltTemplatePtr</a>
  116: </pre><pre class="programlisting">Structure <a href="#xsltTransformCache">xsltTransformCache</a><br />struct _xsltTransformCache
  117: </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTransformCache">xsltTransformCache</a> * <a name="xsltTransformCachePtr" id="xsltTransformCachePtr">xsltTransformCachePtr</a>
  118  </pre><pre class="programlisting">Structure <a href="#xsltTransformContext">xsltTransformContext</a><br />struct _xsltTransformContext
  119  </pre><pre class="programlisting">Typedef <a href="libxslt-xsltInternals.html#xsltTransformContext">xsltTransformContext</a> * <a name="xsltTransformContextPtr" id="xsltTransformContextPtr">xsltTransformContextPtr</a>
  ...
  578      unsigned long	time	: the time spent in this template
  579      void *	params	: xsl:param instructions
  580: }</pre><h3><a name="xsltTransformCache" id="xsltTransformCache">Structure xsltTransformCache</a></h3><pre class="programlisting">Structure xsltTransformCache<br />struct _xsltTransformCache {
  581      xmlDocPtr	RVT
  582      int	nbRVT
  583      <a href="libxslt-xsltInternals.html#xsltStackElemPtr">xsltStackElemPtr</a>	stackItems
  584      int	nbStackItems
  585:     int	dbgCachedRVTs
  586      int	dbgReusedRVTs
  587:     int	dbgCachedVars
  588      int	dbgReusedVars
  589  }</pre><h3><a name="xsltTransformContext" id="xsltTransformContext">Structure xsltTransformContext</a></h3><pre class="programlisting">Structure xsltTransformContext<br />struct _xsltTransformContext {
  ...
  647      xmlNodePtr	initialContextNode
  648      xmlDocPtr	initialContextDoc
  649:     <a href="libxslt-xsltInternals.html#xsltTransformCachePtr">xsltTransformCachePtr</a>	cache
  650      void *	contextVariable	: the current variable item
  651      xmlDocPtr	localRVT	: list of local tree fragments; will be f
  ...
  736  </pre><p>Registers the result value tree (XSLT 1.0 term: Result Tree Fragment) in the garbage collector. The fragment will be freed at the exit of the currently instantiated xsl:template. Obsolete; this function might produce massive memory overhead, since the fragment is only freed when the current xsl:template exits. Use xsltRegisterLocalRVT() instead.</p>
  737  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>an XSLT transformation context</td></tr><tr><td><span class="term"><i><tt>RVT</tt></i>:</span></td><td>a result value tree (Result Tree Fragment)</td></tr><tr><td><span class="term"><i><tt>Returns</tt></i>:</span></td><td>0 in case of success and -1 in case of API or internal errors.</td></tr></tbody></table></div><h3><a name="xsltReleaseRVT" id="xsltReleaseRVT"></a>Function: xsltReleaseRVT</h3><pre class="programlisting">void	xsltReleaseRVT			(<a href="libxslt-xsltInternals.html#xsltTransformContextPtr">xsltTransformContextPtr</a> ctxt, <br />					 xmlDocPtr RVT)<br />
  738: </pre><p>Either frees the RVT (which is an xmlDoc) or stores it in the context's cache for later reuse.</p>
  739  <div class="variablelist"><table border="0"><col align="left" /><tbody><tr><td><span class="term"><i><tt>ctxt</tt></i>:</span></td><td>an XSLT transformation context</td></tr><tr><td><span class="term"><i><tt>RVT</tt></i>:</span></td><td>a result value tree (Result Tree Fragment)</td></tr></tbody></table></div><h3><a name="xsltRestoreDocumentNamespaces" id="xsltRestoreDocumentNamespaces"></a>Function: xsltRestoreDocumentNamespaces</h3><pre class="programlisting">int	xsltRestoreDocumentNamespaces	(<a href="libxslt-xsltInternals.html#xsltNsMapPtr">xsltNsMapPtr</a> ns, <br />					 xmlDocPtr doc)<br />
  740  </pre><p>Restore the namespaces for the document</p>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/news.html:
  101        python space/tab inconsistencies (Andreas Hanke), hook xsl:message
  102        to per transformation error callbacks (Shaun McCance),
  103:       cached RVT problem (William Brack), XPath context maintainance
  104        on choose (William Brack), memory leaks in the math module (William
  105        Brack), exclude-result-prefix induced namespace problem (William
  ...
  142      Buchcik), problem in mixed xsl:value-of and xsl:text uses (Kasimier)</li>
  143    <li>improvements: internal refactoring (Kasimier Buchcik), use of the XPath
  144:     object cache in libxml2-2.6.25 (Kasimier)</li>
  145  </ul><h3>1.1.16: May 01 2006</h3><ul><li>portability fixes: EXSLT date/time on Solaris and IRIX (Albert Chin),
  146        HP-UX  build (Albert Chin), 
  ...
  352  </ul><h3>1.0.27: Feb 24 2003</h3><ul><li>bug fixes: spurious xmlns:nsX="" generation, serialization bug (in
  353      libxml2), a namespace copy problem, errors in the RPM spec prereqs</li>
  354:   <li>Windows path canonicalization and document cache fix (Igor)</li>
  355  </ul><h3>1.0.26: Feb 10 2003</h3><ul><li>Fixed 3 serious bugs in document() and stylesheet compilation which
  356      could lead to a crash</li>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/ports/x86_64-linux-gnu/libxslt/1.1.26/share/doc/libxslt-1.1.26/html/xslt.html:
  413        python space/tab inconsistencies (Andreas Hanke), hook xsl:message
  414        to per transformation error callbacks (Shaun McCance),
  415:       cached RVT problem (William Brack), XPath context maintainance
  416        on choose (William Brack), memory leaks in the math module (William
  417        Brack), exclude-result-prefix induced namespace problem (William
  ...
  466      Buchcik), problem in mixed xsl:value-of and xsl:text uses (Kasimier)</li>
  467    <li>improvements: internal refactoring (Kasimier Buchcik), use of the XPath
  468:     object cache in libxml2-2.6.25 (Kasimier)</li>
  469  </ul>
  470  
  ...
  774    <li>bug fixes: spurious xmlns:nsX="" generation, serialization bug (in
  775      libxml2), a namespace copy problem, errors in the RPM spec prereqs</li>
  776:   <li>Windows path canonicalization and document cache fix (Igor)</li>
  777  </ul>
  778  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/test/files/tlm.html:
  470  	<div class="postentry">
  471  		<p>Despite the recent Ruby webserver <a href="http://www.rubyinside.com/ebb-web-framework-http-server-786.html" onclick="javascript:urchinTracker ('/outbound/article/www.rubyinside.com');">speed contests</a>, most of the slowness at <a href="http://adready.com/" onclick="javascript:urchinTracker ('/outbound/article/adready.com');">my job</a> results from slow (or too many) database queries.</p>
  472: <p>To help keep database queries down, I added a stats to every page that shows the number of queries vs. cache hits, the number of rows returned, and the amount of data transferred from the database.  In this screenshot I'm using the "live" environment, 3 cache hits, 169 misses, 577 rows returned, and 458.9k data transferred.  Clicking the box hides it, and clicking "Super Hide!" hides the box and sets a cookie so that the box doesn't show up again for a while.</p>
  473  <p><a href="http://www.flickr.com/photos/aaronp/2331927606/" title="Debug Window by fakebeard, on Flickr" onclick="javascript:urchinTracker ('/outbound/article/www.flickr.com');"><img src="http://farm3.static.flickr.com/2106/2331927606_46cc9fa937.jpg" width="500" height="187" alt="Debug Window" /></a></p>
  474  <p>To get this working, first I monkey patch the MysqlAdapter to collect database stats:</p>
  ...
  501  &nbsp; <span class="kw1">end</span></div>
  502  </div>
  503: <p>Next I patched the QueryCache to keep track of hits and misses:</p>
  504  <div class="codesnip-container" >
  505: <div class="codesnip" style="font-family: monospace;">ActiveRecord::ConnectionAdapters::QueryCache.<span class="me1">module_eval</span> <span class="kw1">do</span><br />
  506  &nbsp; &nbsp; @@hits = @@misses = <span class="nu0">0</span></p>
  507  <p>&nbsp; &nbsp; <span class="kw1">def</span> <span class="kw2">self</span>.<span class="me1">get_stats</span><br />
  ...
  512  &nbsp; &nbsp; &nbsp; @@hits = @@misses = <span class="nu0">0</span><br />
  513  &nbsp; &nbsp; <span class="kw1">end</span></p>
  514: <p>&nbsp; &nbsp; <span class="kw1">def</span> cache_sql_with_stats<span class="br0">&#40;</span>sql, &amp;block<span class="br0">&#41;</span><br />
  515: &nbsp; &nbsp; &nbsp; <span class="kw1">if</span> @query_cache.<span class="me1">has_key</span>?<span class="br0">&#40;</span>sql<span class="br0">&#41;</span><br />
  516  &nbsp; &nbsp; &nbsp; &nbsp; @@hits += <span class="nu0">1</span><br />
  517  &nbsp; &nbsp; &nbsp; <span class="kw1">else</span><br />
  518  &nbsp; &nbsp; &nbsp; &nbsp; @@misses += <span class="nu0">1</span><br />
  519  &nbsp; &nbsp; &nbsp; <span class="kw1">end</span><br />
  520: &nbsp; &nbsp; &nbsp; cache_sql_without_stats<span class="br0">&#40;</span>sql, &amp;block<span class="br0">&#41;</span><br />
  521  &nbsp; &nbsp; <span class="kw1">end</span><br />
  522: &nbsp; &nbsp; alias_method_chain :cache_sql, :stats<br />
  523  &nbsp; <span class="kw1">end</span></div>
  524  </div>
  ...
  528  &nbsp; &nbsp; <span class="kw1">def</span> perform_action_with_reset<br />
  529  &nbsp; &nbsp; &nbsp; ActiveRecord::ConnectionAdapters::MysqlAdapter::reset_stats<br />
  530: &nbsp; &nbsp; &nbsp; ActiveRecord::ConnectionAdapters::QueryCache::reset_stats<br />
  531  &nbsp; &nbsp; &nbsp; perform_action_without_reset<br />
  532  &nbsp; &nbsp; <span class="kw1">end</span></p>
  ...
  544  &nbsp; <span class="sc2">&lt;%= RAILS_ENV %<span class="kw2">&gt;</span></span><br />
  545  &nbsp; <span class="sc2"><a href="http://december.com/html/4/element/br.html" onclick="javascript:urchinTracker ('/outbound/article/december.com');"><span class="kw2">&lt;br</span></a> /<span class="kw2">&gt;</span></span><br />
  546: &nbsp; <span class="sc2">&lt;% if ActiveRecord::ConnectionAdapters::QueryCache.respond_to?<span class="br0">&#40;</span>:get_stats<span class="br0">&#41;</span> %<span class="kw2">&gt;</span></span><br />
  547: &nbsp; &nbsp; <span class="sc2">&lt;% stats = ActiveRecord::ConnectionAdapters::QueryCache.get_stats %<span class="kw2">&gt;</span></span><br />
  548  &nbsp; &nbsp; Queries: <span class="sc2">&lt;%= stats<span class="br0">&#91;</span>:hits<span class="br0">&#93;</span> %<span class="kw2">&gt;</span></span> / <span class="sc2">&lt;%= stats<span class="br0">&#91;</span>:misses<span class="br0">&#93;</span> %<span class="kw2">&gt;</span></span> /<br />
  549  &nbsp; &nbsp; <span class="sc2">&lt;%= number_to_percentage<span class="br0">&#40;</span><span class="br0">&#40;</span>stats<span class="br0">&#91;</span>:hits<span class="br0">&#93;</span>.to_f / <span class="br0">&#40;</span>stats<span class="br0">&#91;</span>:hits<span class="br0">&#93;</span> + stats<span class="br0">&#91;</span>:misses<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> * <span class="nu0">100</span>, :precision =<span class="kw2">&gt;</span></span> 0) %&gt;<br />

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/test/test_css_cache.rb:
    1  require "helper"
    2  
    3: class TestCssCache < Nokogiri::TestCase
    4  
    5    def setup
    .
    9      @to_xpath_result = @parse_result.map {|ast| ast.to_xpath}
   10      Nokogiri::CSS::Parser.class_eval do
   11:       class << @cache
   12          alias :old_bracket :[]
   13          attr_reader :count
   ..
   19        end
   20      end
   21:     assert Nokogiri::CSS::Parser.cache_on?
   22    end
   23  
   24    def teardown
   25:     Nokogiri::CSS::Parser.clear_cache
   26:     Nokogiri::CSS::Parser.set_cache true
   27    end
   28  
   29:   [ false, true ].each do |cache_setting|
   30:     define_method "test_css_cache_#{cache_setting ? "true" : "false"}" do
   31:       times = cache_setting ? 4 : nil
   32  
   33:       Nokogiri::CSS::Parser.set_cache cache_setting
   34  
   35        Nokogiri::CSS.xpath_for(@css)
   ..
   38        Nokogiri::CSS::Parser.new.xpath_for(@css)
   39  
   40:       assert_equal(times, Nokogiri::CSS::Parser.class_eval { @cache.count })
   41      end
   42    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/nokogiri-1.6.1/test/xml/test_namespace.rb:
   14  
   15        if Nokogiri.uses_libxml?
   16:         def test_namespace_is_in_node_cache
   17            node = @xml.root.namespace
   18:           assert @xml.instance_variable_get(:@node_cache).include?(node)
   19          end
   20        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/orm_adapter-0.5.0/spec/orm_adapter/example_app_shared.rb:
   40      end
   41  
   42:     it "#to_adapter should be cached" do
   43        subject.to_adapter.object_id.should == subject.to_adapter.object_id
   44      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pg-0.15.1/ChangeLog:
 1607  
 1608  	* .hgignore, Rakefile.local:
 1609: 	Ignore the yard cache, handle missing rake-compiler for non-compile-
 1610  	related tasks.
 1611  	[3993015a841e]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pg-0.15.1/ext/pg.c:
  122  
  123  /*
  124:  * A cache of mapping from PostgreSQL's encoding indices to Ruby's rb_encoding*s.
  125   */
  126  static struct st_table *enc_pg2ruby;
  ...
  179  	rb_encoding *enc;
  180  
  181: 	/* Use the cached value if it exists */
  182  	if ( st_lookup(enc_pg2ruby, (st_data_t)enc_id, (st_data_t*)&enc) ) {
  183  		return enc;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pg-0.15.1/ext/pg_connection.c:
 3366  	const char *pg_encname = NULL;
 3367  
 3368: 	/* Use cached value if found */
 3369  	if ( RTEST(encoding) ) return encoding;
 3370  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pg-0.15.1/sample/pg_statistics.rb:
  278  
  279  plot \
  280:     input_file using 1:4 title "Block (cache) reads" with lines smooth bezier, \
  281:     input_file using 1:5 title "Block (cache) hits" with lines smooth bezier, \
  282      input_file using 1:7 title "Sequence scans" with lines smooth bezier, \
  283      input_file using 1:8 title "Sequence tuple reads" with lines smooth bezier, \

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/phantomjs-1.9.2.0/lib/phantomjs.rb:
   36      end
   37  
   38:     # Clears cached state. Primarily useful for testing.
   39      def reset!
   40        @base_dir = @path = nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/protected_attributes-1.0.5/test/attribute_sanitization_test.rb:
  247      [:logger, :configurations, :primary_key_prefix_type, :table_name_prefix, :table_name_suffix, :pluralize_table_names,
  248       :default_timezone, :schema_format, :lock_optimistically, :timestamped_migrations, :default_scopes,
  249:      :connection_handler, :nested_attributes_options, :_attr_readonly, :attribute_types_cached_by_default,
  250       :attribute_method_matchers, :time_zone_aware_attributes, :skip_time_zone_conversion_for_attributes].each do |method|
  251        assert_respond_to  Task, method

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pry-0.9.12.4/lib/pry/commands/gem_install.rb:
    3      match 'gem-install'
    4      group 'Gems'
    5:     description 'Install a gem and refresh the gem cache.'
    6      command_options :argument_required => true
    7  
    .
    9        Usage: gem-install GEM_NAME
   10  
   11:       Installs the given gem and refreshes the gem cache so that you can immediately
   12        'require GEM_FILE'.
   13  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pry-0.9.12.4/lib/pry/helpers/table.rb:
   55        def items= items
   56          @items = items
   57:         _rebuild_colorless_cache
   58          _recolumn
   59          items
   ..
   81        end
   82  
   83:       def _rebuild_colorless_cache
   84:         @colorless_cache = {}
   85          @plain_items = []
   86          items.map do |e|
   87            plain = Pry::Helpers::Text.strip_color(e)
   88:           @colorless_cache[plain] = e
   89            @plain_items << plain
   90          end
   ..
  102  
  103        def _recall_color_for thing
  104:         @colorless_cache[thing]
  105        end
  106      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pry-0.9.12.4/lib/pry/method.rb:
  193        # If method_type is :method, obj can be any `Object`
  194        #
  195:       # N.B. we pre-cache the visibility here to avoid O(N²) behaviour in "ls".
  196        def all_from_common(obj, method_type, include_super=true)
  197          %w(public protected private).map do |visibility|
  ...
  220      #
  221      # @param [::Method, UnboundMethod, Proc] method
  222:     # @param [Hash] known_info Can be used to pre-cache expensive to compute stuff.
  223      # @return [Pry::Method]
  224      def initialize(method, known_info={})

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/pry-0.9.12.4/spec/commands/save_file_spec.rb:
  159    #   end
  160  
  161:   #   it 'should save input cache and a method to a file (in that order)' do
  162    #     @t.eval ":horse_nostrils"
  163    #     @t.eval "save-file -i 1 -m baby #{@path}"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/fastcache/extconf.rb:
    1  require 'mkmf'
    2: create_makefile 'corecache'
    3  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/fastcache/fastcache.c:
   11  #include "ruby.h"
   12  
   13: static VALUE LALRcoreCache;
   14  
   15  struct item_holder {
   ..
   20  };
   21  
   22: struct lalr_state_cache {
   23      struct item_holder **bin;
   24      long size;
   ..
   27  
   28  static void
   29: lalrc_free(struct lalr_state_cache *p)
   30  {
   31      struct item_holder *tmp;
   ..
   47  lalrc_s_new(VALUE self)
   48  {
   49:     struct lalr_state_cache *cache;
   50  
   51:     cache = ALLOC_N(struct lalr_state_cache, 1);
   52:     cache->bin = ALLOC_N(struct item_holder*, INIT_BIN);
   53:     cache->size = INIT_BIN;
   54:     cache->num = 0;
   55:     return Data_Wrap_Struct(LALRcoreCache, 0, lalrc_free, cache);
   56  }
   57  
   58: #define GET_LALRC(self, p) Data_Get_Struct(self, struct lalr_state_cache, p)
   59  
   60  static void
   61: lalrc_rehash(struct lalr_state_cache *p)
   62  {
   63      struct item_holder *top = 0, *tmp = 0;
   ..
  127  lalrc_aref(VALUE self, VALUE core)
  128  {
  129:     struct lalr_state_cache *p;
  130      unsigned long v;
  131      long i;
  ...
  154  lalrc_add_direct(VALUE self, VALUE core, VALUE state)
  155  {
  156:     struct lalr_state_cache *p;
  157      struct item_holder *ad;
  158      long i;
  ...
  177  
  178  void
  179: Init_corecache(void)
  180  {
  181:     LALRcoreCache = rb_define_class("LALRcoreCache", rb_cObject);
  182:     rb_define_singleton_method(LALRcoreCache, "new", lalrc_s_new, 0);
  183:     rb_define_method(LALRcoreCache, "[]", lalrc_aref, 1);
  184:     rb_define_method(LALRcoreCache, "[]=", lalrc_add_direct, 2);
  185  }
  186  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/lib/racc/grammar.rb:
  126  
  127      def parser_class
  128:       states = states()   # cache
  129        if $DEBUG
  130          srcfilename = caller(1).first.slice(/\A(.*?):/, 1)
  ...
  870      def initialize
  871        @symbols = []   # :: [Racc::Sym]
  872:       @cache   = {}   # :: {(String|Symbol) => Racc::Sym}
  873        @dummy  = intern(:$start, true)
  874        @anchor = intern(false, true)     # Symbol ID = 0
  ...
  885  
  886      def intern(val, dummy = false)
  887:       @cache[val] ||=
  888            begin
  889              sym = Sym.new(val, dummy)
  ...
  898      def delete(sym)
  899        @symbols.delete sym
  900:       @cache.delete sym.value
  901      end
  902  
  ...
 1080  
 1081      #
 1082:     # cache
 1083      #
 1084  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/lib/racc/grammarfileparser.rb:
  544      }
  545  
  546:     CACHE = {}
  547  
  548      def get_quoted_re(left)
  549        term = Regexp.quote(LEFT_TO_RIGHT[left] || left)
  550:       CACHE[left] ||= /\A[^#{term}\\]*(?:\\.[^\\#{term}]*)*#{term}/
  551      end
  552  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/lib/racc/parserfilegenerator.rb:
  492      end
  493  
  494:     RE_CACHE = {}
  495  
  496      def indent_re(n)
  497:       RE_CACHE[n] ||= /\A {#{n}}/
  498      end
  499  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/lib/racc/state.rb:
   29        @d_prec  = debug_flags.prec
   30        @states = []
   31:       @statecache = {}
   32        @actions = ActionTable.new(@grammar, self)
   33        @nfa_computed = false
   ..
  165  
  166        k = fingerprint(core)
  167:       unless dest = @statecache[k]
  168          # not registered yet
  169          dest = State.new(@states.size, core)
  170          @states.push dest
  171  
  172:         @statecache[k] = dest
  173          
  174          puts "core_to_state: create state   ID #{dest.ident}" if @d_state
  175        else
  176          if @d_state
  177:           puts "core_to_state: dest is cached ID #{dest.ident}"
  178            puts "core_to_state: dest core #{dest.core.join(' ')}"
  179          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/Manifest.txt:
   14  ext/racc/depend
   15  ext/racc/extconf.rb
   16: fastcache/extconf.rb
   17: fastcache/fastcache.c
   18  lib/racc.rb
   19  lib/racc/compat.rb

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/misc/dist.sh:
    9  cd racc-$version
   10      make bootstrap lib/racc/parser-text.rb doc
   11:     rm -r doc web bits fastcache
   12  cd ..
   13  mkdir -p raccrt-$version/lib/racc

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/racc-1.4.10/setup.rb:
  793      @ardir = File.expand_path(ardir_root)
  794      @config = config
  795:     # cache
  796      @valid_task_re = nil
  797    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack.rb:
   79      autoload :Cookie, "rack/session/cookie"
   80      autoload :Pool, "rack/session/pool"
   81:     autoload :Memcache, "rack/session/memcache"
   82    end
   83  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/deflater.rb:
   14    #
   15    # The middleware automatically detects when compression is supported
   16:   # and allowed. For example no transformation is made when a cache
   17    # directive of 'no-transform' is present, or when the response status
   18    # code is one that doesn't allow an entity body.
   ..
   29        # no-transform set.
   30        if Utils::STATUS_WITH_NO_ENTITY_BODY.include?(status) ||
   31:           headers['Cache-Control'].to_s =~ /\bno-transform\b/ ||
   32           (headers['Content-Encoding'] && headers['Content-Encoding'] !~ /\bidentity\b/)
   33          return [status, headers, body]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/etag.rb:
    8    # should be handled by apache/nginx).
    9    #
   10:   # On initialization, you can pass two parameters: a Cache-Control directive
   11    # used when Etag is absent and a directive when it is present. The first
   12    # defaults to nil, while the second defaults to "max-age=0, private, must-revalidate"
   13    class ETag
   14:     DEFAULT_CACHE_CONTROL = "max-age=0, private, must-revalidate".freeze
   15  
   16:     def initialize(app, no_cache_control = nil, cache_control = DEFAULT_CACHE_CONTROL)
   17        @app = app
   18:       @cache_control = cache_control
   19:       @no_cache_control = no_cache_control
   20      end
   21  
   ..
   28        end
   29  
   30:       unless headers['Cache-Control']
   31          if digest
   32:           headers['Cache-Control'] = @cache_control if @cache_control
   33          else
   34:           headers['Cache-Control'] = @no_cache_control if @no_cache_control
   35          end
   36        end
   ..
   50  
   51        def skip_caching?(headers)
   52:         (headers['Cache-Control'] && headers['Cache-Control'].include?('no-cache')) ||
   53            headers.key?('ETag') || headers.key?('Last-Modified')
   54        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/file.rb:
   18      attr_accessor :root
   19      attr_accessor :path
   20:     attr_accessor :cache_control
   21  
   22      alias :to_path :path

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/mime.rb:
   81        ".aiff"      => "audio/x-aiff",
   82        ".ami"       => "application/vnd.amiga.ami",
   83:       ".appcache"  => "text/cache-manifest",
   84        ".apr"       => "application/vnd.lotus-approach",
   85        ".asc"       => "application/pgp-signature",
   ..
  328        ".mag"       => "application/vnd.ecowin.chart",
  329        ".man"       => "text/troff",
  330:       ".manifest"  => "text/cache-manifest",
  331        ".mathml"    => "application/mathml+xml",
  332        ".mbk"       => "application/vnd.mobius.mbk",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/reloader.rb:
   25        @cooldown = cooldown
   26        @last = (Time.now - cooldown)
   27:       @cache = {}
   28        @mtimes = {}
   29  
   ..
   74            next unless found && stat && mtime = stat.mtime
   75  
   76:           @cache[file] = found
   77  
   78            yield(found, mtime)
   ..
   84        # path.
   85        def figure_path(file, paths)
   86:         found = @cache[file]
   87          found = file if !found and Pathname.new(file).absolute?
   88          found, stat = safe_stat(found)
   ..
  103          return file, stat if stat.file?
  104        rescue Errno::ENOENT, Errno::ENOTDIR, Errno::ESRCH
  105:         @cache.delete(file) and false
  106        end
  107      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/memcache.rb:
    2  
    3  require 'rack/session/abstract/id'
    4: require 'memcache'
    5  
    6  module Rack
    7    module Session
    8:     # Rack::Session::Memcache provides simple cookie based session management.
    9:     # Session data is stored in memcached. The corresponding session key is
   10      # maintained in the cookie.
   11:     # You may treat Session::Memcache as you would Session::Pool with the
   12      # following caveats.
   13      #
   14:     # * Setting :expire_after to 0 would note to the Memcache server to hang
   15      #   onto the session data until it would drop it according to it's own
   16      #   specifications. However, the cookie sent to the client would expire
   17      #   immediately.
   18      #
   19:     # Note that memcache does drop data before it may be listed to expire. For
   20:     # a full description of behaviour, please see memcache's documentation.
   21  
   22:     class Memcache < Abstract::ID
   23        attr_reader :mutex, :pool
   24  
   25        DEFAULT_OPTIONS = Abstract::ID::DEFAULT_OPTIONS.merge \
   26          :namespace => 'rack:session',
   27:         :memcache_server => 'localhost:11211'
   28  
   29        def initialize(app, options={})
   ..
   31  
   32          @mutex = Mutex.new
   33:         mserv = @default_options[:memcache_server]
   34:         mopts = @default_options.reject{|k,v| !MemCache::DEFAULT_OPTIONS.include? k }
   35  
   36:         @pool = options[:cache] || MemCache.new(mserv, mopts)
   37          unless @pool.active? and @pool.servers.any?{|c| c.alive? }
   38:           raise 'No memcache servers'
   39          end
   40        end
   ..
   79          @mutex.lock if env['rack.multithread']
   80          yield
   81:       rescue MemCache::MemCacheError, Errno::ECONNREFUSED
   82          if $VERBOSE
   83:           warn "#{self} is unable to find memcached server."
   84            warn $!.inspect
   85          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/session/pool.rb:
   15      #
   16      # The :drop option is available in rack.session.options if you wish to
   17:     # explicitly remove the session from the session cache.
   18      #
   19      # Example:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/lib/rack/static.rb:
   70    #     use Rack::Static, :root => 'public',
   71    #         :header_rules => [
   72:   #           # Cache all static files in public caches (e.g. Rack::Cache)
   73    #           #  as well as in the browser
   74:   #           [:all, {'Cache-Control' => 'public, max-age=31536000'}],
   75    #
   76    #           # Provide web fonts with cross-origin access-control-headers
   ..
   89        # HTTP Headers
   90        @header_rules = options[:header_rules] || []
   91:       # Allow for legacy :cache_control option while prioritizing global header_rules setting
   92:       @header_rules.insert(0, [:all, {'Cache-Control' => options[:cache_control]}]) if options[:cache_control]
   93        @headers = {}
   94  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/Rakefile:
   86    opts     = ENV['TEST'] || '-a'
   87    specopts = ENV['TESTOPTS'] ||
   88:     "-q -t '^(?!Rack::Adapter|Rack::Session::Memcache|Rack::Server|Rack::Handler)'"
   89  
   90    sh "bacon -w -I./lib:./test #{opts} #{specopts}"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/README.rdoc:
  152  
  153    * fcgi
  154:   * memcache-client
  155    * mongrel
  156    * thin
  ...
  178      gem install fcgi
  179  
  180: Furthermore, to test Memcache sessions, you need memcached (will be
  181: run on port 11211) and memcache-client installed.
  182  
  183  == History
  ...
  210    * New middleware, Rack::Deflater, by Christoffer Sawicki.
  211    * OpenID authentication now needs ruby-openid 2.
  212:   * New Memcache sessions, by blink.
  213    * Explicit EventedMongrel handler, by Joshua Peek <josh@joshpeek.com>
  214    * Rack::Reloader is not loaded in rackup development mode.
  ...
  465    * Rack::Static :index can now handle multiple directories
  466    * All tests now utilize Rack::Lint (special thanks to Lars Gierth)
  467:   * Rack::File cache_control parameter is now deprecated, and removed by 1.5
  468    * Correct Rack::Directory script name escaping
  469    * Rack::Static supports header rules for sophisticated configurations
  ...
  486    * Introduced hijack SPEC, for before-response and after-response hijacking
  487    * SessionHash is no longer a Hash subclass
  488:   * Rack::File cache_control parameter is removed, in place of headers options
  489    * Rack::Auth::AbstractRequest#scheme now yields strings, not symbols
  490    * Rack::Utils cookie functions now format expires in RFC 2822 format

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_deflater.rb:
  173    end
  174  
  175:   should "do nothing when no-transform Cache-Control directive present" do
  176:     app = lambda { |env| [200, {'Content-Type' => 'text/plain', 'Cache-Control' => 'no-transform'}, ['Hello World!']] }
  177      request = Rack::MockRequest.env_for("", "HTTP_ACCEPT_ENCODING" => "gzip")
  178      response = deflater(app).call(request)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_etag.rb:
   31    end
   32  
   33:   should "set Cache-Control to 'max-age=0, private, must-revalidate' (default) if none is set" do
   34      app = lambda { |env| [201, {'Content-Type' => 'text/plain'}, ["Hello, World!"]] }
   35      response = etag(app).call(request)
   36:     response[1]['Cache-Control'].should.equal 'max-age=0, private, must-revalidate'
   37    end
   38  
   39:   should "set Cache-Control to chosen one if none is set" do
   40      app = lambda { |env| [201, {'Content-Type' => 'text/plain'}, ["Hello, World!"]] }
   41      response = etag(app, nil, 'public').call(request)
   42:     response[1]['Cache-Control'].should.equal 'public'
   43    end
   44  
   45:   should "set a given Cache-Control even if digest could not be calculated" do
   46      app = lambda { |env| [200, {'Content-Type' => 'text/plain'}, []] }
   47:     response = etag(app, 'no-cache').call(request)
   48:     response[1]['Cache-Control'].should.equal 'no-cache'
   49    end
   50  
   51:   should "not set Cache-Control if it is already set" do
   52:     app = lambda { |env| [201, {'Content-Type' => 'text/plain', 'Cache-Control' => 'public'}, ["Hello, World!"]] }
   53      response = etag(app).call(request)
   54:     response[1]['Cache-Control'].should.equal 'public'
   55    end
   56  
   57:   should "not set Cache-Control if directive isn't present" do
   58      app = lambda { |env| [200, {'Content-Type' => 'text/plain'}, ["Hello, World!"]] }
   59      response = etag(app, nil, nil).call(request)
   60:     response[1]['Cache-Control'].should.equal nil
   61    end
   62  
   ..
   91    end
   92  
   93:   should "not set ETag if no-cache is given" do
   94:     app = lambda { |env| [200, {'Content-Type' => 'text/plain', 'Cache-Control' => 'no-cache, must-revalidate'}, ['Hello, World!']] }
   95      response = etag(app).call(request)
   96      response[1]['ETag'].should.be.nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_file.rb:
  148    should "support custom http headers" do
  149      env = Rack::MockRequest.env_for("/cgi/test")
  150:     status, heads, _ = file(DOCROOT, 'Cache-Control' => 'public, max-age=38',
  151       'Access-Control-Allow-Origin' => '*').call(env)
  152  
  153      status.should.equal 200
  154:     heads['Cache-Control'].should.equal 'public, max-age=38'
  155      heads['Access-Control-Allow-Origin'].should.equal '*'
  156    end
  ...
  161  
  162      status.should.equal 200
  163:     heads['Cache-Control'].should.equal nil
  164      heads['Access-Control-Allow-Origin'].should.equal nil
  165    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_request.rb:
  321    end
  322  
  323:   should "cache, but invalidates the cache" do
  324      req = Rack::Request.new \
  325        Rack::MockRequest.env_for("/?foo=quux",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_session_memcache.rb:
    1  begin
    2:   require 'rack/session/memcache'
    3    require 'rack/lint'
    4    require 'rack/mock'
    5    require 'thread'
    6  
    7:   describe Rack::Session::Memcache do
    8:     session_key = Rack::Session::Memcache::DEFAULT_OPTIONS[:key]
    9      session_match = /#{session_key}=([0-9a-fA-F]+);/
   10      incrementor = lambda do |env|
   ..
   31      incrementor = Rack::Lint.new(incrementor)
   32  
   33:     # test memcache connection
   34:     Rack::Session::Memcache.new(incrementor)
   35  
   36      it "faults on no connection" do
   37        lambda{
   38:         Rack::Session::Memcache.new(incrementor, :memcache_server => 'nosuchserver')
   39        }.should.raise
   40      end
   41  
   42      it "connects to existing server" do
   43:       test_pool = MemCache.new(incrementor, :namespace => 'test:rack:session')
   44        test_pool.namespace.should.equal 'test:rack:session'
   45      end
   46  
   47:     it "passes options to MemCache" do
   48:       pool = Rack::Session::Memcache.new(incrementor, :namespace => 'test:rack:session')
   49        pool.pool.namespace.should.equal 'test:rack:session'
   50      end
   51  
   52      it "creates a new cookie" do
   53:       pool = Rack::Session::Memcache.new(incrementor)
   54        res = Rack::MockRequest.new(pool).get("/")
   55        res["Set-Cookie"].should.include("#{session_key}=")
   ..
   58  
   59      it "determines session from a cookie" do
   60:       pool = Rack::Session::Memcache.new(incrementor)
   61        req = Rack::MockRequest.new(pool)
   62        res = req.get("/")
   ..
   69  
   70      it "determines session only from a cookie by default" do
   71:       pool = Rack::Session::Memcache.new(incrementor)
   72        req = Rack::MockRequest.new(pool)
   73        res = req.get("/")
   ..
   80  
   81      it "determines session from params" do
   82:       pool = Rack::Session::Memcache.new(incrementor, :cookie_only => false)
   83        req = Rack::MockRequest.new(pool)
   84        res = req.get("/")
   ..
   92      it "survives nonexistant cookies" do
   93        bad_cookie = "rack.session=blarghfasel"
   94:       pool = Rack::Session::Memcache.new(incrementor)
   95        res = Rack::MockRequest.new(pool).
   96          get("/", "HTTP_COOKIE" => bad_cookie)
   ..
  101  
  102      it "maintains freshness" do
  103:       pool = Rack::Session::Memcache.new(incrementor, :expire_after => 3)
  104        res = Rack::MockRequest.new(pool).get('/')
  105        res.body.should.include '"counter"=>1'
  ...
  116  
  117      it "does not send the same session id if it did not change" do
  118:       pool = Rack::Session::Memcache.new(incrementor)
  119        req = Rack::MockRequest.new(pool)
  120  
  ...
  133  
  134      it "deletes cookies with :drop option" do
  135:       pool = Rack::Session::Memcache.new(incrementor)
  136        req = Rack::MockRequest.new(pool)
  137        drop = Rack::Utils::Context.new(pool, drop_session)
  ...
  152  
  153      it "provides new session id with :renew option" do
  154:       pool = Rack::Session::Memcache.new(incrementor)
  155        req = Rack::MockRequest.new(pool)
  156        renew = Rack::Utils::Context.new(pool, renew_session)
  ...
  176  
  177      it "omits cookie with :defer option but still updates the state" do
  178:       pool = Rack::Session::Memcache.new(incrementor)
  179        count = Rack::Utils::Context.new(pool, incrementor)
  180        defer = Rack::Utils::Context.new(pool, defer_session)
  ...
  194  
  195      it "omits cookie and state update with :skip option" do
  196:       pool = Rack::Session::Memcache.new(incrementor)
  197        count = Rack::Utils::Context.new(pool, incrementor)
  198        skip = Rack::Utils::Context.new(pool, skip_session)
  ...
  222          [200, {}, [session.inspect]]
  223        end
  224:       pool = Rack::Session::Memcache.new(hash_check)
  225        req = Rack::MockRequest.new(pool)
  226  
  ...
  241          next
  242        end
  243:       warn 'Running multithread test for Session::Memcache'
  244:       pool = Rack::Session::Memcache.new(incrementor)
  245        req = Rack::MockRequest.new(pool)
  246  
  ...
  316    end
  317  rescue RuntimeError
  318:   $stderr.puts "Skipping Rack::Session::Memcache tests. Start memcached and try again."
  319  rescue LoadError
  320:   $stderr.puts "Skipping Rack::Session::Memcache tests (Memcache is required). `gem install memcache-client` and try again."
  321  end
  322  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-1.5.2/test/spec_static.rb:
   71    end
   72  
   73:   it "supports serving fixed cache-control (legacy option)" do
   74:     opts = OPTIONS.merge(:cache_control => 'public')
   75      request = Rack::MockRequest.new(static(DummyApp.new, opts))
   76      res = request.get("/cgi/test")
   77      res.should.be.ok
   78:     res.headers['Cache-Control'].should == 'public'
   79    end
   80  
   81    HEADER_OPTIONS = {:urls => ["/cgi"], :root => root, :header_rules => [
   82:     [:all, {'Cache-Control' => 'public, max-age=100'}],
   83:     [:fonts, {'Cache-Control' => 'public, max-age=200'}],
   84:     [%w(png jpg), {'Cache-Control' => 'public, max-age=300'}],
   85:     ['/cgi/assets/folder/', {'Cache-Control' => 'public, max-age=400'}],
   86:     ['cgi/assets/javascripts', {'Cache-Control' => 'public, max-age=500'}],
   87:     [/\.(css|erb)\z/, {'Cache-Control' => 'public, max-age=600'}]
   88    ]}
   89    @header_request = Rack::MockRequest.new(static(DummyApp.new, HEADER_OPTIONS))
   ..
   93      res = @header_request.get('/cgi/assets/index.html')
   94      res.should.be.ok
   95:     res.headers['Cache-Control'].should == 'public, max-age=100'
   96    end
   97  
   ..
  100      res = @header_request.get('/cgi/assets/fonts/font.eot')
  101      res.should.be.ok
  102:     res.headers['Cache-Control'].should == 'public, max-age=200'
  103    end
  104  
  ...
  107      res = @header_request.get('/cgi/assets/images/image.png')
  108      res.should.be.ok
  109:     res.headers['Cache-Control'].should == 'public, max-age=300'
  110    end
  111  
  ...
  114      res = @header_request.get('/cgi/assets/folder/test.js')
  115      res.should.be.ok
  116:     res.headers['Cache-Control'].should == 'public, max-age=400'
  117    end
  118  
  ...
  120      res = @header_request.get('/cgi/assets/javascripts/app.js')
  121      res.should.be.ok
  122:     res.headers['Cache-Control'].should == 'public, max-age=500'
  123    end
  124  
  ...
  127      res = @header_request.get('/cgi/assets/stylesheets/app.css')
  128      res.should.be.ok
  129:     res.headers['Cache-Control'].should == 'public, max-age=600'
  130    end
  131  
  132:   it "prioritizes header rules over fixed cache-control setting (legacy option)" do
  133      opts = OPTIONS.merge(
  134:       :cache_control => 'public, max-age=24',
  135        :header_rules => [
  136:         [:all, {'Cache-Control' => 'public, max-age=42'}]
  137        ])
  138  
  ...
  140      res = request.get("/cgi/test")
  141      res.should.be.ok
  142:     res.headers['Cache-Control'].should == 'public, max-age=42'
  143    end
  144  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-accept-0.4.5/lib/rack/accept/request.rb:
    4    # A container class for convenience methods when Rack::Accept is used on the
    5    # request level as Rack middleware. Instances of this class also manage a
    6:   # lightweight cache of various header instances to speed up execution.
    7    class Request < Rack::Request
    8      attr_reader :env

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack.rb:
    1  require 'rack'
    2  module Rack::Attack
    3:   autoload :Cache,     'rack/attack/cache'
    4    autoload :Check,     'rack/attack/check'
    5    autoload :Throttle,  'rack/attack/throttle'
    .
   93      end
   94  
   95:     def cache
   96:       @cache ||= Cache.new
   97      end
   98  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack/allow2ban.rb:
   11          # (blocking the request) if they have tripped the limit.
   12          def fail!(discriminator, bantime, findtime, maxretry)
   13:           count = cache.count("#{key_prefix}:count:#{discriminator}", findtime)
   14            if count >= maxretry
   15              ban!(discriminator, bantime)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack/cache.rb:
    1  module Rack
    2    module Attack
    3:     class Cache
    4  
    5        attr_accessor :prefix
    6  
    7        def initialize
    8:         self.store = ::Rails.cache if defined?(::Rails.cache)
    9          @prefix = 'rack::attack'
   10        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack/fail2ban.rb:
   22  
   23          def fail!(discriminator, bantime, findtime, maxretry)
   24:           count = cache.count("#{key_prefix}:count:#{discriminator}", findtime)
   25            if count >= maxretry
   26              ban!(discriminator, bantime)
   ..
   33          private
   34          def ban!(discriminator, bantime)
   35:           cache.write("#{key_prefix}:ban:#{discriminator}", 1, bantime)
   36          end
   37  
   38          def banned?(discriminator)
   39:           cache.read("#{key_prefix}:ban:#{discriminator}")
   40          end
   41  
   42:         def cache
   43:           Rack::Attack.cache
   44          end
   45        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack/store_proxy.rb:
    7          # RedisStore#increment needs different behavior, so detect that
    8          # (method has an arity of 2; must call #expire separately
    9:         if defined?(::ActiveSupport::Cache::RedisStore) && store.is_a?(::ActiveSupport::Cache::RedisStore)
   10:           # ActiveSupport::Cache::RedisStore doesn't expose any way to set an expiry,
   11            # so use the raw Redis::Store instead
   12            store = store.instance_variable_get(:@data)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/lib/rack/attack/throttle.rb:
   13        end
   14  
   15:       def cache
   16:         Rack::Attack.cache
   17        end
   18  
   ..
   22  
   23          key = "#{name}:#{discriminator}"
   24:         count = cache.count(key, period)
   25          current_limit = limit.respond_to?(:call) ? limit.call(req) : limit
   26          data = {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/README.md:
    5  It allows *whitelisting*, *blacklisting*, *throttling*, and *tracking* based on arbitrary properties of the request.
    6  
    7: Throttle state is stored in a configurable cache (e.g. `Rails.cache`), presumably backed by memcached or redis ([at least gem v3.0.0](https://rubygems.org/gems/redis)).
    8  
    9  See the [Backing & Hacking blog post](http://www.kickstarter.com/backing-and-hacking/rack-attack-protection-from-abusive-clients) introducing Rack::Attack.
   ..
   37  ```
   38  
   39: Optionally configure the cache store for throttling:
   40  
   41  ```ruby
   42:     Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new # defaults to Rails.cache
   43  ```
   44  
   45: Note that `Rack::Attack.cache` is only used for throttling; not blacklisting & whitelisting. Your cache store must implement `increment` and `write` like [ActiveSupport::Cache::Store](http://api.rubyonrails.org/classes/ActiveSupport/Cache/Store.html).
   46  
   47  ## How it works
   ..
   51   * If the request matches any **whitelist**, it is allowed.
   52   * Otherwise, if the request matches any **blacklist**, it is blocked.
   53:  * Otherwise, if the request matches any **throttle**, a counter is incremented in the Rack::Attack.cache. If any throttle's limit is exceeded, the request is blocked.
   54   * Otherwise, all **tracks** are checked, and the request is allowed.
   55  
   ..
  152      # Throttle requests to 5 requests per second per ip
  153      Rack::Attack.throttle('req/ip', :limit => 5, :period => 1.second) do |req|
  154:       # If the return value is truthy, the cache key for the return value
  155        # is incremented and compared with the limit. In this case:
  156        #   "rack::attack:#{Time.now.to_i/1.second}:req/ip:#{req.ip}"
  157        #
  158:       # If falsy, the cache key is neither incremented nor checked.
  159  
  160        req.ip
  ...
  238  
  239  A note on developing and testing apps using Rack::Attack - if you are using throttling in particular, you will
  240: need to enable the cache in your development environment. See [Caching with Rails](http://guides.rubyonrails.org/caching_with_rails.html)
  241  for more on how to do this.
  242  
  ...
  245  The overhead of running Rack::Attack is typically negligible (a few milliseconds per request),
  246  but it depends on how many checks you've configured, and how long they take.
  247: Throttles usually require a network roundtrip to your cache server(s),
  248  so try to keep the number of throttle checks per request low.
  249  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/spec/allow2ban_spec.rb:
    2  describe 'Rack::Attack.Allow2Ban' do
    3    before do
    4:     # Use a long findtime; failures due to cache key rotation less likely
    5:     @cache = Rack::Attack.cache
    6      @findtime = 60
    7      @bantime  = 60
    8:     Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new
    9      @f2b_options = {:bantime => @bantime, :findtime => @findtime, :maxretry => 2}
   10      Rack::Attack.blacklist('pentest') do |req|
   ..
   30          it 'increases fail count' do
   31            key = "rack::attack:#{Time.now.to_i/@findtime}:allow2ban:count:1.2.3.4"
   32:           @cache.store.read(key).must_equal 1
   33          end
   34  
   35          it 'is not banned' do
   36            key = "rack::attack:allow2ban:1.2.3.4"
   37:           @cache.store.read(key).must_be_nil
   38          end
   39        end
   ..
   52          it 'increases fail count' do
   53            key = "rack::attack:#{Time.now.to_i/@findtime}:allow2ban:count:1.2.3.4"
   54:           @cache.store.read(key).must_equal 2
   55          end
   56  
   57          it 'is banned' do
   58            key = "rack::attack:allow2ban:ban:1.2.3.4"
   59:           @cache.store.read(key).must_equal 1
   60          end
   61  
   ..
   89        it 'does not increase fail count' do
   90          key = "rack::attack:#{Time.now.to_i/@findtime}:allow2ban:count:1.2.3.4"
   91:         @cache.store.read(key).must_equal 2
   92        end
   93  
   94        it 'is still banned' do
   95          key = "rack::attack:allow2ban:ban:1.2.3.4"
   96:         @cache.store.read(key).must_equal 1
   97        end
   98      end
   ..
  109        it 'does not increase fail count' do
  110          key = "rack::attack:#{Time.now.to_i/@findtime}:allow2ban:count:1.2.3.4"
  111:         @cache.store.read(key).must_equal 2
  112        end
  113  
  114        it 'is still banned' do
  115          key = "rack::attack:allow2ban:ban:1.2.3.4"
  116:         @cache.store.read(key).must_equal 1
  117        end
  118      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/spec/fail2ban_spec.rb:
    2  describe 'Rack::Attack.Fail2Ban' do
    3    before do
    4:     # Use a long findtime; failures due to cache key rotation less likely
    5:     @cache = Rack::Attack.cache
    6      @findtime = 60
    7      @bantime  = 60
    8:     Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new
    9      @f2b_options = {:bantime => @bantime, :findtime => @findtime, :maxretry => 2}
   10      Rack::Attack.blacklist('pentest') do |req|
   ..
   30          it 'increases fail count' do
   31            key = "rack::attack:#{Time.now.to_i/@findtime}:fail2ban:count:1.2.3.4"
   32:           @cache.store.read(key).must_equal 1
   33          end
   34  
   35          it 'is not banned' do
   36            key = "rack::attack:fail2ban:1.2.3.4"
   37:           @cache.store.read(key).must_be_nil
   38          end
   39        end
   ..
   52          it 'increases fail count' do
   53            key = "rack::attack:#{Time.now.to_i/@findtime}:fail2ban:count:1.2.3.4"
   54:           @cache.store.read(key).must_equal 2
   55          end
   56  
   57          it 'is banned' do
   58            key = "rack::attack:fail2ban:ban:1.2.3.4"
   59:           @cache.store.read(key).must_equal 1
   60          end
   61  
   ..
   89        it 'does not increase fail count' do
   90          key = "rack::attack:#{Time.now.to_i/@findtime}:fail2ban:count:1.2.3.4"
   91:         @cache.store.read(key).must_equal 2
   92        end
   93  
   94        it 'is still banned' do
   95          key = "rack::attack:fail2ban:ban:1.2.3.4"
   96:         @cache.store.read(key).must_equal 1
   97        end
   98      end
   ..
  109        it 'does not increase fail count' do
  110          key = "rack::attack:#{Time.now.to_i/@findtime}:fail2ban:count:1.2.3.4"
  111:         @cache.store.read(key).must_equal 2
  112        end
  113  
  114        it 'is still banned' do
  115          key = "rack::attack:fail2ban:ban:1.2.3.4"
  116:         @cache.store.read(key).must_equal 1
  117        end
  118      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/spec/rack_attack_cache_spec.rb:
    2  
    3  if ENV['TEST_INTEGRATION']
    4:   describe Rack::Attack::Cache do
    5      def delete(key)
    6:       if @cache.store.respond_to?(:delete)
    7:         @cache.store.delete(key)
    8        else
    9:         @cache.store.del(key)
   10        end
   11      end
   12  
   13:     require 'active_support/cache/dalli_store'
   14:     require 'active_support/cache/redis_store'
   15:     cache_stores = [
   16:       ActiveSupport::Cache::MemoryStore.new,
   17:       ActiveSupport::Cache::DalliStore.new("localhost"),
   18:       ActiveSupport::Cache::RedisStore.new("localhost"),
   19        Redis::Store.new
   20      ]
   21  
   22:     cache_stores.each do |store|
   23        store = Rack::Attack::StoreProxy.build(store)
   24        describe "with #{store.class}" do
   25  
   26          before {
   27:           @cache ||= Rack::Attack::Cache.new
   28:           @key = "rack::attack:cache-test-key"
   29            @expires_in = 1
   30:           @cache.store = store
   31            delete(@key)
   32          }
   ..
   36          describe "do_count once" do
   37            it "should be 1" do
   38:             @cache.send(:do_count, @key, @expires_in).must_equal 1
   39            end
   40          end
   ..
   42          describe "do_count twice" do
   43            it "must be 2" do
   44:             @cache.send(:do_count, @key, @expires_in)
   45:             @cache.send(:do_count, @key, @expires_in).must_equal 2
   46            end
   47          end
   48          describe "do_count after expires_in" do
   49            it "must be 1" do
   50:             @cache.send(:do_count, @key, @expires_in)
   51              sleep @expires_in # sigh
   52:             @cache.send(:do_count, @key, @expires_in).must_equal 1
   53            end
   54          end
   ..
   56          describe "write" do
   57            it "should write a value to the store with prefix" do
   58:             @cache.write("cache-test-key", "foobar", 1)
   59              store.read(@key).must_equal "foobar"
   60            end
   ..
   63          describe "write after expiry" do
   64            it "must not have a value" do
   65:             @cache.write("cache-test-key", "foobar", @expires_in)
   66              sleep @expires_in # tick... tick... tick...
   67              store.read(@key).must_be :nil?
   ..
   72            it "must read the value with a prefix" do
   73              store.write(@key, "foobar", :expires_in => @expires_in)
   74:             @cache.read("cache-test-key").must_equal "foobar"
   75            end
   76          end
   ..
   81    end
   82  else
   83:   puts 'Skipping cache store integration tests (set ENV["TEST_INTEGRATION"] to enable)'
   84  end
   85  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-attack-2.3.0/spec/rack_attack_throttle_spec.rb:
    2  describe 'Rack::Attack.throttle' do
    3    before do
    4:     @period = 60 # Use a long period; failures due to cache key rotation less likely
    5:     Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new
    6      Rack::Attack.throttle('ip/sec', :limit => 1, :period => @period) { |req| req.ip }
    7    end
    .
   14      it 'should set the counter for one request' do
   15        key = "rack::attack:#{Time.now.to_i/@period}:ip/sec:1.2.3.4"
   16:       Rack::Attack.cache.store.read(key).must_equal 1
   17      end
   18  
   ..
   42  describe 'Rack::Attack.throttle with limit as proc' do
   43    before do
   44:     @period = 60 # Use a long period; failures due to cache key rotation less likely
   45:     Rack::Attack.cache.store = ActiveSupport::Cache::MemoryStore.new
   46      Rack::Attack.throttle('ip/sec', :limit => lambda {|req| 1}, :period => @period) { |req| req.ip }
   47    end
   ..
   53      it 'should set the counter for one request' do
   54        key = "rack::attack:#{Time.now.to_i/@period}:ip/sec:1.2.3.4"
   55:       Rack::Attack.cache.store.read(key).must_equal 1
   56      end
   57  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/CHANGELOG:
    7    * Supress all '/assets/' in the rails tie (makes debugging easier)
    8    * record_sql was mega buggy
    9:   * added MemcacheStore
   10  
   11  9-July-2012 - Sam

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/html/includes.js:
   45      var fetchTemplates = function (success) {
   46          var key = 'templates',
   47:             cached = load(key);
   48  
   49:         if (cached) {
   50:             $('body').append(cached);
   51              success();
   52          }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/html/jquery.1.7.1.js:
    1  /*! jQuery v1.7.1 jquery.com | jquery.org/license */
    2: (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cv(a){if(!ck[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){cl||(cl=c.createElement("iframe"),cl.frameBorder=cl.width=cl.height=0),b.appendChild(cl);if(!cm||!cl.createElement)cm=(cl.contentWindow||cl.contentDocument).document,cm.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),cm.close();d=cm.createElement(a),cm.body.appendChild(d),e=f.css(d,"display"),b.removeChild(cl)}ck[a]=e}return ck[a]}function cu(a,b){var c={};f.each(cq.concat.apply([],cq.slice(0,b)),function(){c[this]=a});return c}function ct(){cr=b}function cs(){setTimeout(ct,0);return cr=f.now()}function cj(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ci(){try{return new a.XMLHttpRequest}catch(b){}}function cc(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function cb(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function ca(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bE.test(a)?d(a,e):ca(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)ca(a+"["+e+"]",b[e],c,d);else d(a,b)}function b_(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function b$(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bT,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=b$(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=b$(a,c,d,e,"*",g));return l}function bZ(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bP),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bC(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bx:by,g=0,h=e.length;if(d>0){if(c!=="border")for(;g<h;g++)c||(d-=parseFloat(f.css(a,"padding"+e[g]))||0),c==="margin"?d+=parseFloat(f.css(a,c+e[g]))||0:d-=parseFloat(f.css(a,"border"+e[g]+"Width"))||0;return d+"px"}d=bz(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0;if(c)for(;g<h;g++)d+=parseFloat(f.css(a,"padding"+e[g]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+e[g]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+e[g]))||0);return d+"px"}function bp(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c+(i[c][d].namespace?".":"")+i[c][d].namespace,i[c][d],i[c][d].data)}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.1",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?m(g):h==="function"&&(!a.unique||!o.has(g))&&c.push(g)},n=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,l=j||0,j=0,k=c.length;for(;c&&l<k;l++)if(c[l].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}i=!1,c&&(a.once?e===!0?o.disable():c=[]:d&&d.length&&(e=d.shift(),o.fireWith(e[0],e[1])))},o={add:function(){if(c){var a=c.length;m(arguments),i?k=c.length:e&&e!==!0&&(j=a,n(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){i&&f<=k&&(k--,f<=l&&l--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&o.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(i?a.once||d.push([b,c]):(!a.once||!e)&&n(b,c));return this},fire:function(){o.fireWith(this,arguments);return this},fired:function(){return!!e}};return o};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p,q=c.createElement("div"),r=c.documentElement;q.setAttribute("className","t"),q.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=q.getElementsByTagName("*"),e=q.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=q.getElementsByTagName("input")[0],b={leadingWhitespace:q.firstChild.nodeType===3,tbody:!q.getElementsByTagName("tbody").length,htmlSerialize:!!q.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:q.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete q.test}catch(s){b.deleteExpando=!1}!q.addEventListener&&q.attachEvent&&q.fireEvent&&(q.attachEvent("onclick",function(){b.noCloneEvent=!1}),q.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),q.appendChild(i),k=c.createDocumentFragment(),k.appendChild(q.lastChild),b.checkClone=k.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,k.removeChild(i),k.appendChild(q),q.innerHTML="",a.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",q.style.width="2px",q.appendChild(j),b.reliableMarginRight=(parseInt((a.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0);if(q.attachEvent)for(o in{submit:1,change:1,focusin:1})n="on"+o,p=n in q,p||(q.setAttribute(n,"return;"),p=typeof q[n]=="function"),b[o+"Bubbles"]=p;k.removeChild(q),k=g=h=j=q=i=null,f(function(){var a,d,e,g,h,i,j,k,m,n,o,r=c.getElementsByTagName("body")[0];!r||(j=1,k="position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",m="visibility:hidden;border:0;",n="style='"+k+"border:5px solid #000;padding:0;'",o="<div "+n+"><div></div></div>"+"<table "+n+" cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",a=c.createElement("div"),a.style.cssText=m+"width:0;height:0;position:static;top:0;margin-top:"+j+"px",r.insertBefore(a,r.firstChild),q=c.createElement("div"),a.appendChild(q),q.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",l=q.getElementsByTagName("td"),p=l[0].offsetHeight===0,l[0].style.display="",l[1].style.display="none",b.reliableHiddenOffsets=p&&l[0].offsetHeight===0,q.innerHTML="",q.style.width=q.style.paddingLeft="1px",f.boxModel=b.boxModel=q.offsetWidth===2,typeof q.style.zoom!="undefined"&&(q.style.display="inline",q.style.zoom=1,b.inlineBlockNeedsLayout=q.offsetWidth===2,q.style.display="",q.innerHTML="<div style='width:4px;'></div>",b.shrinkWrapBlocks=q.offsetWidth!==2),q.style.cssText=k+m,q.innerHTML=o,d=q.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,i={doesNotAddBorder:e.offsetTop!==5,doesAddBorderForTableAndCells:h.offsetTop===5},e.style.position="fixed",e.style.top="20px",i.fixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",i.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,i.doesNotIncludeMarginInBodyOffset=r.offsetTop!==j,r.removeChild(a),q=a=null,f.extend(b,i))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h=null;if(typeof a=="undefined"){if(this.length){h=f.data(this[0]);if(this[0].nodeType===1&&!f._data(this[0],"parsedAttrs")){e=this[0].attributes;for(var i=0,j=e.length;i<j;i++)g=e[i].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),l(this[0],g,h[g]));f._data(this[0],"parsedAttrs",!0)}}return h}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split("."),d[1]=d[1]?"."+d[1]:"";if(c===b){h=this.triggerHandler("getData"+d[1]+"!",[d[0]]),h===b&&this.length&&(h=f.data(this[0],a),h=l(this[0],a,h));return h===b&&d[1]?this.data(d[0]):h}return this.each(function(){var b=f(this),e=[d[0],c];b.triggerHandler("setData"+d[1]+"!",e),f.data(this,a,c),b.triggerHandler("changeData"+d[1]+"!",e)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise()}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.nodeName.toLowerCase()]||f.valHooks[g.type];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;h<g;h++)e=d[h],e&&(c=f.propFix[e]||e,f.attr(a,e,""),a.removeAttribute(v?e:c),u.test(e)&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/\bhover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};
    3: f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=[],j,k,l,m,n,o,p,q,r,s,t;g[0]=c,c.delegateTarget=this;if(e&&!c.target.disabled&&(!c.button||c.type!=="click")){m=f(this),m.context=this.ownerDocument||this;for(l=c.target;l!=this;l=l.parentNode||this){o={},q=[],m[0]=l;for(j=0;j<e;j++)r=d[j],s=r.selector,o[s]===b&&(o[s]=r.quick?H(l,r.quick):m.is(s)),o[s]&&q.push(r);q.length&&i.push({elem:l,matches:q})}}d.length>e&&i.push({elem:this,matches:d.slice(e)});for(j=0;j<i.length&&!c.isPropagationStopped();j++){p=i[j],c.currentTarget=p.elem;for(k=0;k<p.matches.length&&!c.isImmediatePropagationStopped();k++){r=p.matches[k];if(h||!c.namespace&&!r.namespace||c.namespace_re&&c.namespace_re.test(r.namespace))c.data=r.data,c.handleObj=r,n=((f.event.special[r.origType]||{}).handle||r.handler).apply(p.elem,g),n!==b&&(c.result=n,n===!1&&(c.preventDefault(),c.stopPropagation()))}}return c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0)}),d._submit_attached=!0)})},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on.call(this,a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.type+"."+e.namespace:e.type,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.POS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f.clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function()
    4: {for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bp)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||!bc.test("<"+a.nodeName)?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!_.test(k))k=b.createTextNode(k);else{k=k.replace(Y,"<$1></$2>");var l=(Z.exec(k)||["",""])[1].toLowerCase(),m=bg[l]||bg._default,n=m[0],o=b.createElement("div");b===c?bh.appendChild(o):U(b).appendChild(o),o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=$.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&X.test(k)&&o.insertBefore(b.createTextNode(X.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bn(k[i]);else bn(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||be.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bq=/alpha\([^)]*\)/i,br=/opacity=([^)]*)/,bs=/([A-Z]|^ms)/g,bt=/^-?\d+(?:px)?$/i,bu=/^-?\d/,bv=/^([\-+])=([\-+.\de]+)/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Left","Right"],by=["Top","Bottom"],bz,bA,bB;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bz(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bv.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bz)return bz(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bC(a,b,d);f.swap(a,bw,function(){e=bC(a,b,d)});return e}},set:function(a,b){if(!bt.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return br.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bq,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bq.test(g)?g.replace(bq,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bz(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bA=function(a,b){var c,d,e;b=b.replace(bs,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b)));return c}),c.documentElement.currentStyle&&(bB=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f===null&&g&&(e=g[b])&&(f=e),!bt.test(f)&&bu.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f||0,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),bz=bA||bB,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bD=/%20/g,bE=/\[\]$/,bF=/\r?\n/g,bG=/#.*$/,bH=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bI=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bJ=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bK=/^(?:GET|HEAD)$/,bL=/^\/\//,bM=/\?/,bN=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bO=/^(?:select|textarea)/i,bP=/\s+/,bQ=/([?&])_=[^&]*/,bR=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bS=f.fn.load,bT={},bU={},bV,bW,bX=["*/"]+["*"];try{bV=e.href}catch(bY){bV=c.createElement("a"),bV.href="",bV=bV.href}bW=bR.exec(bV.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bS)return bS.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bN,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bO.test(this.nodeName)||bI.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bF,"\r\n")}}):{name:b.name,value:c.replace(bF,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b_(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b_(a,b);return a},ajaxSettings:{url:bV,isLocal:bJ.test(bW[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bX},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bZ(bT),ajaxTransport:bZ(bU),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?cb(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cc(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bH.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bG,"").replace(bL,bW[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bP),d.crossDomain==null&&(r=bR.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bW[1]&&r[2]==bW[2]&&(r[3]||(r[1]==="http:"?80:443))==(bW[3]||(bW[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),b$(bT,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bK.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bM.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bQ,"$1_="+x);d.url=y+(y===d.url?(bM.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bX+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=b$(bU,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)ca(g,a[g],c,e);return d.join("&").replace(bD,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cd=f.now(),ce=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cd++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ce.test(b.url)||e&&ce.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ce,l),b.url===j&&(e&&(k=k.replace(ce,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cf=a.ActiveXObject?function(){for(var a in ch)ch[a](0,1)}:!1,cg=0,ch;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ci()||cj()}:ci,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cf&&delete ch[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cg,cf&&(ch||(ch={},f(a).unload(cf)),ch[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var ck={},cl,cm,cn=/^(?:toggle|show|hide)$/,co=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cp,cq=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cr;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cu("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cv(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cu("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cu("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cv(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cn.test(h)?(o=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),o?(f._data(this,"toggle"+i,o==="show"?"hide":"show"),j[o]()):j[h]()):(k=co.exec(h),l=j.cur(),k?(m=parseFloat(k[2]),n=k[3]||(f.cssNumber[i]?"":"px"),n!=="px"&&(f.style(this,i,(m||1)+n),l=(m||1)/j.cur()*l,f.style(this,i,l+n)),k[1]&&(m=(k[1]==="-="?-1:1)*m+l),j.custom(l,m,n)):j.custom(l,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:cu("show",1),slideUp:cu("hide",1),slideToggle:cu("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cr||cs(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){e.options.hide&&f._data(e.elem,"fxshow"+e.prop)===b&&f._data(e.elem,"fxshow"+e.prop,e.start)},h()&&f.timers.push(h)&&!cp&&(cp=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cr||cs(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cp),cp=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(["width","height"],function(a,b){f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cy(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.support.fixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.support.fixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cy(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cy(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,d,"padding")):this[d]():null},f.fn["outer"+c]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,d,a?"margin":"border")):this[d]():null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c],h=e.document.body;return e.document.compatMode==="CSS1Compat"&&g||h&&h["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var i=f.css(e,d),j=parseFloat(i);return f.isNumeric(j)?j:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);
    5  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/html/jquery.tmpl.js:
  164  
  165          // Set:
  166:         // Use $.template( name, tmpl ) to cache a named template,
  167          // where tmpl is a template string, a script element or a jQuery instance wrapping a script element, etc.
  168          // Use $( "selector" ).template( name ) to provide access by name to a script block template declaration.
  169  
  170          // Get:
  171:         // Use $.template( name ) to access a cached template.
  172          // Also $( selectorToScriptBlock ).template(), or $.template( null, templateString )
  173          // will return the compiled template, without adding a name reference.
  ...
  184                  }
  185                  if (tmpl.nodeType) {
  186:                     // If this is a template block, use cached copy, or generate tmpl function and cache.
  187                      tmpl = jQuery.data(tmpl, "tmpl") || jQuery.data(tmpl, "tmpl", buildTmplFn(tmpl.innerHTML));
  188                  }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/mini_profiler/custom_timer_struct.rb:
    4    class MiniProfiler
    5  
    6:     # Timing system for a custom timers such as cache, redis, RPC, external API
    7      # calls, etc.
    8      class CustomTimerStruct < TimerStruct

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/mini_profiler/profiler.rb:
   10  require 'mini_profiler/request_timer_struct'
   11  require 'mini_profiler/storage/abstract_store'
   12: require 'mini_profiler/storage/memcache_store'
   13  require 'mini_profiler/storage/memory_store'
   14  require 'mini_profiler/storage/redis_store'
   ..
  148  
  149        begin
  150:         f.cache_control = "max-age:86400"
  151          f.serving env
  152        rescue
  153          # old versions of rack have a different api
  154          status, headers, body = f.serving
  155:         headers.merge! 'Cache-Control' => "max-age:86400"
  156          [status, headers, body]
  157        end
  ...
  368  
  369      def inject_profiler(env,status,headers,body)
  370:       # mini profiler is meddling with stuff, we can not cache cause we will get incorrect data
  371        # Rack::ETag has already inserted some nonesense in the chain
  372        content_type = headers['Content-Type']
  ...
  374        headers.delete('ETag')
  375        headers.delete('Date')
  376:       headers['Cache-Control'] = 'must-revalidate, private, max-age=0'
  377  
  378        # inject header
  ...
  543        end
  544  
  545:       # TODO : cache this snippet
  546        script = IO.read(::File.expand_path('../html/profile_handler.js', ::File.dirname(__FILE__)))
  547        # replace the variables

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/mini_profiler/storage/file_store.rb:
    4  
    5        # Sub-class thread so we have a named thread (useful for debugging in Thread.list).
    6:       class CacheCleanupThread < Thread
    7        end
    8  
    9:       class FileCache
   10          def initialize(path, prefix)
   11            @path = path
   ..
   39          @expires_in_seconds = args[:expires_in] || EXPIRES_IN_SECONDS
   40          raise ArgumentError.new :path unless @path
   41:         @timer_struct_cache = FileCache.new(@path, "mp_timers")
   42          @timer_struct_lock = Mutex.new
   43:         @user_view_cache = FileCache.new(@path, "mp_views")
   44          @user_view_lock = Mutex.new
   45  
   46          me = self
   47:         t = CacheCleanupThread.new do
   48            interval = 10
   49:           cleanup_cache_cycle = 3600
   50            cycle_count = 1
   51  
   ..
   54                # TODO: a sane retry count before bailing
   55  
   56:               # We don't want to hit the filesystem every 10s to clean up the cache so we need to do a bit of
   57                # accounting to avoid sleeping that entire time.  We don't want to sleep for the entire period because
   58                # it means the thread will stay live in hot deployment scenarios, keeping a potentially large memory
   59                # graph from being garbage collected upon undeploy.
   60:               if cycle_count * interval >= cleanup_cache_cycle
   61                  cycle_count = 1
   62:                 me.cleanup_cache
   63                end
   64  
   ..
   78        def save(page_struct)
   79          @timer_struct_lock.synchronize {
   80:           @timer_struct_cache[page_struct['Id']] = page_struct
   81          }
   82        end
   ..
   84        def load(id)
   85          @timer_struct_lock.synchronize {
   86:           @timer_struct_cache[id]
   87          }
   88        end
   ..
   90        def set_unviewed(user, id)
   91          @user_view_lock.synchronize {
   92:           current = @user_view_cache[user]
   93            current = [] unless Array === current
   94            current << id
   95:           @user_view_cache[user] = current.uniq
   96          }
   97        end
   ..
   99        def set_viewed(user, id)
  100          @user_view_lock.synchronize {
  101:           @user_view_cache[user] ||= []
  102:           current = @user_view_cache[user]
  103            current = [] unless Array === current
  104            current.delete(id)
  105:           @user_view_cache[user] = current.uniq
  106          }
  107        end
  ...
  109        def get_unviewed_ids(user)
  110          @user_view_lock.synchronize {
  111:           @user_view_cache[user]
  112          }
  113        end
  114  
  115:       def cleanup_cache
  116          files = Dir.entries(@path)
  117          @timer_struct_lock.synchronize {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/mini_profiler/storage/memcache_store.rb:
    1  module Rack
    2    class MiniProfiler
    3:     class MemcacheStore < AbstractStore
    4  
    5        EXPIRES_IN_SECONDS = 60 * 60 * 24
    .
    9          require 'dalli' unless defined? Dalli
   10          args ||= {}
   11:         @prefix = args[:prefix] || "MPMemcacheStore"
   12          @client = args[:client] || Dalli::Client.new
   13          @expires_in_seconds = args[:expires_in] || EXPIRES_IN_SECONDS

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/mini_profiler/storage/memory_store.rb:
    4  
    5        # Sub-class thread so we have a named thread (useful for debugging in Thread.list).
    6:       class CacheCleanupThread < Thread
    7        end
    8  
    .
   13          @expires_in_seconds = args[:expires_in] || EXPIRES_IN_SECONDS
   14          @timer_struct_lock = Mutex.new
   15:         @timer_struct_cache = {}
   16          @user_view_lock = Mutex.new
   17:         @user_view_cache = {}
   18  
   19          # TODO: fix it to use weak ref, trouble is may be broken in 1.9 so need to use the 'ref' gem
   20          me = self
   21:         t = CacheCleanupThread.new do
   22            interval = 10
   23:           cleanup_cache_cycle = 3600
   24            cycle_count = 1
   25  
   26            until Thread.current[:should_exit] do
   27:             # We don't want to hit the filesystem every 10s to clean up the cache so we need to do a bit of
   28              # accounting to avoid sleeping that entire time.  We don't want to sleep for the entire period because
   29              # it means the thread will stay live in hot deployment scenarios, keeping a potentially large memory
   30              # graph from being garbage collected upon undeploy.
   31:             if cycle_count * interval >= cleanup_cache_cycle
   32                cycle_count = 1
   33:               me.cleanup_cache
   34              end
   35  
   ..
   46        def save(page_struct)
   47          @timer_struct_lock.synchronize {
   48:           @timer_struct_cache[page_struct['Id']] = page_struct
   49          }
   50        end
   ..
   52        def load(id)
   53          @timer_struct_lock.synchronize {
   54:           @timer_struct_cache[id]
   55          }
   56        end
   ..
   58        def set_unviewed(user, id)
   59          @user_view_lock.synchronize {
   60:           @user_view_cache[user] ||= []
   61:           @user_view_cache[user] << id
   62          }
   63        end
   ..
   65        def set_viewed(user, id)
   66          @user_view_lock.synchronize {
   67:           @user_view_cache[user] ||= []
   68:           @user_view_cache[user].delete(id)
   69          }
   70        end
   ..
   72        def get_unviewed_ids(user)
   73          @user_view_lock.synchronize {
   74:           @user_view_cache[user]
   75          }
   76        end
   77  
   78:       def cleanup_cache
   79          expire_older_than = ((Time.now.to_f - @expires_in_seconds) * 1000).to_i
   80          @timer_struct_lock.synchronize {
   81:           @timer_struct_cache.delete_if { |k, v| v['Started'] < expire_older_than }
   82          }
   83        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/lib/patches/sql_patches.rb:
   98      def prepare(*args,&blk)
   99        # we have no choice but to do this here,
  100:       # if we do the check for profiling first, our cache may miss critical stuff
  101  
  102        @prepare_map ||= {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mini-profiler-0.9.0/README.md:
   74  rack-mini-profiler stores it's results so they can be shared later and aren't lost at the end of the request.
   75  
   76: There are 4 storage options: `MemoryStore`, `RedisStore`, `MemcacheStore`, and `FileStore`.
   77  
   78  `FileStore` is the default in Rails environments and will write files to `tmp/miniprofiler/*`.  `MemoryStore` is the default otherwise.
   ..
   94  MemoryStore stores results in a processes heap - something that does not work well in a multi process environment.
   95  FileStore stores results in the file system - something that may not work well in a multi machine environment.
   96: RedisStore/MemcacheStore work in multi process and multi machine environments (RedisStore only saves results for up to 24 hours so it won't continue to fill up Redis).
   97  
   98  Additionally you may implement an AbstractStore for your own provider.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mount-0.8.3/lib/rack/mount/analysis/histogram.rb:
    7          @count = 0
    8          super(0)
    9:         expire_caches!
   10        end
   11  
   ..
   13          @count += 1
   14          self[value] += 1 if value
   15:         expire_caches!
   16          self
   17        end
   ..
   66          end
   67  
   68:         def expire_caches!
   69            @max = @min = @mean = @standard_deviation = nil
   70            @keys_in_upper_quartile = nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mount-0.8.3/lib/rack/mount/analysis/splitting.rb:
   14          end
   15  
   16:         def call(cache, obj)
   17:           (cache[method] ||= self.class.split(obj.send(method), separators))[index]
   18          end
   19  
   20:         def call_source(cache, obj)
   21:           "(#{cache}[:#{method}] ||= Analysis::Splitting::Key.split(#{obj}.#{method}, #{separators.inspect}))[#{index}]"
   22          end
   23  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mount-0.8.3/lib/rack/mount/code_generation.rb:
   72          Utils.debug "optimizing recognize"
   73  
   74:         uses_cache = false
   75  
   76          keys = @recognition_keys.map { |key|
   77            if key.respond_to?(:call_source)
   78:             uses_cache = true
   79:             key.call_source(:cache, :obj)
   80            else
   81              "obj.#{key}"
   ..
   89          instance_eval(<<-RUBY, __FILE__, __LINE__)
   90            def recognize(obj)
   91:             #{"cache = {}" if uses_cache}
   92              container = @recognition_graph[#{keys}]
   93              optimize_container_iterator(container) unless container.respond_to?(:optimized_each)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mount-0.8.3/lib/rack/mount/route_set.rb:
   81        raise 'route set not finalized' unless @recognition_graph
   82  
   83:       cache = {}
   84        keys = @recognition_keys.map { |key|
   85          if key.respond_to?(:call)
   86:           key.call(cache, obj)
   87          else
   88            obj.send(key)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-mount-0.8.3/lib/rack/mount/utils.rb:
  127  
  128      def parse_regexp(regexp)
  129:       cache = @@_parse_regexp_cache ||= {}
  130  
  131:       if expression = cache[regexp]
  132          return expression
  133        end
  ...
  153        end
  154  
  155:       cache[regexp] = expression.freeze
  156        expression
  157      rescue Racc::ParseError, Regin::Parser::ScanError

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rack-protection-1.5.1/spec/escaped_params_spec.rb:
   32      end
   33  
   34:     it 'leaves cache-breaker params untouched' do
   35        mock_app do |env|
   36          request = Rack::Request.new(env)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/assets/javascripts/jquery.min.js:
    1  /*! jQuery v1.7.2 jquery.com | jquery.org/license */
    2: (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ck||(ck=c.createElement("iframe"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?"<!doctype html>":"")+"<html><body>"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function ca(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function b_(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bD.test(a)?d(a,e):b_(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&f.type(b)==="object")for(var e in b)b_(a+"["+e+"]",b[e],c,d);else d(a,b)}function b$(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function bZ(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bS,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bZ(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bZ(a,c,d,e,"*",g));return l}function bY(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bO),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bB(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?1:0,g=4;if(d>0){if(c!=="border")for(;e<g;e+=2)c||(d-=parseFloat(f.css(a,"padding"+bx[e]))||0),c==="margin"?d+=parseFloat(f.css(a,c+bx[e]))||0:d-=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0;return d+"px"}d=by(a,b);if(d<0||d==null)d=a.style[b];if(bt.test(d))return d;d=parseFloat(d)||0;if(c)for(;e<g;e+=2)d+=parseFloat(f.css(a,"padding"+bx[e]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+bx[e]))||0);return d+"px"}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;b.nodeType===1&&(b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?b.outerHTML=a.outerHTML:c!=="input"||a.type!=="checkbox"&&a.type!=="radio"?c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text):(a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value)),b.removeAttribute(f.expando),b.removeAttribute("_submit_attached"),b.removeAttribute("_change_attached"))}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c,i[c][d])}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?+d:j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){if(typeof c!="string"||!c)return null;var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h,i){var j,k=d==null,l=0,m=a.length;if(d&&typeof d=="object"){for(l in d)e.access(a,c,l,d[l],1,h,f);g=1}else if(f!==b){j=i===b&&e.isFunction(f),k&&(j?(j=c,c=function(a,b,c){return j.call(e(a),c)}):(c.call(a,f),c=null));if(c)for(;l<m;l++)c(a[l],d,j?f.call(a[l],l,c(a[l],d)):f,i);g=1}return g?a:k?c.call(a):m?c(a[0],d):h},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m,n=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?n(g):h==="function"&&(!a.unique||!p.has(g))&&c.push(g)},o=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,j=!0,m=k||0,k=0,l=c.length;for(;c&&m<l;m++)if(c[m].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}j=!1,c&&(a.once?e===!0?p.disable():c=[]:d&&d.length&&(e=d.shift(),p.fireWith(e[0],e[1])))},p={add:function(){if(c){var a=c.length;n(arguments),j?l=c.length:e&&e!==!0&&(k=a,o(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){j&&f<=l&&(l--,f<=m&&m--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&p.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(j?a.once||d.push([b,c]):(!a.once||!e)&&o(b,c));return this},fire:function(){p.fireWith(this,arguments);return this},fired:function(){return!!i}};return p};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p=c.createElement("div"),q=c.documentElement;p.setAttribute("className","t"),p.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=p.getElementsByTagName("*"),e=p.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=p.getElementsByTagName("input")[0],b={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:p.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,pixelMargin:!0},f.boxModel=b.boxModel=c.compatMode==="CSS1Compat",i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete p.test}catch(r){b.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",function(){b.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),i.setAttribute("name","t"),p.appendChild(i),j=c.createDocumentFragment(),j.appendChild(p.lastChild),b.checkClone=j.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,j.removeChild(i),j.appendChild(p);if(p.attachEvent)for(n in{submit:1,change:1,focusin:1})m="on"+n,o=m in p,o||(p.setAttribute(m,"return;"),o=typeof p[m]=="function"),b[n+"Bubbles"]=o;j.removeChild(p),j=g=h=p=i=null,f(function(){var d,e,g,h,i,j,l,m,n,q,r,s,t,u=c.getElementsByTagName("body")[0];!u||(m=1,t="padding:0;margin:0;border:",r="position:absolute;top:0;left:0;width:1px;height:1px;",s=t+"0;visibility:hidden;",n="style='"+r+t+"5px solid #000;",q="<div "+n+"display:block;'><div style='"+t+"0;display:block;overflow:hidden;'></div></div>"+"<table "+n+"' cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",d=c.createElement("div"),d.style.cssText=s+"width:0;height:0;position:static;top:0;margin-top:"+m+"px",u.insertBefore(d,u.firstChild),p=c.createElement("div"),d.appendChild(p),p.innerHTML="<table><tr><td style='"+t+"0;display:none'></td><td>t</td></tr></table>",k=p.getElementsByTagName("td"),o=k[0].offsetHeight===0,k[0].style.display="",k[1].style.display="none",b.reliableHiddenOffsets=o&&k[0].offsetHeight===0,a.getComputedStyle&&(p.innerHTML="",l=c.createElement("div"),l.style.width="0",l.style.marginRight="0",p.style.width="2px",p.appendChild(l),b.reliableMarginRight=(parseInt((a.getComputedStyle(l,null)||{marginRight:0}).marginRight,10)||0)===0),typeof p.style.zoom!="undefined"&&(p.innerHTML="",p.style.width=p.style.padding="1px",p.style.border=0,p.style.overflow="hidden",p.style.display="inline",p.style.zoom=1,b.inlineBlockNeedsLayout=p.offsetWidth===3,p.style.display="block",p.style.overflow="visible",p.innerHTML="<div style='width:5px;'></div>",b.shrinkWrapBlocks=p.offsetWidth!==3),p.style.cssText=r+s,p.innerHTML=q,e=p.firstChild,g=e.firstChild,i=e.nextSibling.firstChild.firstChild,j={doesNotAddBorder:g.offsetTop!==5,doesAddBorderForTableAndCells:i.offsetTop===5},g.style.position="fixed",g.style.top="20px",j.fixedPosition=g.offsetTop===20||g.offsetTop===15,g.style.position=g.style.top="",e.style.overflow="hidden",e.style.position="relative",j.subtractsBorderForOverflowNotVisible=g.offsetTop===-5,j.doesNotIncludeMarginInBodyOffset=u.offsetTop!==m,a.getComputedStyle&&(p.style.marginTop="1%",b.pixelMargin=(a.getComputedStyle(p,null)||{marginTop:0}).marginTop!=="1%"),typeof d.style.zoom!="undefined"&&(d.style.zoom=1),u.removeChild(d),l=p=d=null,f.extend(b,j))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h,i,j=this[0],k=0,m=null;if(a===b){if(this.length){m=f.data(j);if(j.nodeType===1&&!f._data(j,"parsedAttrs")){g=j.attributes;for(i=g.length;k<i;k++)h=g[k].name,h.indexOf("data-")===0&&(h=f.camelCase(h.substring(5)),l(j,h,m[h]));f._data(j,"parsedAttrs",!0)}}return m}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!";return f.access(this,function(c){if(c===b){m=this.triggerHandler("getData"+e,[d[0]]),m===b&&j&&(m=f.data(j,a),m=l(j,a,m));return m===b&&d[1]?this.data(d[0]):m}d[1]=c,this.each(function(){var b=f(this);b.triggerHandler("setData"+e,d),f.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1)},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){var d=2;typeof a!="string"&&(c=a,a="fx",d--);if(arguments.length<d)return f.queue(this[0],a);return c===b?this:this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise(c)}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,f.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,f.prop,a,b,arguments.length>1)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.type]||f.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.type]||f.valHooks[g.nodeName.toLowerCase()];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h,i=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;i<g;i++)e=d[i],e&&(c=f.propFix[e]||e,h=u.test(e),h||f.attr(a,e,""),a.removeAttribute(v?e:c),h&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0,coords:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/(?:^|\s)hover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(
    3: a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler,g=p.selector),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:g&&G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=f.event.special[c.type]||{},j=[],k,l,m,n,o,p,q,r,s,t,u;g[0]=c,c.delegateTarget=this;if(!i.preDispatch||i.preDispatch.call(this,c)!==!1){if(e&&(!c.button||c.type!=="click")){n=f(this),n.context=this.ownerDocument||this;for(m=c.target;m!=this;m=m.parentNode||this)if(m.disabled!==!0){p={},r=[],n[0]=m;for(k=0;k<e;k++)s=d[k],t=s.selector,p[t]===b&&(p[t]=s.quick?H(m,s.quick):n.is(t)),p[t]&&r.push(s);r.length&&j.push({elem:m,matches:r})}}d.length>e&&j.push({elem:this,matches:d.slice(e)});for(k=0;k<j.length&&!c.isPropagationStopped();k++){q=j[k],c.currentTarget=q.elem;for(l=0;l<q.matches.length&&!c.isImmediatePropagationStopped();l++){s=q.matches[l];if(h||!c.namespace&&!s.namespace||c.namespace_re&&c.namespace_re.test(s.namespace))c.data=s.data,c.handleObj=s,o=((f.event.special[s.origType]||{}).handle||s.handler).apply(q.elem,g),o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()))}}i.postDispatch&&i.postDispatch.call(this,c);return c.result}},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),d._submit_attached=!0)})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9||d===11){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));o.match.globalPOS=p;var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.globalPOS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")[\\s/>]","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){return f.access(this,function(a){return a===b?f.text(this):this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f
    4: .clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){return f.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(f.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(g){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,function(a,b){b.src?f.ajax({type:"GET",global:!1,url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||f.isXMLDoc(a)||!bc.test("<"+a.nodeName+">")?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g,h,i,j=[];b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);for(var k=0,l;(l=a[k])!=null;k++){typeof l=="number"&&(l+="");if(!l)continue;if(typeof l=="string")if(!_.test(l))l=b.createTextNode(l);else{l=l.replace(Y,"<$1></$2>");var m=(Z.exec(l)||["",""])[1].toLowerCase(),n=bg[m]||bg._default,o=n[0],p=b.createElement("div"),q=bh.childNodes,r;b===c?bh.appendChild(p):U(b).appendChild(p),p.innerHTML=n[1]+l+n[2];while(o--)p=p.lastChild;if(!f.support.tbody){var s=$.test(l),t=m==="table"&&!s?p.firstChild&&p.firstChild.childNodes:n[1]==="<table>"&&!s?p.childNodes:[];for(i=t.length-1;i>=0;--i)f.nodeName(t[i],"tbody")&&!t[i].childNodes.length&&t[i].parentNode.removeChild(t[i])}!f.support.leadingWhitespace&&X.test(l)&&p.insertBefore(b.createTextNode(X.exec(l)[0]),p.firstChild),l=p.childNodes,p&&(p.parentNode.removeChild(p),q.length>0&&(r=q[q.length-1],r&&r.parentNode&&r.parentNode.removeChild(r)))}var u;if(!f.support.appendChecked)if(l[0]&&typeof (u=l.length)=="number")for(i=0;i<u;i++)bn(l[i]);else bn(l);l.nodeType?j.push(l):j=f.merge(j,l)}if(d){g=function(a){return!a.type||be.test(a.type)};for(k=0;j[k];k++){h=j[k];if(e&&f.nodeName(h,"script")&&(!h.type||be.test(h.type)))e.push(h.parentNode?h.parentNode.removeChild(h):h);else{if(h.nodeType===1){var v=f.grep(h.getElementsByTagName("script"),g);j.splice.apply(j,[k+1,0].concat(v))}d.appendChild(h)}}}return j},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bp=/alpha\([^)]*\)/i,bq=/opacity=([^)]*)/,br=/([A-Z]|^ms)/g,bs=/^[\-+]?(?:\d*\.)?\d+$/i,bt=/^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,bu=/^([\-+])=([\-+.\de]+)/,bv=/^margin/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Top","Right","Bottom","Left"],by,bz,bA;f.fn.css=function(a,c){return f.access(this,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)},a,c,arguments.length>1)},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=by(a,"opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bu.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(by)return by(a,c)},swap:function(a,b,c){var d={},e,f;for(f in b)d[f]=a.style[f],a.style[f]=b[f];e=c.call(a);for(f in b)a.style[f]=d[f];return e}}),f.curCSS=f.css,c.defaultView&&c.defaultView.getComputedStyle&&(bz=function(a,b){var c,d,e,g,h=a.style;b=b.replace(br,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b))),!f.support.pixelMargin&&e&&bv.test(b)&&bt.test(c)&&(g=h.width,h.width=c,c=e.width,h.width=g);return c}),c.documentElement.currentStyle&&(bA=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f==null&&g&&(e=g[b])&&(f=e),bt.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),by=bz||bA,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth!==0?bB(a,b,d):f.swap(a,bw,function(){return bB(a,b,d)})},set:function(a,b){return bs.test(b)?b+"px":b}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bq.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bp,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bp.test(g)?g.replace(bp,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){return f.swap(a,{display:"inline-block"},function(){return b?by(a,"margin-right"):a.style.marginRight})}})}),f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)}),f.each({margin:"",padding:"",border:"Width"},function(a,b){f.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bx[d]+b]=e[d]||e[d-2]||e[0];return f}}});var bC=/%20/g,bD=/\[\]$/,bE=/\r?\n/g,bF=/#.*$/,bG=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bH=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bI=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bJ=/^(?:GET|HEAD)$/,bK=/^\/\//,bL=/\?/,bM=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bN=/^(?:select|textarea)/i,bO=/\s+/,bP=/([?&])_=[^&]*/,bQ=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bR=f.fn.load,bS={},bT={},bU,bV,bW=["*/"]+["*"];try{bU=e.href}catch(bX){bU=c.createElement("a"),bU.href="",bU=bU.href}bV=bQ.exec(bU.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bR)return bR.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bM,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bN.test(this.nodeName)||bH.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bE,"\r\n")}}):{name:b.name,value:c.replace(bE,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b$(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b$(a,b);return a},ajaxSettings:{url:bU,isLocal:bI.test(bV[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bW},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bY(bS),ajaxTransport:bY(bT),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?ca(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cb(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bG.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bF,"").replace(bK,bV[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bO),d.crossDomain==null&&(r=bQ.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bV[1]&&r[2]==bV[2]&&(r[3]||(r[1]==="http:"?80:443))==(bV[3]||(bV[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bZ(bS,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bJ.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bL.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bP,"$1_="+x);d.url=y+(y===d.url?(bL.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bW+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bZ(bT,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)b_(g,a[g],c,e);return d.join("&").replace(bC,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cc=f.now(),cd=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cc++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=typeof b.data=="string"&&/^application\/x\-www\-form\-urlencoded/.test(b.contentType);if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(cd.test(b.url)||e&&cd.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(cd,l),b.url===j&&(e&&(k=k.replace(cd,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var ce=a.ActiveXObject?function(){for(var a in cg)cg[a](0,1)}:!1,cf=0,cg;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ch()||ci()}:ch,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,ce&&delete cg[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n);try{m.text=h.responseText}catch(a){}try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cf,ce&&(cg||(cg={},f(a).unload(ce)),cg[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cj={},ck,cl,cm=/^(?:toggle|show|hide)$/,cn=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,co,cp=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cq;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(ct("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),(e===""&&f.css(d,"display")==="none"||!f.contains(d.ownerDocument.documentElement,d))&&f._data(d,"olddisplay",cu(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ct("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(ct("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o,p,q;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]);if((k=f.cssHooks[g])&&"expand"in k){l=k.expand(a[g]),delete a[g];for(i in l)i in a||(a[i]=l[i])}}for(g in a){h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cu(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cm.test(h)?(q=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),q?(f._data(this,"toggle"+i,q==="show"?"hide":"show"),j[q]()):j[h]()):(m=cn.exec(h),n=j.cur(),m?(o=parseFloat(m[2]),p=m[3]||(f.cssNumber[i]?"":"px"),p!=="px"&&(f.style(this,i,(o||1)+p),n=(o||1)/j.cur()*n,f.style(this,i,n+p)),m[1]&&(o=(m[1]==="-="?-1:1)*o+n),j.custom(n,o,p)):j.custom(n,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:ct("show",1),slideUp:ct("hide",1),slideToggle:ct("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a){return a},swing:function(a){return-Math.cos(a*Math.PI)/2+.5}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cq||cr(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){f._data(e.elem,"fxshow"+e.prop)===b&&(e.options.hide?f._data(e.elem,"fxshow"+e.prop,e.start):e.options.show&&f._data(e.elem,"fxshow"+e.prop,e.end))},h()&&f.timers.push(h)&&!co&&(co=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cq||cr(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(co),co=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(cp.concat.apply([],cp),function(a,b){b.indexOf("margin")&&(f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)})}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cv,cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?cv=function(a,b,c,d){try{d=a.getBoundingClientRect()}catch(e){}if(!d||!f.contains(c,a))return d?{top:d.top,left:d.left}:{top:0,left:0};var g=b.body,h=cy(b),i=c.clientTop||g.clientTop||0,j=c.clientLeft||g.clientLeft||0,k=h.pageYOffset||f.support.boxModel&&c.scrollTop||g.scrollTop,l=h.pageXOffset||f.support.boxModel&&c.scrollLeft||g.scrollLeft,m=d.top+k-i,n=d.left+l-j;return{top:m,left:n}}:cv=function(a,b,c){var d,e=a.offsetParent,g=a,h=b.body,i=b.defaultView,j=i?i.getComputedStyle(a,null):a.currentStyle,k=a.offsetTop,l=a.offsetLeft;while((a=a.parentNode)&&a!==h&&a!==c){if(f.support.fixedPosition&&j.position==="fixed")break;d=i?i.getComputedStyle(a,null):a.currentStyle,k-=a.scrollTop,l-=a.scrollLeft,a===e&&(k+=a.offsetTop,l+=a.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(a.nodeName))&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),g=e,e=a.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&d.overflow!=="visible"&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),j=d}if(j.position==="relative"||j.position==="static")k+=h.offsetTop,l+=h.offsetLeft;f.support.fixedPosition&&j.position==="fixed"&&(k+=Math.max(c.scrollTop,h.scrollTop),l+=Math.max(c.scrollLeft,h.scrollLeft));return{top:k,left:l}},f.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){f.offset.setOffset(this,a,b)});var c=this[0],d=c&&c.ownerDocument;if(!d)return null;if(c===d.body)return f.offset.bodyOffset(c);return cv(c,d,d.documentElement)},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);f.fn[a]=function(e){return f.access(this,function(a,e,g){var h=cy(a);if(g===b)return h?c in h?h[c]:f.support.boxModel&&h.document.documentElement[e]||h.document.body[e]:a[e];h?h.scrollTo(d?f(h).scrollLeft():g,d?g:f(h).scrollTop()):a[e]=g},a,e,arguments.length,null)}}),f.each({Height:"height",Width:"width"},function(a,c){var d="client"+a,e="scroll"+a,g="offset"+a;f.fn["inner"+a]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,c,"padding")):this[c]():null},f.fn["outer"+a]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,c,a?"margin":"border")):this[c]():null},f.fn[c]=function(a){return f.access(this,function(a,c,h){var i,j,k,l;if(f.isWindow(a)){i=a.document,j=i.documentElement[d];return f.support.boxModel&&j||i.body&&i.body[d]||j}if(a.nodeType===9){i=a.documentElement;if(i[d]>=i[e])return i[d];return Math.max(a.body[e],i[e],a.body[g],i[g])}if(h===b){k=f.css(a,c),l=parseFloat(k);return f.isNumeric(l)?l:k}f(a).css(c,h)},c,a,arguments.length,null)}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/assets/javascripts/syntaxhighlighter/shBrushColdFusion.js:
   63  						'XmlValidate Year YesNoFormat';
   64  
   65: 		var keywords =	'cfabort cfajaximport cfajaxproxy cfapplet cfapplication cfargument cfassociate cfbreak cfcache cfcalendar ' + 
   66  						'cfcase cfcatch cfchart cfchartdata cfchartseries cfcol cfcollection cfcomponent cfcontent cfcookie cfdbinfo ' + 
   67  						'cfdefaultcase cfdirectory cfdiv cfdocument cfdocumentitem cfdocumentsection cfdump cfelse cfelseif cferror ' + 
   ..
   71  						'cfinput cfinsert cfinterface cfinvoke cfinvokeargument cflayout cflayoutarea cfldap cflocation cflock cflog ' + 
   72  						'cflogin cfloginuser cflogout cfloop cfmail cfmailparam cfmailpart cfmenu cfmenuitem cfmodule cfNTauthenticate ' + 
   73: 						'cfobject cfobjectcache cfoutput cfparam cfpdf cfpdfform cfpdfformparam cfpdfparam cfpdfsubform cfpod cfpop ' + 
   74  						'cfpresentation cfpresentationslide cfpresenter cfprint cfprocessingdirective cfprocparam cfprocresult ' + 
   75  						'cfproperty cfquery cfqueryparam cfregistry cfreport cfreportparam cfrethrow cfreturn cfsavecontent cfschedule ' + 

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/assets/javascripts/syntaxhighlighter/shCore.js:
   15   * Dual licensed under the MIT and GPL licenses.
   16   */
   17: eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('K M;I(M)1S 2U("2a\'t 4k M 4K 2g 3l 4G 4H");(6(){6 r(f,e){I(!M.1R(f))1S 3m("3s 15 4R");K a=f.1w;f=M(f.1m,t(f)+(e||""));I(a)f.1w={1m:a.1m,19:a.19?a.19.1a(0):N};H f}6 t(f){H(f.1J?"g":"")+(f.4s?"i":"")+(f.4p?"m":"")+(f.4v?"x":"")+(f.3n?"y":"")}6 B(f,e,a,b){K c=u.L,d,h,g;v=R;5K{O(;c--;){g=u[c];I(a&g.3r&&(!g.2p||g.2p.W(b))){g.2q.12=e;I((h=g.2q.X(f))&&h.P===e){d={3k:g.2b.W(b,h,a),1C:h};1N}}}}5v(i){1S i}5q{v=11}H d}6 p(f,e,a){I(3b.Z.1i)H f.1i(e,a);O(a=a||0;a<f.L;a++)I(f[a]===e)H a;H-1}M=6(f,e){K a=[],b=M.1B,c=0,d,h;I(M.1R(f)){I(e!==1d)1S 3m("2a\'t 5r 5I 5F 5B 5C 15 5E 5p");H r(f)}I(v)1S 2U("2a\'t W 3l M 59 5m 5g 5x 5i");e=e||"";O(d={2N:11,19:[],2K:6(g){H e.1i(g)>-1},3d:6(g){e+=g}};c<f.L;)I(h=B(f,c,b,d)){a.U(h.3k);c+=h.1C[0].L||1}Y I(h=n.X.W(z[b],f.1a(c))){a.U(h[0]);c+=h[0].L}Y{h=f.3a(c);I(h==="[")b=M.2I;Y I(h==="]")b=M.1B;a.U(h);c++}a=15(a.1K(""),n.Q.W(e,w,""));a.1w={1m:f,19:d.2N?d.19:N};H a};M.3v="1.5.0";M.2I=1;M.1B=2;K C=/\\$(?:(\\d\\d?|[$&`\'])|{([$\\w]+)})/g,w=/[^5h]+|([\\s\\S])(?=[\\s\\S]*\\1)/g,A=/^(?:[?*+]|{\\d+(?:,\\d*)?})\\??/,v=11,u=[],n={X:15.Z.X,1A:15.Z.1A,1C:1r.Z.1C,Q:1r.Z.Q,1e:1r.Z.1e},x=n.X.W(/()??/,"")[1]===1d,D=6(){K f=/^/g;n.1A.W(f,"");H!f.12}(),y=6(){K f=/x/g;n.Q.W("x",f,"");H!f.12}(),E=15.Z.3n!==1d,z={};z[M.2I]=/^(?:\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\29-26-f]{2}|u[\\29-26-f]{4}|c[A-3o-z]|[\\s\\S]))/;z[M.1B]=/^(?:\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\29-26-f]{2}|u[\\29-26-f]{4}|c[A-3o-z]|[\\s\\S])|\\(\\?[:=!]|[?*+]\\?|{\\d+(?:,\\d*)?}\\??)/;M.1h=6(f,e,a,b){u.U({2q:r(f,"g"+(E?"y":"")),2b:e,3r:a||M.1B,2p:b||N})};M.2n=6(f,e){K a=f+"/"+(e||"");H M.2n[a]||(M.2n[a]=M(f,e))};M.3c=6(f){H r(f,"g")};M.5l=6(f){H f.Q(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,"\\\\$&")};M.5e=6(f,e,a,b){e=r(e,"g"+(b&&E?"y":""));e.12=a=a||0;f=e.X(f);H b?f&&f.P===a?f:N:f};M.3q=6(){M.1h=6(){1S 2U("2a\'t 55 1h 54 3q")}};M.1R=6(f){H 53.Z.1q.W(f)==="[2m 15]"};M.3p=6(f,e,a,b){O(K c=r(e,"g"),d=-1,h;h=c.X(f);){a.W(b,h,++d,f,c);c.12===h.P&&c.12++}I(e.1J)e.12=0};M.57=6(f,e){H 6 a(b,c){K d=e[c].1I?e[c]:{1I:e[c]},h=r(d.1I,"g"),g=[],i;O(i=0;i<b.L;i++)M.3p(b[i],h,6(k){g.U(d.3j?k[d.3j]||"":k[0])});H c===e.L-1||!g.L?g:a(g,c+1)}([f],0)};15.Z.1p=6(f,e){H J.X(e[0])};15.Z.W=6(f,e){H J.X(e)};15.Z.X=6(f){K e=n.X.1p(J,14),a;I(e){I(!x&&e.L>1&&p(e,"")>-1){a=15(J.1m,n.Q.W(t(J),"g",""));n.Q.W(f.1a(e.P),a,6(){O(K c=1;c<14.L-2;c++)I(14[c]===1d)e[c]=1d})}I(J.1w&&J.1w.19)O(K b=1;b<e.L;b++)I(a=J.1w.19[b-1])e[a]=e[b];!D&&J.1J&&!e[0].L&&J.12>e.P&&J.12--}H e};I(!D)15.Z.1A=6(f){(f=n.X.W(J,f))&&J.1J&&!f[0].L&&J.12>f.P&&J.12--;H!!f};1r.Z.1C=6(f){M.1R(f)||(f=15(f));I(f.1J){K e=n.1C.1p(J,14);f.12=0;H e}H f.X(J)};1r.Z.Q=6(f,e){K a=M.1R(f),b,c;I(a&&1j e.58()==="3f"&&e.1i("${")===-1&&y)H n.Q.1p(J,14);I(a){I(f.1w)b=f.1w.19}Y f+="";I(1j e==="6")c=n.Q.W(J,f,6(){I(b){14[0]=1f 1r(14[0]);O(K d=0;d<b.L;d++)I(b[d])14[0][b[d]]=14[d+1]}I(a&&f.1J)f.12=14[14.L-2]+14[0].L;H e.1p(N,14)});Y{c=J+"";c=n.Q.W(c,f,6(){K d=14;H n.Q.W(e,C,6(h,g,i){I(g)5b(g){24"$":H"$";24"&":H d[0];24"`":H d[d.L-1].1a(0,d[d.L-2]);24"\'":H d[d.L-1].1a(d[d.L-2]+d[0].L);5a:i="";g=+g;I(!g)H h;O(;g>d.L-3;){i=1r.Z.1a.W(g,-1)+i;g=1Q.3i(g/10)}H(g?d[g]||"":"$")+i}Y{g=+i;I(g<=d.L-3)H d[g];g=b?p(b,i):-1;H g>-1?d[g+1]:h}})})}I(a&&f.1J)f.12=0;H c};1r.Z.1e=6(f,e){I(!M.1R(f))H n.1e.1p(J,14);K a=J+"",b=[],c=0,d,h;I(e===1d||+e<0)e=5D;Y{e=1Q.3i(+e);I(!e)H[]}O(f=M.3c(f);d=f.X(a);){I(f.12>c){b.U(a.1a(c,d.P));d.L>1&&d.P<a.L&&3b.Z.U.1p(b,d.1a(1));h=d[0].L;c=f.12;I(b.L>=e)1N}f.12===d.P&&f.12++}I(c===a.L){I(!n.1A.W(f,"")||h)b.U("")}Y b.U(a.1a(c));H b.L>e?b.1a(0,e):b};M.1h(/\\(\\?#[^)]*\\)/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"});M.1h(/\\((?!\\?)/,6(){J.19.U(N);H"("});M.1h(/\\(\\?<([$\\w]+)>/,6(f){J.19.U(f[1]);J.2N=R;H"("});M.1h(/\\\\k<([\\w$]+)>/,6(f){K e=p(J.19,f[1]);H e>-1?"\\\\"+(e+1)+(3R(f.2S.3a(f.P+f[0].L))?"":"(?:)"):f[0]});M.1h(/\\[\\^?]/,6(f){H f[0]==="[]"?"\\\\b\\\\B":"[\\\\s\\\\S]"});M.1h(/^\\(\\?([5A]+)\\)/,6(f){J.3d(f[1]);H""});M.1h(/(?:\\s+|#.*)+/,6(f){H n.1A.W(A,f.2S.1a(f.P+f[0].L))?"":"(?:)"},M.1B,6(){H J.2K("x")});M.1h(/\\./,6(){H"[\\\\s\\\\S]"},M.1B,6(){H J.2K("s")})})();1j 2e!="1d"&&(2e.M=M);K 1v=6(){6 r(a,b){a.1l.1i(b)!=-1||(a.1l+=" "+b)}6 t(a){H a.1i("3e")==0?a:"3e"+a}6 B(a){H e.1Y.2A[t(a)]}6 p(a,b,c){I(a==N)H N;K d=c!=R?a.3G:[a.2G],h={"#":"1c",".":"1l"}[b.1o(0,1)]||"3h",g,i;g=h!="3h"?b.1o(1):b.5u();I((a[h]||"").1i(g)!=-1)H a;O(a=0;d&&a<d.L&&i==N;a++)i=p(d[a],b,c);H i}6 C(a,b){K c={},d;O(d 2g a)c[d]=a[d];O(d 2g b)c[d]=b[d];H c}6 w(a,b,c,d){6 h(g){g=g||1P.5y;I(!g.1F){g.1F=g.52;g.3N=6(){J.5w=11}}c.W(d||1P,g)}a.3g?a.3g("4U"+b,h):a.4y(b,h,11)}6 A(a,b){K c=e.1Y.2j,d=N;I(c==N){c={};O(K h 2g e.1U){K g=e.1U[h];d=g.4x;I(d!=N){g.1V=h.4w();O(g=0;g<d.L;g++)c[d[g]]=h}}e.1Y.2j=c}d=e.1U[c[a]];d==N&&b!=11&&1P.1X(e.13.1x.1X+(e.13.1x.3E+a));H d}6 v(a,b){O(K c=a.1e("\\n"),d=0;d<c.L;d++)c[d]=b(c[d],d);H c.1K("\\n")}6 u(a,b){I(a==N||a.L==0||a=="\\n")H a;a=a.Q(/</g,"&1y;");a=a.Q(/ {2,}/g,6(c){O(K d="",h=0;h<c.L-1;h++)d+=e.13.1W;H d+" "});I(b!=N)a=v(a,6(c){I(c.L==0)H"";K d="";c=c.Q(/^(&2s;| )+/,6(h){d=h;H""});I(c.L==0)H d;H d+\'<17 1g="\'+b+\'">\'+c+"</17>"});H a}6 n(a,b){a.1e("\\n");O(K c="",d=0;d<50;d++)c+="                    ";H a=v(a,6(h){I(h.1i("\\t")==-1)H h;O(K g=0;(g=h.1i("\\t"))!=-1;)h=h.1o(0,g)+c.1o(0,b-g%b)+h.1o(g+1,h.L);H h})}6 x(a){H a.Q(/^\\s+|\\s+$/g,"")}6 D(a,b){I(a.P<b.P)H-1;Y I(a.P>b.P)H 1;Y I(a.L<b.L)H-1;Y I(a.L>b.L)H 1;H 0}6 y(a,b){6 c(k){H k[0]}O(K d=N,h=[],g=b.2D?b.2D:c;(d=b.1I.X(a))!=N;){K i=g(d,b);I(1j i=="3f")i=[1f e.2L(i,d.P,b.23)];h=h.1O(i)}H h}6 E(a){K b=/(.*)((&1G;|&1y;).*)/;H a.Q(e.3A.3M,6(c){K d="",h=N;I(h=b.X(c)){c=h[1];d=h[2]}H\'<a 2h="\'+c+\'">\'+c+"</a>"+d})}6 z(){O(K a=1E.36("1k"),b=[],c=0;c<a.L;c++)a[c].3s=="20"&&b.U(a[c]);H b}6 f(a){a=a.1F;K b=p(a,".20",R);a=p(a,".3O",R);K c=1E.4i("3t");I(!(!a||!b||p(a,"3t"))){B(b.1c);r(b,"1m");O(K d=a.3G,h=[],g=0;g<d.L;g++)h.U(d[g].4z||d[g].4A);h=h.1K("\\r");c.39(1E.4D(h));a.39(c);c.2C();c.4C();w(c,"4u",6(){c.2G.4E(c);b.1l=b.1l.Q("1m","")})}}I(1j 3F!="1d"&&1j M=="1d")M=3F("M").M;K e={2v:{"1g-27":"","2i-1s":1,"2z-1s-2t":11,1M:N,1t:N,"42-45":R,"43-22":4,1u:R,16:R,"3V-17":R,2l:11,"41-40":R,2k:11,"1z-1k":11},13:{1W:"&2s;",2M:R,46:11,44:11,34:"4n",1x:{21:"4o 1m",2P:"?",1X:"1v\\n\\n",3E:"4r\'t 4t 1D O: ",4g:"4m 4B\'t 51 O 1z-1k 4F: ",37:\'<!4T 1z 4S "-//4V//3H 4W 1.0 4Z//4Y" "1Z://2y.3L.3K/4X/3I/3H/3I-4P.4J"><1z 4I="1Z://2y.3L.3K/4L/5L"><3J><4N 1Z-4M="5G-5M" 6K="2O/1z; 6J=6I-8" /><1t>6L 1v</1t></3J><3B 1L="25-6M:6Q,6P,6O,6N-6F;6y-2f:#6x;2f:#6w;25-22:6v;2O-3D:3C;"><T 1L="2O-3D:3C;3w-32:1.6z;"><T 1L="25-22:6A-6E;">1v</T><T 1L="25-22:.6C;3w-6B:6R;"><T>3v 3.0.76 (72 73 3x)</T><T><a 2h="1Z://3u.2w/1v" 1F="38" 1L="2f:#3y">1Z://3u.2w/1v</a></T><T>70 17 6U 71.</T><T>6T 6X-3x 6Y 6D.</T></T><T>6t 61 60 J 1k, 5Z <a 2h="6u://2y.62.2w/63-66/65?64=5X-5W&5P=5O" 1L="2f:#3y">5R</a> 5V <2R/>5U 5T 5S!</T></T></3B></1z>\'}},1Y:{2j:N,2A:{}},1U:{},3A:{6n:/\\/\\*[\\s\\S]*?\\*\\//2c,6m:/\\/\\/.*$/2c,6l:/#.*$/2c,6k:/"([^\\\\"\\n]|\\\\.)*"/g,6o:/\'([^\\\\\'\\n]|\\\\.)*\'/g,6p:1f M(\'"([^\\\\\\\\"]|\\\\\\\\.)*"\',"3z"),6s:1f M("\'([^\\\\\\\\\']|\\\\\\\\.)*\'","3z"),6q:/(&1y;|<)!--[\\s\\S]*?--(&1G;|>)/2c,3M:/\\w+:\\/\\/[\\w-.\\/?%&=:@;]*/g,6a:{18:/(&1y;|<)\\?=?/g,1b:/\\?(&1G;|>)/g},69:{18:/(&1y;|<)%=?/g,1b:/%(&1G;|>)/g},6d:{18:/(&1y;|<)\\s*1k.*?(&1G;|>)/2T,1b:/(&1y;|<)\\/\\s*1k\\s*(&1G;|>)/2T}},16:{1H:6(a){6 b(i,k){H e.16.2o(i,k,e.13.1x[k])}O(K c=\'<T 1g="16">\',d=e.16.2x,h=d.2X,g=0;g<h.L;g++)c+=(d[h[g]].1H||b)(a,h[g]);c+="</T>";H c},2o:6(a,b,c){H\'<2W><a 2h="#" 1g="6e 6h\'+b+" "+b+\'">\'+c+"</a></2W>"},2b:6(a){K b=a.1F,c=b.1l||"";b=B(p(b,".20",R).1c);K d=6(h){H(h=15(h+"6f(\\\\w+)").X(c))?h[1]:N}("6g");b&&d&&e.16.2x[d].2B(b);a.3N()},2x:{2X:["21","2P"],21:{1H:6(a){I(a.V("2l")!=R)H"";K b=a.V("1t");H e.16.2o(a,"21",b?b:e.13.1x.21)},2B:6(a){a=1E.6j(t(a.1c));a.1l=a.1l.Q("47","")}},2P:{2B:6(){K a="68=0";a+=", 18="+(31.30-33)/2+", 32="+(31.2Z-2Y)/2+", 30=33, 2Z=2Y";a=a.Q(/^,/,"");a=1P.6Z("","38",a);a.2C();K b=a.1E;b.6W(e.13.1x.37);b.6V();a.2C()}}}},35:6(a,b){K c;I(b)c=[b];Y{c=1E.36(e.13.34);O(K d=[],h=0;h<c.L;h++)d.U(c[h]);c=d}c=c;d=[];I(e.13.2M)c=c.1O(z());I(c.L===0)H d;O(h=0;h<c.L;h++){O(K g=c[h],i=a,k=c[h].1l,j=3W 0,l={},m=1f M("^\\\\[(?<2V>(.*?))\\\\]$"),s=1f M("(?<27>[\\\\w-]+)\\\\s*:\\\\s*(?<1T>[\\\\w-%#]+|\\\\[.*?\\\\]|\\".*?\\"|\'.*?\')\\\\s*;?","g");(j=s.X(k))!=N;){K o=j.1T.Q(/^[\'"]|[\'"]$/g,"");I(o!=N&&m.1A(o)){o=m.X(o);o=o.2V.L>0?o.2V.1e(/\\s*,\\s*/):[]}l[j.27]=o}g={1F:g,1n:C(i,l)};g.1n.1D!=N&&d.U(g)}H d},1M:6(a,b){K c=J.35(a,b),d=N,h=e.13;I(c.L!==0)O(K g=0;g<c.L;g++){b=c[g];K i=b.1F,k=b.1n,j=k.1D,l;I(j!=N){I(k["1z-1k"]=="R"||e.2v["1z-1k"]==R){d=1f e.4l(j);j="4O"}Y I(d=A(j))d=1f d;Y 6H;l=i.3X;I(h.2M){l=l;K m=x(l),s=11;I(m.1i("<![6G[")==0){m=m.4h(9);s=R}K o=m.L;I(m.1i("]]\\>")==o-3){m=m.4h(0,o-3);s=R}l=s?m:l}I((i.1t||"")!="")k.1t=i.1t;k.1D=j;d.2Q(k);b=d.2F(l);I((i.1c||"")!="")b.1c=i.1c;i.2G.74(b,i)}}},2E:6(a){w(1P,"4k",6(){e.1M(a)})}};e.2E=e.2E;e.1M=e.1M;e.2L=6(a,b,c){J.1T=a;J.P=b;J.L=a.L;J.23=c;J.1V=N};e.2L.Z.1q=6(){H J.1T};e.4l=6(a){6 b(j,l){O(K m=0;m<j.L;m++)j[m].P+=l}K c=A(a),d,h=1f e.1U.5Y,g=J,i="2F 1H 2Q".1e(" ");I(c!=N){d=1f c;O(K k=0;k<i.L;k++)(6(){K j=i[k];g[j]=6(){H h[j].1p(h,14)}})();d.28==N?1P.1X(e.13.1x.1X+(e.13.1x.4g+a)):h.2J.U({1I:d.28.17,2D:6(j){O(K l=j.17,m=[],s=d.2J,o=j.P+j.18.L,F=d.28,q,G=0;G<s.L;G++){q=y(l,s[G]);b(q,o);m=m.1O(q)}I(F.18!=N&&j.18!=N){q=y(j.18,F.18);b(q,j.P);m=m.1O(q)}I(F.1b!=N&&j.1b!=N){q=y(j.1b,F.1b);b(q,j.P+j[0].5Q(j.1b));m=m.1O(q)}O(j=0;j<m.L;j++)m[j].1V=c.1V;H m}})}};e.4j=6(){};e.4j.Z={V:6(a,b){K c=J.1n[a];c=c==N?b:c;K d={"R":R,"11":11}[c];H d==N?c:d},3Y:6(a){H 1E.4i(a)},4c:6(a,b){K c=[];I(a!=N)O(K d=0;d<a.L;d++)I(1j a[d]=="2m")c=c.1O(y(b,a[d]));H J.4e(c.6b(D))},4e:6(a){O(K b=0;b<a.L;b++)I(a[b]!==N)O(K c=a[b],d=c.P+c.L,h=b+1;h<a.L&&a[b]!==N;h++){K g=a[h];I(g!==N)I(g.P>d)1N;Y I(g.P==c.P&&g.L>c.L)a[b]=N;Y I(g.P>=c.P&&g.P<d)a[h]=N}H a},4d:6(a){K b=[],c=2u(J.V("2i-1s"));v(a,6(d,h){b.U(h+c)});H b},3U:6(a){K b=J.V("1M",[]);I(1j b!="2m"&&b.U==N)b=[b];a:{a=a.1q();K c=3W 0;O(c=c=1Q.6c(c||0,0);c<b.L;c++)I(b[c]==a){b=c;1N a}b=-1}H b!=-1},2r:6(a,b,c){a=["1s","6i"+b,"P"+a,"6r"+(b%2==0?1:2).1q()];J.3U(b)&&a.U("67");b==0&&a.U("1N");H\'<T 1g="\'+a.1K(" ")+\'">\'+c+"</T>"},3Q:6(a,b){K c="",d=a.1e("\\n").L,h=2u(J.V("2i-1s")),g=J.V("2z-1s-2t");I(g==R)g=(h+d-1).1q().L;Y I(3R(g)==R)g=0;O(K i=0;i<d;i++){K k=b?b[i]:h+i,j;I(k==0)j=e.13.1W;Y{j=g;O(K l=k.1q();l.L<j;)l="0"+l;j=l}a=j;c+=J.2r(i,k,a)}H c},49:6(a,b){a=x(a);K c=a.1e("\\n");J.V("2z-1s-2t");K d=2u(J.V("2i-1s"));a="";O(K h=J.V("1D"),g=0;g<c.L;g++){K i=c[g],k=/^(&2s;|\\s)+/.X(i),j=N,l=b?b[g]:d+g;I(k!=N){j=k[0].1q();i=i.1o(j.L);j=j.Q(" ",e.13.1W)}i=x(i);I(i.L==0)i=e.13.1W;a+=J.2r(g,l,(j!=N?\'<17 1g="\'+h+\' 5N">\'+j+"</17>":"")+i)}H a},4f:6(a){H a?"<4a>"+a+"</4a>":""},4b:6(a,b){6 c(l){H(l=l?l.1V||g:g)?l+" ":""}O(K d=0,h="",g=J.V("1D",""),i=0;i<b.L;i++){K k=b[i],j;I(!(k===N||k.L===0)){j=c(k);h+=u(a.1o(d,k.P-d),j+"48")+u(k.1T,j+k.23);d=k.P+k.L+(k.75||0)}}h+=u(a.1o(d),c()+"48");H h},1H:6(a){K b="",c=["20"],d;I(J.V("2k")==R)J.1n.16=J.1n.1u=11;1l="20";J.V("2l")==R&&c.U("47");I((1u=J.V("1u"))==11)c.U("6S");c.U(J.V("1g-27"));c.U(J.V("1D"));a=a.Q(/^[ ]*[\\n]+|[\\n]*[ ]*$/g,"").Q(/\\r/g," ");b=J.V("43-22");I(J.V("42-45")==R)a=n(a,b);Y{O(K h="",g=0;g<b;g++)h+=" ";a=a.Q(/\\t/g,h)}a=a;a:{b=a=a;h=/<2R\\s*\\/?>|&1y;2R\\s*\\/?&1G;/2T;I(e.13.46==R)b=b.Q(h,"\\n");I(e.13.44==R)b=b.Q(h,"");b=b.1e("\\n");h=/^\\s*/;g=4Q;O(K i=0;i<b.L&&g>0;i++){K k=b[i];I(x(k).L!=0){k=h.X(k);I(k==N){a=a;1N a}g=1Q.4q(k[0].L,g)}}I(g>0)O(i=0;i<b.L;i++)b[i]=b[i].1o(g);a=b.1K("\\n")}I(1u)d=J.4d(a);b=J.4c(J.2J,a);b=J.4b(a,b);b=J.49(b,d);I(J.V("41-40"))b=E(b);1j 2H!="1d"&&2H.3S&&2H.3S.1C(/5s/)&&c.U("5t");H b=\'<T 1c="\'+t(J.1c)+\'" 1g="\'+c.1K(" ")+\'">\'+(J.V("16")?e.16.1H(J):"")+\'<3Z 5z="0" 5H="0" 5J="0">\'+J.4f(J.V("1t"))+"<3T><3P>"+(1u?\'<2d 1g="1u">\'+J.3Q(a)+"</2d>":"")+\'<2d 1g="17"><T 1g="3O">\'+b+"</T></2d></3P></3T></3Z></T>"},2F:6(a){I(a===N)a="";J.17=a;K b=J.3Y("T");b.3X=J.1H(a);J.V("16")&&w(p(b,".16"),"5c",e.16.2b);J.V("3V-17")&&w(p(b,".17"),"56",f);H b},2Q:6(a){J.1c=""+1Q.5d(1Q.5n()*5k).1q();e.1Y.2A[t(J.1c)]=J;J.1n=C(e.2v,a||{});I(J.V("2k")==R)J.1n.16=J.1n.1u=11},5j:6(a){a=a.Q(/^\\s+|\\s+$/g,"").Q(/\\s+/g,"|");H"\\\\b(?:"+a+")\\\\b"},5f:6(a){J.28={18:{1I:a.18,23:"1k"},1b:{1I:a.1b,23:"1k"},17:1f M("(?<18>"+a.18.1m+")(?<17>.*?)(?<1b>"+a.1b.1m+")","5o")}}};H e}();1j 2e!="1d"&&(2e.1v=1v);',62,441,'||||||function|||||||||||||||||||||||||||||||||||||return|if|this|var|length|XRegExp|null|for|index|replace|true||div|push|getParam|call|exec|else|prototype||false|lastIndex|config|arguments|RegExp|toolbar|code|left|captureNames|slice|right|id|undefined|split|new|class|addToken|indexOf|typeof|script|className|source|params|substr|apply|toString|String|line|title|gutter|SyntaxHighlighter|_xregexp|strings|lt|html|test|OUTSIDE_CLASS|match|brush|document|target|gt|getHtml|regex|global|join|style|highlight|break|concat|window|Math|isRegExp|throw|value|brushes|brushName|space|alert|vars|http|syntaxhighlighter|expandSource|size|css|case|font|Fa|name|htmlScript|dA|can|handler|gm|td|exports|color|in|href|first|discoveredBrushes|light|collapse|object|cache|getButtonHtml|trigger|pattern|getLineHtml|nbsp|numbers|parseInt|defaults|com|items|www|pad|highlighters|execute|focus|func|all|getDiv|parentNode|navigator|INSIDE_CLASS|regexList|hasFlag|Match|useScriptTags|hasNamedCapture|text|help|init|br|input|gi|Error|values|span|list|250|height|width|screen|top|500|tagName|findElements|getElementsByTagName|aboutDialog|_blank|appendChild|charAt|Array|copyAsGlobal|setFlag|highlighter_|string|attachEvent|nodeName|floor|backref|output|the|TypeError|sticky|Za|iterate|freezeTokens|scope|type|textarea|alexgorbatchev|version|margin|2010|005896|gs|regexLib|body|center|align|noBrush|require|childNodes|DTD|xhtml1|head|org|w3|url|preventDefault|container|tr|getLineNumbersHtml|isNaN|userAgent|tbody|isLineHighlighted|quick|void|innerHTML|create|table|links|auto|smart|tab|stripBrs|tabs|bloggerMode|collapsed|plain|getCodeLinesHtml|caption|getMatchesHtml|findMatches|figureOutLineNumbers|removeNestedMatches|getTitleHtml|brushNotHtmlScript|substring|createElement|Highlighter|load|HtmlScript|Brush|pre|expand|multiline|min|Can|ignoreCase|find|blur|extended|toLowerCase|aliases|addEventListener|innerText|textContent|wasn|select|createTextNode|removeChild|option|same|frame|xmlns|dtd|twice|1999|equiv|meta|htmlscript|transitional|1E3|expected|PUBLIC|DOCTYPE|on|W3C|XHTML|TR|EN|Transitional||configured|srcElement|Object|after|run|dblclick|matchChain|valueOf|constructor|default|switch|click|round|execAt|forHtmlScript|token|gimy|functions|getKeywords|1E6|escape|within|random|sgi|another|finally|supply|MSIE|ie|toUpperCase|catch|returnValue|definition|event|border|imsx|constructing|one|Infinity|from|when|Content|cellpadding|flags|cellspacing|try|xhtml|Type|spaces|2930402|hosted_button_id|lastIndexOf|donate|active|development|keep|to|xclick|_s|Xml|please|like|you|paypal|cgi|cmd|webscr|bin|highlighted|scrollbars|aspScriptTags|phpScriptTags|sort|max|scriptScriptTags|toolbar_item|_|command|command_|number|getElementById|doubleQuotedString|singleLinePerlComments|singleLineCComments|multiLineCComments|singleQuotedString|multiLineDoubleQuotedString|xmlComments|alt|multiLineSingleQuotedString|If|https|1em|000|fff|background|5em|xx|bottom|75em|Gorbatchev|large|serif|CDATA|continue|utf|charset|content|About|family|sans|Helvetica|Arial|Geneva|3em|nogutter|Copyright|syntax|close|write|2004|Alex|open|JavaScript|highlighter|July|02|replaceChild|offset|83'.split('|'),0,{}))
   18  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/code/getting_started/config/environments/development.rb:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Do not eager load code on boot.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/code/getting_started/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests.
    5:   config.cache_classes = true
    6  
    7    # Eager load code on boot. This eager loads most of Rails and
    .
   15    config.action_controller.perform_caching = true
   16  
   17:   # Enable Rack::Cache to put a simple HTTP cache in front of your application
   18:   # Add `rack-cache` to your Gemfile before enabling this.
   19    # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
   20:   # config.action_dispatch.rack_cache = true
   21  
   22    # Disable Rails's static asset server (Apache or nginx will already do this).
   ..
   52    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   53  
   54:   # Use a different cache store in production.
   55:   # config.cache_store = :mem_cache_store
   56  
   57    # Enable serving of images, stylesheets, and JavaScripts from an asset server.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/code/getting_started/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Do not eager load code on boot. This avoids loading your whole application
   ..
   13    config.eager_load = false
   14  
   15:   # Configure static asset server for tests with Cache-Control for performance.
   16    config.serve_static_assets = true
   17:   config.static_cache_control = "public, max-age=3600"
   18  
   19    # Show full error reports and disable caching.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/code/getting_started/README.rdoc:
   18  * How to run the test suite
   19  
   20: * Services (job queues, cache servers, search engines, etc.)
   21  
   22  * Deployment instructions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/2_2_release_notes.md:
  205  * `rake db:migrate:redo` now accepts an optional VERSION to target that specific migration to redo
  206  * Set `config.active_record.timestamped_migrations = false` to have migrations with numeric prefix instead of UTC timestamp.
  207: * Counter cache columns (for associations declared with `:counter_cache => true`) do not need to be initialized to zero any longer.
  208  * `ActiveRecord::Base.human_name` for an internationalization-aware humane translation of model names
  209  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/2_3_release_notes.md:
   29  * `ActionController::CGIHandler` is a backwards compatible CGI wrapper around Rack. The `CGIHandler` is meant to take an old CGI object and convert its environment information into a Rack compatible form.
   30  * `CgiRequest` and `CgiResponse` have been removed.
   31: * Session stores are now lazy loaded. If you never access the session object during a request, it will never attempt to load the session data (parse the cookie, load the data from memcache, or lookup an Active Record object).
   32  * You no longer need to use `CGI::Cookie.new` in your tests for setting a cookie value. Assigning a `String` value to request.cookies["foo"] now sets the cookie as expected.
   33  * `CGI::Session::CookieStore` has been replaced by `ActionController::Session::CookieStore`.
   34: * `CGI::Session::MemCacheStore` has been replaced by `ActionController::Session::MemCacheStore`.
   35  * `CGI::Session::ActiveRecordStore` has been replaced by `ActiveRecord::SessionStore`.
   36  * You can still change your session store with `ActionController::Base.session_store = :active_record_store`.
   ..
   38  * The mutex that normally wraps your entire request has been moved into middleware, `ActionController::Lock`.
   39  * `ActionController::AbstractRequest` and `ActionController::Request` have been unified. The new `ActionController::Request` inherits from `Rack::Request`. This affects access to `response.headers['type']` in test requests. Use `response.content_type` instead.
   40: * `ActiveRecord::QueryCache` middleware is automatically inserted onto the middleware stack if `ActiveRecord` has been loaded. This middleware sets up and flushes the per-request Active Record query cache.
   41  * The Rails router and controller classes follow the Rack spec. You can call a controller directly with `SomeController.call(env)`. The router stores the routing parameters in `rack.routing_args`.
   42  * `ActionController::Request` inherits from `Rack::Request`.
   ..
  295  ### Improved Caching Performance
  296  
  297: Rails now keeps a per-request local cache of read from the remote cache stores, cutting down on unnecessary reads and leading to better site performance. While this work was originally limited to `MemCacheStore`, it is available to any remote store than implements the required methods.
  298  
  299  * Lead Contributor: [Nahum Wild](http://www.motionstandingstill.com/)
  ...
  317  * You can now use symbols for the `:type` option of `send_file` and `send_data`, like this: `send_file("fabulous.png", :type => :png)`.
  318  * The `:only` and `:except` options for `map.resources` are no longer inherited by nested resources.
  319: * The bundled memcached client has been updated to version 1.6.4.99.
  320  * The `expires_in`, `stale?`, and `fresh_when` methods now accept a `:public` option to make them work well with proxy caching.
  321  * The `:requirements` option now works properly with additional RESTful member routes.
  ...
  414  ### AssetTag Timestamp Caching
  415  
  416: You're likely familiar with Rails' practice of adding timestamps to static asset paths as a "cache buster." This helps ensure that stale copies of things like images and stylesheets don't get served out of the user's browser cache when you change them on the server. You can now modify this behavior with the `cache_asset_timestamps` configuration option for Action View. If you enable the cache, then Rails will calculate the timestamp once when it first serves an asset, and save that value. This means fewer (expensive) file system calls to serve static assets - but it also means that you can't modify any of the assets while the server is running and expect the changes to get picked up by clients.
  417  
  418  ### Asset Hosts as Objects
  ...
  471  ### A Note About Template Loading
  472  
  473: Rails 2.3 includes the ability to enable or disable cached templates for any particular environment. Cached templates give you a speed boost because they don't check for a new template file when they're rendered - but they also mean that you can't replace a template "on the fly" without restarting the server.
  474  
  475  In most cases, you'll want template caching to be turned on in production, which you can do by making a setting in your `production.rb` file:
  476  
  477  ```ruby
  478: config.action_view.cache_template_loading = true
  479  ```
  480  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/3_0_release_notes.md:
  333  Your own helpers of that kind are expected to return a string, rather than appending to the output buffer by hand.
  334  
  335: Helpers that do something else, like `cache` or `content_for`, are not affected by this change, they need `&lt;%` as before.
  336  
  337  #### Other Changes
  ...
  466  * Support multiple schemas in table names for PostgreSQL.
  467  * PostgreSQL support for the XML data type column.
  468: * `table_name` is now cached.
  469  * A large amount of work done on the Oracle adapter as well with many bug fixes.
  470  
  ...
  522  
  523  * Large clean up of the library removing unused methods throughout.
  524: * Active Support no longer provides vendored versions of [TZInfo](http://tzinfo.rubyforge.org/), [Memcache Client](http://deveiate.org/projects/RMemCache/) and [Builder](http://builder.rubyforge.org/,) these are all included as dependencies and installed via the `bundle install` command.
  525  * Safe buffers are implemented in `ActiveSupport::SafeBuffer`.
  526  * Added `Array.uniq_by` and `Array.uniq_by!`.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/3_1_release_notes.md:
  105  
  106  ```ruby
  107: # Configure static asset server for tests with Cache-Control for performance
  108  config.serve_static_assets = true
  109: config.static_cache_control = "public, max-age=3600"
  110  ```
  111  
  ...
  130      ```
  131  
  132: #### Remove :cache and :concat options in asset helpers references in views
  133  
  134: * With the Asset Pipeline the :cache and :concat options aren't used anymore, delete these options from your views.
  135  
  136  Creating a Rails 3.1 application
  ...
  215  * Added `Rack::Etag` and `Rack::ConditionalGet` to the default middleware stack.
  216  
  217: * Added `Rack::Cache` to the default middleware stack.
  218  
  219  * Engines received a major update - You can mount them at any path, enable assets, run generators etc.
  ...
  299  * Added `ActionDispatch::Request.ignore_accept_header` to ignore accept headers.
  300  
  301: * Added `Rack::Cache` to the default stack.
  302  
  303  * Moved etag responsibility from `ActionDispatch::Response` to the middleware stack.
  ...
  334  * rhtml and rxml are finally removed as template handlers.
  335  
  336: * `config.action_view.cache_template_loading` is brought back which allows to decide whether templates should be cached or not.
  337  
  338  * The submit form helper does not generate an id "object_name_id" anymore.
  ...
  494  * Calling `ActiveRecord::Base#dup` will duplicate the record, including calling after initialize hooks. Frozen state will not be copied, and all associations will be cleared. A duped record will return `true` for `new_record?`, have a `nil` id field, and is saveable.
  495  
  496: * The query cache now works with prepared statements. No changes in the applications are required.
  497  
  498  Active Model
  ...
  533  * Added `Object#in?` to test if an object is included in another object.
  534  
  535: * `LocalCache` strategy is now a real middleware class and no longer an anonymous class.
  536  
  537: * `ActiveSupport::Dependencies::ClassCache` class has been introduced for holding references to reloadable classes.
  538  
  539: * `ActiveSupport::Dependencies::Reference` has been refactored to take direct advantage of the new `ClassCache`.
  540  
  541  * Backports `Range#cover?` as an alias for `Range#include?` in Ruby 1.8.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/3_2_release_notes.md:
  176  * Make `ActiveSupport::Benchmarkable` a default module for `ActionController::Base,` so the `#benchmark` method is once again available in the controller context like it used to be.
  177  
  178: * Added `:gzip` option to `caches_page`. The default option can be configured globally using `page_cache_compression`.
  179  
  180  * Rails will now use your default layout (such as "layouts/application") when you specify a layout with `:only` and `:except` condition, and those conditions fail.
  ...
  528  * `ActiveSupport::OrderedHash` now has different behavior for `#each` and `#each_pair` when given a block accepting its parameters with a splat.
  529  
  530: * Added `ActiveSupport::Cache::NullStore` for use in development and testing.
  531  
  532  * Removed `ActiveSupport::SecureRandom` in favor of `SecureRandom` from the standard library.
  ...
  548  * `ActiveSupport::BufferedLogger's` behavior of automatically creating the directory for your log file is deprecated. Please make sure to create the directory for your log file before instantiating.
  549  
  550: * `ActiveSupport::BufferedLogger#auto_flushing` is deprecated. Either set the sync level on the underlying file handle like this. Or tune your filesystem. The FS cache is now what controls flushing.
  551  
  552      ```ruby

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/4_0_release_notes.md:
  130  ### Notable changes
  131  
  132: *   Replace deprecated `memcache-client` gem with `dalli` in ActiveSupport::Cache::MemCacheStore.
  133  
  134: *   Optimize ActiveSupport::Cache::Entry to reduce memory and processing overhead.
  135  
  136  *   Inflections can now be defined per locale. `singularize` and `pluralize` accept locale as an extra argument.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/action_controller_overview.md:
  341  
  342  * `ActionDispatch::Session::CookieStore` - Stores everything on the client.
  343: * `ActionDispatch::Session::CacheStore` - Stores the data in the Rails cache.
  344  * `ActionDispatch::Session::ActiveRecordStore` - Stores the data in a database using Active Record. (require `activerecord-session_store` gem).
  345: * `ActionDispatch::Session::MemCacheStore` - Stores the data in a memcached cluster (this is a legacy implementation; consider using CacheStore instead).
  346  
  347  All session stores use a cookie to store a unique ID for each session (you must use a cookie, Rails will not allow you to pass the session ID in the URL as this is less secure).
  ...
  351  The CookieStore can store around 4kB of data — much less than the others — but this is usually enough. Storing large amounts of data in the session is discouraged no matter which session store your application uses. You should especially avoid storing complex objects (anything other than basic Ruby objects, the most common example being model instances) in the session, as the server might not be able to reassemble them between requests, which will result in an error.
  352  
  353: If your user sessions don't store critical data or don't need to be around for long periods (for instance if you just use the flash for messaging), you can consider using ActionDispatch::Session::CacheStore. This will store sessions using the cache implementation you have configured for your application. The advantage of this is that you can use your existing cache infrastructure for storing sessions without requiring any additional setup or administration. The downside, of course, is that the sessions will be ephemeral and could disappear at any time.
  354  
  355  Read more about session storage in the [Security Guide](security.html).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/action_view_overview.md:
  522  ```
  523  
  524: You can also cache multiple JavaScript files into one file, which requires less HTTP connections to download and can better be compressed by gzip (leading to faster transfers). Caching will only happen if `ActionController::Base.perform_caching` is set to true (which is the case by default for the Rails production environment, but not for the development environment).
  525  
  526  ```ruby
  527: javascript_include_tag :all, cache: true # =>
  528    <script src="/javascripts/all.js"></script>
  529  ```
  ...
  559  ```
  560  
  561: You can also cache multiple stylesheets into one file, which requires less HTTP connections and can better be compressed by gzip (leading to faster transfers). Caching will only happen if ActionController::Base.perform_caching is set to true (which is the case by default for the Rails production environment, but not for the development environment).
  562  
  563  ```ruby
  564: stylesheet_link_tag :all, cache: true
  565  # => <link href="/assets/all.css" media="screen" rel="stylesheet" />
  566  ```
  ...
  641  This would add something like "Process data files (0.34523)" to the log, which you can then use to compare timings when optimizing your code.
  642  
  643: ### CacheHelper
  644  
  645: #### cache
  646  
  647: A method for caching fragments of a view rather than an entire action or page. This technique is useful caching pieces like menus, lists of news topics, static HTML fragments, and so on. This method takes a block that contains the content you wish to cache. See `ActionController::Caching::Fragments` for more information.
  648  
  649  ```erb
  650: <% cache do %>
  651    <%= render "shared/footer" %>
  652  <% end %>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/active_record_basics.md:
  120  * `(association_name)_type` - Stores the type for
  121    [polymorphic associations](association_basics.html#polymorphic-associations).
  122: * `(table_name)_count` - Used to cache the number of belonging objects on
  123    associations. For example, a `comments_count` column in a `Post` class that
  124:   has many instances of `Comment` will cache the number of existent comments
  125    for each post.
  126  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/active_record_querying.md:
   38  ```ruby
   39  class Order < ActiveRecord::Base
   40:   belongs_to :client, counter_cache: true
   41  end
   42  ```

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/active_support_core_extensions.md:
  107  ```
  108  
  109: The method `present?` is equivalent to `!blank?`. This example is taken from `ActionDispatch::Http::Cache::Response`:
  110  
  111  ```ruby
  112: def set_conditional_cache_control!
  113:   return if self["Cache-Control"].present?
  114    ...
  115  end
  ...
 1622  ```
 1623  
 1624: Active Record for example uses this method to compute the name of a counter cache column:
 1625  
 1626  ```ruby
 1627  # active_record/reflection.rb
 1628: def counter_cache_column
 1629:   if options[:counter_cache] == true
 1630      "#{active_record.name.demodulize.underscore.pluralize}_count"
 1631:   elsif options[:counter_cache]
 1632:     options[:counter_cache]
 1633    end
 1634  end
 ....
 2216  In those cases, you may give an options hash a distinguished treatment with `extract_options!`. This method checks the type of the last item of an array. If it is a hash it pops it and returns it, otherwise it returns an empty hash.
 2217  
 2218: Let's see for example the definition of the `caches_action` controller macro:
 2219  
 2220  ```ruby
 2221: def caches_action(*actions)
 2222:   return unless cache_configured?
 2223    options = actions.extract_options!
 2224    ...
 ....
 3734  The name of the file is passed as an argument, and the method yields a file handle opened for writing. Once the block is done `atomic_write` closes the file handle and completes its job.
 3735  
 3736: For example, Action Pack uses this method to write asset cache files like `all.css`:
 3737  
 3738  ```ruby
 3739: File.atomic_write(joined_asset_path) do |cache|
 3740:   cache.write(join_asset_file_contents(asset_paths))
 3741  end
 3742  ```
 ....
 3759  Active Support adds constant autoloading support to `load`.
 3760  
 3761: For example, the file cache store deserializes this way:
 3762  
 3763  ```ruby
 ....
 3765  ```
 3766  
 3767: If the cached data refers to a constant that is unknown at that point, the autoloading mechanism is triggered and if it succeeds the deserialization is retried transparently.
 3768  
 3769  WARNING. If the argument is an `IO` it needs to respond to `rewind` to be able to retry. Regular files respond to `rewind`.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/active_support_instrumentation.md:
  318  --------------
  319  
  320: ### cache_read.active_support
  321  
  322  | Key                | Value                                             |
  ...
  326  | `:super_operation` | :fetch is added when a read is used with `#fetch` |
  327  
  328: ### cache_generate.active_support
  329  
  330  This event is only used when `#fetch` is called with a block.
  ...
  343  
  344  
  345: ### cache_fetch_hit.active_support
  346  
  347  This event is only used when `#fetch` is called with a block.
  ...
  359  ```
  360  
  361: ### cache_write.active_support
  362  
  363  | Key    | Value                 |
  ...
  365  | `:key` | Key used in the store |
  366  
  367: INFO. Cache stores my add their own keys
  368  
  369  ```ruby
  ...
  373  ```
  374  
  375: ### cache_delete.active_support
  376  
  377  | Key    | Value                 |
  ...
  385  ```
  386  
  387: ### cache_exist?.active_support
  388  
  389  | Key    | Value                 |

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/asset_pipeline.md:
   40  The first feature of the pipeline is to concatenate assets. This is important in a production environment, because it can reduce the number of requests that a browser makes to render a web page. Web browsers are limited in the number of requests that they can make in parallel, so fewer requests can mean faster loading for your application.
   41  
   42: Rails 2.x introduced the ability to concatenate JavaScript and CSS assets by placing `cache: true` at the end of the `javascript_include_tag` and `stylesheet_link_tag` methods. But this technique has some limitations. For example, it cannot generate the caches in advance, and it is not able to transparently include assets provided by third-party libraries.
   43  
   44: Starting with version 3.1, Rails defaults to concatenating all JavaScript files into one master `.js` file and all CSS files into one master `.css` file. As you'll learn later in this guide, you can customize this strategy to group files any way you like. In production, Rails inserts an MD5 fingerprint into each filename so that the file is cached by the web browser. You can invalidate the cache by altering this fingerprint, which happens automatically whenever you change the file contents.
   45  
   46  The second feature of the asset pipeline is asset minification or compression. For CSS files, this is done by removing whitespace and comments. For JavaScript, more complex processes can be applied. You can choose from a set of built in options or specify your own.
   ..
   52  Fingerprinting is a technique that makes the name of a file dependent on the contents of the file. When the file contents change, the filename is also changed. For content that is static or infrequently changed, this provides an easy way to tell whether two versions of a file are identical, even across different servers or deployment dates.
   53  
   54: When a filename is unique and based on its content, HTTP headers can be set to encourage caches everywhere (whether at CDNs, at ISPs, in networking equipment, or in web browsers) to keep their own copy of the content. When the content is updated, the fingerprint will change. This will cause the remote clients to request a new copy of the content. This is generally known as _cache busting_.
   55  
   56  The technique that Rails uses for fingerprinting is to insert a hash of the content into the name, usually at the end. For example a CSS file `global.css` could be renamed with an MD5 digest of its contents:
   ..
   70  The query string strategy has several disadvantages:
   71  
   72: 1. **Not all caches will reliably cache content where the filename only differs by query parameters**<br />
   73:     [Steve Souders recommends](http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/), "...avoiding a querystring for cacheable resources". He found that in this case 5-20% of requests will not be cached. Query strings in particular do not work at all with some CDNs for cache invalidation.
   74  
   75  2. **The file name can change between nodes in multi-server environments.**<br />
   76      The default query string in Rails 2.x is based on the modification time of the files. When assets are deployed to a cluster, there is no guarantee that the timestamps will be the same, resulting in different values being used depending on which server handles the request.
   77: 3. **Too much cache invalidation**<br />
   78      When static assets are deployed with each new release of code, the mtime(time of last modification) of _all_ these files changes, forcing all remote clients to fetch them again, even when the content of those assets has not changed.
   79  
   ..
  368  ```
  369  
  370: Assets are compiled and cached on the first request after the server is started. Sprockets sets a `must-revalidate` Cache-Control HTTP header to reduce request overhead on subsequent requests — on these the browser gets a 304 (Not Modified) response.
  371  
  372  If any of the files in the manifest have changed between requests, the server responds with a new compiled file.
  ...
  404  ```
  405  
  406: Note: with the Asset Pipeline the :cache and :concat options aren't used anymore, delete these options from the `javascript_include_tag` and `stylesheet_link_tag`.
  407  
  408  
  ...
  444  This links the folder specified in `config.assets.prefix` to `shared/assets`. If you already use this shared folder you'll need to write your own deployment task.
  445  
  446: It is important that this folder is shared between deployments so that remotely cached pages that reference the old compiled assets still work for the life of the cached page.
  447  
  448  The default matcher for compiling files includes `application.js`,
  ...
  513    Header unset ETag
  514    FileETag None
  515:   # RFC says only cache for 1 year
  516    ExpiresActive On
  517    ExpiresDefault "access plus 1 year"
  ...
  524  location ~ ^/assets/ {
  525    expires 1y;
  526:   add_header Cache-Control public;
  527  
  528    add_header ETag "";
  ...
  542    gzip_static on; # to serve pre-gzipped version
  543    expires max;
  544:   add_header Cache-Control public;
  545  }
  546  ```
  ...
  601  ```
  602  
  603: On the first request the assets are compiled and cached as outlined in development above, and the manifest names used in the helpers are altered to include the MD5 hash.
  604  
  605: Sprockets also sets the `Cache-Control` HTTP header to `max-age=31536000`. This signals all caches between your server and the client browser that this content (the file served) can be cached for 1 year. The effect of this is to reduce the number of requests for this asset from your server; the asset has a good chance of being in the local browser cache or some intermediate cache.
  606  
  607  This mode uses more memory, performs more poorly than the default and is not recommended.
  ...
  618  
  619  If your assets are being served by a CDN, ensure they don't stick around in
  620: your cache forever. This can cause problems. If you use
  621: `config.action_controller.perform_caching = true`, Rack::Cache will use
  622: `Rails.cache` to store assets. This can cause your cache to fill up quickly.
  623  
  624: Every cache is different, so evaluate how your CDN handles caching and make
  625  sure that it plays nicely with the pipeline. You may find quirks related to
  626  your specific set up, you may not. The defaults nginx uses, for example,
  627: should give you no problems when used as an HTTP cache.
  628  
  629  Customizing the Pipeline
  ...
  702  WARNING: If you are upgrading an existing application and intend to use this option, take care to paste this configuration option only into `production.rb` and any other environments you define with production behavior (not `application.rb`).
  703  
  704: Assets Cache Store
  705  ------------------
  706  
  707: The default Rails cache store will be used by Sprockets to cache assets in development and production. This can be changed by setting `config.assets.cache_store`.
  708  
  709  ```ruby
  710: config.assets.cache_store = :memory_store
  711  ```
  712  
  713: The options accepted by the assets cache store are the same as the application's cache store.
  714  
  715  ```ruby
  716: config.assets.cache_store = :memory_store, { size: 32.megabytes }
  717  ```
  718  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/association_basics.md:
  504  ### Controlling Caching
  505  
  506: All of the association methods are built around caching, which keeps the result of the most recent query available for further operations. The cache is even shared across methods. For example:
  507  
  508  ```ruby
  509  customer.orders                 # retrieves orders from the database
  510: customer.orders.size            # uses the cached copy of orders
  511: customer.orders.empty?          # uses the cached copy of orders
  512  ```
  513  
  514: But what if you want to reload the cache, because data might have been changed by some other part of the application? Just pass `true` to the association call:
  515  
  516  ```ruby
  517  customer.orders                 # retrieves orders from the database
  518: customer.orders.size            # uses the cached copy of orders
  519: customer.orders(true).empty?    # discards the cached copy of orders
  520                                  # and goes back to the database
  521  ```
  ...
  742  ```
  743  
  744: If the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), pass `true` as the `force_reload` argument.
  745  
  746  ##### `association=(associate)`
  ...
  778  class Order < ActiveRecord::Base
  779    belongs_to :customer, dependent: :destroy,
  780:     counter_cache: true
  781  end
  782  ```
  ...
  786  * `:autosave`
  787  * `:class_name`
  788: * `:counter_cache`
  789  * `:dependent`
  790  * `:foreign_key`
  ...
  808  ```
  809  
  810: ##### `:counter_cache`
  811  
  812: The `:counter_cache` option can be used to make finding the number of belonging objects more efficient. Consider these models:
  813  
  814  ```ruby
  ...
  821  ```
  822  
  823: With these declarations, asking for the value of `@customer.orders.size` requires making a call to the database to perform a `COUNT(*)` query. To avoid this call, you can add a counter cache to the _belonging_ model:
  824  
  825  ```ruby
  826  class Order < ActiveRecord::Base
  827:   belongs_to :customer, counter_cache: true
  828  end
  829  class Customer < ActiveRecord::Base
  ...
  832  ```
  833  
  834: With this declaration, Rails will keep the cache value up to date, and then return that value in response to the `size` method.
  835  
  836: Although the `:counter_cache` option is specified on the model that includes the `belongs_to` declaration, the actual column must be added to the _associated_ model. In the case above, you would need to add a column named `orders_count` to the `Customer` model. You can override the default column name if you need to:
  837  
  838  ```ruby
  839  class Order < ActiveRecord::Base
  840:   belongs_to :customer, counter_cache: :count_of_orders
  841  end
  842  class Customer < ActiveRecord::Base
  ...
  845  ```
  846  
  847: Counter cache columns are added to the containing model's list of read-only attributes through `attr_readonly`.
  848  
  849  ##### `:dependent`
  ...
 1040  ```
 1041  
 1042: If the associated object has already been retrieved from the database for this object, the cached version will be returned. To override this behavior (and force a database read), pass `true` as the `force_reload` argument.
 1043  
 1044  ##### `association=(associate)`

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/caching_with_rails.md:
    8  * Page and action caching (moved to separate gems as of Rails 4).
    9  * Fragment caching.
   10: * Alternative cache stores.
   11  * Conditional GET support.
   12  
   ..
   29  ### Page Caching
   30  
   31: Page caching is a Rails mechanism which allows the request for a generated page to be fulfilled by the webserver (i.e. Apache or nginx), without ever having to go through the Rails stack at all. Obviously, this is super-fast. Unfortunately, it can't be applied to every situation (such as pages that need authentication) and since the webserver is literally just serving a file from the filesystem, cache expiration is an issue that needs to be dealt with.
   32  
   33: INFO: Page Caching has been removed from Rails 4. See the [actionpack-page_caching gem](https://github.com/rails/actionpack-page_caching). See [DHH's key-based cache expiration overview](http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works) for the newly-preferred method.
   34  
   35  ### Action Caching
   36  
   37: Page Caching cannot be used for actions that have before filters - for example, pages that require authentication. This is where Action Caching comes in. Action Caching works like Page Caching except the incoming web request hits the Rails stack so that before filters can be run on it before the cache is served. This allows authentication and other restrictions to be run while still serving the result of the output from a cached copy.
   38  
   39: INFO: Action Caching has been removed from Rails 4. See the [actionpack-action_caching gem](https://github.com/rails/actionpack-action_caching). See [DHH's key-based cache expiration overview](http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works) for the newly-preferred method.
   40  
   41  ### Fragment Caching
   42  
   43: Life would be perfect if we could get away with caching the entire contents of a page or action and serving it out to the world. Unfortunately, dynamic web applications usually build pages with a variety of components not all of which have the same caching characteristics. In order to address such a dynamically created page where different parts of the page need to be cached and expired differently, Rails provides a mechanism called Fragment Caching.
   44  
   45: Fragment Caching allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in.
   46  
   47: As an example, if you wanted to show all the orders placed on your website in real time and didn't want to cache that part of the page, but did want to cache the part of the page which lists all products available, you could use this piece of code:
   48  
   49  ```html+erb
   ..
   52  <% end %>
   53  
   54: <% cache do %>
   55    All available products:
   56    <% Product.all.each do |p| %>
   ..
   60  ```
   61  
   62: The cache block in our example will bind to the action that called it and is written out to the same place as the Action Cache, which means that if you want to cache multiple fragments per action, you should provide an `action_suffix` to the cache call:
   63  
   64  ```html+erb
   65: <% cache(action: 'recent', action_suffix: 'all_products') do %>
   66    All available products:
   67  ```
   ..
   73  ```
   74  
   75: If you don't want the cache block to bind to the action that called it, you can also use globally keyed fragments by calling the `cache` method with a key:
   76  
   77  ```erb
   78: <% cache('all_available_products') do %>
   79    All available products:
   80  <% end %>
   ..
   90  ```ruby
   91  module ProductsHelper
   92:   def cache_key_for_products
   93      count          = Product.count
   94      max_updated_at = Product.maximum(:updated_at).try(:utc).try(:to_s, :number)
   ..
   98  ```
   99  
  100: This method generates a cache key that depends on all products and can be used in the view:
  101  
  102  ```erb
  103: <% cache(cache_key_for_products) do %>
  104    All available products:
  105  <% end %>
  106  ```
  107: You can also use an Active Record model as the cache key:
  108  
  109  ```erb
  110  <% Product.all.each do |p| %>
  111:   <% cache(p) do %>
  112      <%= link_to p.name, product_url(p) %>
  113    <% end %>
  ...
  115  ```
  116  
  117: Behind the scenes, a method called `cache_key` will be invoked on the model and it returns a string like `products/23-20130109142513`. The cache key includes the model name, the id and finally the updated_at timestamp. Thus it will automatically generate a new fragment when the product is updated because the key changes.
  118  
  119  You can also combine the two schemes which is called "Russian Doll Caching":
  120  
  121  ```erb
  122: <% cache(cache_key_for_products) do %>
  123    All available products:
  124    <% Product.all.each do |p| %>
  125:     <% cache(p) do %>
  126        <%= link_to p.name, product_url(p) %>
  127      <% end %>
  ...
  134  ### SQL Caching
  135  
  136: Query caching is a Rails feature that caches the result set returned by each query so that if Rails encounters the same query again for that request, it will use the cached result set as opposed to running the query against the database again.
  137  
  138  For example:
  ...
  154  ```
  155  
  156: Cache Stores
  157  ------------
  158  
  159: Rails provides different stores for the cached data created by <b>action</b> and <b>fragment</b> caches.
  160  
  161: TIP: Page caches are always stored on disk.
  162  
  163  ### Configuration
  164  
  165: You can set up your application's default cache store by calling `config.cache_store=` in the Application definition inside your `config/application.rb` file or in an Application.configure block in an environment specific configuration file (i.e. `config/environments/*.rb`). The first argument will be the cache store to use and the rest of the argument will be passed as arguments to the cache store constructor.
  166  
  167  ```ruby
  168: config.cache_store = :memory_store
  169  ```
  170  
  171: NOTE: Alternatively, you can call `ActionController::Base.cache_store` outside of a configuration block.
  172  
  173: You can access the cache by calling `Rails.cache`.
  174  
  175: ### ActiveSupport::Cache::Store
  176  
  177: This class provides the foundation for interacting with the cache in Rails. This is an abstract class and you cannot use it on its own. Rather you must use a concrete implementation of the class tied to a storage engine. Rails ships with several implementations documented below.
  178  
  179: The main methods to call are `read`, `write`, `delete`, `exist?`, and `fetch`. The fetch method takes a block and will either return an existing value from the cache, or evaluate the block and write the result to the cache if no value exists.
  180  
  181: There are some common options used by all cache implementations. These can be passed to the constructor or the various methods to interact with entries.
  182  
  183: * `:namespace` - This option can be used to create a namespace within the cache store. It is especially useful if your application shares a cache with other applications. The default value will include the application name and Rails environment.
  184  
  185: * `:compress` - This option can be used to indicate that compression should be used in the cache. This can be useful for transferring large cache entries over a slow network.
  186  
  187: * `:compress_threshold` - This options is used in conjunction with the `:compress` option to indicate a threshold under which cache entries should not be compressed. This defaults to 16 kilobytes.
  188  
  189: * `:expires_in` - This option sets an expiration time in seconds for the cache entry when it will be automatically removed from the cache.
  190  
  191: * `:race_condition_ttl` - This option is used in conjunction with the `:expires_in` option. It will prevent race conditions when cache entries expire by preventing multiple processes from simultaneously regenerating the same entry (also known as the dog pile effect). This option sets the number of seconds that an expired entry can be reused while a new value is being regenerated. It's a good practice to set this value if you use the `:expires_in` option.
  192  
  193: ### ActiveSupport::Cache::MemoryStore
  194  
  195: This cache store keeps entries in memory in the same Ruby process. The cache store has a bounded size specified by the `:size` options to the initializer (default is 32Mb). When the cache exceeds the allotted size, a cleanup will occur and the least recently used entries will be removed.
  196  
  197  ```ruby
  198: config.cache_store = :memory_store, { size: 64.megabytes }
  199  ```
  200  
  201: If you're running multiple Ruby on Rails server processes (which is the case if you're using mongrel_cluster or Phusion Passenger), then your Rails server process instances won't be able to share cache data with each other. This cache store is not appropriate for large application deployments, but can work well for small, low traffic sites with only a couple of server processes or for development and test environments.
  202  
  203: ### ActiveSupport::Cache::FileStore
  204  
  205: This cache store uses the file system to store entries. The path to the directory where the store files will be stored must be specified when initializing the cache.
  206  
  207  ```ruby
  208: config.cache_store = :file_store, "/path/to/cache/directory"
  209  ```
  210  
  211: With this cache store, multiple server processes on the same host can share a cache. Servers processes running on different hosts could share a cache by using a shared file system, but that set up would not be ideal and is not recommended. The cache store is appropriate for low to medium traffic sites that are served off one or two hosts.
  212  
  213: Note that the cache will grow until the disk is full unless you periodically clear out old entries.
  214  
  215: This is the default cache store implementation.
  216  
  217: ### ActiveSupport::Cache::MemCacheStore
  218  
  219: This cache store uses Danga's `memcached` server to provide a centralized cache for your application. Rails uses the bundled `dalli` gem by default. This is currently the most popular cache store for production websites. It can be used to provide a single, shared cache cluster with very a high performance and redundancy.
  220  
  221: When initializing the cache, you need to specify the addresses for all memcached servers in your cluster. If none is specified, it will assume memcached is running on the local host on the default port, but this is not an ideal set up for larger sites.
  222  
  223: The `write` and `fetch` methods on this cache accept two additional options that take advantage of features specific to memcached. You can specify `:raw` to send a value directly to the server with no serialization. The value must be a string or number. You can use memcached direct operation like `increment` and `decrement` only on raw values. You can also specify `:unless_exist` if you don't want memcached to overwrite an existing entry.
  224  
  225  ```ruby
  226: config.cache_store = :mem_cache_store, "cache-1.example.com", "cache-2.example.com"
  227  ```
  228  
  229: ### ActiveSupport::Cache::EhcacheStore
  230  
  231: If you are using JRuby you can use Terracotta's Ehcache as the cache store for your application. Ehcache is an open source Java cache that also offers an enterprise version with increased scalability, management, and commercial support. You must first install the jruby-ehcache-rails3 gem (version 1.1.0 or later) to use this cache store.
  232  
  233  ```ruby
  234: config.cache_store = :ehcache_store
  235  ```
  236  
  237: When initializing the cache, you may use the `:ehcache_config` option to specify the Ehcache config file to use (where the default is "ehcache.xml" in your Rails config directory), and the :cache_name option to provide a custom name for your cache (the default is rails_cache).
  238  
  239: In addition to the standard `:expires_in` option, the `write` method on this cache can also accept the additional  `:unless_exist` option, which will cause the cache store to use Ehcache's `putIfAbsent` method instead of `put`, and therefore will not overwrite an existing entry. Additionally, the `write` method supports all of the properties exposed by the [Ehcache Element class](http://ehcache.org/apidocs/net/sf/ehcache/Element.html) , including:
  240  
  241  | Property                    | Argument Type       | Description                                                 |
  ...
  250  
  251  ```ruby
  252: Rails.cache.write('key', 'value', time_to_idle: 60.seconds, timeToLive: 600.seconds)
  253: caches_action :index, expires_in: 60.seconds, unless_exist: true
  254  ```
  255  
  256: For more information about Ehcache, see [http://ehcache.org/](http://ehcache.org/) .
  257: For more information about Ehcache for JRuby and Rails, see [http://ehcache.org/documentation/jruby.html](http://ehcache.org/documentation/jruby.html)
  258  
  259: ### ActiveSupport::Cache::NullStore
  260  
  261: This cache store implementation is meant to be used only in development or test environments and it never stores anything. This can be very useful in development when you have code that interacts directly with `Rails.cache`, but caching may interfere with being able to see the results of code changes. With this cache store, all `fetch` and `read` operations will result in a miss.
  262  
  263  ```ruby
  264: config.cache_store = :null_store
  265  ```
  266  
  267: ### Custom Cache Stores
  268  
  269: You can create your own custom cache store by simply extending `ActiveSupport::Cache::Store` and implementing the appropriate methods. In this way, you can swap in any number of caching technologies into your Rails application.
  270  
  271: To use a custom cache store, simple set the cache store to a new instance of the class.
  272  
  273  ```ruby
  274: config.cache_store = MyCacheStore.new
  275  ```
  276  
  277: ### Cache Keys
  278  
  279: The keys used in a cache can be any object that responds to either `:cache_key` or to `:to_param`. You can implement the `:cache_key` method on your classes if you need to generate custom keys. Active Record will generate keys based on the class name and record id.
  280  
  281: You can use Hashes and Arrays of values as cache keys.
  282  
  283  ```ruby
  284: # This is a legal cache key
  285: Rails.cache.read(site: "mysite", owners: [owner_1, owner_2])
  286  ```
  287  
  288: The keys you use on `Rails.cache` will not be the same as those actually used with the storage engine. They may be modified with a namespace or altered to fit technology backend constraints. This means, for instance, that you can't save values with `Rails.cache` and then try to pull them out with the `memcache-client` gem. However, you also don't need to worry about exceeding the memcached size limit or violating syntax rules.
  289  
  290  Conditional GET support
  291  -----------------------
  292  
  293: Conditional GETs are a feature of the HTTP specification that provide a way for web servers to tell browsers that the response to a GET request hasn't changed since the last request and can be safely pulled from the browser cache.
  294  
  295  They work by using the `HTTP_IF_NONE_MATCH` and `HTTP_IF_MODIFIED_SINCE` headers to pass back and forth both a unique content identifier and the timestamp of when the content was last changed. If the browser makes a request where the content identifier (etag) or last modified since timestamp matches the server’s version then the server only needs to send back an empty response with a not modified status.
  ...
  305      # If the request is stale according to the given timestamp and etag value
  306      # (i.e. it needs to be processed again) then execute this block
  307:     if stale?(last_modified: @product.updated_at.utc, etag: @product.cache_key)
  308        respond_to do |wants|
  309          # ... normal response processing
  ...
  319  ```
  320  
  321: Instead of a options hash, you can also simply pass in a model, Rails will use the `updated_at` and `cache_key` methods for setting `last_modified` and `etag`:
  322  
  323  ```ruby

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/command_line.md:
   46       create  app
   47       ...
   48:      create  tmp/cache
   49       ...
   50          run  bundle install
   ..
  359  rake middleware         # Prints out your Rack middleware stack
  360  ...
  361: rake tmp:clear          # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)
  362: rake tmp:create         # Creates tmp directories for sessions, cache, sockets, and pids
  363  ```
  364  
  ...
  379  Action Mailer version     4.0.0
  380  Active Support version    4.0.0
  381: Middleware                Rack::Sendfile, ActionDispatch::Static, Rack::Lock, #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x007ffd131a7c88>, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, Rails::Rack::Logger, ActionDispatch::ShowExceptions, ActionDispatch::DebugExceptions, ActionDispatch::RemoteIp, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActiveRecord::ConnectionAdapters::ConnectionManagement, ActiveRecord::QueryCache, ActionDispatch::Cookies, ActionDispatch::Session::EncryptedCookieStore, ActionDispatch::Flash, ActionDispatch::ParamsParser, Rack::Head, Rack::ConditionalGet, Rack::ETag
  382  Application root          /home/foobar/commandsapp
  383  Environment               development
  ...
  467  ### `tmp`
  468  
  469: The `Rails.root/tmp` directory is, like the *nix /tmp directory, the holding place for temporary files like sessions (if you're using a file store for files), process id files, and cached actions.
  470  
  471  The `tmp:` namespaced tasks will help you clear the `Rails.root/tmp` directory:
  472  
  473: * `rake tmp:cache:clear` clears `tmp/cache`.
  474  * `rake tmp:sessions:clear` clears `tmp/sessions`.
  475  * `rake tmp:sockets:clear` clears `tmp/sockets`.
  476: * `rake tmp:clear` clears all the three: cache, sessions and sockets.
  477  
  478  ### Miscellaneous
  ...
  545  ...
  546  ...
  547:       create  tmp/cache
  548        create  tmp/pids
  549        create  Rakefile

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/configuring.md:
   59  * `config.asset_host` sets the host for the assets. Useful when CDNs are used for hosting assets, or when you want to work around the concurrency constraints builtin in browsers using different domain aliases. Shorter version of `config.action_controller.asset_host`.
   60  
   61: * `config.autoload_once_paths` accepts an array of paths from which Rails will autoload constants that won't be wiped per request. Relevant if `config.cache_classes` is false, which is the case in development mode by default. Otherwise, all autoloading happens only once. All elements of this array must also be in `autoload_paths`. Default is an empty array.
   62  
   63  * `config.autoload_paths` accepts an array of paths from which Rails will autoload constants. Default is all directories under `app`.
   64  
   65: * `config.cache_classes` controls whether or not application classes and modules should be reloaded on each request. Defaults to false in development mode, and true in test and production modes. Can also be enabled with `threadsafe!`.
   66  
   67: * `config.action_view.cache_template_loading` controls whether or not templates should be reloaded on each request. Defaults to whatever is set for `config.cache_classes`.
   68  
   69: * `config.cache_store` configures which cache store to use for Rails caching. Options include one of the symbols `:memory_store`, `:file_store`, `:mem_cache_store`, `:null_store`, or an object that implements the cache API. Defaults to `:file_store` if the directory `tmp/cache` exists, and to `:memory_store` otherwise.
   70  
   71  * `config.colorize_logging` specifies whether or not to use ANSI color codes when logging information. Defaults to true.
   ..
   84      ```
   85  
   86: * `config.dependency_loading` is a flag that allows you to disable constant autoloading setting it to false. It only has effect if `config.cache_classes` is true, which it is by default in production mode. This flag is set to false by `config.threadsafe!`.
   87  
   88  * `config.eager_load` when true, eager loads all registered `config.eager_load_namespaces`. This includes your application, engines, Rails frameworks and any other registered namespace.
   ..
   90  * `config.eager_load_namespaces` registers namespaces that are eager loaded when `config.eager_load` is true. All namespaces in the list must respond to the `eager_load!` method.
   91  
   92: * `config.eager_load_paths` accepts an array of paths from which Rails will eager load on boot if cache classes is enabled. Defaults to every folder in the `app` directory of the application.
   93  
   94  * `config.encoding` sets up the application-wide encoding. Defaults to UTF-8.
   ..
  112  * `config.middleware` allows you to configure the application's middleware. This is covered in depth in the [Configuring Middleware](#configuring-middleware) section below.
  113  
  114: * `config.reload_classes_only_on_change` enables or disables reloading of classes only when tracked files change. By default tracks everything on autoload paths and is set to true. If `config.cache_classes` is true, this option is ignored.
  115  
  116  * `config.secret_key_base` used for specifying a key which allows sessions for the application to be verified against a known secure key to prevent tampering. Applications get `config.secret_key_base` initialized to a random key in `config/initializers/secret_token.rb`.
  ...
  118  * `config.serve_static_assets` configures Rails itself to serve static assets. Defaults to true, but in the production environment is turned off as the server software (e.g. Nginx or Apache) used to run the application should serve static assets instead. Unlike the default setting set this to true when running (absolutely not recommended!) or testing your app in production mode using WEBrick. Otherwise you won´t be able use page caching and requests for files that exist regularly under the public directory will anyway hit your Rails app.
  119  
  120: * `config.session_store` is usually set up in `config/initializers/session_store.rb` and specifies what class to use to store the session. Possible values are `:cookie_store` which is the default, `:mem_cache_store`, and `:disabled`. The last one tells Rails not to deal with sessions. Custom session stores can also be specified:
  121  
  122      ```ruby
  ...
  152  * `config.assets.debug` disables the concatenation and compression of assets. Set to `true` by default in `development.rb`.
  153  
  154: * `config.assets.cache_store` defines the cache store that Sprockets will use. The default is the Rails file store.
  155  
  156  * `config.assets.version` is an option string that is used in MD5 hash generation. This can be changed to force all files to be recompiled.
  ...
  193  * `ActionDispatch::SSL` forces every request to be under HTTPS protocol. Will be available if `config.force_ssl` is set to `true`. Options passed to this can be configured by using `config.ssl_options`.
  194  * `ActionDispatch::Static` is used to serve static assets. Disabled if `config.serve_static_assets` is `false`.
  195: * `Rack::Lock` wraps the app in mutex so it can only be called by a single thread at a time. Only enabled when `config.cache_classes` is `false`.
  196: * `ActiveSupport::Cache::Strategy::LocalCache` serves as a basic memory backed cache. This cache is not thread safe and is intended only for serving as a temporary memory cache for a single thread.
  197  * `Rack::Runtime` sets an `X-Runtime` header, containing the time (in seconds) taken to execute the request.
  198  * `Rails::Rack::Logger` notifies the logs that the request has began. After request is complete, flushes all the logs.
  ...
  203  * `ActionDispatch::Callbacks` runs the prepare callbacks before serving the request.
  204  * `ActiveRecord::ConnectionAdapters::ConnectionManagement` cleans active connections after each request, unless the `rack.test` key in the request environment is set to `true`.
  205: * `ActiveRecord::QueryCache` caches all SELECT queries generated in a request. If any INSERT or UPDATE takes place then the cache is cleaned.
  206  * `ActionDispatch::Cookies` sets cookies for the request.
  207  * `ActionDispatch::Session::CookieStore` is responsible for storing the session in cookies. An alternate middleware can be used for this by changing the `config.action_controller.session_store` to an alternate value. Additionally, options passed to this can be configured by using `config.action_controller.session_options`.
  ...
  271  * `config.active_record.lock_optimistically` controls whether Active Record will use optimistic locking and is true by default.
  272  
  273: * `config.active_record.cache_timestamp_format` controls the format of the timestamp value in the cache key. Default is `:number`.
  274  
  275  The MySQL adapter adds one additional configuration option:
  ...
  289  * `config.action_controller.perform_caching` configures whether the application should perform caching or not. Set to false in development mode, true in production.
  290  
  291: * `config.action_controller.default_static_extension` configures the extension used for cached pages. Defaults to `.html`.
  292  
  293  * `config.action_controller.default_charset` specifies the default character set for all renders. The default is "utf-8".
  ...
  307  ### Configuring Action Dispatch
  308  
  309: * `config.action_dispatch.session_store` sets the name of the store for session data. The default is `:cookie_store`; other valid options include `:active_record_store`, `:mem_cache_store` or the name of your own custom class.
  310  
  311  * `config.action_dispatch.default_headers` is a hash with HTTP headers that are set by default in each response. By default, this is defined as:
  ...
  323  * `ActionDispatch::Callbacks.before` takes a block of code to run before the request.
  324  
  325: * `ActionDispatch::Callbacks.to_prepare` takes a block to run after `ActionDispatch::Callbacks.before`, but before the request. Runs for every request in `development` mode, but only once for `production` or environments with `cache_classes` set to `true`.
  326  
  327  * `ActionDispatch::Callbacks.after` takes a block of code to run after the request.
  ...
  412  * `ActiveSupport::Logger.silencer` is set to `false` to disable the ability to silence logging in a block. The default is `true`.
  413  
  414: * `ActiveSupport::Cache::Store.logger` specifies the logger to use within cache store operations.
  415  
  416  * `ActiveSupport::Deprecation.behavior` alternative setter to `config.active_support.deprecation` which configures the behavior of deprecation warnings for Rails.
  ...
  542  * `ENV["RAILS_RELATIVE_URL_ROOT"]` is used by the routing code to recognize URLs when you deploy your application to a subdirectory.
  543  
  544: * `ENV["RAILS_CACHE_ID"]` and `ENV["RAILS_APP_VERSION"]` are used to generate expanded cache keys in Rails' caching code. This allows you to have multiple separate caches from the same application.
  545  
  546  
  ...
  621  * `initialize_logger` Initializes the logger (an `ActiveSupport::Logger` object) for the application and makes it accessible at `Rails.logger`, provided that no initializer inserted before this point has defined `Rails.logger`.
  622  
  623: * `initialize_cache` If `Rails.cache` isn't set yet, initializes the cache by referencing the value in `config.cache_store` and stores the outcome as `Rails.cache`. If this object responds to the `middleware` method, its middleware is inserted before `Rack::Runtime` in the middleware stack.
  624  
  625: * `set_clear_dependencies_hook` Provides a hook for `active_record.set_dispatch_hooks` to use, which will run before this initializer. This initializer — which runs only if `cache_classes` is set to `false` — uses `ActionDispatch::Callbacks.after` to remove the constants which have been referenced during the request from the object space so that they will be reloaded during the following request.
  626  
  627: * `initialize_dependency_mechanism` If `config.cache_classes` is true, configures `ActiveSupport::Dependencies.mechanism` to `require` dependencies rather than `load` them.
  628  
  629  * `bootstrap_hook` Runs all configured `before_initialize` blocks.
  ...
  657  * `action_controller.logger` Sets `ActionController::Base.logger` — if it's not already set — to `Rails.logger`.
  658  
  659: * `action_controller.initialize_framework_caches` Sets `ActionController::Base.cache_store` — if it's not already set — to `Rails.cache`.
  660  
  661  * `action_controller.set_configs` Sets up Action Controller by using the settings in `config.action_controller` by `send`'ing the method names as setters to `ActionController::Base` and passing the values through.
  ...
  673  * `active_record.log_runtime` Includes `ActiveRecord::Railties::ControllerRuntime` which is responsible for reporting the time taken by Active Record calls for the request back to the logger.
  674  
  675: * `active_record.set_dispatch_hooks` Resets all reloadable connections to the database if `config.cache_classes` is set to `false`.
  676  
  677  * `action_mailer.logger` Sets `ActionMailer::Base.logger` — if it's not already set — to `Rails.logger`.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/debugging_rails_applications.md:
   45    id: "1"
   46    created_at: 2008-09-05 22:55:47
   47: attributes_cache: {}
   48  
   49  
   ..
   76  id: "1"
   77  created_at: 2008-09-05 22:55:47
   78: attributes_cache: {}
   79  
   80  Title: Rails debugging guide
   ..
  460  (rdb:9) var instance Post.new
  461  @attributes = {"updated_at"=>nil, "body"=>nil, "title"=>nil, "published"=>nil, "created_at"...
  462: @attributes_cache = {}
  463  @new_record = true
  464  ```
  ...
  535  (rdb:1) var instance
  536  @attributes = {"updated_at"=>"2008-07-31 12:46:10", "id"=>"1", "first_name"=>"Bob", "las...
  537: @attributes_cache = {}
  538  ```
  539  
  ...
  546  (rdb:1) var instance
  547  @attributes = {"updated_at"=>"2008-07-31 12:46:10", "id"=>"1", "first_name"=>"Bob", "las...
  548: @attributes_cache = {}
  549  @comments = []
  550  @recent_comments = []

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/getting_started.md:
  146  |README.rdoc|This is a brief instruction manual for your application. You should edit this file to tell others what your application does, how to set it up, and so on.|
  147  |test/|Unit tests, fixtures, and other test apparatus. These are covered in [Testing Rails Applications](testing.html)|
  148: |tmp/|Temporary files (like cache, pid and session files)|
  149  |vendor/|A place for all third-party code. In a typical Rails application, this includes Ruby Gems and the Rails source code (if you optionally install it into your project).|
  150  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/initialization.md:
   77  * polyglot
   78  * rack
   79: * rack-cache
   80  * rack-mount
   81  * rack-test
   ..
  270  
  271    #Create required tmp directories if not found
  272:   %w(cache pids sessions sockets).each do |dir_to_make|
  273      FileUtils.mkdir_p(Rails.root.join('tmp', dir_to_make))
  274    end
  ...
  294  method creates a trap for `INT` signals, so if you `CTRL-C` the server,
  295  it will exit the process. As we can see from the code here, it will
  296: create the `tmp/cache`, `tmp/pids`, `tmp/sessions` and `tmp/sockets`
  297  directories. It then calls `wrapped_app` which is responsible for
  298  creating the Rack app, before creating and assigning an

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/layouts_and_rendering.md:
  121  X-Runtime: 0.014297
  122  Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
  123: Cache-Control: no-cache
  124  
  125  
  ...
  127  ```
  128  
  129: We see there is an empty response (no data after the `Cache-Control` line), but the request was successful because Rails has set the response to 200 OK. You can set the `:status` option on render to change this response. Rendering nothing can be useful for Ajax requests where all you want to send back to the browser is an acknowledgment that the request was completed.
  130  
  131  TIP: You should probably be using the `head` method, discussed later in this guide, instead of `render :nothing`. This provides additional flexibility and makes it explicit that you're only generating HTTP headers.
  ...
  656  X-Runtime: 0.013483
  657  Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
  658: Cache-Control: no-cache
  659  ```
  660  
  ...
  676  X-Runtime: 0.083496
  677  Set-Cookie: _blog_session=...snip...; path=/; HttpOnly
  678: Cache-Control: no-cache
  679  ```
  680  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/migrations.md:
  908  
  909  When using a local model, it's a good idea to call
  910: `Product.reset_column_information` to refresh the Active Record cache for the
  911  `Product` model prior to updating data in the database.
  912  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/rails_on_rack.md:
  122  use ActionDispatch::Static
  123  use Rack::Lock
  124: use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x000000029a0838>
  125  use Rack::Runtime
  126  use Rack::MethodOverride
  ...
  133  use ActionDispatch::Callbacks
  134  use ActiveRecord::ConnectionAdapters::ConnectionManagement
  135: use ActiveRecord::QueryCache
  136  use ActionDispatch::Cookies
  137  use ActionDispatch::Session::CookieStore
  ...
  166  config.middleware.use Rack::BounceFavicon
  167  
  168: # Add Lifo::Cache after ActiveRecord::QueryCache.
  169: # Pass { page_cache: false } argument to Lifo::Cache.
  170: config.middleware.insert_after ActiveRecord::QueryCache, Lifo::Cache, page_cache: false
  171  ```
  172  
  ...
  199  (in /Users/lifo/Rails/blog)
  200  use ActionDispatch::Static
  201: use #<ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x00000001c304c8>
  202  use Rack::Runtime
  203  ...
  ...
  237  * Sets `env["rack.multithread"]` flag to `false` and wraps the application within a Mutex.
  238  
  239:  **`ActiveSupport::Cache::Strategy::LocalCache::Middleware`**
  240  
  241: * Used for memory caching. This cache is not thread safe.
  242  
  243   **`Rack::Runtime`**
  ...
  281  * Cleans active connections after each request, unless the `rack.test` key in the request environment is set to `true`.
  282  
  283:  **`ActiveRecord::QueryCache`**
  284  
  285: * Enables the Active Record query cache.
  286  
  287   **`ActionDispatch::Cookies`**
  ...
  311   **`Rack::ETag`**
  312  
  313: * Adds ETag header on all String bodies. ETags are used to validate cache.
  314  
  315  TIP: It's possible to use any of the above middlewares in your custom Rack stack.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/routing.md:
  775  ```
  776  
  777: Please note that this redirection is a 301 "Moved Permanently" redirect. Keep in mind that some web browsers or proxy servers will cache this type of redirect, making the old page inaccessible.
  778  
  779  In all of these cases, if you don't provide the leading host (`http://www.example.com`), Rails will take those details from the current request.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/upgrading_ruby_on_rails.md:
  124  * Rails 4.0 removed the `ActionController::Base.asset_path` option. Use the assets pipeline feature.
  125  
  126: * Rails 4.0 has deprecated `ActionController::Base.page_cache_extension` option. Use `ActionController::Base.default_static_extension` instead.
  127  
  128: * Rails 4.0 has removed Action and Page caching from Action Pack. You will need to add the `actionpack-action_caching` gem in order to use `caches_action` and the `actionpack-page_caching` to use `caches_pages` in your controllers.
  129  
  130  * Rails 4.0 has removed the XML parameters parser. You will need to add the `actionpack-xml_parser` gem if you require this feature.
  131  
  132: * Rails 4.0 changes the default memcached client from `memcache-client` to `dalli`. To upgrade, simply add `gem 'dalli'` to your `Gemfile`.
  133  
  134  * Rails 4.0 deprecates the `dom_id` and `dom_class` methods in controllers (they are fine in views). You will need to include the `ActionView::RecordIdentifier` module in controllers requiring this feature.
  ...
  369  
  370  ```ruby
  371: # Configure static asset server for tests with Cache-Control for performance
  372  config.serve_static_assets = true
  373: config.static_cache_control = "public, max-age=3600"
  374  ```
  375  
  ...
  409  ```
  410  
  411: ### Remove :cache and :concat options in asset helpers references in views
  412  
  413: * With the Asset Pipeline the :cache and :concat options aren't used anymore, delete these options from your views.
  414  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-4.0.3/guides/source/working_with_javascript_in_rails.md:
  128  attribute. We can run all of our JavaScript through a minimizer and
  129  concatenator. We can serve our entire JavaScript bundle on every page, which
  130: means that it'll get downloaded on the first page load and then be cached on
  131  every page after that. Lots of little benefits really add up.
  132  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/lib/rails/observers/action_controller/caching/sweeping.rb:
    1  module ActionController #:nodoc:
    2    module Caching
    3:     # Sweepers are the terminators of the caching world and responsible for expiring caches when model objects change.
    4      # They do this by being half-observers, half-filters and implementing callbacks for both roles. A Sweeper example:
    5      #
    .
   15      #   end
   16      #
   17:     # The sweeper is assigned in the controllers that wish to have its job performed using the <tt>cache_sweeper</tt> class method:
   18      #
   19      #   class ListsController < ApplicationController
   20:     #     caches_action :index, :show, :public, :feed
   21:     #     cache_sweeper :list_sweeper, :only => [ :edit, :destroy, :share ]
   22      #   end
   23      #
   24:     # In the example above, four actions are cached and three actions are responsible for expiring those caches.
   25      #
   26      # You can also name an explicit class in the declaration of a sweeper, which is needed if the sweeper is in a module:
   27      #
   28      #   class ListsController < ApplicationController
   29:     #     caches_action :index, :show, :public, :feed
   30:     #     cache_sweeper OpenBar::Sweeper, :only => [ :edit, :destroy, :share ]
   31      #   end
   32      module Sweeping
   33        module ClassMethods #:nodoc:
   34:         def cache_sweeper(*sweepers)
   35            configuration = sweepers.extract_options!
   36  
   ..
   78  
   79          protected
   80:         # gets the action cache path for the given options.
   81          def action_path_for(options)
   82:           Actions::ActionCachePath.new(controller, options).path
   83          end
   84  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/lib/rails/observers/active_model/observing.rb:
   27        #   ORM.observers = :person_observer
   28        #
   29:       #   # Calls Cacher.instance and GarbageCollector.instance
   30:       #   ORM.observers = :cacher, :garbage_collector
   31        #
   32        #   # Same as above, just using explicit class references
   33:       #   ORM.observers = Cacher, GarbageCollector
   34        #
   35        # Note: Setting this does not instantiate the observers yet.
   ..
   49        #   end
   50        #
   51:       #   ORM.observers = :cacher, :garbage_collector
   52:       #   ORM.observers       # => [:cacher, :garbage_collector]
   53        #   ORM.observers.class # => ActiveModel::ObserverArray
   54        def observers

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/README.md:
   70  ### Action Controller Sweeper
   71  
   72: Sweepers are the terminators of the caching world and responsible for expiring caches when model objects change.
   73  They do this by being half-observers, half-filters and implementing callbacks for both roles. A Sweeper example:
   74  
   ..
   86  ```
   87  
   88: The sweeper is assigned in the controllers that wish to have its job performed using the `cache_sweeper` class method:
   89  
   90  ```ruby
   91  class ListsController < ApplicationController
   92:   caches_action :index, :show, :public, :feed
   93:   cache_sweeper :list_sweeper, :only => [ :edit, :destroy, :share ]
   94  end
   95  ```
   96  
   97: In the example above, four actions are cached and three actions are responsible for expiring those caches.
   98  
   99  You can also name an explicit class in the declaration of a sweeper, which is needed if the sweeper is in a module:
  ...
  101  ```ruby
  102  class ListsController < ApplicationController
  103:   caches_action :index, :show, :public, :feed
  104:   cache_sweeper OpenBar::Sweeper, :only => [ :edit, :destroy, :share ]
  105  end
  106  ```

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/test/helper.rb:
   55  
   56  class Reply < Topic
   57:   belongs_to :topic, :foreign_key => "parent_id", :counter_cache => true
   58  end
   59  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/test/observing_test.rb:
   35    end
   36  
   37:   test "initializes model with no cached observers" do
   38      assert ObservedModel.observers.empty?, "Not empty: #{ObservedModel.observers.inspect}"
   39    end
   40  
   41:   test "stores cached observers in an array" do
   42      ObservedModel.observers << :foo
   43      assert ObservedModel.observers.include?(:foo), ":foo not in #{ObservedModel.observers.inspect}"
   44    end
   45  
   46:   test "flattens array of assigned cached observers" do
   47      ObservedModel.observers = [[:foo], :bar]
   48      assert ObservedModel.observers.include?(:foo), ":foo not in #{ObservedModel.observers.inspect}"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails-observers-0.1.2/test/sweeper_test.rb:
   12    include SharedTestRoutes.url_helpers
   13  
   14:   cache_sweeper :app_sweeper
   15  
   16    def show

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails_best_practices-1.14.4/spec/rails_best_practices/reviews/law_of_demeter_review_spec.rb:
  147          content = <<-EOF
  148          class Answer < ActiveRecord::Base
  149:           belongs_to :question, counter_cache: true, touch: true
  150          end
  151          EOF

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rails_best_practices-1.14.4/spec/rails_best_practices/reviews/remove_unused_methods_in_models_review_spec.rb:
    6        let(:runner) { Core::Runner.new(
    7          prepares: Prepares::ModelPrepare.new,
    8:         reviews: RemoveUnusedMethodsInModelsReview.new({'except_methods' => ["*#set_cache"]})
    9        ) }
   10  
   ..
   36            content =<<-EOF
   37            class Post < ActiveRecord::Base
   38:             def set_cache; end
   39            end
   40            EOF
   ..
   72            content =<<-EOF
   73            class Post < ActiveRecord::Base
   74:             after_save :expire_cache
   75              private
   76:             def expire_cache; end
   77            end
   78            EOF

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/CHANGELOG.md:
  272      `test/mailers`. Corresponding rake tasks added as well. *Mike Moore*
  273  
  274: *   Set a different cache per environment for assets pipeline
  275:     through `config.assets.cache`.
  276  
  277      *Guillermo Iguaran*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails.rb:
   26  
   27    class << self
   28:     attr_accessor :application, :cache, :logger
   29  
   30      # The Configuration instance used to configure the Rails environment

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/application.rb:
   19    # Besides providing the same configuration as Rails::Engine and Rails::Railtie,
   20    # the application object has several specific configurations, for example
   21:   # "cache_classes", "consider_all_requests_local", "filter_parameters",
   22    # "logger" and so forth.
   23    #
   ..
  310          app = self
  311  
  312:         if rack_cache = load_rack_cache
  313:           require "action_dispatch/http/rack_cache"
  314:           middleware.use ::Rack::Cache, rack_cache
  315          end
  316  
  ...
  322  
  323          if config.serve_static_assets
  324:           middleware.use ::ActionDispatch::Static, paths["public"].first, config.static_cache_control
  325          end
  326  
  ...
  336          middleware.use ::ActionDispatch::RemoteIp, config.action_dispatch.ip_spoofing_check, config.action_dispatch.trusted_proxies
  337  
  338:         unless config.cache_classes
  339            middleware.use ::ActionDispatch::Reloader, lambda { app.reload_dependencies? }
  340          end
  ...
  354          middleware.use ::Rack::Head
  355          middleware.use ::Rack::ConditionalGet
  356:         middleware.use ::Rack::ETag, "no-cache"
  357        end
  358      end
  ...
  360      def allow_concurrency?
  361        if config.allow_concurrency.nil?
  362:         config.cache_classes
  363        else
  364          config.allow_concurrency
  ...
  366      end
  367  
  368:     def load_rack_cache
  369:       rack_cache = config.action_dispatch.rack_cache
  370:       return unless rack_cache
  371  
  372        begin
  373:         require 'rack/cache'
  374        rescue LoadError => error
  375:         error.message << ' Be sure to add rack-cache to your Gemfile'
  376          raise
  377        end
  378  
  379:       if rack_cache == true
  380          {
  381            metastore: "rails:/",
  ...
  384          }
  385        else
  386:         rack_cache
  387        end
  388      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/application/bootstrap.rb:
   24  
   25  INFO
   26:           config.eager_load = config.cache_classes
   27          end
   28        end
   ..
   57        end
   58  
   59:       # Initialize cache early in the stack so railties can make use of it.
   60:       initializer :initialize_cache, group: :all do
   61:         unless Rails.cache
   62:           Rails.cache = ActiveSupport::Cache.lookup_store(config.cache_store)
   63  
   64:           if Rails.cache.respond_to?(:middleware)
   65:             config.middleware.insert_before("Rack::Runtime", Rails.cache.middleware)
   66            end
   67          end
   ..
   70        # Sets the dependency loading mechanism.
   71        initializer :initialize_dependency_mechanism, group: :all do
   72:         ActiveSupport::Dependencies.mechanism = config.cache_classes ? :require : :load
   73        end
   74  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/application/configuration.rb:
    7      class Configuration < ::Rails::Engine::Configuration
    8        attr_accessor :allow_concurrency, :asset_host, :assets, :autoflush_log,
    9:                     :cache_classes, :cache_store, :consider_all_requests_local, :console,
   10                      :eager_load, :exceptions_app, :file_watcher, :filter_parameters,
   11                      :force_ssl, :helpers_paths, :logger, :log_formatter, :log_tags,
   12                      :railties_order, :relative_url_root, :secret_key_base, :secret_token,
   13:                     :serve_static_assets, :ssl_options, :static_cache_control, :session_options,
   14                      :time_zone, :reload_classes_only_on_change,
   15                      :beginning_of_week, :filter_redirect
   ..
   27          @helpers_paths                 = []
   28          @serve_static_assets           = true
   29:         @static_cache_control          = nil
   30          @force_ssl                     = false
   31          @ssl_options                   = {}
   ..
   37          @middleware                    = app_middleware
   38          @generators                    = app_generators
   39:         @cache_store                   = [ :file_store, "#{root}/tmp/cache/" ]
   40          @railties_order                = [:all]
   41          @relative_url_root             = ENV["RAILS_RELATIVE_URL_ROOT"]
   ..
   59          @assets.compile                  = true
   60          @assets.digest                   = false
   61:         @assets.cache_store              = [ :file_store, "#{root}/tmp/cache/assets/#{Rails.env}/" ]
   62          @assets.js_compressor            = nil
   63          @assets.css_compressor           = nil
   ..
   91        def threadsafe!
   92          message = "config.threadsafe! is deprecated. Rails applications " \
   93:                   "behave by default as thread safe in production as long as config.cache_classes and " \
   94                    "config.eager_load are set to true"
   95          ActiveSupport::Deprecation.warn message
   96:         @cache_classes = true
   97          @eager_load = true
   98          self

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/application/finisher.rb:
   46  
   47        # This needs to happen before eager load so it happens
   48:       # in exactly the same point regardless of config.cache_classes
   49        initializer :run_prepare_callbacks do
   50          ActionDispatch::Reloader.prepare!

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/commands/server.rb:
   68  
   69        #Create required tmp directories if not found
   70:       %w(cache pids sessions sockets).each do |dir_to_make|
   71          FileUtils.mkdir_p(File.join(Rails.root, 'tmp', dir_to_make))
   72        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/deprecation.rb:
   16    end
   17  
   18:   DeprecatedConstant.deprecate('RAILS_CACHE', '::Rails.cache')
   19  end
   20  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/base.rb:
  221        end
  222  
  223:       # Cache source root and add lib/generators/base/generator/templates to
  224        # source paths.
  225        def self.inherited(base) #:nodoc:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/app/app_generator.rb:
  120  
  121      def tmp
  122:       empty_directory "tmp/cache"
  123:       empty_directory "tmp/cache/assets"
  124      end
  125  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/app/templates/config/environments/development.rb.tt:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Do not eager load code on boot.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/app/templates/config/environments/production.rb.tt:
    3  
    4    # Code is not reloaded between requests.
    5:   config.cache_classes = true
    6  
    7    # Eager load code on boot. This eager loads most of Rails and
    .
   15    config.action_controller.perform_caching = true
   16  
   17:   # Enable Rack::Cache to put a simple HTTP cache in front of your application
   18:   # Add `rack-cache` to your Gemfile before enabling this.
   19    # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
   20:   # config.action_dispatch.rack_cache = true
   21  
   22    # Disable Rails's static asset server (Apache or nginx will already do this).
   ..
   54    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   55  
   56:   # Use a different cache store in production.
   57:   # config.cache_store = :mem_cache_store
   58  
   59    # Enable serving of images, stylesheets, and JavaScripts from an asset server.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/app/templates/config/environments/test.rb.tt:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Do not eager load code on boot. This avoids loading your whole application
   ..
   13    config.eager_load = false
   14  
   15:   # Configure static asset server for tests with Cache-Control for performance.
   16    config.serve_static_assets  = true
   17:   config.static_cache_control = "public, max-age=3600"
   18  
   19    # Show full error reports and disable caching.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/app/templates/README.rdoc:
   18  * How to run the test suite
   19  
   20: * Services (job queues, cache servers, search engines, etc.)
   21  
   22  * Deployment instructions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/generators/rails/plugin_new/templates/gitignore:
    7  <%= dummy_path %>/log/*.log
    8  <%= dummy_path %>/tmp/
    9: <%= dummy_path %>/.sass-cache
   10  <% end -%>

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/railtie/configuration.rb:
   54        end
   55  
   56:       # Third configurable block to run. Does not run if +config.cache_classes+
   57        # set to false.
   58        def before_eager_load(&block)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/railties-4.0.3/lib/rails/tasks/tmp.rake:
    1  namespace :tmp do
    2:   desc "Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)"
    3:   task clear: [ "tmp:sessions:clear",  "tmp:cache:clear", "tmp:sockets:clear"]
    4  
    5    tmp_dirs = [ 'tmp/sessions',
    6:                'tmp/cache',
    7                 'tmp/sockets',
    8                 'tmp/pids',
    9:                'tmp/cache/assets/development',
   10:                'tmp/cache/assets/test',
   11:                'tmp/cache/assets/production' ]
   12  
   13    tmp_dirs.each { |d| directory d }
   14  
   15:   desc "Creates tmp directories for sessions, cache, sockets, and pids"
   16    task create: tmp_dirs
   17  
   ..
   23    end
   24  
   25:   namespace :cache do
   26:     # desc "Clears all files and directories in tmp/cache"
   27      task :clear do
   28:       FileUtils.rm_rf(Dir['tmp/cache/[^.]*'])
   29      end
   30    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/ChangeLog:
  734     Date:   Fri Mar 18 09:05:47 2011 +0000
  735     
  736:        watcher: set Expires headers for cache invalidation
  737         
  738         We know exactly when to invalidate based on the delay :)
  ...
  752         watcher: prevent Rack::Deflater from buffering
  753         
  754:        Set "Cache-Control: no-transform" to prevent frontend proxies
  755         from flushing data.
  756     
  ...
 1560         Non-GCC 4.x users may use the libatomic_ops[1] package to
 1561         compile Raindrops.  Memory efficiency is improved for modern
 1562:        glibc users with run-time cache line size detection, we no
 1563:        longer assume 128 byte cache lines.
 1564         
 1565         [1] - http://www.hpl.hp.com/research/linux/atomic_ops/
 ....
 1597     Date:   Sat Sep 18 09:08:00 2010 +0000
 1598     
 1599:        use runtime cache line size detection
 1600         
 1601:        Modern glibc can easily return the L1 cache line size with
 1602         sysconf(3), so we'll use that and avoid paying a size penalty on
 1603:        CPUs with smaller cache lines than 128 (every modern x86 except
 1604         the idiotic P4).
 1605         
 ....
 1609         On machines without the non-portable glibc sysconf(3)
 1610         enhancements, we'll continue to operate on the assumption
 1611:        of an enormous 128 byte cache line size.
 1612     
 1613     commit c658a2be7355ceee72736cc17754022dc7abfa9f

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/ext/raindrops/raindrops.c:
   15  
   16  /*
   17:  * most modern CPUs have a cache-line size of 64 or 128.
   18   * We choose a bigger one by default since our structure is not
   19   * heavily used
   ..
  368  	if (tmp == 1)
  369  		raindrop_size = sizeof(unsigned long);
  370: #ifdef _SC_LEVEL1_DCACHE_LINESIZE
  371  	if (tmp != 1) {
  372: 		tmp = sysconf(_SC_LEVEL1_DCACHE_LINESIZE);
  373  		if (tmp > 0)
  374  			raindrop_size = (size_t)tmp;
  ...
  402  	 * The size (in bytes) of a slot in a Raindrops object.
  403  	 * This is the size of a word on single CPU systems and
  404: 	 * the size of the L1 cache line size if detectable.
  405  	 *
  406  	 * Defaults to 128 bytes if undetectable.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/lib/raindrops/aggregate/pmq.rb:
   85        @rd = File.open(t.path, "rb")
   86      end
   87:     @cached_aggregate = @aggregate
   88      flush_master
   89      @mq_send = if opts[:lossy]
   ..
  110  
  111    def mq_send(val) # :nodoc:
  112:     @cached_aggregate = nil
  113      @mq_send.call Marshal.dump(val)
  114    end
  ...
  149    # Loads the last shared \Aggregate from the master thread/process
  150    def aggregate
  151:     @cached_aggregate ||= begin
  152        flush
  153        Marshal.load(synchronize(@rd, RDLOCK) do |rd|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/lib/raindrops/watcher.rb:
  397        headers = {
  398          "Content-Type" => "text/plain",
  399:         "Cache-Control" => "no-transform",
  400          "Expires" => Time.at(0).httpdate,
  401        }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/NEWS:
  176    Non-GCC 4.x users may use the libatomic_ops[1] package to
  177    compile Raindrops.  Memory efficiency is improved for modern
  178:   glibc users with run-time cache line size detection, we no
  179:   longer assume 128 byte cache lines.
  180  
  181    [1] - http://www.hpl.hp.com/research/linux/atomic_ops/

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/README:
   12  * counters are shared across all forked children and lock-free
   13  
   14: * counters are kept on separate cache lines to reduce contention under SMP
   15  
   16  * may expose server statistics as a Rack Middleware endpoint

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raindrops-0.12.0/setup.rb:
  793      @ardir = File.expand_path(ardir_root)
  794      @config = config
  795:     # cache
  796      @valid_task_re = nil
  797    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raphael-rails-2.1.2/vendor/assets/javascripts/history.md:
   12    * Fix to make IE9 display tooltips when setting the title attribute on an element. By @samcrang
   13    * Fix Wrong position after scale path in IE. By @sarvaje
   14:   * isPointInside incorrectly caches the path used to calculate its value. By @lvanderbijl
   15    * Raphael.path2curve does not honor original shape. By @timo22345
   16    * IsPointInside fix for transformed paths

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raphael-rails-2.1.2/vendor/assets/javascripts/raphael-min.js:
    7  // │ Licensed under the MIT (http://raphaeljs.com/license.html) license.│ \\
    8  // └────────────────────────────────────────────────────────────────────┘ \\
    9: !function(a){var b,c,d="0.4.2",e="hasOwnProperty",f=/[\.\/]/,g="*",h=function(){},i=function(a,b){return a-b},j={n:{}},k=function(a,d){a=String(a);var e,f=c,g=Array.prototype.slice.call(arguments,2),h=k.listeners(a),j=0,l=[],m={},n=[],o=b;b=a,c=0;for(var p=0,q=h.length;q>p;p++)"zIndex"in h[p]&&(l.push(h[p].zIndex),h[p].zIndex<0&&(m[h[p].zIndex]=h[p]));for(l.sort(i);l[j]<0;)if(e=m[l[j++]],n.push(e.apply(d,g)),c)return c=f,n;for(p=0;q>p;p++)if(e=h[p],"zIndex"in e)if(e.zIndex==l[j]){if(n.push(e.apply(d,g)),c)break;do if(j++,e=m[l[j]],e&&n.push(e.apply(d,g)),c)break;while(e)}else m[e.zIndex]=e;else if(n.push(e.apply(d,g)),c)break;return c=f,b=o,n.length?n:null};k._events=j,k.listeners=function(a){var b,c,d,e,h,i,k,l,m=a.split(f),n=j,o=[n],p=[];for(e=0,h=m.length;h>e;e++){for(l=[],i=0,k=o.length;k>i;i++)for(n=o[i].n,c=[n[m[e]],n[g]],d=2;d--;)b=c[d],b&&(l.push(b),p=p.concat(b.f||[]));o=l}return p},k.on=function(a,b){if(a=String(a),"function"!=typeof b)return function(){};for(var c=a.split(f),d=j,e=0,g=c.length;g>e;e++)d=d.n,d=d.hasOwnProperty(c[e])&&d[c[e]]||(d[c[e]]={n:{}});for(d.f=d.f||[],e=0,g=d.f.length;g>e;e++)if(d.f[e]==b)return h;return d.f.push(b),function(a){+a==+a&&(b.zIndex=+a)}},k.f=function(a){var b=[].slice.call(arguments,1);return function(){k.apply(null,[a,null].concat(b).concat([].slice.call(arguments,0)))}},k.stop=function(){c=1},k.nt=function(a){return a?new RegExp("(?:\\.|\\/|^)"+a+"(?:\\.|\\/|$)").test(b):b},k.nts=function(){return b.split(f)},k.off=k.unbind=function(a,b){if(!a)return k._events=j={n:{}},void 0;var c,d,h,i,l,m,n,o=a.split(f),p=[j];for(i=0,l=o.length;l>i;i++)for(m=0;m<p.length;m+=h.length-2){if(h=[m,1],c=p[m].n,o[i]!=g)c[o[i]]&&h.push(c[o[i]]);else for(d in c)c[e](d)&&h.push(c[d]);p.splice.apply(p,h)}for(i=0,l=p.length;l>i;i++)for(c=p[i];c.n;){if(b){if(c.f){for(m=0,n=c.f.length;n>m;m++)if(c.f[m]==b){c.f.splice(m,1);break}!c.f.length&&delete c.f}for(d in c.n)if(c.n[e](d)&&c.n[d].f){var q=c.n[d].f;for(m=0,n=q.length;n>m;m++)if(q[m]==b){q.splice(m,1);break}!q.length&&delete c.n[d].f}}else{delete c.f;for(d in c.n)c.n[e](d)&&c.n[d].f&&delete c.n[d].f}c=c.n}},k.once=function(a,b){var c=function(){return k.unbind(a,c),b.apply(this,arguments)};return k.on(a,c)},k.version=d,k.toString=function(){return"You are running Eve "+d},"undefined"!=typeof module&&module.exports?module.exports=k:"undefined"!=typeof define?define("eve",[],function(){return k}):a.eve=k}(this),function(a,b){"function"==typeof define&&define.amd?define(["eve"],function(c){return b(a,c)}):b(a,a.eve)}(this,function(a,b){function c(a){if(c.is(a,"function"))return u?a():b.on("raphael.DOMload",a);if(c.is(a,V))return c._engine.create[D](c,a.splice(0,3+c.is(a[0],T))).add(a);var d=Array.prototype.slice.call(arguments,0);if(c.is(d[d.length-1],"function")){var e=d.pop();return u?e.call(c._engine.create[D](c,d)):b.on("raphael.DOMload",function(){e.call(c._engine.create[D](c,d))})}return c._engine.create[D](c,arguments)}function d(a){if("function"==typeof a||Object(a)!==a)return a;var b=new a.constructor;for(var c in a)a[z](c)&&(b[c]=d(a[c]));return b}function e(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return a.push(a.splice(c,1)[0])}function f(a,b,c){function d(){var f=Array.prototype.slice.call(arguments,0),g=f.join("␀"),h=d.cache=d.cache||{},i=d.count=d.count||[];return h[z](g)?(e(i,g),c?c(h[g]):h[g]):(i.length>=1e3&&delete h[i.shift()],i.push(g),h[g]=a[D](b,f),c?c(h[g]):h[g])}return d}function g(){return this.hex}function h(a,b){for(var c=[],d=0,e=a.length;e-2*!b>d;d+=2){var f=[{x:+a[d-2],y:+a[d-1]},{x:+a[d],y:+a[d+1]},{x:+a[d+2],y:+a[d+3]},{x:+a[d+4],y:+a[d+5]}];b?d?e-4==d?f[3]={x:+a[0],y:+a[1]}:e-2==d&&(f[2]={x:+a[0],y:+a[1]},f[3]={x:+a[2],y:+a[3]}):f[0]={x:+a[e-2],y:+a[e-1]}:e-4==d?f[3]=f[2]:d||(f[0]={x:+a[d],y:+a[d+1]}),c.push(["C",(-f[0].x+6*f[1].x+f[2].x)/6,(-f[0].y+6*f[1].y+f[2].y)/6,(f[1].x+6*f[2].x-f[3].x)/6,(f[1].y+6*f[2].y-f[3].y)/6,f[2].x,f[2].y])}return c}function i(a,b,c,d,e){var f=-3*b+9*c-9*d+3*e,g=a*f+6*b-12*c+6*d;return a*g-3*b+3*c}function j(a,b,c,d,e,f,g,h,j){null==j&&(j=1),j=j>1?1:0>j?0:j;for(var k=j/2,l=12,m=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],n=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],o=0,p=0;l>p;p++){var q=k*m[p]+k,r=i(q,a,c,e,g),s=i(q,b,d,f,h),t=r*r+s*s;o+=n[p]*N.sqrt(t)}return k*o}function k(a,b,c,d,e,f,g,h,i){if(!(0>i||j(a,b,c,d,e,f,g,h)<i)){var k,l=1,m=l/2,n=l-m,o=.01;for(k=j(a,b,c,d,e,f,g,h,n);Q(k-i)>o;)m/=2,n+=(i>k?1:-1)*m,k=j(a,b,c,d,e,f,g,h,n);return n}}function l(a,b,c,d,e,f,g,h){if(!(O(a,c)<P(e,g)||P(a,c)>O(e,g)||O(b,d)<P(f,h)||P(b,d)>O(f,h))){var i=(a*d-b*c)*(e-g)-(a-c)*(e*h-f*g),j=(a*d-b*c)*(f-h)-(b-d)*(e*h-f*g),k=(a-c)*(f-h)-(b-d)*(e-g);if(k){var l=i/k,m=j/k,n=+l.toFixed(2),o=+m.toFixed(2);if(!(n<+P(a,c).toFixed(2)||n>+O(a,c).toFixed(2)||n<+P(e,g).toFixed(2)||n>+O(e,g).toFixed(2)||o<+P(b,d).toFixed(2)||o>+O(b,d).toFixed(2)||o<+P(f,h).toFixed(2)||o>+O(f,h).toFixed(2)))return{x:l,y:m}}}}function m(a,b,d){var e=c.bezierBBox(a),f=c.bezierBBox(b);if(!c.isBBoxIntersect(e,f))return d?0:[];for(var g=j.apply(0,a),h=j.apply(0,b),i=O(~~(g/5),1),k=O(~~(h/5),1),m=[],n=[],o={},p=d?0:[],q=0;i+1>q;q++){var r=c.findDotsAtSegment.apply(c,a.concat(q/i));m.push({x:r.x,y:r.y,t:q/i})}for(q=0;k+1>q;q++)r=c.findDotsAtSegment.apply(c,b.concat(q/k)),n.push({x:r.x,y:r.y,t:q/k});for(q=0;i>q;q++)for(var s=0;k>s;s++){var t=m[q],u=m[q+1],v=n[s],w=n[s+1],x=Q(u.x-t.x)<.001?"y":"x",y=Q(w.x-v.x)<.001?"y":"x",z=l(t.x,t.y,u.x,u.y,v.x,v.y,w.x,w.y);if(z){if(o[z.x.toFixed(4)]==z.y.toFixed(4))continue;o[z.x.toFixed(4)]=z.y.toFixed(4);var A=t.t+Q((z[x]-t[x])/(u[x]-t[x]))*(u.t-t.t),B=v.t+Q((z[y]-v[y])/(w[y]-v[y]))*(w.t-v.t);A>=0&&1.001>=A&&B>=0&&1.001>=B&&(d?p++:p.push({x:z.x,y:z.y,t1:P(A,1),t2:P(B,1)}))}}return p}function n(a,b,d){a=c._path2curve(a),b=c._path2curve(b);for(var e,f,g,h,i,j,k,l,n,o,p=d?0:[],q=0,r=a.length;r>q;q++){var s=a[q];if("M"==s[0])e=i=s[1],f=j=s[2];else{"C"==s[0]?(n=[e,f].concat(s.slice(1)),e=n[6],f=n[7]):(n=[e,f,e,f,i,j,i,j],e=i,f=j);for(var t=0,u=b.length;u>t;t++){var v=b[t];if("M"==v[0])g=k=v[1],h=l=v[2];else{"C"==v[0]?(o=[g,h].concat(v.slice(1)),g=o[6],h=o[7]):(o=[g,h,g,h,k,l,k,l],g=k,h=l);var w=m(n,o,d);if(d)p+=w;else{for(var x=0,y=w.length;y>x;x++)w[x].segment1=q,w[x].segment2=t,w[x].bez1=n,w[x].bez2=o;p=p.concat(w)}}}}}return p}function o(a,b,c,d,e,f){null!=a?(this.a=+a,this.b=+b,this.c=+c,this.d=+d,this.e=+e,this.f=+f):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}function p(){return this.x+H+this.y+H+this.width+" × "+this.height}function q(a,b,c,d,e,f){function g(a){return((l*a+k)*a+j)*a}function h(a,b){var c=i(a,b);return((o*c+n)*c+m)*c}function i(a,b){var c,d,e,f,h,i;for(e=a,i=0;8>i;i++){if(f=g(e)-a,Q(f)<b)return e;if(h=(3*l*e+2*k)*e+j,Q(h)<1e-6)break;e-=f/h}if(c=0,d=1,e=a,c>e)return c;if(e>d)return d;for(;d>c;){if(f=g(e),Q(f-a)<b)return e;a>f?c=e:d=e,e=(d-c)/2+c}return e}var j=3*b,k=3*(d-b)-j,l=1-j-k,m=3*c,n=3*(e-c)-m,o=1-m-n;return h(a,1/(200*f))}function r(a,b){var c=[],d={};if(this.ms=b,this.times=1,a){for(var e in a)a[z](e)&&(d[_(e)]=a[e],c.push(_(e)));c.sort(lb)}this.anim=d,this.top=c[c.length-1],this.percents=c}function s(a,d,e,f,g,h){e=_(e);var i,j,k,l,m,n,p=a.ms,r={},s={},t={};if(f)for(v=0,x=ic.length;x>v;v++){var u=ic[v];if(u.el.id==d.id&&u.anim==a){u.percent!=e?(ic.splice(v,1),k=1):j=u,d.attr(u.totalOrigin);break}}else f=+s;for(var v=0,x=a.percents.length;x>v;v++){if(a.percents[v]==e||a.percents[v]>f*a.top){e=a.percents[v],m=a.percents[v-1]||0,p=p/a.top*(e-m),l=a.percents[v+1],i=a.anim[e];break}f&&d.attr(a.anim[a.percents[v]])}if(i){if(j)j.initstatus=f,j.start=new Date-j.ms*f;else{for(var y in i)if(i[z](y)&&(db[z](y)||d.paper.customAttributes[z](y)))switch(r[y]=d.attr(y),null==r[y]&&(r[y]=cb[y]),s[y]=i[y],db[y]){case T:t[y]=(s[y]-r[y])/p;break;case"colour":r[y]=c.getRGB(r[y]);var A=c.getRGB(s[y]);t[y]={r:(A.r-r[y].r)/p,g:(A.g-r[y].g)/p,b:(A.b-r[y].b)/p};break;case"path":var B=Kb(r[y],s[y]),C=B[1];for(r[y]=B[0],t[y]=[],v=0,x=r[y].length;x>v;v++){t[y][v]=[0];for(var D=1,F=r[y][v].length;F>D;D++)t[y][v][D]=(C[v][D]-r[y][v][D])/p}break;case"transform":var G=d._,H=Pb(G[y],s[y]);if(H)for(r[y]=H.from,s[y]=H.to,t[y]=[],t[y].real=!0,v=0,x=r[y].length;x>v;v++)for(t[y][v]=[r[y][v][0]],D=1,F=r[y][v].length;F>D;D++)t[y][v][D]=(s[y][v][D]-r[y][v][D])/p;else{var K=d.matrix||new o,L={_:{transform:G.transform},getBBox:function(){return d.getBBox(1)}};r[y]=[K.a,K.b,K.c,K.d,K.e,K.f],Nb(L,s[y]),s[y]=L._.transform,t[y]=[(L.matrix.a-K.a)/p,(L.matrix.b-K.b)/p,(L.matrix.c-K.c)/p,(L.matrix.d-K.d)/p,(L.matrix.e-K.e)/p,(L.matrix.f-K.f)/p]}break;case"csv":var M=I(i[y])[J](w),N=I(r[y])[J](w);if("clip-rect"==y)for(r[y]=N,t[y]=[],v=N.length;v--;)t[y][v]=(M[v]-r[y][v])/p;s[y]=M;break;default:for(M=[][E](i[y]),N=[][E](r[y]),t[y]=[],v=d.paper.customAttributes[y].length;v--;)t[y][v]=((M[v]||0)-(N[v]||0))/p}var O=i.easing,P=c.easing_formulas[O];if(!P)if(P=I(O).match(Z),P&&5==P.length){var Q=P;P=function(a){return q(a,+Q[1],+Q[2],+Q[3],+Q[4],p)}}else P=nb;if(n=i.start||a.start||+new Date,u={anim:a,percent:e,timestamp:n,start:n+(a.del||0),status:0,initstatus:f||0,stop:!1,ms:p,easing:P,from:r,diff:t,to:s,el:d,callback:i.callback,prev:m,next:l,repeat:h||a.times,origin:d.attr(),totalOrigin:g},ic.push(u),f&&!j&&!k&&(u.stop=!0,u.start=new Date-p*f,1==ic.length))return kc();k&&(u.start=new Date-u.ms*f),1==ic.length&&jc(kc)}b("raphael.anim.start."+d.id,d,a)}}function t(a){for(var b=0;b<ic.length;b++)ic[b].el.paper==a&&ic.splice(b--,1)}c.version="2.1.2",c.eve=b;var u,v,w=/[, ]+/,x={circle:1,rect:1,path:1,ellipse:1,text:1,image:1},y=/\{(\d+)\}/g,z="hasOwnProperty",A={doc:document,win:a},B={was:Object.prototype[z].call(A.win,"Raphael"),is:A.win.Raphael},C=function(){this.ca=this.customAttributes={}},D="apply",E="concat",F="ontouchstart"in A.win||A.win.DocumentTouch&&A.doc instanceof DocumentTouch,G="",H=" ",I=String,J="split",K="click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[J](H),L={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},M=I.prototype.toLowerCase,N=Math,O=N.max,P=N.min,Q=N.abs,R=N.pow,S=N.PI,T="number",U="string",V="array",W=Object.prototype.toString,X=(c._ISURL=/^url\(['"]?([^\)]+?)['"]?\)$/i,/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i),Y={NaN:1,Infinity:1,"-Infinity":1},Z=/^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,$=N.round,_=parseFloat,ab=parseInt,bb=I.prototype.toUpperCase,cb=c._availableAttrs={"arrow-end":"none","arrow-start":"none",blur:0,"clip-rect":"0 0 1e9 1e9",cursor:"default",cx:0,cy:0,fill:"#fff","fill-opacity":1,font:'10px "Arial"',"font-family":'"Arial"',"font-size":"10","font-style":"normal","font-weight":400,gradient:0,height:0,href:"http://raphaeljs.com/","letter-spacing":0,opacity:1,path:"M0,0",r:0,rx:0,ry:0,src:"",stroke:"#000","stroke-dasharray":"","stroke-linecap":"butt","stroke-linejoin":"butt","stroke-miterlimit":0,"stroke-opacity":1,"stroke-width":1,target:"_blank","text-anchor":"middle",title:"Raphael",transform:"",width:0,x:0,y:0},db=c._availableAnimAttrs={blur:T,"clip-rect":"csv",cx:T,cy:T,fill:"colour","fill-opacity":T,"font-size":T,height:T,opacity:T,path:"path",r:T,rx:T,ry:T,stroke:"colour","stroke-opacity":T,"stroke-width":T,transform:"transform",width:T,x:T,y:T},eb=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,fb={hs:1,rg:1},gb=/,?([achlmqrstvxz]),?/gi,hb=/([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,ib=/([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,jb=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/gi,kb=(c._radial_gradient=/^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,{}),lb=function(a,b){return _(a)-_(b)},mb=function(){},nb=function(a){return a},ob=c._rectPath=function(a,b,c,d,e){return e?[["M",a+e,b],["l",c-2*e,0],["a",e,e,0,0,1,e,e],["l",0,d-2*e],["a",e,e,0,0,1,-e,e],["l",2*e-c,0],["a",e,e,0,0,1,-e,-e],["l",0,2*e-d],["a",e,e,0,0,1,e,-e],["z"]]:[["M",a,b],["l",c,0],["l",0,d],["l",-c,0],["z"]]},pb=function(a,b,c,d){return null==d&&(d=c),[["M",a,b],["m",0,-d],["a",c,d,0,1,1,0,2*d],["a",c,d,0,1,1,0,-2*d],["z"]]},qb=c._getPath={path:function(a){return a.attr("path")},circle:function(a){var b=a.attrs;return pb(b.cx,b.cy,b.r)},ellipse:function(a){var b=a.attrs;return pb(b.cx,b.cy,b.rx,b.ry)},rect:function(a){var b=a.attrs;return ob(b.x,b.y,b.width,b.height,b.r)},image:function(a){var b=a.attrs;return ob(b.x,b.y,b.width,b.height)},text:function(a){var b=a._getBBox();return ob(b.x,b.y,b.width,b.height)},set:function(a){var b=a._getBBox();return ob(b.x,b.y,b.width,b.height)}},rb=c.mapPath=function(a,b){if(!b)return a;var c,d,e,f,g,h,i;for(a=Kb(a),e=0,g=a.length;g>e;e++)for(i=a[e],f=1,h=i.length;h>f;f+=2)c=b.x(i[f],i[f+1]),d=b.y(i[f],i[f+1]),i[f]=c,i[f+1]=d;return a};if(c._g=A,c.type=A.win.SVGAngle||A.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?"SVG":"VML","VML"==c.type){var sb,tb=A.doc.createElement("div");if(tb.innerHTML='<v:shape adj="1"/>',sb=tb.firstChild,sb.style.behavior="url(#default#VML)",!sb||"object"!=typeof sb.adj)return c.type=G;tb=null}c.svg=!(c.vml="VML"==c.type),c._Paper=C,c.fn=v=C.prototype=c.prototype,c._id=0,c._oid=0,c.is=function(a,b){return b=M.call(b),"finite"==b?!Y[z](+a):"array"==b?a instanceof Array:"null"==b&&null===a||b==typeof a&&null!==a||"object"==b&&a===Object(a)||"array"==b&&Array.isArray&&Array.isArray(a)||W.call(a).slice(8,-1).toLowerCase()==b},c.angle=function(a,b,d,e,f,g){if(null==f){var h=a-d,i=b-e;return h||i?(180+180*N.atan2(-i,-h)/S+360)%360:0}return c.angle(a,b,f,g)-c.angle(d,e,f,g)},c.rad=function(a){return a%360*S/180},c.deg=function(a){return 180*a/S%360},c.snapTo=function(a,b,d){if(d=c.is(d,"finite")?d:10,c.is(a,V)){for(var e=a.length;e--;)if(Q(a[e]-b)<=d)return a[e]}else{a=+a;var f=b%a;if(d>f)return b-f;if(f>a-d)return b-f+a}return b},c.createUUID=function(a,b){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(a,b).toUpperCase()}}(/[xy]/g,function(a){var b=0|16*N.random(),c="x"==a?b:8|3&b;return c.toString(16)}),c.setWindow=function(a){b("raphael.setWindow",c,A.win,a),A.win=a,A.doc=A.win.document,c._engine.initWin&&c._engine.initWin(A.win)};var ub=function(a){if(c.vml){var b,d=/^\s+|\s+$/g;try{var e=new ActiveXObject("htmlfile");e.write("<body>"),e.close(),b=e.body}catch(g){b=createPopup().document.body}var h=b.createTextRange();ub=f(function(a){try{b.style.color=I(a).replace(d,G);var c=h.queryCommandValue("ForeColor");return c=(255&c)<<16|65280&c|(16711680&c)>>>16,"#"+("000000"+c.toString(16)).slice(-6)}catch(e){return"none"}})}else{var i=A.doc.createElement("i");i.title="Raphaël Colour Picker",i.style.display="none",A.doc.body.appendChild(i),ub=f(function(a){return i.style.color=a,A.doc.defaultView.getComputedStyle(i,G).getPropertyValue("color")})}return ub(a)},vb=function(){return"hsb("+[this.h,this.s,this.b]+")"},wb=function(){return"hsl("+[this.h,this.s,this.l]+")"},xb=function(){return this.hex},yb=function(a,b,d){if(null==b&&c.is(a,"object")&&"r"in a&&"g"in a&&"b"in a&&(d=a.b,b=a.g,a=a.r),null==b&&c.is(a,U)){var e=c.getRGB(a);a=e.r,b=e.g,d=e.b}return(a>1||b>1||d>1)&&(a/=255,b/=255,d/=255),[a,b,d]},zb=function(a,b,d,e){a*=255,b*=255,d*=255;var f={r:a,g:b,b:d,hex:c.rgb(a,b,d),toString:xb};return c.is(e,"finite")&&(f.opacity=e),f};c.color=function(a){var b;return c.is(a,"object")&&"h"in a&&"s"in a&&"b"in a?(b=c.hsb2rgb(a),a.r=b.r,a.g=b.g,a.b=b.b,a.hex=b.hex):c.is(a,"object")&&"h"in a&&"s"in a&&"l"in a?(b=c.hsl2rgb(a),a.r=b.r,a.g=b.g,a.b=b.b,a.hex=b.hex):(c.is(a,"string")&&(a=c.getRGB(a)),c.is(a,"object")&&"r"in a&&"g"in a&&"b"in a?(b=c.rgb2hsl(a),a.h=b.h,a.s=b.s,a.l=b.l,b=c.rgb2hsb(a),a.v=b.b):(a={hex:"none"},a.r=a.g=a.b=a.h=a.s=a.v=a.l=-1)),a.toString=xb,a},c.hsb2rgb=function(a,b,c,d){this.is(a,"object")&&"h"in a&&"s"in a&&"b"in a&&(c=a.b,b=a.s,a=a.h,d=a.o),a*=360;var e,f,g,h,i;return a=a%360/60,i=c*b,h=i*(1-Q(a%2-1)),e=f=g=c-i,a=~~a,e+=[i,h,0,0,h,i][a],f+=[h,i,i,h,0,0][a],g+=[0,0,h,i,i,h][a],zb(e,f,g,d)},c.hsl2rgb=function(a,b,c,d){this.is(a,"object")&&"h"in a&&"s"in a&&"l"in a&&(c=a.l,b=a.s,a=a.h),(a>1||b>1||c>1)&&(a/=360,b/=100,c/=100),a*=360;var e,f,g,h,i;return a=a%360/60,i=2*b*(.5>c?c:1-c),h=i*(1-Q(a%2-1)),e=f=g=c-i/2,a=~~a,e+=[i,h,0,0,h,i][a],f+=[h,i,i,h,0,0][a],g+=[0,0,h,i,i,h][a],zb(e,f,g,d)},c.rgb2hsb=function(a,b,c){c=yb(a,b,c),a=c[0],b=c[1],c=c[2];var d,e,f,g;return f=O(a,b,c),g=f-P(a,b,c),d=0==g?null:f==a?(b-c)/g:f==b?(c-a)/g+2:(a-b)/g+4,d=60*((d+360)%6)/360,e=0==g?0:g/f,{h:d,s:e,b:f,toString:vb}},c.rgb2hsl=function(a,b,c){c=yb(a,b,c),a=c[0],b=c[1],c=c[2];var d,e,f,g,h,i;return g=O(a,b,c),h=P(a,b,c),i=g-h,d=0==i?null:g==a?(b-c)/i:g==b?(c-a)/i+2:(a-b)/i+4,d=60*((d+360)%6)/360,f=(g+h)/2,e=0==i?0:.5>f?i/(2*f):i/(2-2*f),{h:d,s:e,l:f,toString:wb}},c._path2string=function(){return this.join(",").replace(gb,"$1")},c._preload=function(a,b){var c=A.doc.createElement("img");c.style.cssText="position:absolute;left:-9999em;top:-9999em",c.onload=function(){b.call(this),this.onload=null,A.doc.body.removeChild(this)},c.onerror=function(){A.doc.body.removeChild(this)},A.doc.body.appendChild(c),c.src=a},c.getRGB=f(function(a){if(!a||(a=I(a)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:g};if("none"==a)return{r:-1,g:-1,b:-1,hex:"none",toString:g};!(fb[z](a.toLowerCase().substring(0,2))||"#"==a.charAt())&&(a=ub(a));var b,d,e,f,h,i,j=a.match(X);return j?(j[2]&&(e=ab(j[2].substring(5),16),d=ab(j[2].substring(3,5),16),b=ab(j[2].substring(1,3),16)),j[3]&&(e=ab((h=j[3].charAt(3))+h,16),d=ab((h=j[3].charAt(2))+h,16),b=ab((h=j[3].charAt(1))+h,16)),j[4]&&(i=j[4][J](eb),b=_(i[0]),"%"==i[0].slice(-1)&&(b*=2.55),d=_(i[1]),"%"==i[1].slice(-1)&&(d*=2.55),e=_(i[2]),"%"==i[2].slice(-1)&&(e*=2.55),"rgba"==j[1].toLowerCase().slice(0,4)&&(f=_(i[3])),i[3]&&"%"==i[3].slice(-1)&&(f/=100)),j[5]?(i=j[5][J](eb),b=_(i[0]),"%"==i[0].slice(-1)&&(b*=2.55),d=_(i[1]),"%"==i[1].slice(-1)&&(d*=2.55),e=_(i[2]),"%"==i[2].slice(-1)&&(e*=2.55),("deg"==i[0].slice(-3)||"°"==i[0].slice(-1))&&(b/=360),"hsba"==j[1].toLowerCase().slice(0,4)&&(f=_(i[3])),i[3]&&"%"==i[3].slice(-1)&&(f/=100),c.hsb2rgb(b,d,e,f)):j[6]?(i=j[6][J](eb),b=_(i[0]),"%"==i[0].slice(-1)&&(b*=2.55),d=_(i[1]),"%"==i[1].slice(-1)&&(d*=2.55),e=_(i[2]),"%"==i[2].slice(-1)&&(e*=2.55),("deg"==i[0].slice(-3)||"°"==i[0].slice(-1))&&(b/=360),"hsla"==j[1].toLowerCase().slice(0,4)&&(f=_(i[3])),i[3]&&"%"==i[3].slice(-1)&&(f/=100),c.hsl2rgb(b,d,e,f)):(j={r:b,g:d,b:e,toString:g},j.hex="#"+(16777216|e|d<<8|b<<16).toString(16).slice(1),c.is(f,"finite")&&(j.opacity=f),j)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:g}},c),c.hsb=f(function(a,b,d){return c.hsb2rgb(a,b,d).hex}),c.hsl=f(function(a,b,d){return c.hsl2rgb(a,b,d).hex}),c.rgb=f(function(a,b,c){return"#"+(16777216|c|b<<8|a<<16).toString(16).slice(1)}),c.getColor=function(a){var b=this.getColor.start=this.getColor.start||{h:0,s:1,b:a||.75},c=this.hsb2rgb(b.h,b.s,b.b);return b.h+=.075,b.h>1&&(b.h=0,b.s-=.2,b.s<=0&&(this.getColor.start={h:0,s:1,b:b.b})),c.hex},c.getColor.reset=function(){delete this.start},c.parsePathString=function(a){if(!a)return null;var b=Ab(a);if(b.arr)return Cb(b.arr);var d={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},e=[];return c.is(a,V)&&c.is(a[0],V)&&(e=Cb(a)),e.length||I(a).replace(hb,function(a,b,c){var f=[],g=b.toLowerCase();if(c.replace(jb,function(a,b){b&&f.push(+b)}),"m"==g&&f.length>2&&(e.push([b][E](f.splice(0,2))),g="l",b="m"==b?"l":"L"),"r"==g)e.push([b][E](f));else for(;f.length>=d[g]&&(e.push([b][E](f.splice(0,d[g]))),d[g]););}),e.toString=c._path2string,b.arr=Cb(e),e},c.parseTransformString=f(function(a){if(!a)return null;var b=[];return c.is(a,V)&&c.is(a[0],V)&&(b=Cb(a)),b.length||I(a).replace(ib,function(a,c,d){var e=[];M.call(c),d.replace(jb,function(a,b){b&&e.push(+b)}),b.push([c][E](e))}),b.toString=c._path2string,b});var Ab=function(a){var b=Ab.ps=Ab.ps||{};return b[a]?b[a].sleep=100:b[a]={sleep:100},setTimeout(function(){for(var c in b)b[z](c)&&c!=a&&(b[c].sleep--,!b[c].sleep&&delete b[c])}),b[a]};c.findDotsAtSegment=function(a,b,c,d,e,f,g,h,i){var j=1-i,k=R(j,3),l=R(j,2),m=i*i,n=m*i,o=k*a+3*l*i*c+3*j*i*i*e+n*g,p=k*b+3*l*i*d+3*j*i*i*f+n*h,q=a+2*i*(c-a)+m*(e-2*c+a),r=b+2*i*(d-b)+m*(f-2*d+b),s=c+2*i*(e-c)+m*(g-2*e+c),t=d+2*i*(f-d)+m*(h-2*f+d),u=j*a+i*c,v=j*b+i*d,w=j*e+i*g,x=j*f+i*h,y=90-180*N.atan2(q-s,r-t)/S;return(q>s||t>r)&&(y+=180),{x:o,y:p,m:{x:q,y:r},n:{x:s,y:t},start:{x:u,y:v},end:{x:w,y:x},alpha:y}},c.bezierBBox=function(a,b,d,e,f,g,h,i){c.is(a,"array")||(a=[a,b,d,e,f,g,h,i]);var j=Jb.apply(null,a);return{x:j.min.x,y:j.min.y,x2:j.max.x,y2:j.max.y,width:j.max.x-j.min.x,height:j.max.y-j.min.y}},c.isPointInsideBBox=function(a,b,c){return b>=a.x&&b<=a.x2&&c>=a.y&&c<=a.y2},c.isBBoxIntersect=function(a,b){var d=c.isPointInsideBBox;return d(b,a.x,a.y)||d(b,a.x2,a.y)||d(b,a.x,a.y2)||d(b,a.x2,a.y2)||d(a,b.x,b.y)||d(a,b.x2,b.y)||d(a,b.x,b.y2)||d(a,b.x2,b.y2)||(a.x<b.x2&&a.x>b.x||b.x<a.x2&&b.x>a.x)&&(a.y<b.y2&&a.y>b.y||b.y<a.y2&&b.y>a.y)},c.pathIntersection=function(a,b){return n(a,b)},c.pathIntersectionNumber=function(a,b){return n(a,b,1)},c.isPointInsidePath=function(a,b,d){var e=c.pathBBox(a);return c.isPointInsideBBox(e,b,d)&&1==n(a,[["M",b,d],["H",e.x2+10]],1)%2},c._removedFactory=function(a){return function(){b("raphael.log",null,"Raphaël: you are calling to method “"+a+"” of removed object",a)}};var Bb=c.pathBBox=function(a){var b=Ab(a);if(b.bbox)return d(b.bbox);if(!a)return{x:0,y:0,width:0,height:0,x2:0,y2:0};a=Kb(a);for(var c,e=0,f=0,g=[],h=[],i=0,j=a.length;j>i;i++)if(c=a[i],"M"==c[0])e=c[1],f=c[2],g.push(e),h.push(f);else{var k=Jb(e,f,c[1],c[2],c[3],c[4],c[5],c[6]);g=g[E](k.min.x,k.max.x),h=h[E](k.min.y,k.max.y),e=c[5],f=c[6]}var l=P[D](0,g),m=P[D](0,h),n=O[D](0,g),o=O[D](0,h),p=n-l,q=o-m,r={x:l,y:m,x2:n,y2:o,width:p,height:q,cx:l+p/2,cy:m+q/2};return b.bbox=d(r),r},Cb=function(a){var b=d(a);return b.toString=c._path2string,b},Db=c._pathToRelative=function(a){var b=Ab(a);if(b.rel)return Cb(b.rel);c.is(a,V)&&c.is(a&&a[0],V)||(a=c.parsePathString(a));var d=[],e=0,f=0,g=0,h=0,i=0;"M"==a[0][0]&&(e=a[0][1],f=a[0][2],g=e,h=f,i++,d.push(["M",e,f]));for(var j=i,k=a.length;k>j;j++){var l=d[j]=[],m=a[j];if(m[0]!=M.call(m[0]))switch(l[0]=M.call(m[0]),l[0]){case"a":l[1]=m[1],l[2]=m[2],l[3]=m[3],l[4]=m[4],l[5]=m[5],l[6]=+(m[6]-e).toFixed(3),l[7]=+(m[7]-f).toFixed(3);break;case"v":l[1]=+(m[1]-f).toFixed(3);break;case"m":g=m[1],h=m[2];default:for(var n=1,o=m.length;o>n;n++)l[n]=+(m[n]-(n%2?e:f)).toFixed(3)}else{l=d[j]=[],"m"==m[0]&&(g=m[1]+e,h=m[2]+f);for(var p=0,q=m.length;q>p;p++)d[j][p]=m[p]}var r=d[j].length;switch(d[j][0]){case"z":e=g,f=h;break;case"h":e+=+d[j][r-1];break;case"v":f+=+d[j][r-1];break;default:e+=+d[j][r-2],f+=+d[j][r-1]}}return d.toString=c._path2string,b.rel=Cb(d),d},Eb=c._pathToAbsolute=function(a){var b=Ab(a);if(b.abs)return Cb(b.abs);if(c.is(a,V)&&c.is(a&&a[0],V)||(a=c.parsePathString(a)),!a||!a.length)return[["M",0,0]];var d=[],e=0,f=0,g=0,i=0,j=0;"M"==a[0][0]&&(e=+a[0][1],f=+a[0][2],g=e,i=f,j++,d[0]=["M",e,f]);for(var k,l,m=3==a.length&&"M"==a[0][0]&&"R"==a[1][0].toUpperCase()&&"Z"==a[2][0].toUpperCase(),n=j,o=a.length;o>n;n++){if(d.push(k=[]),l=a[n],l[0]!=bb.call(l[0]))switch(k[0]=bb.call(l[0]),k[0]){case"A":k[1]=l[1],k[2]=l[2],k[3]=l[3],k[4]=l[4],k[5]=l[5],k[6]=+(l[6]+e),k[7]=+(l[7]+f);break;case"V":k[1]=+l[1]+f;break;case"H":k[1]=+l[1]+e;break;case"R":for(var p=[e,f][E](l.slice(1)),q=2,r=p.length;r>q;q++)p[q]=+p[q]+e,p[++q]=+p[q]+f;d.pop(),d=d[E](h(p,m));break;case"M":g=+l[1]+e,i=+l[2]+f;default:for(q=1,r=l.length;r>q;q++)k[q]=+l[q]+(q%2?e:f)}else if("R"==l[0])p=[e,f][E](l.slice(1)),d.pop(),d=d[E](h(p,m)),k=["R"][E](l.slice(-2));else for(var s=0,t=l.length;t>s;s++)k[s]=l[s];switch(k[0]){case"Z":e=g,f=i;break;case"H":e=k[1];break;case"V":f=k[1];break;case"M":g=k[k.length-2],i=k[k.length-1];default:e=k[k.length-2],f=k[k.length-1]}}return d.toString=c._path2string,b.abs=Cb(d),d},Fb=function(a,b,c,d){return[a,b,c,d,c,d]},Gb=function(a,b,c,d,e,f){var g=1/3,h=2/3;return[g*a+h*c,g*b+h*d,g*e+h*c,g*f+h*d,e,f]},Hb=function(a,b,c,d,e,g,h,i,j,k){var l,m=120*S/180,n=S/180*(+e||0),o=[],p=f(function(a,b,c){var d=a*N.cos(c)-b*N.sin(c),e=a*N.sin(c)+b*N.cos(c);return{x:d,y:e}});if(k)y=k[0],z=k[1],w=k[2],x=k[3];else{l=p(a,b,-n),a=l.x,b=l.y,l=p(i,j,-n),i=l.x,j=l.y;var q=(N.cos(S/180*e),N.sin(S/180*e),(a-i)/2),r=(b-j)/2,s=q*q/(c*c)+r*r/(d*d);s>1&&(s=N.sqrt(s),c=s*c,d=s*d);var t=c*c,u=d*d,v=(g==h?-1:1)*N.sqrt(Q((t*u-t*r*r-u*q*q)/(t*r*r+u*q*q))),w=v*c*r/d+(a+i)/2,x=v*-d*q/c+(b+j)/2,y=N.asin(((b-x)/d).toFixed(9)),z=N.asin(((j-x)/d).toFixed(9));y=w>a?S-y:y,z=w>i?S-z:z,0>y&&(y=2*S+y),0>z&&(z=2*S+z),h&&y>z&&(y-=2*S),!h&&z>y&&(z-=2*S)}var A=z-y;if(Q(A)>m){var B=z,C=i,D=j;z=y+m*(h&&z>y?1:-1),i=w+c*N.cos(z),j=x+d*N.sin(z),o=Hb(i,j,c,d,e,0,h,C,D,[z,B,w,x])}A=z-y;var F=N.cos(y),G=N.sin(y),H=N.cos(z),I=N.sin(z),K=N.tan(A/4),L=4/3*c*K,M=4/3*d*K,O=[a,b],P=[a+L*G,b-M*F],R=[i+L*I,j-M*H],T=[i,j];if(P[0]=2*O[0]-P[0],P[1]=2*O[1]-P[1],k)return[P,R,T][E](o);o=[P,R,T][E](o).join()[J](",");for(var U=[],V=0,W=o.length;W>V;V++)U[V]=V%2?p(o[V-1],o[V],n).y:p(o[V],o[V+1],n).x;return U},Ib=function(a,b,c,d,e,f,g,h,i){var j=1-i;return{x:R(j,3)*a+3*R(j,2)*i*c+3*j*i*i*e+R(i,3)*g,y:R(j,3)*b+3*R(j,2)*i*d+3*j*i*i*f+R(i,3)*h}},Jb=f(function(a,b,c,d,e,f,g,h){var i,j=e-2*c+a-(g-2*e+c),k=2*(c-a)-2*(e-c),l=a-c,m=(-k+N.sqrt(k*k-4*j*l))/2/j,n=(-k-N.sqrt(k*k-4*j*l))/2/j,o=[b,h],p=[a,g];return Q(m)>"1e12"&&(m=.5),Q(n)>"1e12"&&(n=.5),m>0&&1>m&&(i=Ib(a,b,c,d,e,f,g,h,m),p.push(i.x),o.push(i.y)),n>0&&1>n&&(i=Ib(a,b,c,d,e,f,g,h,n),p.push(i.x),o.push(i.y)),j=f-2*d+b-(h-2*f+d),k=2*(d-b)-2*(f-d),l=b-d,m=(-k+N.sqrt(k*k-4*j*l))/2/j,n=(-k-N.sqrt(k*k-4*j*l))/2/j,Q(m)>"1e12"&&(m=.5),Q(n)>"1e12"&&(n=.5),m>0&&1>m&&(i=Ib(a,b,c,d,e,f,g,h,m),p.push(i.x),o.push(i.y)),n>0&&1>n&&(i=Ib(a,b,c,d,e,f,g,h,n),p.push(i.x),o.push(i.y)),{min:{x:P[D](0,p),y:P[D](0,o)},max:{x:O[D](0,p),y:O[D](0,o)}}}),Kb=c._path2curve=f(function(a,b){var c=!b&&Ab(a);if(!b&&c.curve)return Cb(c.curve);for(var d=Eb(a),e=b&&Eb(b),f={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},g={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},h=(function(a,b,c){var d,e;if(!a)return["C",b.x,b.y,b.x,b.y,b.x,b.y];switch(!(a[0]in{T:1,Q:1})&&(b.qx=b.qy=null),a[0]){case"M":b.X=a[1],b.Y=a[2];break;case"A":a=["C"][E](Hb[D](0,[b.x,b.y][E](a.slice(1))));break;case"S":"C"==c||"S"==c?(d=2*b.x-b.bx,e=2*b.y-b.by):(d=b.x,e=b.y),a=["C",d,e][E](a.slice(1));break;case"T":"Q"==c||"T"==c?(b.qx=2*b.x-b.qx,b.qy=2*b.y-b.qy):(b.qx=b.x,b.qy=b.y),a=["C"][E](Gb(b.x,b.y,b.qx,b.qy,a[1],a[2]));break;case"Q":b.qx=a[1],b.qy=a[2],a=["C"][E](Gb(b.x,b.y,a[1],a[2],a[3],a[4]));break;case"L":a=["C"][E](Fb(b.x,b.y,a[1],a[2]));break;case"H":a=["C"][E](Fb(b.x,b.y,a[1],b.y));break;case"V":a=["C"][E](Fb(b.x,b.y,b.x,a[1]));break;case"Z":a=["C"][E](Fb(b.x,b.y,b.X,b.Y))}return a}),i=function(a,b){if(a[b].length>7){a[b].shift();for(var c=a[b];c.length;)a.splice(b++,0,["C"][E](c.splice(0,6)));a.splice(b,1),l=O(d.length,e&&e.length||0)}},j=function(a,b,c,f,g){a&&b&&"M"==a[g][0]&&"M"!=b[g][0]&&(b.splice(g,0,["M",f.x,f.y]),c.bx=0,c.by=0,c.x=a[g][1],c.y=a[g][2],l=O(d.length,e&&e.length||0))},k=0,l=O(d.length,e&&e.length||0);l>k;k++){d[k]=h(d[k],f),i(d,k),e&&(e[k]=h(e[k],g)),e&&i(e,k),j(d,e,f,g,k),j(e,d,g,f,k);var m=d[k],n=e&&e[k],o=m.length,p=e&&n.length;f.x=m[o-2],f.y=m[o-1],f.bx=_(m[o-4])||f.x,f.by=_(m[o-3])||f.y,g.bx=e&&(_(n[p-4])||g.x),g.by=e&&(_(n[p-3])||g.y),g.x=e&&n[p-2],g.y=e&&n[p-1]}return e||(c.curve=Cb(d)),e?[d,e]:d},null,Cb),Lb=(c._parseDots=f(function(a){for(var b=[],d=0,e=a.length;e>d;d++){var f={},g=a[d].match(/^([^:]*):?([\d\.]*)/);if(f.color=c.getRGB(g[1]),f.color.error)return null;f.color=f.color.hex,g[2]&&(f.offset=g[2]+"%"),b.push(f)}for(d=1,e=b.length-1;e>d;d++)if(!b[d].offset){for(var h=_(b[d-1].offset||0),i=0,j=d+1;e>j;j++)if(b[j].offset){i=b[j].offset;break}i||(i=100,j=e),i=_(i);for(var k=(i-h)/(j-d+1);j>d;d++)h+=k,b[d].offset=h+"%"}return b}),c._tear=function(a,b){a==b.top&&(b.top=a.prev),a==b.bottom&&(b.bottom=a.next),a.next&&(a.next.prev=a.prev),a.prev&&(a.prev.next=a.next)}),Mb=(c._tofront=function(a,b){b.top!==a&&(Lb(a,b),a.next=null,a.prev=b.top,b.top.next=a,b.top=a)},c._toback=function(a,b){b.bottom!==a&&(Lb(a,b),a.next=b.bottom,a.prev=null,b.bottom.prev=a,b.bottom=a)},c._insertafter=function(a,b,c){Lb(a,c),b==c.top&&(c.top=a),b.next&&(b.next.prev=a),a.next=b.next,a.prev=b,b.next=a},c._insertbefore=function(a,b,c){Lb(a,c),b==c.bottom&&(c.bottom=a),b.prev&&(b.prev.next=a),a.prev=b.prev,b.prev=a,a.next=b},c.toMatrix=function(a,b){var c=Bb(a),d={_:{transform:G},getBBox:function(){return c}};return Nb(d,b),d.matrix}),Nb=(c.transformPath=function(a,b){return rb(a,Mb(a,b))},c._extractTransform=function(a,b){if(null==b)return a._.transform;b=I(b).replace(/\.{3}|\u2026/g,a._.transform||G);var d=c.parseTransformString(b),e=0,f=0,g=0,h=1,i=1,j=a._,k=new o;if(j.transform=d||[],d)for(var l=0,m=d.length;m>l;l++){var n,p,q,r,s,t=d[l],u=t.length,v=I(t[0]).toLowerCase(),w=t[0]!=v,x=w?k.invert():0;"t"==v&&3==u?w?(n=x.x(0,0),p=x.y(0,0),q=x.x(t[1],t[2]),r=x.y(t[1],t[2]),k.translate(q-n,r-p)):k.translate(t[1],t[2]):"r"==v?2==u?(s=s||a.getBBox(1),k.rotate(t[1],s.x+s.width/2,s.y+s.height/2),e+=t[1]):4==u&&(w?(q=x.x(t[2],t[3]),r=x.y(t[2],t[3]),k.rotate(t[1],q,r)):k.rotate(t[1],t[2],t[3]),e+=t[1]):"s"==v?2==u||3==u?(s=s||a.getBBox(1),k.scale(t[1],t[u-1],s.x+s.width/2,s.y+s.height/2),h*=t[1],i*=t[u-1]):5==u&&(w?(q=x.x(t[3],t[4]),r=x.y(t[3],t[4]),k.scale(t[1],t[2],q,r)):k.scale(t[1],t[2],t[3],t[4]),h*=t[1],i*=t[2]):"m"==v&&7==u&&k.add(t[1],t[2],t[3],t[4],t[5],t[6]),j.dirtyT=1,a.matrix=k}a.matrix=k,j.sx=h,j.sy=i,j.deg=e,j.dx=f=k.e,j.dy=g=k.f,1==h&&1==i&&!e&&j.bbox?(j.bbox.x+=+f,j.bbox.y+=+g):j.dirtyT=1}),Ob=function(a){var b=a[0];switch(b.toLowerCase()){case"t":return[b,0,0];case"m":return[b,1,0,0,1,0,0];case"r":return 4==a.length?[b,0,a[2],a[3]]:[b,0];case"s":return 5==a.length?[b,1,1,a[3],a[4]]:3==a.length?[b,1,1]:[b,1]}},Pb=c._equaliseTransform=function(a,b){b=I(b).replace(/\.{3}|\u2026/g,a),a=c.parseTransformString(a)||[],b=c.parseTransformString(b)||[];for(var d,e,f,g,h=O(a.length,b.length),i=[],j=[],k=0;h>k;k++){if(f=a[k]||Ob(b[k]),g=b[k]||Ob(f),f[0]!=g[0]||"r"==f[0].toLowerCase()&&(f[2]!=g[2]||f[3]!=g[3])||"s"==f[0].toLowerCase()&&(f[3]!=g[3]||f[4]!=g[4]))return;for(i[k]=[],j[k]=[],d=0,e=O(f.length,g.length);e>d;d++)d in f&&(i[k][d]=f[d]),d in g&&(j[k][d]=g[d])
   10  }return{from:i,to:j}};c._getContainer=function(a,b,d,e){var f;return f=null!=e||c.is(a,"object")?a:A.doc.getElementById(a),null!=f?f.tagName?null==b?{container:f,width:f.style.pixelWidth||f.offsetWidth,height:f.style.pixelHeight||f.offsetHeight}:{container:f,width:b,height:d}:{container:1,x:a,y:b,width:d,height:e}:void 0},c.pathToRelative=Db,c._engine={},c.path2curve=Kb,c.matrix=function(a,b,c,d,e,f){return new o(a,b,c,d,e,f)},function(a){function b(a){return a[0]*a[0]+a[1]*a[1]}function d(a){var c=N.sqrt(b(a));a[0]&&(a[0]/=c),a[1]&&(a[1]/=c)}a.add=function(a,b,c,d,e,f){var g,h,i,j,k=[[],[],[]],l=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],m=[[a,c,e],[b,d,f],[0,0,1]];for(a&&a instanceof o&&(m=[[a.a,a.c,a.e],[a.b,a.d,a.f],[0,0,1]]),g=0;3>g;g++)for(h=0;3>h;h++){for(j=0,i=0;3>i;i++)j+=l[g][i]*m[i][h];k[g][h]=j}this.a=k[0][0],this.b=k[1][0],this.c=k[0][1],this.d=k[1][1],this.e=k[0][2],this.f=k[1][2]},a.invert=function(){var a=this,b=a.a*a.d-a.b*a.c;return new o(a.d/b,-a.b/b,-a.c/b,a.a/b,(a.c*a.f-a.d*a.e)/b,(a.b*a.e-a.a*a.f)/b)},a.clone=function(){return new o(this.a,this.b,this.c,this.d,this.e,this.f)},a.translate=function(a,b){this.add(1,0,0,1,a,b)},a.scale=function(a,b,c,d){null==b&&(b=a),(c||d)&&this.add(1,0,0,1,c,d),this.add(a,0,0,b,0,0),(c||d)&&this.add(1,0,0,1,-c,-d)},a.rotate=function(a,b,d){a=c.rad(a),b=b||0,d=d||0;var e=+N.cos(a).toFixed(9),f=+N.sin(a).toFixed(9);this.add(e,f,-f,e,b,d),this.add(1,0,0,1,-b,-d)},a.x=function(a,b){return a*this.a+b*this.c+this.e},a.y=function(a,b){return a*this.b+b*this.d+this.f},a.get=function(a){return+this[I.fromCharCode(97+a)].toFixed(4)},a.toString=function(){return c.svg?"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")":[this.get(0),this.get(2),this.get(1),this.get(3),0,0].join()},a.toFilter=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+this.get(0)+", M12="+this.get(2)+", M21="+this.get(1)+", M22="+this.get(3)+", Dx="+this.get(4)+", Dy="+this.get(5)+", sizingmethod='auto expand')"},a.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},a.split=function(){var a={};a.dx=this.e,a.dy=this.f;var e=[[this.a,this.c],[this.b,this.d]];a.scalex=N.sqrt(b(e[0])),d(e[0]),a.shear=e[0][0]*e[1][0]+e[0][1]*e[1][1],e[1]=[e[1][0]-e[0][0]*a.shear,e[1][1]-e[0][1]*a.shear],a.scaley=N.sqrt(b(e[1])),d(e[1]),a.shear/=a.scaley;var f=-e[0][1],g=e[1][1];return 0>g?(a.rotate=c.deg(N.acos(g)),0>f&&(a.rotate=360-a.rotate)):a.rotate=c.deg(N.asin(f)),a.isSimple=!(+a.shear.toFixed(9)||a.scalex.toFixed(9)!=a.scaley.toFixed(9)&&a.rotate),a.isSuperSimple=!+a.shear.toFixed(9)&&a.scalex.toFixed(9)==a.scaley.toFixed(9)&&!a.rotate,a.noRotation=!+a.shear.toFixed(9)&&!a.rotate,a},a.toTransformString=function(a){var b=a||this[J]();return b.isSimple?(b.scalex=+b.scalex.toFixed(4),b.scaley=+b.scaley.toFixed(4),b.rotate=+b.rotate.toFixed(4),(b.dx||b.dy?"t"+[b.dx,b.dy]:G)+(1!=b.scalex||1!=b.scaley?"s"+[b.scalex,b.scaley,0,0]:G)+(b.rotate?"r"+[b.rotate,0,0]:G)):"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]}}(o.prototype);var Qb=navigator.userAgent.match(/Version\/(.*?)\s/)||navigator.userAgent.match(/Chrome\/(\d+)/);v.safari="Apple Computer, Inc."==navigator.vendor&&(Qb&&Qb[1]<4||"iP"==navigator.platform.slice(0,2))||"Google Inc."==navigator.vendor&&Qb&&Qb[1]<8?function(){var a=this.rect(-99,-99,this.width+99,this.height+99).attr({stroke:"none"});setTimeout(function(){a.remove()})}:mb;for(var Rb=function(){this.returnValue=!1},Sb=function(){return this.originalEvent.preventDefault()},Tb=function(){this.cancelBubble=!0},Ub=function(){return this.originalEvent.stopPropagation()},Vb=function(a){var b=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,c=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft;return{x:a.clientX+c,y:a.clientY+b}},Wb=function(){return A.doc.addEventListener?function(a,b,c,d){var e=function(a){var b=Vb(a);return c.call(d,a,b.x,b.y)};if(a.addEventListener(b,e,!1),F&&L[b]){var f=function(b){for(var e=Vb(b),f=b,g=0,h=b.targetTouches&&b.targetTouches.length;h>g;g++)if(b.targetTouches[g].target==a){b=b.targetTouches[g],b.originalEvent=f,b.preventDefault=Sb,b.stopPropagation=Ub;break}return c.call(d,b,e.x,e.y)};a.addEventListener(L[b],f,!1)}return function(){return a.removeEventListener(b,e,!1),F&&L[b]&&a.removeEventListener(L[b],e,!1),!0}}:A.doc.attachEvent?function(a,b,c,d){var e=function(a){a=a||A.win.event;var b=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,e=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft,f=a.clientX+e,g=a.clientY+b;return a.preventDefault=a.preventDefault||Rb,a.stopPropagation=a.stopPropagation||Tb,c.call(d,a,f,g)};a.attachEvent("on"+b,e);var f=function(){return a.detachEvent("on"+b,e),!0};return f}:void 0}(),Xb=[],Yb=function(a){for(var c,d=a.clientX,e=a.clientY,f=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,g=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft,h=Xb.length;h--;){if(c=Xb[h],F&&a.touches){for(var i,j=a.touches.length;j--;)if(i=a.touches[j],i.identifier==c.el._drag.id){d=i.clientX,e=i.clientY,(a.originalEvent?a.originalEvent:a).preventDefault();break}}else a.preventDefault();var k,l=c.el.node,m=l.nextSibling,n=l.parentNode,o=l.style.display;A.win.opera&&n.removeChild(l),l.style.display="none",k=c.el.paper.getElementByPoint(d,e),l.style.display=o,A.win.opera&&(m?n.insertBefore(l,m):n.appendChild(l)),k&&b("raphael.drag.over."+c.el.id,c.el,k),d+=g,e+=f,b("raphael.drag.move."+c.el.id,c.move_scope||c.el,d-c.el._drag.x,e-c.el._drag.y,d,e,a)}},Zb=function(a){c.unmousemove(Yb).unmouseup(Zb);for(var d,e=Xb.length;e--;)d=Xb[e],d.el._drag={},b("raphael.drag.end."+d.el.id,d.end_scope||d.start_scope||d.move_scope||d.el,a);Xb=[]},$b=c.el={},_b=K.length;_b--;)!function(a){c[a]=$b[a]=function(b,d){return c.is(b,"function")&&(this.events=this.events||[],this.events.push({name:a,f:b,unbind:Wb(this.shape||this.node||A.doc,a,b,d||this)})),this},c["un"+a]=$b["un"+a]=function(b){for(var d=this.events||[],e=d.length;e--;)d[e].name!=a||!c.is(b,"undefined")&&d[e].f!=b||(d[e].unbind(),d.splice(e,1),!d.length&&delete this.events);return this}}(K[_b]);$b.data=function(a,d){var e=kb[this.id]=kb[this.id]||{};if(0==arguments.length)return e;if(1==arguments.length){if(c.is(a,"object")){for(var f in a)a[z](f)&&this.data(f,a[f]);return this}return b("raphael.data.get."+this.id,this,e[a],a),e[a]}return e[a]=d,b("raphael.data.set."+this.id,this,d,a),this},$b.removeData=function(a){return null==a?kb[this.id]={}:kb[this.id]&&delete kb[this.id][a],this},$b.getData=function(){return d(kb[this.id]||{})},$b.hover=function(a,b,c,d){return this.mouseover(a,c).mouseout(b,d||c)},$b.unhover=function(a,b){return this.unmouseover(a).unmouseout(b)};var ac=[];$b.drag=function(a,d,e,f,g,h){function i(i){(i.originalEvent||i).preventDefault();var j=i.clientX,k=i.clientY,l=A.doc.documentElement.scrollTop||A.doc.body.scrollTop,m=A.doc.documentElement.scrollLeft||A.doc.body.scrollLeft;if(this._drag.id=i.identifier,F&&i.touches)for(var n,o=i.touches.length;o--;)if(n=i.touches[o],this._drag.id=n.identifier,n.identifier==this._drag.id){j=n.clientX,k=n.clientY;break}this._drag.x=j+m,this._drag.y=k+l,!Xb.length&&c.mousemove(Yb).mouseup(Zb),Xb.push({el:this,move_scope:f,start_scope:g,end_scope:h}),d&&b.on("raphael.drag.start."+this.id,d),a&&b.on("raphael.drag.move."+this.id,a),e&&b.on("raphael.drag.end."+this.id,e),b("raphael.drag.start."+this.id,g||f||this,i.clientX+m,i.clientY+l,i)}return this._drag={},ac.push({el:this,start:i}),this.mousedown(i),this},$b.onDragOver=function(a){a?b.on("raphael.drag.over."+this.id,a):b.unbind("raphael.drag.over."+this.id)},$b.undrag=function(){for(var a=ac.length;a--;)ac[a].el==this&&(this.unmousedown(ac[a].start),ac.splice(a,1),b.unbind("raphael.drag.*."+this.id));!ac.length&&c.unmousemove(Yb).unmouseup(Zb),Xb=[]},v.circle=function(a,b,d){var e=c._engine.circle(this,a||0,b||0,d||0);return this.__set__&&this.__set__.push(e),e},v.rect=function(a,b,d,e,f){var g=c._engine.rect(this,a||0,b||0,d||0,e||0,f||0);return this.__set__&&this.__set__.push(g),g},v.ellipse=function(a,b,d,e){var f=c._engine.ellipse(this,a||0,b||0,d||0,e||0);return this.__set__&&this.__set__.push(f),f},v.path=function(a){a&&!c.is(a,U)&&!c.is(a[0],V)&&(a+=G);var b=c._engine.path(c.format[D](c,arguments),this);return this.__set__&&this.__set__.push(b),b},v.image=function(a,b,d,e,f){var g=c._engine.image(this,a||"about:blank",b||0,d||0,e||0,f||0);return this.__set__&&this.__set__.push(g),g},v.text=function(a,b,d){var e=c._engine.text(this,a||0,b||0,I(d));return this.__set__&&this.__set__.push(e),e},v.set=function(a){!c.is(a,"array")&&(a=Array.prototype.splice.call(arguments,0,arguments.length));var b=new mc(a);return this.__set__&&this.__set__.push(b),b.paper=this,b.type="set",b},v.setStart=function(a){this.__set__=a||this.set()},v.setFinish=function(){var a=this.__set__;return delete this.__set__,a},v.setSize=function(a,b){return c._engine.setSize.call(this,a,b)},v.setViewBox=function(a,b,d,e,f){return c._engine.setViewBox.call(this,a,b,d,e,f)},v.top=v.bottom=null,v.raphael=c;var bc=function(a){var b=a.getBoundingClientRect(),c=a.ownerDocument,d=c.body,e=c.documentElement,f=e.clientTop||d.clientTop||0,g=e.clientLeft||d.clientLeft||0,h=b.top+(A.win.pageYOffset||e.scrollTop||d.scrollTop)-f,i=b.left+(A.win.pageXOffset||e.scrollLeft||d.scrollLeft)-g;return{y:h,x:i}};v.getElementByPoint=function(a,b){var c=this,d=c.canvas,e=A.doc.elementFromPoint(a,b);if(A.win.opera&&"svg"==e.tagName){var f=bc(d),g=d.createSVGRect();g.x=a-f.x,g.y=b-f.y,g.width=g.height=1;var h=d.getIntersectionList(g,null);h.length&&(e=h[h.length-1])}if(!e)return null;for(;e.parentNode&&e!=d.parentNode&&!e.raphael;)e=e.parentNode;return e==c.canvas.parentNode&&(e=d),e=e&&e.raphael?c.getById(e.raphaelid):null},v.getElementsByBBox=function(a){var b=this.set();return this.forEach(function(d){c.isBBoxIntersect(d.getBBox(),a)&&b.push(d)}),b},v.getById=function(a){for(var b=this.bottom;b;){if(b.id==a)return b;b=b.next}return null},v.forEach=function(a,b){for(var c=this.bottom;c;){if(a.call(b,c)===!1)return this;c=c.next}return this},v.getElementsByPoint=function(a,b){var c=this.set();return this.forEach(function(d){d.isPointInside(a,b)&&c.push(d)}),c},$b.isPointInside=function(a,b){var d=this.realPath=qb[this.type](this);return this.attr("transform")&&this.attr("transform").length&&(d=c.transformPath(d,this.attr("transform"))),c.isPointInsidePath(d,a,b)},$b.getBBox=function(a){if(this.removed)return{};var b=this._;return a?((b.dirty||!b.bboxwt)&&(this.realPath=qb[this.type](this),b.bboxwt=Bb(this.realPath),b.bboxwt.toString=p,b.dirty=0),b.bboxwt):((b.dirty||b.dirtyT||!b.bbox)&&((b.dirty||!this.realPath)&&(b.bboxwt=0,this.realPath=qb[this.type](this)),b.bbox=Bb(rb(this.realPath,this.matrix)),b.bbox.toString=p,b.dirty=b.dirtyT=0),b.bbox)},$b.clone=function(){if(this.removed)return null;var a=this.paper[this.type]().attr(this.attr());return this.__set__&&this.__set__.push(a),a},$b.glow=function(a){if("text"==this.type)return null;a=a||{};var b={width:(a.width||10)+(+this.attr("stroke-width")||1),fill:a.fill||!1,opacity:a.opacity||.5,offsetx:a.offsetx||0,offsety:a.offsety||0,color:a.color||"#000"},c=b.width/2,d=this.paper,e=d.set(),f=this.realPath||qb[this.type](this);f=this.matrix?rb(f,this.matrix):f;for(var g=1;c+1>g;g++)e.push(d.path(f).attr({stroke:b.color,fill:b.fill?b.color:"none","stroke-linejoin":"round","stroke-linecap":"round","stroke-width":+(b.width/c*g).toFixed(3),opacity:+(b.opacity/c).toFixed(3)}));return e.insertBefore(this).translate(b.offsetx,b.offsety)};var cc=function(a,b,d,e,f,g,h,i,l){return null==l?j(a,b,d,e,f,g,h,i):c.findDotsAtSegment(a,b,d,e,f,g,h,i,k(a,b,d,e,f,g,h,i,l))},dc=function(a,b){return function(d,e,f){d=Kb(d);for(var g,h,i,j,k,l="",m={},n=0,o=0,p=d.length;p>o;o++){if(i=d[o],"M"==i[0])g=+i[1],h=+i[2];else{if(j=cc(g,h,i[1],i[2],i[3],i[4],i[5],i[6]),n+j>e){if(b&&!m.start){if(k=cc(g,h,i[1],i[2],i[3],i[4],i[5],i[6],e-n),l+=["C"+k.start.x,k.start.y,k.m.x,k.m.y,k.x,k.y],f)return l;m.start=l,l=["M"+k.x,k.y+"C"+k.n.x,k.n.y,k.end.x,k.end.y,i[5],i[6]].join(),n+=j,g=+i[5],h=+i[6];continue}if(!a&&!b)return k=cc(g,h,i[1],i[2],i[3],i[4],i[5],i[6],e-n),{x:k.x,y:k.y,alpha:k.alpha}}n+=j,g=+i[5],h=+i[6]}l+=i.shift()+i}return m.end=l,k=a?n:b?m:c.findDotsAtSegment(g,h,i[0],i[1],i[2],i[3],i[4],i[5],1),k.alpha&&(k={x:k.x,y:k.y,alpha:k.alpha}),k}},ec=dc(1),fc=dc(),gc=dc(0,1);c.getTotalLength=ec,c.getPointAtLength=fc,c.getSubpath=function(a,b,c){if(this.getTotalLength(a)-c<1e-6)return gc(a,b).end;var d=gc(a,c,1);return b?gc(d,b).end:d},$b.getTotalLength=function(){var a=this.getPath();if(a)return this.node.getTotalLength?this.node.getTotalLength():ec(a)},$b.getPointAtLength=function(a){var b=this.getPath();if(b)return fc(b,a)},$b.getPath=function(){var a,b=c._getPath[this.type];if("text"!=this.type&&"set"!=this.type)return b&&(a=b(this)),a},$b.getSubpath=function(a,b){var d=this.getPath();if(d)return c.getSubpath(d,a,b)};var hc=c.easing_formulas={linear:function(a){return a},"<":function(a){return R(a,1.7)},">":function(a){return R(a,.48)},"<>":function(a){var b=.48-a/1.04,c=N.sqrt(.1734+b*b),d=c-b,e=R(Q(d),1/3)*(0>d?-1:1),f=-c-b,g=R(Q(f),1/3)*(0>f?-1:1),h=e+g+.5;return 3*(1-h)*h*h+h*h*h},backIn:function(a){var b=1.70158;return a*a*((b+1)*a-b)},backOut:function(a){a-=1;var b=1.70158;return a*a*((b+1)*a+b)+1},elastic:function(a){return a==!!a?a:R(2,-10*a)*N.sin((a-.075)*2*S/.3)+1},bounce:function(a){var b,c=7.5625,d=2.75;return 1/d>a?b=c*a*a:2/d>a?(a-=1.5/d,b=c*a*a+.75):2.5/d>a?(a-=2.25/d,b=c*a*a+.9375):(a-=2.625/d,b=c*a*a+.984375),b}};hc.easeIn=hc["ease-in"]=hc["<"],hc.easeOut=hc["ease-out"]=hc[">"],hc.easeInOut=hc["ease-in-out"]=hc["<>"],hc["back-in"]=hc.backIn,hc["back-out"]=hc.backOut;var ic=[],jc=a.requestAnimationFrame||a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame||a.msRequestAnimationFrame||function(a){setTimeout(a,16)},kc=function(){for(var a=+new Date,d=0;d<ic.length;d++){var e=ic[d];if(!e.el.removed&&!e.paused){var f,g,h=a-e.start,i=e.ms,j=e.easing,k=e.from,l=e.diff,m=e.to,n=(e.t,e.el),o={},p={};if(e.initstatus?(h=(e.initstatus*e.anim.top-e.prev)/(e.percent-e.prev)*i,e.status=e.initstatus,delete e.initstatus,e.stop&&ic.splice(d--,1)):e.status=(e.prev+(e.percent-e.prev)*(h/i))/e.anim.top,!(0>h))if(i>h){var q=j(h/i);for(var r in k)if(k[z](r)){switch(db[r]){case T:f=+k[r]+q*i*l[r];break;case"colour":f="rgb("+[lc($(k[r].r+q*i*l[r].r)),lc($(k[r].g+q*i*l[r].g)),lc($(k[r].b+q*i*l[r].b))].join(",")+")";break;case"path":f=[];for(var t=0,u=k[r].length;u>t;t++){f[t]=[k[r][t][0]];for(var v=1,w=k[r][t].length;w>v;v++)f[t][v]=+k[r][t][v]+q*i*l[r][t][v];f[t]=f[t].join(H)}f=f.join(H);break;case"transform":if(l[r].real)for(f=[],t=0,u=k[r].length;u>t;t++)for(f[t]=[k[r][t][0]],v=1,w=k[r][t].length;w>v;v++)f[t][v]=k[r][t][v]+q*i*l[r][t][v];else{var x=function(a){return+k[r][a]+q*i*l[r][a]};f=[["m",x(0),x(1),x(2),x(3),x(4),x(5)]]}break;case"csv":if("clip-rect"==r)for(f=[],t=4;t--;)f[t]=+k[r][t]+q*i*l[r][t];break;default:var y=[][E](k[r]);for(f=[],t=n.paper.customAttributes[r].length;t--;)f[t]=+y[t]+q*i*l[r][t]}o[r]=f}n.attr(o),function(a,c,d){setTimeout(function(){b("raphael.anim.frame."+a,c,d)})}(n.id,n,e.anim)}else{if(function(a,d,e){setTimeout(function(){b("raphael.anim.frame."+d.id,d,e),b("raphael.anim.finish."+d.id,d,e),c.is(a,"function")&&a.call(d)})}(e.callback,n,e.anim),n.attr(m),ic.splice(d--,1),e.repeat>1&&!e.next){for(g in m)m[z](g)&&(p[g]=e.totalOrigin[g]);e.el.attr(p),s(e.anim,e.el,e.anim.percents[0],null,e.totalOrigin,e.repeat-1)}e.next&&!e.stop&&s(e.anim,e.el,e.next,null,e.totalOrigin,e.repeat)}}}c.svg&&n&&n.paper&&n.paper.safari(),ic.length&&jc(kc)},lc=function(a){return a>255?255:0>a?0:a};$b.animateWith=function(a,b,d,e,f,g){var h=this;if(h.removed)return g&&g.call(h),h;var i=d instanceof r?d:c.animation(d,e,f,g);s(i,h,i.percents[0],null,h.attr());for(var j=0,k=ic.length;k>j;j++)if(ic[j].anim==b&&ic[j].el==a){ic[k-1].start=ic[j].start;break}return h},$b.onAnimation=function(a){return a?b.on("raphael.anim.frame."+this.id,a):b.unbind("raphael.anim.frame."+this.id),this},r.prototype.delay=function(a){var b=new r(this.anim,this.ms);return b.times=this.times,b.del=+a||0,b},r.prototype.repeat=function(a){var b=new r(this.anim,this.ms);return b.del=this.del,b.times=N.floor(O(a,0))||1,b},c.animation=function(a,b,d,e){if(a instanceof r)return a;(c.is(d,"function")||!d)&&(e=e||d||null,d=null),a=Object(a),b=+b||0;var f,g,h={};for(g in a)a[z](g)&&_(g)!=g&&_(g)+"%"!=g&&(f=!0,h[g]=a[g]);return f?(d&&(h.easing=d),e&&(h.callback=e),new r({100:h},b)):new r(a,b)},$b.animate=function(a,b,d,e){var f=this;if(f.removed)return e&&e.call(f),f;var g=a instanceof r?a:c.animation(a,b,d,e);return s(g,f,g.percents[0],null,f.attr()),f},$b.setTime=function(a,b){return a&&null!=b&&this.status(a,P(b,a.ms)/a.ms),this},$b.status=function(a,b){var c,d,e=[],f=0;if(null!=b)return s(a,this,-1,P(b,1)),this;for(c=ic.length;c>f;f++)if(d=ic[f],d.el.id==this.id&&(!a||d.anim==a)){if(a)return d.status;e.push({anim:d.anim,status:d.status})}return a?0:e},$b.pause=function(a){for(var c=0;c<ic.length;c++)ic[c].el.id!=this.id||a&&ic[c].anim!=a||b("raphael.anim.pause."+this.id,this,ic[c].anim)!==!1&&(ic[c].paused=!0);return this},$b.resume=function(a){for(var c=0;c<ic.length;c++)if(ic[c].el.id==this.id&&(!a||ic[c].anim==a)){var d=ic[c];b("raphael.anim.resume."+this.id,this,d.anim)!==!1&&(delete d.paused,this.status(d.anim,d.status))}return this},$b.stop=function(a){for(var c=0;c<ic.length;c++)ic[c].el.id!=this.id||a&&ic[c].anim!=a||b("raphael.anim.stop."+this.id,this,ic[c].anim)!==!1&&ic.splice(c--,1);return this},b.on("raphael.remove",t),b.on("raphael.clear",t),$b.toString=function(){return"Raphaël’s object"};var mc=function(a){if(this.items=[],this.length=0,this.type="set",a)for(var b=0,c=a.length;c>b;b++)!a[b]||a[b].constructor!=$b.constructor&&a[b].constructor!=mc||(this[this.items.length]=this.items[this.items.length]=a[b],this.length++)},nc=mc.prototype;nc.push=function(){for(var a,b,c=0,d=arguments.length;d>c;c++)a=arguments[c],!a||a.constructor!=$b.constructor&&a.constructor!=mc||(b=this.items.length,this[b]=this.items[b]=a,this.length++);return this},nc.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},nc.forEach=function(a,b){for(var c=0,d=this.items.length;d>c;c++)if(a.call(b,this.items[c],c)===!1)return this;return this};for(var oc in $b)$b[z](oc)&&(nc[oc]=function(a){return function(){var b=arguments;return this.forEach(function(c){c[a][D](c,b)})}}(oc));return nc.attr=function(a,b){if(a&&c.is(a,V)&&c.is(a[0],"object"))for(var d=0,e=a.length;e>d;d++)this.items[d].attr(a[d]);else for(var f=0,g=this.items.length;g>f;f++)this.items[f].attr(a,b);return this},nc.clear=function(){for(;this.length;)this.pop()},nc.splice=function(a,b){a=0>a?O(this.length+a,0):a,b=O(0,P(this.length-a,b));var c,d=[],e=[],f=[];for(c=2;c<arguments.length;c++)f.push(arguments[c]);for(c=0;b>c;c++)e.push(this[a+c]);for(;c<this.length-a;c++)d.push(this[a+c]);var g=f.length;for(c=0;c<g+d.length;c++)this.items[a+c]=this[a+c]=g>c?f[c]:d[c-g];for(c=this.items.length=this.length-=b-g;this[c];)delete this[c++];return new mc(e)},nc.exclude=function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]==a)return this.splice(b,1),!0},nc.animate=function(a,b,d,e){(c.is(d,"function")||!d)&&(e=d||null);var f,g,h=this.items.length,i=h,j=this;if(!h)return this;e&&(g=function(){!--h&&e.call(j)}),d=c.is(d,U)?d:g;var k=c.animation(a,b,d,g);for(f=this.items[--i].animate(k);i--;)this.items[i]&&!this.items[i].removed&&this.items[i].animateWith(f,k,k),this.items[i]&&!this.items[i].removed||h--;return this},nc.insertAfter=function(a){for(var b=this.items.length;b--;)this.items[b].insertAfter(a);return this},nc.getBBox=function(){for(var a=[],b=[],c=[],d=[],e=this.items.length;e--;)if(!this.items[e].removed){var f=this.items[e].getBBox();a.push(f.x),b.push(f.y),c.push(f.x+f.width),d.push(f.y+f.height)}return a=P[D](0,a),b=P[D](0,b),c=O[D](0,c),d=O[D](0,d),{x:a,y:b,x2:c,y2:d,width:c-a,height:d-b}},nc.clone=function(a){a=this.paper.set();for(var b=0,c=this.items.length;c>b;b++)a.push(this.items[b].clone());return a},nc.toString=function(){return"Raphaël‘s set"},nc.glow=function(a){var b=this.paper.set();return this.forEach(function(c){var d=c.glow(a);null!=d&&d.forEach(function(a){b.push(a)})}),b},nc.isPointInside=function(a,b){var c=!1;return this.forEach(function(d){return d.isPointInside(a,b)?(console.log("runned"),c=!0,!1):void 0}),c},c.registerFont=function(a){if(!a.face)return a;this.fonts=this.fonts||{};var b={w:a.w,face:{},glyphs:{}},c=a.face["font-family"];for(var d in a.face)a.face[z](d)&&(b.face[d]=a.face[d]);if(this.fonts[c]?this.fonts[c].push(b):this.fonts[c]=[b],!a.svg){b.face["units-per-em"]=ab(a.face["units-per-em"],10);for(var e in a.glyphs)if(a.glyphs[z](e)){var f=a.glyphs[e];if(b.glyphs[e]={w:f.w,k:{},d:f.d&&"M"+f.d.replace(/[mlcxtrv]/g,function(a){return{l:"L",c:"C",x:"z",t:"m",r:"l",v:"c"}[a]||"M"})+"z"},f.k)for(var g in f.k)f[z](g)&&(b.glyphs[e].k[g]=f.k[g])}}return a},v.getFont=function(a,b,d,e){if(e=e||"normal",d=d||"normal",b=+b||{normal:400,bold:700,lighter:300,bolder:800}[b]||400,c.fonts){var f=c.fonts[a];if(!f){var g=new RegExp("(^|\\s)"+a.replace(/[^\w\d\s+!~.:_-]/g,G)+"(\\s|$)","i");for(var h in c.fonts)if(c.fonts[z](h)&&g.test(h)){f=c.fonts[h];break}}var i;if(f)for(var j=0,k=f.length;k>j&&(i=f[j],i.face["font-weight"]!=b||i.face["font-style"]!=d&&i.face["font-style"]||i.face["font-stretch"]!=e);j++);return i}},v.print=function(a,b,d,e,f,g,h,i){g=g||"middle",h=O(P(h||0,1),-1),i=O(P(i||1,3),1);var j,k=I(d)[J](G),l=0,m=0,n=G;if(c.is(e,"string")&&(e=this.getFont(e)),e){j=(f||16)/e.face["units-per-em"];for(var o=e.face.bbox[J](w),p=+o[0],q=o[3]-o[1],r=0,s=+o[1]+("baseline"==g?q+ +e.face.descent:q/2),t=0,u=k.length;u>t;t++){if("\n"==k[t])l=0,x=0,m=0,r+=q*i;else{var v=m&&e.glyphs[k[t-1]]||{},x=e.glyphs[k[t]];l+=m?(v.w||e.w)+(v.k&&v.k[k[t]]||0)+e.w*h:0,m=1}x&&x.d&&(n+=c.transformPath(x.d,["t",l*j,r*j,"s",j,j,p,s,"t",(a-p)/j,(b-s)/j]))}}return this.path(n).attr({fill:"#000",stroke:"none"})},v.add=function(a){if(c.is(a,"array"))for(var b,d=this.set(),e=0,f=a.length;f>e;e++)b=a[e]||{},x[z](b.type)&&d.push(this[b.type]().attr(b));return d},c.format=function(a,b){var d=c.is(b,V)?[0][E](b):arguments;return a&&c.is(a,U)&&d.length-1&&(a=a.replace(y,function(a,b){return null==d[++b]?G:d[b]})),a||G},c.fullfill=function(){var a=/\{([^\}]+)\}/g,b=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,c=function(a,c,d){var e=d;return c.replace(b,function(a,b,c,d,f){b=b||d,e&&(b in e&&(e=e[b]),"function"==typeof e&&f&&(e=e()))}),e=(null==e||e==d?a:e)+""};return function(b,d){return String(b).replace(a,function(a,b){return c(a,b,d)})}}(),c.ninja=function(){return B.was?A.win.Raphael=B.is:delete Raphael,c},c.st=nc,function(a,b,d){function e(){/in/.test(a.readyState)?setTimeout(e,9):c.eve("raphael.DOMload")}null==a.readyState&&a.addEventListener&&(a.addEventListener(b,d=function(){a.removeEventListener(b,d,!1),a.readyState="complete"},!1),a.readyState="loading"),e()}(document,"DOMContentLoaded"),b.on("raphael.DOMload",function(){u=!0}),function(){if(c.svg){var a="hasOwnProperty",b=String,d=parseFloat,e=parseInt,f=Math,g=f.max,h=f.abs,i=f.pow,j=/[, ]+/,k=c.eve,l="",m=" ",n="http://www.w3.org/1999/xlink",o={block:"M5,0 0,2.5 5,5z",classic:"M5,0 0,2.5 5,5 3.5,3 3.5,2z",diamond:"M2.5,0 5,2.5 2.5,5 0,2.5z",open:"M6,1 1,3.5 6,6",oval:"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"},p={};c.toString=function(){return"Your browser supports SVG.\nYou are running Raphaël "+this.version};var q=function(d,e){if(e){"string"==typeof d&&(d=q(d));for(var f in e)e[a](f)&&("xlink:"==f.substring(0,6)?d.setAttributeNS(n,f.substring(6),b(e[f])):d.setAttribute(f,b(e[f])))}else d=c._g.doc.createElementNS("http://www.w3.org/2000/svg",d),d.style&&(d.style.webkitTapHighlightColor="rgba(0,0,0,0)");return d},r=function(a,e){var j="linear",k=a.id+e,m=.5,n=.5,o=a.node,p=a.paper,r=o.style,s=c._g.doc.getElementById(k);if(!s){if(e=b(e).replace(c._radial_gradient,function(a,b,c){if(j="radial",b&&c){m=d(b),n=d(c);var e=2*(n>.5)-1;i(m-.5,2)+i(n-.5,2)>.25&&(n=f.sqrt(.25-i(m-.5,2))*e+.5)&&.5!=n&&(n=n.toFixed(5)-1e-5*e)}return l}),e=e.split(/\s*\-\s*/),"linear"==j){var t=e.shift();if(t=-d(t),isNaN(t))return null;var u=[0,0,f.cos(c.rad(t)),f.sin(c.rad(t))],v=1/(g(h(u[2]),h(u[3]))||1);u[2]*=v,u[3]*=v,u[2]<0&&(u[0]=-u[2],u[2]=0),u[3]<0&&(u[1]=-u[3],u[3]=0)}var w=c._parseDots(e);if(!w)return null;if(k=k.replace(/[\(\)\s,\xb0#]/g,"_"),a.gradient&&k!=a.gradient.id&&(p.defs.removeChild(a.gradient),delete a.gradient),!a.gradient){s=q(j+"Gradient",{id:k}),a.gradient=s,q(s,"radial"==j?{fx:m,fy:n}:{x1:u[0],y1:u[1],x2:u[2],y2:u[3],gradientTransform:a.matrix.invert()}),p.defs.appendChild(s);for(var x=0,y=w.length;y>x;x++)s.appendChild(q("stop",{offset:w[x].offset?w[x].offset:x?"100%":"0%","stop-color":w[x].color||"#fff"}))}}return q(o,{fill:"url(#"+k+")",opacity:1,"fill-opacity":1}),r.fill=l,r.opacity=1,r.fillOpacity=1,1},s=function(a){var b=a.getBBox(1);q(a.pattern,{patternTransform:a.matrix.invert()+" translate("+b.x+","+b.y+")"})},t=function(d,e,f){if("path"==d.type){for(var g,h,i,j,k,m=b(e).toLowerCase().split("-"),n=d.paper,r=f?"end":"start",s=d.node,t=d.attrs,u=t["stroke-width"],v=m.length,w="classic",x=3,y=3,z=5;v--;)switch(m[v]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":w=m[v];break;case"wide":y=5;break;case"narrow":y=2;break;case"long":x=5;break;case"short":x=2}if("open"==w?(x+=2,y+=2,z+=2,i=1,j=f?4:1,k={fill:"none",stroke:t.stroke}):(j=i=x/2,k={fill:t.stroke,stroke:"none"}),d._.arrows?f?(d._.arrows.endPath&&p[d._.arrows.endPath]--,d._.arrows.endMarker&&p[d._.arrows.endMarker]--):(d._.arrows.startPath&&p[d._.arrows.startPath]--,d._.arrows.startMarker&&p[d._.arrows.startMarker]--):d._.arrows={},"none"!=w){var A="raphael-marker-"+w,B="raphael-marker-"+r+w+x+y;c._g.doc.getElementById(A)?p[A]++:(n.defs.appendChild(q(q("path"),{"stroke-linecap":"round",d:o[w],id:A})),p[A]=1);var C,D=c._g.doc.getElementById(B);D?(p[B]++,C=D.getElementsByTagName("use")[0]):(D=q(q("marker"),{id:B,markerHeight:y,markerWidth:x,orient:"auto",refX:j,refY:y/2}),C=q(q("use"),{"xlink:href":"#"+A,transform:(f?"rotate(180 "+x/2+" "+y/2+") ":l)+"scale("+x/z+","+y/z+")","stroke-width":(1/((x/z+y/z)/2)).toFixed(4)}),D.appendChild(C),n.defs.appendChild(D),p[B]=1),q(C,k);var E=i*("diamond"!=w&&"oval"!=w);f?(g=d._.arrows.startdx*u||0,h=c.getTotalLength(t.path)-E*u):(g=E*u,h=c.getTotalLength(t.path)-(d._.arrows.enddx*u||0)),k={},k["marker-"+r]="url(#"+B+")",(h||g)&&(k.d=c.getSubpath(t.path,g,h)),q(s,k),d._.arrows[r+"Path"]=A,d._.arrows[r+"Marker"]=B,d._.arrows[r+"dx"]=E,d._.arrows[r+"Type"]=w,d._.arrows[r+"String"]=e}else f?(g=d._.arrows.startdx*u||0,h=c.getTotalLength(t.path)-g):(g=0,h=c.getTotalLength(t.path)-(d._.arrows.enddx*u||0)),d._.arrows[r+"Path"]&&q(s,{d:c.getSubpath(t.path,g,h)}),delete d._.arrows[r+"Path"],delete d._.arrows[r+"Marker"],delete d._.arrows[r+"dx"],delete d._.arrows[r+"Type"],delete d._.arrows[r+"String"];for(k in p)if(p[a](k)&&!p[k]){var F=c._g.doc.getElementById(k);F&&F.parentNode.removeChild(F)}}},u={"":[0],none:[0],"-":[3,1],".":[1,1],"-.":[3,1,1,1],"-..":[3,1,1,1,1,1],". ":[1,3],"- ":[4,3],"--":[8,3],"- .":[4,3,1,3],"--.":[8,3,1,3],"--..":[8,3,1,3,1,3]},v=function(a,c,d){if(c=u[b(c).toLowerCase()]){for(var e=a.attrs["stroke-width"]||"1",f={round:e,square:e,butt:0}[a.attrs["stroke-linecap"]||d["stroke-linecap"]]||0,g=[],h=c.length;h--;)g[h]=c[h]*e+(h%2?1:-1)*f;q(a.node,{"stroke-dasharray":g.join(",")})}},w=function(d,f){var i=d.node,k=d.attrs,m=i.style.visibility;i.style.visibility="hidden";for(var o in f)if(f[a](o)){if(!c._availableAttrs[a](o))continue;var p=f[o];switch(k[o]=p,o){case"blur":d.blur(p);break;case"href":case"title":var u=q("title"),w=c._g.doc.createTextNode(p);u.appendChild(w),i.appendChild(u);break;case"target":var x=i.parentNode;if("a"!=x.tagName.toLowerCase()){var u=q("a");x.insertBefore(u,i),u.appendChild(i),x=u}"target"==o?x.setAttributeNS(n,"show","blank"==p?"new":p):x.setAttributeNS(n,o,p);break;case"cursor":i.style.cursor=p;break;case"transform":d.transform(p);break;case"arrow-start":t(d,p);break;case"arrow-end":t(d,p,1);break;case"clip-rect":var z=b(p).split(j);if(4==z.length){d.clip&&d.clip.parentNode.parentNode.removeChild(d.clip.parentNode);var A=q("clipPath"),B=q("rect");A.id=c.createUUID(),q(B,{x:z[0],y:z[1],width:z[2],height:z[3]}),A.appendChild(B),d.paper.defs.appendChild(A),q(i,{"clip-path":"url(#"+A.id+")"}),d.clip=B}if(!p){var C=i.getAttribute("clip-path");if(C){var D=c._g.doc.getElementById(C.replace(/(^url\(#|\)$)/g,l));D&&D.parentNode.removeChild(D),q(i,{"clip-path":l}),delete d.clip}}break;case"path":"path"==d.type&&(q(i,{d:p?k.path=c._pathToAbsolute(p):"M0,0"}),d._.dirty=1,d._.arrows&&("startString"in d._.arrows&&t(d,d._.arrows.startString),"endString"in d._.arrows&&t(d,d._.arrows.endString,1)));break;case"width":if(i.setAttribute(o,p),d._.dirty=1,!k.fx)break;o="x",p=k.x;case"x":k.fx&&(p=-k.x-(k.width||0));case"rx":if("rx"==o&&"rect"==d.type)break;case"cx":i.setAttribute(o,p),d.pattern&&s(d),d._.dirty=1;break;case"height":if(i.setAttribute(o,p),d._.dirty=1,!k.fy)break;o="y",p=k.y;case"y":k.fy&&(p=-k.y-(k.height||0));case"ry":if("ry"==o&&"rect"==d.type)break;case"cy":i.setAttribute(o,p),d.pattern&&s(d),d._.dirty=1;break;case"r":"rect"==d.type?q(i,{rx:p,ry:p}):i.setAttribute(o,p),d._.dirty=1;break;case"src":"image"==d.type&&i.setAttributeNS(n,"href",p);break;case"stroke-width":(1!=d._.sx||1!=d._.sy)&&(p/=g(h(d._.sx),h(d._.sy))||1),d.paper._vbSize&&(p*=d.paper._vbSize),i.setAttribute(o,p),k["stroke-dasharray"]&&v(d,k["stroke-dasharray"],f),d._.arrows&&("startString"in d._.arrows&&t(d,d._.arrows.startString),"endString"in d._.arrows&&t(d,d._.arrows.endString,1));break;case"stroke-dasharray":v(d,p,f);break;case"fill":var E=b(p).match(c._ISURL);if(E){A=q("pattern");var F=q("image");A.id=c.createUUID(),q(A,{x:0,y:0,patternUnits:"userSpaceOnUse",height:1,width:1}),q(F,{x:0,y:0,"xlink:href":E[1]}),A.appendChild(F),function(a){c._preload(E[1],function(){var b=this.offsetWidth,c=this.offsetHeight;q(a,{width:b,height:c}),q(F,{width:b,height:c}),d.paper.safari()})}(A),d.paper.defs.appendChild(A),q(i,{fill:"url(#"+A.id+")"}),d.pattern=A,d.pattern&&s(d);break}var G=c.getRGB(p);if(G.error){if(("circle"==d.type||"ellipse"==d.type||"r"!=b(p).charAt())&&r(d,p)){if("opacity"in k||"fill-opacity"in k){var H=c._g.doc.getElementById(i.getAttribute("fill").replace(/^url\(#|\)$/g,l));if(H){var I=H.getElementsByTagName("stop");q(I[I.length-1],{"stop-opacity":("opacity"in k?k.opacity:1)*("fill-opacity"in k?k["fill-opacity"]:1)})}}k.gradient=p,k.fill="none";break}}else delete f.gradient,delete k.gradient,!c.is(k.opacity,"undefined")&&c.is(f.opacity,"undefined")&&q(i,{opacity:k.opacity}),!c.is(k["fill-opacity"],"undefined")&&c.is(f["fill-opacity"],"undefined")&&q(i,{"fill-opacity":k["fill-opacity"]});G[a]("opacity")&&q(i,{"fill-opacity":G.opacity>1?G.opacity/100:G.opacity});case"stroke":G=c.getRGB(p),i.setAttribute(o,G.hex),"stroke"==o&&G[a]("opacity")&&q(i,{"stroke-opacity":G.opacity>1?G.opacity/100:G.opacity}),"stroke"==o&&d._.arrows&&("startString"in d._.arrows&&t(d,d._.arrows.startString),"endString"in d._.arrows&&t(d,d._.arrows.endString,1));break;case"gradient":("circle"==d.type||"ellipse"==d.type||"r"!=b(p).charAt())&&r(d,p);break;case"opacity":k.gradient&&!k[a]("stroke-opacity")&&q(i,{"stroke-opacity":p>1?p/100:p});case"fill-opacity":if(k.gradient){H=c._g.doc.getElementById(i.getAttribute("fill").replace(/^url\(#|\)$/g,l)),H&&(I=H.getElementsByTagName("stop"),q(I[I.length-1],{"stop-opacity":p}));break}default:"font-size"==o&&(p=e(p,10)+"px");var J=o.replace(/(\-.)/g,function(a){return a.substring(1).toUpperCase()});i.style[J]=p,d._.dirty=1,i.setAttribute(o,p)}}y(d,f),i.style.visibility=m},x=1.2,y=function(d,f){if("text"==d.type&&(f[a]("text")||f[a]("font")||f[a]("font-size")||f[a]("x")||f[a]("y"))){var g=d.attrs,h=d.node,i=h.firstChild?e(c._g.doc.defaultView.getComputedStyle(h.firstChild,l).getPropertyValue("font-size"),10):10;
   11  if(f[a]("text")){for(g.text=f.text;h.firstChild;)h.removeChild(h.firstChild);for(var j,k=b(f.text).split("\n"),m=[],n=0,o=k.length;o>n;n++)j=q("tspan"),n&&q(j,{dy:i*x,x:g.x}),j.appendChild(c._g.doc.createTextNode(k[n])),h.appendChild(j),m[n]=j}else for(m=h.getElementsByTagName("tspan"),n=0,o=m.length;o>n;n++)n?q(m[n],{dy:i*x,x:g.x}):q(m[0],{dy:0});q(h,{x:g.x,y:g.y}),d._.dirty=1;var p=d._getBBox(),r=g.y-(p.y+p.height/2);r&&c.is(r,"finite")&&q(m[0],{dy:r})}},z=function(a,b){this[0]=this.node=a,a.raphael=!0,this.id=c._oid++,a.raphaelid=this.id,this.matrix=c.matrix(),this.realPath=null,this.paper=b,this.attrs=this.attrs||{},this._={transform:[],sx:1,sy:1,deg:0,dx:0,dy:0,dirty:1},!b.bottom&&(b.bottom=this),this.prev=b.top,b.top&&(b.top.next=this),b.top=this,this.next=null},A=c.el;z.prototype=A,A.constructor=z,c._engine.path=function(a,b){var c=q("path");b.canvas&&b.canvas.appendChild(c);var d=new z(c,b);return d.type="path",w(d,{fill:"none",stroke:"#000",path:a}),d},A.rotate=function(a,c,e){if(this.removed)return this;if(a=b(a).split(j),a.length-1&&(c=d(a[1]),e=d(a[2])),a=d(a[0]),null==e&&(c=e),null==c||null==e){var f=this.getBBox(1);c=f.x+f.width/2,e=f.y+f.height/2}return this.transform(this._.transform.concat([["r",a,c,e]])),this},A.scale=function(a,c,e,f){if(this.removed)return this;if(a=b(a).split(j),a.length-1&&(c=d(a[1]),e=d(a[2]),f=d(a[3])),a=d(a[0]),null==c&&(c=a),null==f&&(e=f),null==e||null==f)var g=this.getBBox(1);return e=null==e?g.x+g.width/2:e,f=null==f?g.y+g.height/2:f,this.transform(this._.transform.concat([["s",a,c,e,f]])),this},A.translate=function(a,c){return this.removed?this:(a=b(a).split(j),a.length-1&&(c=d(a[1])),a=d(a[0])||0,c=+c||0,this.transform(this._.transform.concat([["t",a,c]])),this)},A.transform=function(b){var d=this._;if(null==b)return d.transform;if(c._extractTransform(this,b),this.clip&&q(this.clip,{transform:this.matrix.invert()}),this.pattern&&s(this),this.node&&q(this.node,{transform:this.matrix}),1!=d.sx||1!=d.sy){var e=this.attrs[a]("stroke-width")?this.attrs["stroke-width"]:1;this.attr({"stroke-width":e})}return this},A.hide=function(){return!this.removed&&this.paper.safari(this.node.style.display="none"),this},A.show=function(){return!this.removed&&this.paper.safari(this.node.style.display=""),this},A.remove=function(){if(!this.removed&&this.node.parentNode){var a=this.paper;a.__set__&&a.__set__.exclude(this),k.unbind("raphael.*.*."+this.id),this.gradient&&a.defs.removeChild(this.gradient),c._tear(this,a),"a"==this.node.parentNode.tagName.toLowerCase()?this.node.parentNode.parentNode.removeChild(this.node.parentNode):this.node.parentNode.removeChild(this.node);for(var b in this)this[b]="function"==typeof this[b]?c._removedFactory(b):null;this.removed=!0}},A._getBBox=function(){if("none"==this.node.style.display){this.show();var a=!0}var b={};try{b=this.node.getBBox()}catch(c){}finally{b=b||{}}return a&&this.hide(),b},A.attr=function(b,d){if(this.removed)return this;if(null==b){var e={};for(var f in this.attrs)this.attrs[a](f)&&(e[f]=this.attrs[f]);return e.gradient&&"none"==e.fill&&(e.fill=e.gradient)&&delete e.gradient,e.transform=this._.transform,e}if(null==d&&c.is(b,"string")){if("fill"==b&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;if("transform"==b)return this._.transform;for(var g=b.split(j),h={},i=0,l=g.length;l>i;i++)b=g[i],h[b]=b in this.attrs?this.attrs[b]:c.is(this.paper.customAttributes[b],"function")?this.paper.customAttributes[b].def:c._availableAttrs[b];return l-1?h:h[g[0]]}if(null==d&&c.is(b,"array")){for(h={},i=0,l=b.length;l>i;i++)h[b[i]]=this.attr(b[i]);return h}if(null!=d){var m={};m[b]=d}else null!=b&&c.is(b,"object")&&(m=b);for(var n in m)k("raphael.attr."+n+"."+this.id,this,m[n]);for(n in this.paper.customAttributes)if(this.paper.customAttributes[a](n)&&m[a](n)&&c.is(this.paper.customAttributes[n],"function")){var o=this.paper.customAttributes[n].apply(this,[].concat(m[n]));this.attrs[n]=m[n];for(var p in o)o[a](p)&&(m[p]=o[p])}return w(this,m),this},A.toFront=function(){if(this.removed)return this;"a"==this.node.parentNode.tagName.toLowerCase()?this.node.parentNode.parentNode.appendChild(this.node.parentNode):this.node.parentNode.appendChild(this.node);var a=this.paper;return a.top!=this&&c._tofront(this,a),this},A.toBack=function(){if(this.removed)return this;var a=this.node.parentNode;return"a"==a.tagName.toLowerCase()?a.parentNode.insertBefore(this.node.parentNode,this.node.parentNode.parentNode.firstChild):a.firstChild!=this.node&&a.insertBefore(this.node,this.node.parentNode.firstChild),c._toback(this,this.paper),this.paper,this},A.insertAfter=function(a){if(this.removed)return this;var b=a.node||a[a.length-1].node;return b.nextSibling?b.parentNode.insertBefore(this.node,b.nextSibling):b.parentNode.appendChild(this.node),c._insertafter(this,a,this.paper),this},A.insertBefore=function(a){if(this.removed)return this;var b=a.node||a[0].node;return b.parentNode.insertBefore(this.node,b),c._insertbefore(this,a,this.paper),this},A.blur=function(a){var b=this;if(0!==+a){var d=q("filter"),e=q("feGaussianBlur");b.attrs.blur=a,d.id=c.createUUID(),q(e,{stdDeviation:+a||1.5}),d.appendChild(e),b.paper.defs.appendChild(d),b._blur=d,q(b.node,{filter:"url(#"+d.id+")"})}else b._blur&&(b._blur.parentNode.removeChild(b._blur),delete b._blur,delete b.attrs.blur),b.node.removeAttribute("filter");return b},c._engine.circle=function(a,b,c,d){var e=q("circle");a.canvas&&a.canvas.appendChild(e);var f=new z(e,a);return f.attrs={cx:b,cy:c,r:d,fill:"none",stroke:"#000"},f.type="circle",q(e,f.attrs),f},c._engine.rect=function(a,b,c,d,e,f){var g=q("rect");a.canvas&&a.canvas.appendChild(g);var h=new z(g,a);return h.attrs={x:b,y:c,width:d,height:e,r:f||0,rx:f||0,ry:f||0,fill:"none",stroke:"#000"},h.type="rect",q(g,h.attrs),h},c._engine.ellipse=function(a,b,c,d,e){var f=q("ellipse");a.canvas&&a.canvas.appendChild(f);var g=new z(f,a);return g.attrs={cx:b,cy:c,rx:d,ry:e,fill:"none",stroke:"#000"},g.type="ellipse",q(f,g.attrs),g},c._engine.image=function(a,b,c,d,e,f){var g=q("image");q(g,{x:c,y:d,width:e,height:f,preserveAspectRatio:"none"}),g.setAttributeNS(n,"href",b),a.canvas&&a.canvas.appendChild(g);var h=new z(g,a);return h.attrs={x:c,y:d,width:e,height:f,src:b},h.type="image",h},c._engine.text=function(a,b,d,e){var f=q("text");a.canvas&&a.canvas.appendChild(f);var g=new z(f,a);return g.attrs={x:b,y:d,"text-anchor":"middle",text:e,font:c._availableAttrs.font,stroke:"none",fill:"#000"},g.type="text",w(g,g.attrs),g},c._engine.setSize=function(a,b){return this.width=a||this.width,this.height=b||this.height,this.canvas.setAttribute("width",this.width),this.canvas.setAttribute("height",this.height),this._viewBox&&this.setViewBox.apply(this,this._viewBox),this},c._engine.create=function(){var a=c._getContainer.apply(0,arguments),b=a&&a.container,d=a.x,e=a.y,f=a.width,g=a.height;if(!b)throw new Error("SVG container not found.");var h,i=q("svg"),j="overflow:hidden;";return d=d||0,e=e||0,f=f||512,g=g||342,q(i,{height:g,version:1.1,width:f,xmlns:"http://www.w3.org/2000/svg"}),1==b?(i.style.cssText=j+"position:absolute;left:"+d+"px;top:"+e+"px",c._g.doc.body.appendChild(i),h=1):(i.style.cssText=j+"position:relative",b.firstChild?b.insertBefore(i,b.firstChild):b.appendChild(i)),b=new c._Paper,b.width=f,b.height=g,b.canvas=i,b.clear(),b._left=b._top=0,h&&(b.renderfix=function(){}),b.renderfix(),b},c._engine.setViewBox=function(a,b,c,d,e){k("raphael.setViewBox",this,this._viewBox,[a,b,c,d,e]);var f,h,i=g(c/this.width,d/this.height),j=this.top,l=e?"meet":"xMinYMin";for(null==a?(this._vbSize&&(i=1),delete this._vbSize,f="0 0 "+this.width+m+this.height):(this._vbSize=i,f=a+m+b+m+c+m+d),q(this.canvas,{viewBox:f,preserveAspectRatio:l});i&&j;)h="stroke-width"in j.attrs?j.attrs["stroke-width"]:1,j.attr({"stroke-width":h}),j._.dirty=1,j._.dirtyT=1,j=j.prev;return this._viewBox=[a,b,c,d,!!e],this},c.prototype.renderfix=function(){var a,b=this.canvas,c=b.style;try{a=b.getScreenCTM()||b.createSVGMatrix()}catch(d){a=b.createSVGMatrix()}var e=-a.e%1,f=-a.f%1;(e||f)&&(e&&(this._left=(this._left+e)%1,c.left=this._left+"px"),f&&(this._top=(this._top+f)%1,c.top=this._top+"px"))},c.prototype.clear=function(){c.eve("raphael.clear",this);for(var a=this.canvas;a.firstChild;)a.removeChild(a.firstChild);this.bottom=this.top=null,(this.desc=q("desc")).appendChild(c._g.doc.createTextNode("Created with Raphaël "+c.version)),a.appendChild(this.desc),a.appendChild(this.defs=q("defs"))},c.prototype.remove=function(){k("raphael.remove",this),this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas);for(var a in this)this[a]="function"==typeof this[a]?c._removedFactory(a):null};var B=c.st;for(var C in A)A[a](C)&&!B[a](C)&&(B[C]=function(a){return function(){var b=arguments;return this.forEach(function(c){c[a].apply(c,b)})}}(C))}}(),function(){if(c.vml){var a="hasOwnProperty",b=String,d=parseFloat,e=Math,f=e.round,g=e.max,h=e.min,i=e.abs,j="fill",k=/[, ]+/,l=c.eve,m=" progid:DXImageTransform.Microsoft",n=" ",o="",p={M:"m",L:"l",C:"c",Z:"x",m:"t",l:"r",c:"v",z:"x"},q=/([clmz]),?([^clmz]*)/gi,r=/ progid:\S+Blur\([^\)]+\)/g,s=/-?[^,\s-]+/g,t="position:absolute;left:0;top:0;width:1px;height:1px",u=21600,v={path:1,rect:1,image:1},w={circle:1,ellipse:1},x=function(a){var d=/[ahqstv]/gi,e=c._pathToAbsolute;if(b(a).match(d)&&(e=c._path2curve),d=/[clmz]/g,e==c._pathToAbsolute&&!b(a).match(d)){var g=b(a).replace(q,function(a,b,c){var d=[],e="m"==b.toLowerCase(),g=p[b];return c.replace(s,function(a){e&&2==d.length&&(g+=d+p["m"==b?"l":"L"],d=[]),d.push(f(a*u))}),g+d});return g}var h,i,j=e(a);g=[];for(var k=0,l=j.length;l>k;k++){h=j[k],i=j[k][0].toLowerCase(),"z"==i&&(i="x");for(var m=1,r=h.length;r>m;m++)i+=f(h[m]*u)+(m!=r-1?",":o);g.push(i)}return g.join(n)},y=function(a,b,d){var e=c.matrix();return e.rotate(-a,.5,.5),{dx:e.x(b,d),dy:e.y(b,d)}},z=function(a,b,c,d,e,f){var g=a._,h=a.matrix,k=g.fillpos,l=a.node,m=l.style,o=1,p="",q=u/b,r=u/c;if(m.visibility="hidden",b&&c){if(l.coordsize=i(q)+n+i(r),m.rotation=f*(0>b*c?-1:1),f){var s=y(f,d,e);d=s.dx,e=s.dy}if(0>b&&(p+="x"),0>c&&(p+=" y")&&(o=-1),m.flip=p,l.coordorigin=d*-q+n+e*-r,k||g.fillsize){var t=l.getElementsByTagName(j);t=t&&t[0],l.removeChild(t),k&&(s=y(f,h.x(k[0],k[1]),h.y(k[0],k[1])),t.position=s.dx*o+n+s.dy*o),g.fillsize&&(t.size=g.fillsize[0]*i(b)+n+g.fillsize[1]*i(c)),l.appendChild(t)}m.visibility="visible"}};c.toString=function(){return"Your browser doesn’t support SVG. Falling down to VML.\nYou are running Raphaël "+this.version};var A=function(a,c,d){for(var e=b(c).toLowerCase().split("-"),f=d?"end":"start",g=e.length,h="classic",i="medium",j="medium";g--;)switch(e[g]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":h=e[g];break;case"wide":case"narrow":j=e[g];break;case"long":case"short":i=e[g]}var k=a.node.getElementsByTagName("stroke")[0];k[f+"arrow"]=h,k[f+"arrowlength"]=i,k[f+"arrowwidth"]=j},B=function(e,i){e.attrs=e.attrs||{};var l=e.node,m=e.attrs,p=l.style,q=v[e.type]&&(i.x!=m.x||i.y!=m.y||i.width!=m.width||i.height!=m.height||i.cx!=m.cx||i.cy!=m.cy||i.rx!=m.rx||i.ry!=m.ry||i.r!=m.r),r=w[e.type]&&(m.cx!=i.cx||m.cy!=i.cy||m.r!=i.r||m.rx!=i.rx||m.ry!=i.ry),s=e;for(var t in i)i[a](t)&&(m[t]=i[t]);if(q&&(m.path=c._getPath[e.type](e),e._.dirty=1),i.href&&(l.href=i.href),i.title&&(l.title=i.title),i.target&&(l.target=i.target),i.cursor&&(p.cursor=i.cursor),"blur"in i&&e.blur(i.blur),(i.path&&"path"==e.type||q)&&(l.path=x(~b(m.path).toLowerCase().indexOf("r")?c._pathToAbsolute(m.path):m.path),"image"==e.type&&(e._.fillpos=[m.x,m.y],e._.fillsize=[m.width,m.height],z(e,1,1,0,0,0))),"transform"in i&&e.transform(i.transform),r){var y=+m.cx,B=+m.cy,D=+m.rx||+m.r||0,E=+m.ry||+m.r||0;l.path=c.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x",f((y-D)*u),f((B-E)*u),f((y+D)*u),f((B+E)*u),f(y*u)),e._.dirty=1}if("clip-rect"in i){var G=b(i["clip-rect"]).split(k);if(4==G.length){G[2]=+G[2]+ +G[0],G[3]=+G[3]+ +G[1];var H=l.clipRect||c._g.doc.createElement("div"),I=H.style;I.clip=c.format("rect({1}px {2}px {3}px {0}px)",G),l.clipRect||(I.position="absolute",I.top=0,I.left=0,I.width=e.paper.width+"px",I.height=e.paper.height+"px",l.parentNode.insertBefore(H,l),H.appendChild(l),l.clipRect=H)}i["clip-rect"]||l.clipRect&&(l.clipRect.style.clip="auto")}if(e.textpath){var J=e.textpath.style;i.font&&(J.font=i.font),i["font-family"]&&(J.fontFamily='"'+i["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g,o)+'"'),i["font-size"]&&(J.fontSize=i["font-size"]),i["font-weight"]&&(J.fontWeight=i["font-weight"]),i["font-style"]&&(J.fontStyle=i["font-style"])}if("arrow-start"in i&&A(s,i["arrow-start"]),"arrow-end"in i&&A(s,i["arrow-end"],1),null!=i.opacity||null!=i["stroke-width"]||null!=i.fill||null!=i.src||null!=i.stroke||null!=i["stroke-width"]||null!=i["stroke-opacity"]||null!=i["fill-opacity"]||null!=i["stroke-dasharray"]||null!=i["stroke-miterlimit"]||null!=i["stroke-linejoin"]||null!=i["stroke-linecap"]){var K=l.getElementsByTagName(j),L=!1;if(K=K&&K[0],!K&&(L=K=F(j)),"image"==e.type&&i.src&&(K.src=i.src),i.fill&&(K.on=!0),(null==K.on||"none"==i.fill||null===i.fill)&&(K.on=!1),K.on&&i.fill){var M=b(i.fill).match(c._ISURL);if(M){K.parentNode==l&&l.removeChild(K),K.rotate=!0,K.src=M[1],K.type="tile";var N=e.getBBox(1);K.position=N.x+n+N.y,e._.fillpos=[N.x,N.y],c._preload(M[1],function(){e._.fillsize=[this.offsetWidth,this.offsetHeight]})}else K.color=c.getRGB(i.fill).hex,K.src=o,K.type="solid",c.getRGB(i.fill).error&&(s.type in{circle:1,ellipse:1}||"r"!=b(i.fill).charAt())&&C(s,i.fill,K)&&(m.fill="none",m.gradient=i.fill,K.rotate=!1)}if("fill-opacity"in i||"opacity"in i){var O=((+m["fill-opacity"]+1||2)-1)*((+m.opacity+1||2)-1)*((+c.getRGB(i.fill).o+1||2)-1);O=h(g(O,0),1),K.opacity=O,K.src&&(K.color="none")}l.appendChild(K);var P=l.getElementsByTagName("stroke")&&l.getElementsByTagName("stroke")[0],Q=!1;!P&&(Q=P=F("stroke")),(i.stroke&&"none"!=i.stroke||i["stroke-width"]||null!=i["stroke-opacity"]||i["stroke-dasharray"]||i["stroke-miterlimit"]||i["stroke-linejoin"]||i["stroke-linecap"])&&(P.on=!0),("none"==i.stroke||null===i.stroke||null==P.on||0==i.stroke||0==i["stroke-width"])&&(P.on=!1);var R=c.getRGB(i.stroke);P.on&&i.stroke&&(P.color=R.hex),O=((+m["stroke-opacity"]+1||2)-1)*((+m.opacity+1||2)-1)*((+R.o+1||2)-1);var S=.75*(d(i["stroke-width"])||1);if(O=h(g(O,0),1),null==i["stroke-width"]&&(S=m["stroke-width"]),i["stroke-width"]&&(P.weight=S),S&&1>S&&(O*=S)&&(P.weight=1),P.opacity=O,i["stroke-linejoin"]&&(P.joinstyle=i["stroke-linejoin"]||"miter"),P.miterlimit=i["stroke-miterlimit"]||8,i["stroke-linecap"]&&(P.endcap="butt"==i["stroke-linecap"]?"flat":"square"==i["stroke-linecap"]?"square":"round"),i["stroke-dasharray"]){var T={"-":"shortdash",".":"shortdot","-.":"shortdashdot","-..":"shortdashdotdot",". ":"dot","- ":"dash","--":"longdash","- .":"dashdot","--.":"longdashdot","--..":"longdashdotdot"};P.dashstyle=T[a](i["stroke-dasharray"])?T[i["stroke-dasharray"]]:o}Q&&l.appendChild(P)}if("text"==s.type){s.paper.canvas.style.display=o;var U=s.paper.span,V=100,W=m.font&&m.font.match(/\d+(?:\.\d*)?(?=px)/);p=U.style,m.font&&(p.font=m.font),m["font-family"]&&(p.fontFamily=m["font-family"]),m["font-weight"]&&(p.fontWeight=m["font-weight"]),m["font-style"]&&(p.fontStyle=m["font-style"]),W=d(m["font-size"]||W&&W[0])||10,p.fontSize=W*V+"px",s.textpath.string&&(U.innerHTML=b(s.textpath.string).replace(/</g,"&#60;").replace(/&/g,"&#38;").replace(/\n/g,"<br>"));var X=U.getBoundingClientRect();s.W=m.w=(X.right-X.left)/V,s.H=m.h=(X.bottom-X.top)/V,s.X=m.x,s.Y=m.y+s.H/2,("x"in i||"y"in i)&&(s.path.v=c.format("m{0},{1}l{2},{1}",f(m.x*u),f(m.y*u),f(m.x*u)+1));for(var Y=["x","y","text","font","font-family","font-weight","font-style","font-size"],Z=0,$=Y.length;$>Z;Z++)if(Y[Z]in i){s._.dirty=1;break}switch(m["text-anchor"]){case"start":s.textpath.style["v-text-align"]="left",s.bbx=s.W/2;break;case"end":s.textpath.style["v-text-align"]="right",s.bbx=-s.W/2;break;default:s.textpath.style["v-text-align"]="center",s.bbx=0}s.textpath.style["v-text-kern"]=!0}},C=function(a,f,g){a.attrs=a.attrs||{};var h=(a.attrs,Math.pow),i="linear",j=".5 .5";if(a.attrs.gradient=f,f=b(f).replace(c._radial_gradient,function(a,b,c){return i="radial",b&&c&&(b=d(b),c=d(c),h(b-.5,2)+h(c-.5,2)>.25&&(c=e.sqrt(.25-h(b-.5,2))*(2*(c>.5)-1)+.5),j=b+n+c),o}),f=f.split(/\s*\-\s*/),"linear"==i){var k=f.shift();if(k=-d(k),isNaN(k))return null}var l=c._parseDots(f);if(!l)return null;if(a=a.shape||a.node,l.length){a.removeChild(g),g.on=!0,g.method="none",g.color=l[0].color,g.color2=l[l.length-1].color;for(var m=[],p=0,q=l.length;q>p;p++)l[p].offset&&m.push(l[p].offset+n+l[p].color);g.colors=m.length?m.join():"0% "+g.color,"radial"==i?(g.type="gradientTitle",g.focus="100%",g.focussize="0 0",g.focusposition=j,g.angle=0):(g.type="gradient",g.angle=(270-k)%360),a.appendChild(g)}return 1},D=function(a,b){this[0]=this.node=a,a.raphael=!0,this.id=c._oid++,a.raphaelid=this.id,this.X=0,this.Y=0,this.attrs={},this.paper=b,this.matrix=c.matrix(),this._={transform:[],sx:1,sy:1,dx:0,dy:0,deg:0,dirty:1,dirtyT:1},!b.bottom&&(b.bottom=this),this.prev=b.top,b.top&&(b.top.next=this),b.top=this,this.next=null},E=c.el;D.prototype=E,E.constructor=D,E.transform=function(a){if(null==a)return this._.transform;var d,e=this.paper._viewBoxShift,f=e?"s"+[e.scale,e.scale]+"-1-1t"+[e.dx,e.dy]:o;e&&(d=a=b(a).replace(/\.{3}|\u2026/g,this._.transform||o)),c._extractTransform(this,f+a);var g,h=this.matrix.clone(),i=this.skew,j=this.node,k=~b(this.attrs.fill).indexOf("-"),l=!b(this.attrs.fill).indexOf("url(");if(h.translate(1,1),l||k||"image"==this.type)if(i.matrix="1 0 0 1",i.offset="0 0",g=h.split(),k&&g.noRotation||!g.isSimple){j.style.filter=h.toFilter();var m=this.getBBox(),p=this.getBBox(1),q=m.x-p.x,r=m.y-p.y;j.coordorigin=q*-u+n+r*-u,z(this,1,1,q,r,0)}else j.style.filter=o,z(this,g.scalex,g.scaley,g.dx,g.dy,g.rotate);else j.style.filter=o,i.matrix=b(h),i.offset=h.offset();return d&&(this._.transform=d),this},E.rotate=function(a,c,e){if(this.removed)return this;if(null!=a){if(a=b(a).split(k),a.length-1&&(c=d(a[1]),e=d(a[2])),a=d(a[0]),null==e&&(c=e),null==c||null==e){var f=this.getBBox(1);c=f.x+f.width/2,e=f.y+f.height/2}return this._.dirtyT=1,this.transform(this._.transform.concat([["r",a,c,e]])),this}},E.translate=function(a,c){return this.removed?this:(a=b(a).split(k),a.length-1&&(c=d(a[1])),a=d(a[0])||0,c=+c||0,this._.bbox&&(this._.bbox.x+=a,this._.bbox.y+=c),this.transform(this._.transform.concat([["t",a,c]])),this)},E.scale=function(a,c,e,f){if(this.removed)return this;if(a=b(a).split(k),a.length-1&&(c=d(a[1]),e=d(a[2]),f=d(a[3]),isNaN(e)&&(e=null),isNaN(f)&&(f=null)),a=d(a[0]),null==c&&(c=a),null==f&&(e=f),null==e||null==f)var g=this.getBBox(1);return e=null==e?g.x+g.width/2:e,f=null==f?g.y+g.height/2:f,this.transform(this._.transform.concat([["s",a,c,e,f]])),this._.dirtyT=1,this},E.hide=function(){return!this.removed&&(this.node.style.display="none"),this},E.show=function(){return!this.removed&&(this.node.style.display=o),this},E._getBBox=function(){return this.removed?{}:{x:this.X+(this.bbx||0)-this.W/2,y:this.Y-this.H,width:this.W,height:this.H}},E.remove=function(){if(!this.removed&&this.node.parentNode){this.paper.__set__&&this.paper.__set__.exclude(this),c.eve.unbind("raphael.*.*."+this.id),c._tear(this,this.paper),this.node.parentNode.removeChild(this.node),this.shape&&this.shape.parentNode.removeChild(this.shape);for(var a in this)this[a]="function"==typeof this[a]?c._removedFactory(a):null;this.removed=!0}},E.attr=function(b,d){if(this.removed)return this;if(null==b){var e={};for(var f in this.attrs)this.attrs[a](f)&&(e[f]=this.attrs[f]);return e.gradient&&"none"==e.fill&&(e.fill=e.gradient)&&delete e.gradient,e.transform=this._.transform,e}if(null==d&&c.is(b,"string")){if(b==j&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;for(var g=b.split(k),h={},i=0,m=g.length;m>i;i++)b=g[i],h[b]=b in this.attrs?this.attrs[b]:c.is(this.paper.customAttributes[b],"function")?this.paper.customAttributes[b].def:c._availableAttrs[b];return m-1?h:h[g[0]]}if(this.attrs&&null==d&&c.is(b,"array")){for(h={},i=0,m=b.length;m>i;i++)h[b[i]]=this.attr(b[i]);return h}var n;null!=d&&(n={},n[b]=d),null==d&&c.is(b,"object")&&(n=b);for(var o in n)l("raphael.attr."+o+"."+this.id,this,n[o]);if(n){for(o in this.paper.customAttributes)if(this.paper.customAttributes[a](o)&&n[a](o)&&c.is(this.paper.customAttributes[o],"function")){var p=this.paper.customAttributes[o].apply(this,[].concat(n[o]));this.attrs[o]=n[o];for(var q in p)p[a](q)&&(n[q]=p[q])}n.text&&"text"==this.type&&(this.textpath.string=n.text),B(this,n)}return this},E.toFront=function(){return!this.removed&&this.node.parentNode.appendChild(this.node),this.paper&&this.paper.top!=this&&c._tofront(this,this.paper),this},E.toBack=function(){return this.removed?this:(this.node.parentNode.firstChild!=this.node&&(this.node.parentNode.insertBefore(this.node,this.node.parentNode.firstChild),c._toback(this,this.paper)),this)},E.insertAfter=function(a){return this.removed?this:(a.constructor==c.st.constructor&&(a=a[a.length-1]),a.node.nextSibling?a.node.parentNode.insertBefore(this.node,a.node.nextSibling):a.node.parentNode.appendChild(this.node),c._insertafter(this,a,this.paper),this)},E.insertBefore=function(a){return this.removed?this:(a.constructor==c.st.constructor&&(a=a[0]),a.node.parentNode.insertBefore(this.node,a.node),c._insertbefore(this,a,this.paper),this)},E.blur=function(a){var b=this.node.runtimeStyle,d=b.filter;return d=d.replace(r,o),0!==+a?(this.attrs.blur=a,b.filter=d+n+m+".Blur(pixelradius="+(+a||1.5)+")",b.margin=c.format("-{0}px 0 0 -{0}px",f(+a||1.5))):(b.filter=d,b.margin=0,delete this.attrs.blur),this},c._engine.path=function(a,b){var c=F("shape");c.style.cssText=t,c.coordsize=u+n+u,c.coordorigin=b.coordorigin;var d=new D(c,b),e={fill:"none",stroke:"#000"};a&&(e.path=a),d.type="path",d.path=[],d.Path=o,B(d,e),b.canvas.appendChild(c);var f=F("skew");return f.on=!0,c.appendChild(f),d.skew=f,d.transform(o),d},c._engine.rect=function(a,b,d,e,f,g){var h=c._rectPath(b,d,e,f,g),i=a.path(h),j=i.attrs;return i.X=j.x=b,i.Y=j.y=d,i.W=j.width=e,i.H=j.height=f,j.r=g,j.path=h,i.type="rect",i},c._engine.ellipse=function(a,b,c,d,e){var f=a.path();return f.attrs,f.X=b-d,f.Y=c-e,f.W=2*d,f.H=2*e,f.type="ellipse",B(f,{cx:b,cy:c,rx:d,ry:e}),f},c._engine.circle=function(a,b,c,d){var e=a.path();return e.attrs,e.X=b-d,e.Y=c-d,e.W=e.H=2*d,e.type="circle",B(e,{cx:b,cy:c,r:d}),e},c._engine.image=function(a,b,d,e,f,g){var h=c._rectPath(d,e,f,g),i=a.path(h).attr({stroke:"none"}),k=i.attrs,l=i.node,m=l.getElementsByTagName(j)[0];return k.src=b,i.X=k.x=d,i.Y=k.y=e,i.W=k.width=f,i.H=k.height=g,k.path=h,i.type="image",m.parentNode==l&&l.removeChild(m),m.rotate=!0,m.src=b,m.type="tile",i._.fillpos=[d,e],i._.fillsize=[f,g],l.appendChild(m),z(i,1,1,0,0,0),i},c._engine.text=function(a,d,e,g){var h=F("shape"),i=F("path"),j=F("textpath");d=d||0,e=e||0,g=g||"",i.v=c.format("m{0},{1}l{2},{1}",f(d*u),f(e*u),f(d*u)+1),i.textpathok=!0,j.string=b(g),j.on=!0,h.style.cssText=t,h.coordsize=u+n+u,h.coordorigin="0 0";var k=new D(h,a),l={fill:"#000",stroke:"none",font:c._availableAttrs.font,text:g};k.shape=h,k.path=i,k.textpath=j,k.type="text",k.attrs.text=b(g),k.attrs.x=d,k.attrs.y=e,k.attrs.w=1,k.attrs.h=1,B(k,l),h.appendChild(j),h.appendChild(i),a.canvas.appendChild(h);var m=F("skew");return m.on=!0,h.appendChild(m),k.skew=m,k.transform(o),k},c._engine.setSize=function(a,b){var d=this.canvas.style;return this.width=a,this.height=b,a==+a&&(a+="px"),b==+b&&(b+="px"),d.width=a,d.height=b,d.clip="rect(0 "+a+" "+b+" 0)",this._viewBox&&c._engine.setViewBox.apply(this,this._viewBox),this},c._engine.setViewBox=function(a,b,d,e,f){c.eve("raphael.setViewBox",this,this._viewBox,[a,b,d,e,f]);var h,i,j=this.width,k=this.height,l=1/g(d/j,e/k);return f&&(h=k/e,i=j/d,j>d*h&&(a-=(j-d*h)/2/h),k>e*i&&(b-=(k-e*i)/2/i)),this._viewBox=[a,b,d,e,!!f],this._viewBoxShift={dx:-a,dy:-b,scale:l},this.forEach(function(a){a.transform("...")}),this};var F;c._engine.initWin=function(a){var b=a.document;b.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)");try{!b.namespaces.rvml&&b.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),F=function(a){return b.createElement("<rvml:"+a+' class="rvml">')}}catch(c){F=function(a){return b.createElement("<"+a+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}},c._engine.initWin(c._g.win),c._engine.create=function(){var a=c._getContainer.apply(0,arguments),b=a.container,d=a.height,e=a.width,f=a.x,g=a.y;if(!b)throw new Error("VML container not found.");var h=new c._Paper,i=h.canvas=c._g.doc.createElement("div"),j=i.style;return f=f||0,g=g||0,e=e||512,d=d||342,h.width=e,h.height=d,e==+e&&(e+="px"),d==+d&&(d+="px"),h.coordsize=1e3*u+n+1e3*u,h.coordorigin="0 0",h.span=c._g.doc.createElement("span"),h.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;",i.appendChild(h.span),j.cssText=c.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden",e,d),1==b?(c._g.doc.body.appendChild(i),j.left=f+"px",j.top=g+"px",j.position="absolute"):b.firstChild?b.insertBefore(i,b.firstChild):b.appendChild(i),h.renderfix=function(){},h},c.prototype.clear=function(){c.eve("raphael.clear",this),this.canvas.innerHTML=o,this.span=c._g.doc.createElement("span"),this.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;",this.canvas.appendChild(this.span),this.bottom=this.top=null},c.prototype.remove=function(){c.eve("raphael.remove",this),this.canvas.parentNode.removeChild(this.canvas);for(var a in this)this[a]="function"==typeof this[a]?c._removedFactory(a):null;return!0};var G=c.st;for(var H in E)E[a](H)&&!G[a](H)&&(G[H]=function(a){return function(){var b=arguments;return this.forEach(function(c){c[a].apply(c,b)})}}(H))}}(),B.was?A.win.Raphael=c:Raphael=c,c});

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raphael-rails-2.1.2/vendor/assets/javascripts/raphael.core.js:
  552              }
  553              var range = bod.createTextRange();
  554:             toHex = cacher(function (color) {
  555                  try {
  556                      bod.style.color = Str(color).replace(trim, E);
  ...
  567              i.style.display = "none";
  568              g.doc.body.appendChild(i);
  569:             toHex = cacher(function (color) {
  570                  i.style.color = color;
  571                  return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");
  ...
  828          }
  829      }
  830:     function cacher(f, scope, postprocessor) {
  831          function newf() {
  832              var arg = Array.prototype.slice.call(arguments, 0),
  833                  args = arg.join("\u2400"),
  834:                 cache = newf.cache = newf.cache || {},
  835                  count = newf.count = newf.count || [];
  836:             if (cache[has](args)) {
  837                  repush(count, args);
  838:                 return postprocessor ? postprocessor(cache[args]) : cache[args];
  839              }
  840:             count.length >= 1e3 && delete cache[count.shift()];
  841              count.push(args);
  842:             cache[args] = f[apply](scope, arg);
  843:             return postprocessor ? postprocessor(cache[args]) : cache[args];
  844          }
  845          return newf;
  ...
  892       o }
  893      \*/
  894:     R.getRGB = cacher(function (colour) {
  895          if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {
  896              return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};
  ...
  974       = (string) hex representation of the colour.
  975      \*/
  976:     R.hsb = cacher(function (h, s, b) {
  977          return R.hsb2rgb(h, s, b).hex;
  978      });
  ...
  988       = (string) hex representation of the colour.
  989      \*/
  990:     R.hsl = cacher(function (h, s, l) {
  991          return R.hsl2rgb(h, s, l).hex;
  992      });
  ...
 1002       = (string) hex representation of the colour.
 1003      \*/
 1004:     R.rgb = cacher(function (r, g, b) {
 1005          return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);
 1006      });
 ....
 1135       = (array) array of transformations.
 1136      \*/
 1137:     R.parseTransformString = cacher(function (TString) {
 1138          if (!TString) {
 1139              return null;
 ....
 1842                  res = [],
 1843                  xy,
 1844:                 rotate = cacher(function (x, y, rad) {
 1845                      var X = x * math.cos(rad) - y * math.sin(rad),
 1846                          Y = x * math.sin(rad) + y * math.cos(rad);
 ....
 1931              };
 1932          },
 1933:         curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
 1934              var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),
 1935                  b = 2 * (c1x - p1x) - 2 * (c2x - c1x),
 ....
 1974              };
 1975          }),
 1976:         path2curve = R._path2curve = cacher(function (path, path2) {
 1977              var pth = !path2 && paths(path);
 1978              if (!path2 && pth.curve) {
 ....
 2085              return p2 ? [p, p2] : p;
 2086          }, null, pathClone),
 2087:         parseDots = R._parseDots = cacher(function (gradient) {
 2088              var dots = [];
 2089              for (var i = 0, ii = gradient.length; i < ii; i++) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/raphael-rails-2.1.2/vendor/assets/javascripts/raphael.js:
  931              }
  932              var range = bod.createTextRange();
  933:             toHex = cacher(function (color) {
  934                  try {
  935                      bod.style.color = Str(color).replace(trim, E);
  ...
  946              i.style.display = "none";
  947              g.doc.body.appendChild(i);
  948:             toHex = cacher(function (color) {
  949                  i.style.color = color;
  950                  return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");
  ...
 1207          }
 1208      }
 1209:     function cacher(f, scope, postprocessor) {
 1210          function newf() {
 1211              var arg = Array.prototype.slice.call(arguments, 0),
 1212                  args = arg.join("\u2400"),
 1213:                 cache = newf.cache = newf.cache || {},
 1214                  count = newf.count = newf.count || [];
 1215:             if (cache[has](args)) {
 1216                  repush(count, args);
 1217:                 return postprocessor ? postprocessor(cache[args]) : cache[args];
 1218              }
 1219:             count.length >= 1e3 && delete cache[count.shift()];
 1220              count.push(args);
 1221:             cache[args] = f[apply](scope, arg);
 1222:             return postprocessor ? postprocessor(cache[args]) : cache[args];
 1223          }
 1224          return newf;
 ....
 1271       o }
 1272      \*/
 1273:     R.getRGB = cacher(function (colour) {
 1274          if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {
 1275              return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: clrToString};
 ....
 1353       = (string) hex representation of the colour.
 1354      \*/
 1355:     R.hsb = cacher(function (h, s, b) {
 1356          return R.hsb2rgb(h, s, b).hex;
 1357      });
 ....
 1367       = (string) hex representation of the colour.
 1368      \*/
 1369:     R.hsl = cacher(function (h, s, l) {
 1370          return R.hsl2rgb(h, s, l).hex;
 1371      });
 ....
 1381       = (string) hex representation of the colour.
 1382      \*/
 1383:     R.rgb = cacher(function (r, g, b) {
 1384          return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);
 1385      });
 ....
 1514       = (array) array of transformations.
 1515      \*/
 1516:     R.parseTransformString = cacher(function (TString) {
 1517          if (!TString) {
 1518              return null;
 ....
 2221                  res = [],
 2222                  xy,
 2223:                 rotate = cacher(function (x, y, rad) {
 2224                      var X = x * math.cos(rad) - y * math.sin(rad),
 2225                          Y = x * math.sin(rad) + y * math.cos(rad);
 ....
 2310              };
 2311          },
 2312:         curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
 2313              var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),
 2314                  b = 2 * (c1x - p1x) - 2 * (c2x - c1x),
 ....
 2353              };
 2354          }),
 2355:         path2curve = R._path2curve = cacher(function (path, path2) {
 2356              var pth = !path2 && paths(path);
 2357              if (!path2 && pth.curve) {
 ....
 2464              return p2 ? [p, p2] : p;
 2465          }, null, pathClone),
 2466:         parseDots = R._parseDots = cacher(function (gradient) {
 2467              var dots = [];
 2468              for (var i = 0, ii = gradient.length; i < ii; i++) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/History.rdoc:
  497  * Bug fixes
  498    * RDoc::Generator tests no longer require any installed RDoc on Ruby 1.9
  499:   * Load existing cache before generating ri.  Ruby r27749 by NAKAMURA Usaku.
  500    * RDoc now handles BOM.  Ruby r28062 by Nobuyoshi Nakada.
  501    * Use proper XML encoding for darkfish classpage.  Ruby r28083 by NARUSE,
  ...
  673    * ri no longer displays the value of a constant.  There's no easy way to
  674      make them presentable.  Use irb or ruby -e instead.  Ruby Bug #549.
  675:   * New ri data format now uses Marshal and pre-builds caches
  676      * No support for old ri data format, too hard to maintain
  677      * To upgrade your core ri documentation, install the rdoc-data gem and run
  ...
  737  
  738  * 10 Bug Fixes
  739:   * Writing the ri cache file to the proper directory.  Bug #24459 by Lars
  740      Christensen.
  741    * Possible fix for Dir::[] and Pathname interaction on 1.9.  Bug #24650 by
  ...
  868    * Made ri twice as fast for the most common use case of displaying
  869      information for a class or a fully-qualified method
  870:     (i.e., ri Array#flatten, after ri has created a cache the first time that
  871      it runs).
  872    * Made ri many times faster when searching for an unqualified method (i.e.,
  873:     ri read, again after the first such search has populated ri's cache)
  874    * Changed ri to do regular expression searches for unqualified methods;
  875      now, a regular expression for a method can be passed to ri on the
  ...
  975    * Renamespaced everything RDoc under the RDoc module.
  976    * New `ri` implementation.
  977:     * Reads from a cache in ~/.ri/ for enhanced speed.
  978      * RubyGems aware, only searches latest gem versions.
  979    * Now up to over 100 tests and 200 assertions.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/any_method.rb:
  100    ##
  101    # Loads this AnyMethod from +array+.  For a loaded AnyMethod the following
  102:   # methods will return cached values:
  103    #
  104    # * #full_name

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/attr.rb:
   97    ##
   98    # Loads this Attr from +array+.  For a loaded Attr the following
   99:   # methods will return cached values:
  100    #
  101    # * #full_name

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/class_module.rb:
  490    # Returns the classes and modules that are not constants
  491    # aliasing another class or module. For use by formatters
  492:   # only (caches its result).
  493  
  494    def non_aliases

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/code_object.rb:
  226    # Sets the full_name overriding any computed full name.
  227    #
  228:   # Set to +nil+ to clear RDoc's cached value
  229  
  230    def full_name= full_name

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/comment.rb:
  170    ##
  171    # Parses the comment into an RDoc::Markup::Document.  The parsed document is
  172:   # cached until the text is changed.
  173  
  174    def parse

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/generator/darkfish.rb:
   87  
   88      @template_dir = Pathname.new options.template_dir
   89:     @template_cache = {}
   90  
   91      @files      = nil
   ..
  509  
  510    ##
  511:   # Retrieves a cache template for +file+, if present, or fills the cache.
  512  
  513    def template_for file, page = true, klass = nil
  514:     template = @template_cache[file]
  515  
  516      return template if template
  ...
  525  
  526      template = klass.new template, nil, '<>'
  527:     @template_cache[file] = template
  528      template
  529    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/generator/ri.rb:
   31      install_siginfo_handler
   32  
   33:     @store.load_cache
   34  
   35      RDoc::TopLevel.all_classes_and_modules.each do |klass|
   ..
   48      end
   49  
   50:     @current = 'saving cache'
   51  
   52:     @store.save_cache
   53  
   54    ensure

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/generator/template/darkfish/js/jquery.js:
   14   * Date: Thu Jun 30 14:16:56 2011 -0400
   15   */
   16: (function(a,b){function cv(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cs(a){if(!cg[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ch||(ch=c.createElement("iframe"),ch.frameBorder=ch.width=ch.height=0),b.appendChild(ch);if(!ci||!ch.createElement)ci=(ch.contentWindow||ch.contentDocument).document,ci.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),ci.close();d=ci.createElement(a),ci.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ch)}cg[a]=e}return cg[a]}function cr(a,b){var c={};f.each(cm.concat.apply([],cm.slice(0,b)),function(){c[this]=a});return c}function cq(){cn=b}function cp(){setTimeout(cq,0);return cn=f.now()}function cf(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ce(){try{return new a.XMLHttpRequest}catch(b){}}function b$(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bZ(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bY(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bC.test(a)?d(a,e):bY(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)bY(a+"["+e+"]",b[e],c,d);else d(a,b)}function bX(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bR,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bX(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bX(a,c,d,e,"*",g));return l}function bW(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bN),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bA(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bv:bw;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bx(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function bm(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(be,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bl(a){f.nodeName(a,"input")?bk(a):"getElementsByTagName"in a&&f.grep(a.getElementsByTagName("input"),bk)}function bk(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bj(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function bi(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bh(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c=f.expando,d=f.data(a),e=f.data(b,d);if(d=d[c]){var g=d.events;e=e[c]=f.extend({},d);if(g){delete e.handle,e.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)f.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function bg(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function W(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(R.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function V(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function N(a,b){return(a&&a!=="*"?a+".":"")+b.replace(z,"`").replace(A,"&")}function M(a){var b,c,d,e,g,h,i,j,k,l,m,n,o,p=[],q=[],r=f._data(this,"events");if(!(a.liveFired===this||!r||!r.live||a.target.disabled||a.button&&a.type==="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var s=r.live.slice(0);for(i=0;i<s.length;i++)g=s[i],g.origType.replace(x,"")===a.type?q.push(g.selector):s.splice(i--,1);e=f(a.target).closest(q,a.currentTarget);for(j=0,k=e.length;j<k;j++){m=e[j];for(i=0;i<s.length;i++){g=s[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,d=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,d=f(a.relatedTarget).closest(g.selector)[0],d&&f.contains(h,d)&&(d=h);(!d||d!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){e=p[j];if(c&&e.level>c)break;a.currentTarget=e.elem,a.data=e.handleObj.data,a.handleObj=e.handleObj,o=e.handleObj.origHandler.apply(e.elem,arguments);if(o===!1||a.isPropagationStopped()){c=e.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function K(a,c,d){var e=f.extend({},d[0]);e.type=a,e.originalEvent={},e.liveFired=b,f.event.handle.call(c,e),e.isDefaultPrevented()&&d[0].preventDefault()}function E(){return!0}function D(){return!1}function m(a,c,d){var e=c+"defer",g=c+"queue",h=c+"mark",i=f.data(a,e,b,!0);i&&(d==="queue"||!f.data(a,g,b,!0))&&(d==="mark"||!f.data(a,h,b,!0))&&setTimeout(function(){!f.data(a,g,b,!0)&&!f.data(a,h,b,!0)&&(f.removeData(a,e,!0),i.resolve())},0)}function l(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function k(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(j,"$1-$2").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNaN(d)?i.test(d)?f.parseJSON(d):d:parseFloat(d)}catch(g){}f.data(a,c,d)}else d=b}return d}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z])/ig,x=function(a,b){return b.toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.6.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.resolveWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!A){A=e._Deferred();if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNaN:function(a){return a==null||!m.test(a)||isNaN(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a);return c===b||D.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(b,c,d){a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),d=c.documentElement,(!d||!d.nodeName||d.nodeName==="parsererror")&&e.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b){if(H)return H.call(b,a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g="done fail isResolved isRejected promise then always pipe".split(" "),h=[].slice;f.extend({_Deferred:function(){var a=[],b,c,d,e={done:function(){if(!d){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=f.type(i),j==="array"?e.done.apply(e,i):j==="function"&&a.push(i);k&&e.resolveWith(k[0],k[1])}return this},resolveWith:function(e,f){if(!d&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(e,f)}finally{b=[e,f],c=0}}return this},resolve:function(){e.resolveWith(this,arguments);return this},isResolved:function(){return!!c||!!b},cancel:function(){d=1,a=[];return this}};return e},Deferred:function(a){var b=f._Deferred(),c=f._Deferred(),d;f.extend(b,{then:function(a,c){b.done(a).fail(c);return this},always:function(){return b.done.apply(b,arguments).fail.apply(this,arguments)},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,pipe:function(a,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[c,"reject"]},function(a,c){var e=c[0],g=c[1],h;f.isFunction(e)?b[a](function(){h=e.apply(this,arguments),h&&f.isFunction(h.promise)?h.promise().then(d.resolve,d.reject):d[g](h)}):b[a](d[g])})}).promise()},promise:function(a){if(a==null){if(d)return d;d=a={}}var c=g.length;while(c--)a[g[c]]=b[g[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?h.call(arguments,0):c,--e||g.resolveWith(g,h.call(b,0))}}var b=arguments,c=0,d=b.length,e=d,g=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred();if(d>1){for(;c<d;c++)b[c]&&f.isFunction(b[c].promise)?b[c].promise().then(i(c),g.reject):--e;e||g.resolveWith(g,b)}else g!==a&&g.resolveWith(g,d?[a]:[]);return g.promise()}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55$/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.firstChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0},m&&f.extend(p,{position:"absolute",left:-1e3,top:-1e3});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0),o.innerHTML="",n.removeChild(o);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var i=/^(?:\{.*\}|\[.*\])$/,j=/([a-z])([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!l(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g=f.expando,h=typeof c=="string",i,j=a.nodeType,k=j?f.cache:a,l=j?a[f.expando]:a[f.expando]&&f.expando;if((!l||e&&l&&!k[l][g])&&h&&d===b)return;l||(j?a[f.expando]=l=++f.uuid:l=f.expando),k[l]||(k[l]={},j||(k[l].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?k[l][g]=f.extend(k[l][g],c):k[l]=f.extend(k[l],c);i=k[l],e&&(i[g]||(i[g]={}),i=i[g]),d!==b&&(i[f.camelCase(c)]=d);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[f.camelCase(c)]||i[c]:i}},removeData:function(b,c,d){if(!!f.acceptData(b)){var e=f.expando,g=b.nodeType,h=g?f.cache:b,i=g?b[f.expando]:f.expando;if(!h[i])return;if(c){var j=d?h[i][e]:h[i];if(j){delete j[c];if(!l(j))return}}if(d){delete h[i][e];if(!l(h[i]))return}var k=h[i][e];f.support.deleteExpando||h!=a?delete h[i]:h[i]=null,k?(h[i]={},g||(h[i].toJSON=f.noop),h[i][e]=k):g&&(f.support.deleteExpando?delete b[f.expando]:b.removeAttribute?b.removeAttribute(f.expando):b[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d=null;if(typeof a=="undefined"){if(this.length){d=f.data(this[0]);if(this[0].nodeType===1){var e=this[0].attributes,g;for(var h=0,i=e.length;h<i;h++)g=e[h].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),k(this[0],g,d[g]))}}return d}if(typeof a=="object")return this.each(function(){f.data(this,a)});var j=a.split(".");j[1]=j[1]?"."+j[1]:"";if(c===b){d=this.triggerHandler("getData"+j[1]+"!",[j[0]]),d===b&&this.length&&(d=f.data(this[0],a),d=k(this[0],a,d));return d===b&&j[1]?this.data(j[0]):d}return this.each(function(){var b=f(this),d=[j[0],c];b.triggerHandler("setData"+j[1]+"!",d),f.data(this,a,c),b.triggerHandler("changeData"+j[1]+"!",d)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,c){a&&(c=(c||"fx")+"mark",f.data(a,c,(f.data(a,c,b,!0)||0)+1,!0))},_unmark:function(a,c,d){a!==!0&&(d=c,c=a,a=!1);if(c){d=d||"fx";var e=d+"mark",g=a?0:(f.data(c,e,b,!0)||1)-1;g?f.data(c,e,g,!0):(f.removeData(c,e,!0),m(c,d,"mark"))}},queue:function(a,c,d){if(a){c=(c||"fx")+"queue";var e=f.data(a,c,b,!0);d&&(!e||f.isArray(d)?e=f.data(a,c,f.makeArray(d),!0):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e;d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),d.call(a,function(){f.dequeue(a,b)})),c.length||(f.removeData(a,b+"queue",!0),m(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){f.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f._Deferred(),!0))h++,l.done(m);m();return d.promise()}});var n=/[\n\t\r]/g,o=/\s+/,p=/\r/g,q=/^(?:button|input)$/i,r=/^(?:button|input|object|select|textarea)$/i,s=/^a(?:rea)?$/i,t=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,u=/\:|^on/,v,w;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(o);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(o);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(n," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(o);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(n," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e=this[0];if(!arguments.length){if(e){c=f.valHooks[e.nodeName.toLowerCase()]||f.valHooks[e.type];if(c&&"get"in c&&(d=c.get(e,"value"))!==b)return d;d=e.value;return typeof d=="string"?d.replace(p,""):d==null?"":d}return b}var g=f.isFunction(a);return this.each(function(d){var e=f(this),h;if(this.nodeType===1){g?h=a.call(this,d,e.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c=a.selectedIndex,d=[],e=a.options,g=a.type==="select-one";if(c<0)return null;for(var h=g?c:0,i=g?c+1:e.length;h<i;h++){var j=e[h];if(j.selected&&(f.support.optDisabled?!j.disabled:j.getAttribute("disabled")===null)&&(!j.parentNode.disabled||!f.nodeName(j.parentNode,"optgroup"))){b=f(j).val();if(g)return b;d.push(b)}}if(g&&!d.length&&e.length)return f(e[c]).val();return d},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attrFix:{tabindex:"tabIndex"},attr:function(a,c,d,e){var g=a.nodeType;if(!a||g===3||g===8||g===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);var h,i,j=g!==1||!f.isXMLDoc(a);j&&(c=f.attrFix[c]||c,i=f.attrHooks[c],i||(t.test(c)?i=w:v&&c!=="className"&&(f.nodeName(a,"form")||u.test(c))&&(i=v)));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(i&&"set"in i&&j&&(h=i.set(a,d,c))!==b)return h;a.setAttribute(c,""+d);return d}if(i&&"get"in i&&j&&(h=i.get(a,c))!==null)return h;h=a.getAttribute(c);return h===null?b:h},removeAttr:function(a,b){var c;a.nodeType===1&&(b=f.attrFix[b]||b,f.support.getSetAttribute?a.removeAttribute(b):(f.attr(a,b,""),a.removeAttributeNode(a.getAttributeNode(b))),t.test(b)&&(c=f.propFix[b]||b)in a&&(a[c]=!1))},attrHooks:{type:{set:function(a,b){if(q.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},tabIndex:{get:function(a){var c=a.getAttributeNode("tabIndex");return c&&c.specified?parseInt(c.value,10):r.test(a.nodeName)||s.test(a.nodeName)&&a.href?0:b}},value:{get:function(a,b){if(v&&f.nodeName(a,"button"))return v.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(v&&f.nodeName(a,"button"))return v.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e=a.nodeType;if(!a||e===3||e===8||e===2)return b;var g,h,i=e!==1||!f.isXMLDoc(a);i&&(c=f.propFix[c]||c,h=f.propHooks[c]);return d!==b?h&&"set"in h&&(g=h.set(a,d,c))!==b?g:a[c]=d:h&&"get"in h&&(g=h.get(a,c))!==b?g:a[c]},propHooks:{}}),w={get:function(a,c){return f.prop(a,c)?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},f.support.getSetAttribute||(f.attrFix=f.propFix,v=f.attrHooks.name=f.attrHooks.title=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&d.nodeValue!==""?d.nodeValue:b},set:function(a,b,c){var d=a.getAttributeNode(c);if(d){d.nodeValue=b;return b}}},f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})})),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}})),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var x=/\.(.*)$/,y=/^(?:textarea|input|select)$/i,z=/\./g,A=/ /g,B=/[^\w\s.|`]/g,C=function(a){return a.replace(B,"\\$&")};f.event={add:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){if(d===!1)d=D;else if(!d)return;var g,h;d.handler&&(g=d,d=g.handler),d.guid||(d.guid=f.guid++);var i=f._data(a);if(!i)return;var j=i.events,k=i.handle;j||(i.events=j={}),k||(i.handle=k=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.handle.apply(k.elem,arguments):b}),k.elem=a,c=c.split(" ");var l,m=0,n;while(l=c[m++]){h=g?f.extend({},g):{handler:d,data:e},l.indexOf(".")>-1?(n=l.split("."),l=n.shift(),h.namespace=n.slice(0).sort().join(".")):(n=[],h.namespace=""),h.type=l,h.guid||(h.guid=d.guid);var o=j[l],p=f.event.special[l]||{};if(!o){o=j[l]=[];if(!p.setup||p.setup.call(a,e,n,k)===!1)a.addEventListener?a.addEventListener(l,k,!1):a.attachEvent&&a.attachEvent("on"+l,k)}p.add&&(p.add.call(a,h),h.handler.guid||(h.handler.guid=d.guid)),o.push(h),f.event.global[l]=!0}a=null}},global:{},remove:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){d===!1&&(d=D);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=f.hasData(a)&&f._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(d=c.handler,c=c.type);if(!c||typeof c=="string"&&c.charAt(0)==="."){c=c||"";for(h in t)f.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+f.map(m.slice(0).sort(),C).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!d){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))f.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=f.event.special[h]||{};for(j=e||0;j<p.length;j++){q=p[j];if(d.guid===q.guid){if(l||n.test(q.namespace))e==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(e!=null)break}}if(p.length===0||e!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&f.removeEvent(a,h,s.handle),g=null,delete t[h]}if(f.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,f.isEmptyObject(s)&&f.removeData(a,b,!0)}}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){var h=c.type||c,i=[],j;h.indexOf("!")>=0&&(h=h.slice(0,-1),j=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.
   17: shift(),i.sort());if(!!e&&!f.event.customEvent[h]||!!f.event.global[h]){c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.exclusive=j,c.namespace=i.join("."),c.namespace_re=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(g||!e)c.preventDefault(),c.stopPropagation();if(!e){f.each(f.cache,function(){var a=f.expando,b=this[a];b&&b.events&&b.events[h]&&f.event.trigger(c,d,b.handle.elem)});return}if(e.nodeType===3||e.nodeType===8)return;c.result=b,c.target=e,d=d!=null?f.makeArray(d):[],d.unshift(c);var k=e,l=h.indexOf(":")<0?"on"+h:"";do{var m=f._data(k,"handle");c.currentTarget=k,m&&m.apply(k,d),l&&f.acceptData(k)&&k[l]&&k[l].apply(k,d)===!1&&(c.result=!1,c.preventDefault()),k=k.parentNode||k.ownerDocument||k===c.target.ownerDocument&&a}while(k&&!c.isPropagationStopped());if(!c.isDefaultPrevented()){var n,o=f.event.special[h]||{};if((!o._default||o._default.call(e.ownerDocument,c)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)){try{l&&e[h]&&(n=e[l],n&&(e[l]=null),f.event.triggered=h,e[h]())}catch(p){}n&&(e[l]=n),f.event.triggered=b}}return c.result}},handle:function(c){c=f.event.fix(c||a.event);var d=((f._data(this,"events")||{})[c.type]||[]).slice(0),e=!c.exclusive&&!c.namespace,g=Array.prototype.slice.call(arguments,0);g[0]=c,c.currentTarget=this;for(var h=0,i=d.length;h<i;h++){var j=d[h];if(e||c.namespace_re.test(j.namespace)){c.handler=j.handler,c.data=j.data,c.handleObj=j;var k=j.handler.apply(this,g);k!==b&&(c.result=k,k===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[f.expando])return a;var d=a;a=f.Event(d);for(var e=this.props.length,g;e;)g=this.props[--e],a[g]=d[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=a.target.ownerDocument||c,i=h.documentElement,j=h.body;a.pageX=a.clientX+(i&&i.scrollLeft||j&&j.scrollLeft||0)-(i&&i.clientLeft||j&&j.clientLeft||0),a.pageY=a.clientY+(i&&i.scrollTop||j&&j.scrollTop||0)-(i&&i.clientTop||j&&j.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:f.proxy,special:{ready:{setup:f.bindReady,teardown:f.noop},live:{add:function(a){f.event.add(this,N(a.origType,a.selector),f.extend({},a,{handler:M,guid:a.handler.guid}))},remove:function(a){f.event.remove(this,N(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!this.preventDefault)return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?E:D):this.type=a,b&&f.extend(this,b),this.timeStamp=f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=E;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=E;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=E,this.stopPropagation()},isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D};var F=function(a){var b=a.relatedTarget,c=!1,d=a.type;a.type=a.data,b!==this&&(b&&(c=f.contains(this,b)),c||(f.event.handle.apply(this,arguments),a.type=d))},G=function(a){a.type=a.data,f.event.handle.apply(this,arguments)};f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={setup:function(c){f.event.add(this,b,c&&c.selector?G:F,a)},teardown:function(a){f.event.remove(this,b,a&&a.selector?G:F)}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(a,b){if(!f.nodeName(this,"form"))f.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&f(b).closest("form").length&&K("submit",this,arguments)}),f.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&f(b).closest("form").length&&a.keyCode===13&&K("submit",this,arguments)});else return!1},teardown:function(a){f.event.remove(this,".specialSubmit")}});if(!f.support.changeBubbles){var H,I=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?f.map(a.options,function(a){return a.selected}).join("-"):"":f.nodeName(a,"select")&&(c=a.selectedIndex);return c},J=function(c){var d=c.target,e,g;if(!!y.test(d.nodeName)&&!d.readOnly){e=f._data(d,"_change_data"),g=I(d),(c.type!=="focusout"||d.type!=="radio")&&f._data(d,"_change_data",g);if(e===b||g===e)return;if(e!=null||g)c.type="change",c.liveFired=b,f.event.trigger(c,arguments[1],d)}};f.event.special.change={filters:{focusout:J,beforedeactivate:J,click:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(c==="radio"||c==="checkbox"||f.nodeName(b,"select"))&&J.call(this,a)},keydown:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(a.keyCode===13&&!f.nodeName(b,"textarea")||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&J.call(this,a)},beforeactivate:function(a){var b=a.target;f._data(b,"_change_data",I(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in H)f.event.add(this,c+".specialChange",H[c]);return y.test(this.nodeName)},teardown:function(a){f.event.remove(this,".specialChange");return y.test(this.nodeName)}},H=f.event.special.change.filters,H.focus=H.beforeactivate}f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){function e(a){var c=f.event.fix(a);c.type=b,c.originalEvent={},f.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var d=0;f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.each(["bind","one"],function(a,c){f.fn[c]=function(a,d,e){var g;if(typeof a=="object"){for(var h in a)this[c](h,d,a[h],e);return this}if(arguments.length===2||d===!1)e=d,d=b;c==="one"?(g=function(a){f(this).unbind(a,g);return e.apply(this,arguments)},g.guid=e.guid||f.guid++):g=e;if(a==="unload"&&c!=="one")this.one(a,d,e);else for(var i=0,j=this.length;i<j;i++)f.event.add(this[i],a,g,d);return this}}),f.fn.extend({unbind:function(a,b){if(typeof a=="object"&&!a.preventDefault)for(var c in a)this.unbind(c,a[c]);else for(var d=0,e=this.length;d<e;d++)f.event.remove(this[d],a,b);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f.data(this,"lastToggle"+a.guid)||0)%d;f.data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var L={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};f.each(["live","die"],function(a,c){f.fn[c]=function(a,d,e,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:f(this.context);if(typeof a=="object"&&!a.preventDefault){for(var o in a)n[c](o,d,a[o],m);return this}if(c==="die"&&!a&&g&&g.charAt(0)==="."){n.unbind(g);return this}if(d===!1||f.isFunction(d))e=d||D,d=b;a=(a||"").split(" ");while((h=a[i++])!=null){j=x.exec(h),k="",j&&(k=j[0],h=h.replace(x,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,L[h]?(a.push(L[h]+k),h=h+k):h=(L[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)f.event.add(n[p],"live."+N(h,m),{data:d,selector:m,handler:e,origType:h,origHandler:e,preType:l});else n.unbind("live."+N(h,m),e)}return this}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=0,e=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,f,g){f=f||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return f;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(e.call(n)==="[object Array]")if(!u)f.push.apply(f,n);else if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&f.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&f.push(j[t]);else p(n,f);o&&(k(o,h,f,g),k.uniqueSort(f));return f};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(!f)g=o=!0;else if(f===!0)continue}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("parentNode",b,f,a,e,c)},"~":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("previousSibling",b,f,a,e,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=d++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(e.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var f=a.length;c<f;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){if(a===b){g=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};f.find=k,f.expr=k.selectors,f.expr[":"]=f.expr.filters,f.unique=k.uniqueSort,f.text=k.getText,f.isXMLDoc=k.isXML,f.contains=k.contains}();var O=/Until$/,P=/^(?:parents|prevUntil|prevAll)/,Q=/,/,R=/^.[^:#\[\.,]*$/,S=Array.prototype.slice,T=f.expr.match.POS,U={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(W(this,a,!1),"not",a)},filter:function(a){return this.pushStack(W(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(d=0,e=a.length;d<e;d++)i=a[d],j[i]||(j[i]=T.test(i)?f(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:f(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=T.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(l?l.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a=="string")return f.inArray(this[0],a?f(a):this.parent().children());return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(V(c[0])||V(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=S.call(arguments);O.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!U[a]?f.unique(e):e,(this.length>1||Q.test(d))&&P.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var X=/ jQuery\d+="(?:\d+|null)"/g,Y=/^\s+/,Z=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,$=/<([\w:]+)/,_=/<tbody/i,ba=/<|&#?\w+;/,bb=/<(?:script|object|embed|option|style)/i,bc=/checked\s*(?:[^=]|=\s*.checked.)/i,bd=/\/(java|ecma)script/i,be=/^\s*<!(?:\[CDATA\[|\-\-)/,bf={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};bf.optgroup=bf.option,bf.tbody=bf.tfoot=bf.colgroup=bf.caption=bf.thead,bf.th=bf.td,f.support.htmlSerialize||(bf._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(X,""):null;if(typeof a=="string"&&!bb.test(a)&&(f.support.leadingWhitespace||!Y.test(a))&&!bf[($.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Z,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bc.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bg(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bm)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i;b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof a[0]=="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!bb.test(a[0])&&(f.support.checkClone||!bc.test(a[0]))&&(g=!0,h=f.fragments[a[0]],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[a[0]]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j
   18: )}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bi(a,d),e=bj(a),g=bj(d);for(h=0;e[h];++h)bi(e[h],g[h])}if(b){bh(a,d);if(c){e=bj(a),g=bj(d);for(h=0;e[h];++h)bh(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!ba.test(k))k=b.createTextNode(k);else{k=k.replace(Z,"<$1></$2>");var l=($.exec(k)||["",""])[1].toLowerCase(),m=bf[l]||bf._default,n=m[0],o=b.createElement("div");o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=_.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&Y.test(k)&&o.insertBefore(b.createTextNode(Y.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bl(k[i]);else bl(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bd.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.expando,g=f.event.special,h=f.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&f.noData[j.nodeName.toLowerCase()])continue;c=j[f.expando];if(c){b=d[c]&&d[c][e];if(b&&b.events){for(var k in b.events)g[k]?f.event.remove(j,k):f.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[f.expando]:j.removeAttribute&&j.removeAttribute(f.expando),delete d[c]}}}});var bn=/alpha\([^)]*\)/i,bo=/opacity=([^)]*)/,bp=/([A-Z]|^ms)/g,bq=/^-?\d+(?:px)?$/i,br=/^-?\d/,bs=/^[+\-]=/,bt=/[^+\-\.\de]+/g,bu={position:"absolute",visibility:"hidden",display:"block"},bv=["Left","Right"],bw=["Top","Bottom"],bx,by,bz;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bx(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d;if(h==="number"&&isNaN(d)||d==null)return;h==="string"&&bs.test(d)&&(d=+d.replace(bt,"")+parseFloat(f.css(a,c)),h="number"),h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bx)return bx(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bA(a,b,d);f.swap(a,bu,function(){e=bA(a,b,d)});return e}},set:function(a,b){if(!bq.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bo.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle;c.zoom=1;var e=f.isNaN(b)?"":"alpha(opacity="+b*100+")",g=d&&d.filter||c.filter||"";c.filter=bn.test(g)?g.replace(bn,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bx(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(by=function(a,c){var d,e,g;c=c.replace(bp,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bz=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bq.test(d)&&br.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bx=by||bz,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bB=/%20/g,bC=/\[\]$/,bD=/\r?\n/g,bE=/#.*$/,bF=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bG=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bH=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,bI=/^(?:GET|HEAD)$/,bJ=/^\/\//,bK=/\?/,bL=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bM=/^(?:select|textarea)/i,bN=/\s+/,bO=/([?&])_=[^&]*/,bP=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bQ=f.fn.load,bR={},bS={},bT,bU;try{bT=e.href}catch(bV){bT=c.createElement("a"),bT.href="",bT=bT.href}bU=bP.exec(bT.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bQ)return bQ.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bL,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bM.test(this.nodeName)||bG.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bD,"\r\n")}}):{name:b.name,value:c.replace(bD,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?f.extend(!0,a,f.ajaxSettings,b):(b=a,a=f.extend(!0,f.ajaxSettings,b));for(var c in{context:1,url:1})c in b?a[c]=b[c]:c in f.ajaxSettings&&(a[c]=f.ajaxSettings[c]);return a},ajaxSettings:{url:bT,isLocal:bH.test(bU[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML}},ajaxPrefilter:bW(bR),ajaxTransport:bW(bS),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a?4:0;var o,r,u,w=l?bZ(d,v,l):b,x,y;if(a>=200&&a<300||a===304){if(d.ifModified){if(x=v.getResponseHeader("Last-Modified"))f.lastModified[k]=x;if(y=v.getResponseHeader("Etag"))f.etag[k]=y}if(a===304)c="notmodified",o=!0;else try{r=b$(d,w),c="success",o=!0}catch(z){c="parsererror",u=z}}else{u=c;if(!c||a)c="error",a<0&&(a=0)}v.status=a,v.statusText=c,o?h.resolveWith(e,[r,c,v]):h.rejectWith(e,[v,c,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.resolveWith(e,[v,c]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f._Deferred(),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bF.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.done,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bE,"").replace(bJ,bU[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bN),d.crossDomain==null&&(r=bP.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bU[1]&&r[2]==bU[2]&&(r[3]||(r[1]==="http:"?80:443))==(bU[3]||(bU[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bX(bR,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bI.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bK.test(d.url)?"&":"?")+d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bO,"$1_="+x);d.url=y+(y===d.url?(bK.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", */*; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bX(bS,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){status<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)bY(g,a[g],c,e);return d.join("&").replace(bB,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var b_=f.now(),ca=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+b_++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ca.test(b.url)||e&&ca.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ca,l),b.url===j&&(e&&(k=k.replace(ca,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cb=a.ActiveXObject?function(){for(var a in cd)cd[a](0,1)}:!1,cc=0,cd;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ce()||cf()}:ce,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cb&&delete cd[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cc,cb&&(cd||(cd={},f(a).unload(cb)),cd[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cg={},ch,ci,cj=/^(?:toggle|show|hide)$/,ck=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cl,cm=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cn,co=a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cr("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cs(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cr("hide",3),a,b,c);for(var d=0,e=this.length;d<e;d++)if(this[d].style){var g=f.css(this[d],"display");g!=="none"&&!f._data(this[d],"olddisplay")&&f._data(this[d],"olddisplay",g)}for(d=0;d<e;d++)this[d].style&&(this[d].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cr("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return this[e.queue===!1?"each":"queue"](function(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(f.support.inlineBlockNeedsLayout?(j=cs(this.nodeName),j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)):this.style.display="inline-block"))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)k=new f.fx(this,b,i),h=a[i],cj.test(h)?k[h==="toggle"?d?"show":"hide":h]():(l=ck.exec(h),m=k.cur(),l?(n=parseFloat(l[2]),o=l[3]||(f.cssNumber[i]?"":"px"),o!=="px"&&(f.style(this,i,(n||1)+o),m=(n||1)/k.cur()*m,f.style(this,i,m+o)),l[1]&&(n=(l[1]==="-="?-1:1)*n+m),k.custom(m,n,o)):k.custom(m,h,""));return!0})},stop:function(a,b){a&&this.queue([]),this.each(function(){var a=f.timers,c=a.length;b||f._unmark(!0,this);while(c--)a[c].elem===this&&(b&&a[c](!0),a.splice(c,1))}),b||this.dequeue();return this}}),f.each({slideDown:cr("show",1),slideUp:cr("hide",1),slideToggle:cr("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default,d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue!==!1?f.dequeue(this):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function h(a){return d.step(a)}var d=this,e=f.fx,g;this.startTime=cn||cp(),this.start=a,this.end=b,this.unit=c||this.unit||(f.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,h.elem=this.elem,h()&&f.timers.push(h)&&!cl&&(co?(cl=!0,g=function(){cl&&(co(g),e.tick())},co(g)):cl=setInterval(e.tick,e.interval))},show:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=cn||cp(),c=!0,d=this.elem,e=this.options,g,h;if(a||b>=e.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),e.animatedProperties[this.prop]=!0;for(g in e.animatedProperties)e.animatedProperties[g]!==!0&&(c=!1);if(c){e.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){d.style["overflow"+b]=e.overflow[a]}),e.hide&&f(d).hide();if(e.hide||e.show)for(var i in e.animatedProperties)f.style(d,i,e.orig[i]);e.complete.call(d)}return!1}e.duration==Infinity?this.now=b:(h=b-this.startTime,this.state=h/e.duration,this.pos=f.easing[e.animatedProperties[this.prop]](this.state,h,0,1,e.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){for(var a=f.timers,b=0;b<a.length;++b)a[b]()||a.splice(b--,1);a.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cl),cl=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var ct=/^t(?:able|d|h)$/i,cu=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cv(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);f.offset.initialize();var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.offset.doesNotAddBorder&&(!f.offset.doesAddBorderForTableAndCells||!ct.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={initialize:function(){var a=c.body,b=c.createElement("div"),d,e,g,h,i=parseFloat(f.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";f.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),d=b.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,this.doesNotAddBorder=e.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,e.style.position="fixed",e.style.top="20px",this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),f.offset.initialize=f.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.offset.initialize(),f.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cu.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cu.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cv(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cv(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a&&a.style?parseFloat(f.css(a,d,"padding")):null},f.fn["outer"+c]=function(a){var b=this[0];return b&&b.style?parseFloat(f.css(b,d,a?"margin":"border")):null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c];return e.document.compatMode==="CSS1Compat"&&g||e.document.body["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var h=f.css(e,d),i=parseFloat(h);return f.isNaN(i)?h:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/include.rb:
   16      @name = name
   17      self.comment = comment
   18:     @module = nil # cache for module if found
   19    end
   20  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/ri/driver.rb:
   75      options[:width] = 72
   76      options[:interactive] = false
   77:     options[:use_cache] = true
   78      options[:profile] = false
   79  
   ..
  281        opt.separator nil
  282  
  283:       opt.on("--dump=CACHE", File,
  284:              "Dumps data from an ri cache or data file") do |value|
  285          options[:dump_path] = value
  286        end
  ...
  346  
  347        store = RDoc::RI::Store.new path, type
  348:       store.load_cache
  349        @stores << store
  350      end
  ...
  500    # For RubyGems backwards compatibility
  501  
  502:   def class_cache # :nodoc:
  503    end
  504  
  ...
  517      found.each do |store, klass|
  518        comment = klass.comment
  519:       # TODO the store's cache should always return an empty Array
  520        class_methods    = store.class_methods[klass.full_name]    || []
  521        instance_methods = store.instance_methods[klass.full_name] || []
  ...
  587  
  588      @stores.each do |store|
  589:       store.cache[:modules].each do |mod|
  590          # using default block causes searched-for modules to be added
  591          @classes[mod] ||= []
  ...
  621  
  622    ##
  623:   # Completes +name+ based on the caches.  For Readline
  624  
  625    def complete name
  ...
  971    ##
  972    # Loads RI data for method +name+ on +klass+ from +store+.  +type+ and
  973:   # +cache+ indicate if it is a class or instance method.
  974  
  975:   def load_method store, cache, klass, type, name
  976:     methods = store.send(cache)[klass]
  977  
  978      return unless methods

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/ri/store.rb:
    5  #
    6  # The store manages reading and writing ri data for a project (gem, path,
    7: # etc.) and maintains a cache of methods, classes and ancestors in the
    8  # store.
    9  #
   10: # The store maintains a #cache of its contents for faster lookup.  After
   11: # adding items to the store it must be flushed using #save_cache.  The cache
   12  # contains the following structures:
   13  #
   14: #    @cache = {
   15  #      :class_methods    => {}, # class name => class methods
   16  #      :instance_methods => {}, # class name => instance methods
   ..
   43    # The contents of the Store
   44  
   45:   attr_reader :cache
   46  
   47    ##
   ..
   59      @encoding = nil
   60  
   61:     @cache = {
   62        :ancestors        => {},
   63        :attributes       => {},
   ..
   70  
   71    ##
   72:   # Ancestors cache accessor.  Maps a klass name to an Array of its ancestors
   73    # in this store.  If Foo in this store inherits from Object, Kernel won't be
   74    # listed (it will be included from ruby's ri store).
   75  
   76    def ancestors
   77:     @cache[:ancestors]
   78    end
   79  
   80    ##
   81:   # Attributes cache accessor.  Maps a class to an Array of its attributes.
   82  
   83    def attributes
   84:     @cache[:attributes]
   85    end
   86  
   87    ##
   88:   # Path to the cache file
   89  
   90:   def cache_path
   91:     File.join @path, 'cache.ri'
   92    end
   93  
   ..
  101  
  102    ##
  103:   # Class methods cache accessor.  Maps a class to an Array of its class
  104    # methods (not full name).
  105  
  106    def class_methods
  107:     @cache[:class_methods]
  108    end
  109  
  ...
  119    # sorted
  120  
  121:   def clean_cache_collection collection # :nodoc:
  122      collection.each do |name, item|
  123        if item.empty? then
  ...
  152  
  153    ##
  154:   # Instance methods cache accessor.  Maps a class to an Array of its
  155    # instance methods (not full name).
  156  
  157    def instance_methods
  158:     @cache[:instance_methods]
  159    end
  160  
  161    ##
  162:   # Loads cache file for this store
  163  
  164:   def load_cache
  165      #orig_enc = @encoding
  166  
  167:     open cache_path, 'rb' do |io|
  168:       @cache = Marshal.load io.read
  169      end
  170  
  171:     load_enc = @cache[:encoding]
  172  
  173      # TODO this feature will be time-consuming to add:
  174      # a) Encodings may be incompatible but transcodeable
  175      # b) Need to warn in the appropriate spots, wherever they may be
  176:     # c) Need to handle cross-cache differences in encodings
  177:     # d) Need to warn when generating into a cache with diffent encodings
  178      #
  179      #if orig_enc and load_enc != orig_enc then
  180:     #  warn "Cached encoding #{load_enc} is incompatible with #{orig_enc}\n" \
  181:     #       "from #{path}/cache.ri" unless
  182      #    Encoding.compatible? orig_enc, load_enc
  183      #end
  ...
  185      @encoding = load_enc unless @encoding
  186  
  187:     @cache
  188    rescue Errno::ENOENT
  189    end
  ...
  226  
  227    ##
  228:   # Modules cache accessor.  An Array of all the modules (and classes) in the
  229    # store.
  230  
  231    def modules
  232:     @cache[:modules]
  233    end
  234  
  235    ##
  236:   # Writes the cache file for this store
  237  
  238:   def save_cache
  239:     clean_cache_collection @cache[:ancestors]
  240:     clean_cache_collection @cache[:attributes]
  241:     clean_cache_collection @cache[:class_methods]
  242:     clean_cache_collection @cache[:instance_methods]
  243  
  244:     @cache[:modules].uniq!
  245:     @cache[:modules].sort!
  246:     @cache[:encoding] = @encoding # this gets set twice due to assert_cache
  247  
  248      return if @dry_run
  249  
  250:     marshal = Marshal.dump @cache
  251  
  252:     open cache_path, 'wb' do |io|
  253        io.write marshal
  254      end
  ...
  263      FileUtils.mkdir_p class_path(full_name) unless @dry_run
  264  
  265:     @cache[:modules] << full_name
  266  
  267      path = class_file full_name
  ...
  280      end
  281  
  282:     @cache[:ancestors][full_name] ||= []
  283:     @cache[:ancestors][full_name].push(*ancestors)
  284  
  285      attributes = klass.attributes.map do |attribute|
  ...
  288  
  289      unless attributes.empty? then
  290:       @cache[:attributes][full_name] ||= []
  291:       @cache[:attributes][full_name].push(*attributes)
  292      end
  293  
  ...
  295  
  296      unless klass.method_list.empty? then
  297:       @cache[:class_methods][full_name]    ||= []
  298:       @cache[:instance_methods][full_name] ||= []
  299  
  300        class_methods, instance_methods =
  ...
  304        instance_methods = instance_methods.map { |method| method.name }
  305  
  306:       old = @cache[:class_methods][full_name] - class_methods
  307        to_delete.concat old.map { |method|
  308          method_file full_name, "#{full_name}::#{method}"
  309        }
  310  
  311:       old = @cache[:instance_methods][full_name] - instance_methods
  312        to_delete.concat old.map { |method|
  313          method_file full_name, "#{full_name}##{method}"
  314        }
  315  
  316:       @cache[:class_methods][full_name]    = class_methods
  317:       @cache[:instance_methods][full_name] = instance_methods
  318      end
  319  
  ...
  337      FileUtils.mkdir_p class_path(full_name) unless @dry_run
  338  
  339:     cache = if method.singleton then
  340:               @cache[:class_methods]
  341              else
  342:               @cache[:instance_methods]
  343              end
  344:     cache[full_name] ||= []
  345:     cache[full_name] << method.name
  346  
  347      return if @dry_run

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/lib/rdoc/top_level.rb:
  101      fix_basic_object_inheritance
  102  
  103:     # cache included modules before they are removed from the documentation
  104      all_classes_and_modules.each { |cm| cm.ancestors }
  105  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_class_module.rb:
  760      @c1.add_include b
  761      @c1.add_include c
  762:     @c1.ancestors # cache included modules
  763  
  764      @m1_m2.document_self = nil
  ...
  781      @c1.add_include a
  782      @c1.add_include b
  783:     @c1.ancestors # cache included modules
  784  
  785      @c1.update_includes
  ...
  796      @c1.add_include b
  797      @c1.add_include c
  798:     @c1.ancestors # cache included modules
  799  
  800      @m1_m2.document_self = nil

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_comment.rb:
  260      @comment.normalize
  261  
  262:     assert_same text, @comment.text, 'normalize not cached'
  263    end
  264  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_generator_ri.rb:
   51      @g.generate nil
   52  
   53:     assert_file File.join(@tmpdir, 'cache.ri')
   54  
   55      assert_file File.join(@tmpdir, 'Object', 'cdesc-Object.ri')
   ..
   60  
   61      store = RDoc::RI::Store.new @tmpdir
   62:     store.load_cache
   63  
   64      encoding = Object.const_defined?(:Encoding) ? Encoding::UTF_8 : nil
   ..
   76      @g.generate nil
   77  
   78:     refute_file File.join(@tmpdir, 'cache.ri')
   79  
   80      refute_file File.join(@tmpdir, 'Object')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_ri_driver.rb:
   52  
   53      out, = capture_io do
   54:       RDoc::RI::Driver.dump @store.cache_path
   55      end
   56  
   ..
  288    def test_complete
  289      store = RDoc::RI::Store.new @home_ri
  290:     store.cache[:ancestors] = {
  291        'Foo'      => %w[Object],
  292        'Foo::Bar' => %w[Object],
  293      }
  294:     store.cache[:class_methods] = {
  295        'Foo' => %w[bar]
  296      }
  297:     store.cache[:instance_methods] = {
  298        'Foo' => %w[Bar]
  299      }
  300:     store.cache[:modules] = %w[
  301        Foo
  302        Foo::Bar
  ...
  707      @store.save_method @cFoo, c_index
  708  
  709:     @store.save_cache
  710  
  711      assert_equal %w[Foo#[]], @driver.list_methods_matching('Foo#[]')
  ...
  911    def util_ancestors_store
  912      store1 = RDoc::RI::Store.new @home_ri
  913:     store1.cache[:ancestors] = {
  914        'Foo'      => %w[Object],
  915        'Foo::Bar' => %w[Foo],
  916      }
  917:     store1.cache[:class_methods] = {
  918        'Foo'      => %w[c_method new],
  919        'Foo::Bar' => %w[new],
  920      }
  921:     store1.cache[:instance_methods] = {
  922        'Foo' => %w[i_method],
  923      }
  924:     store1.cache[:modules] = %w[
  925        Foo
  926        Foo::Bar
  ...
  928  
  929      store2 = RDoc::RI::Store.new @home_ri
  930:     store2.cache[:ancestors] = {
  931        'Foo'    => %w[Mixin Object],
  932        'Mixin'  => %w[],
  ...
  934        'X'      => %w[Object],
  935      }
  936:     store2.cache[:class_methods] = {
  937        'Foo'    => %w[c_method new],
  938        'Mixin'  => %w[],
  ...
  940        'Object' => %w[],
  941      }
  942:     store2.cache[:instance_methods] = {
  943        'Foo'   => %w[i_method],
  944        'Mixin' => %w[],
  945      }
  946:     store2.cache[:modules] = %w[
  947        Foo
  948        Mixin
  ...
  986      @store2.save_method @cBar, @baz
  987  
  988:     @store2.save_cache
  989  
  990      @driver.stores = [@store1, @store2]
  ...
 1049      @store.save_method @cFoo, @overriden
 1050  
 1051:     @store.save_cache
 1052  
 1053      @driver.stores = [@store]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_ri_store.rb:
   58    end
   59  
   60:   def assert_cache imethods, cmethods, attrs, modules, ancestors = {}
   61      imethods ||= { 'Object' => %w[method method!] }
   62      cmethods ||= { 'Object' => %w[cmethod] }
   ..
   64  
   65      # this is sort-of a hack
   66:     @s.clean_cache_collection ancestors
   67  
   68      expected = {
   ..
   75      }
   76  
   77:     @s.save_cache
   78  
   79:     assert_equal expected, @s.cache
   80    end
   81  
   ..
   93  
   94    def test_attributes
   95:     @s.cache[:attributes]['Object'] = %w[attr]
   96  
   97      expected = { 'Object' => %w[attr] }
   ..
  108  
  109    def test_class_methods
  110:     @s.cache[:class_methods]['Object'] = %w[method]
  111  
  112      expected = { 'Object' => %w[method] }
  ...
  152  
  153    def test_instance_methods
  154:     @s.cache[:instance_methods]['Object'] = %w[method]
  155  
  156      expected = { 'Object' => %w[method] }
  ...
  159    end
  160  
  161:   def test_load_cache
  162:     cache = {
  163        :encoding => :encoding_value,
  164        :methods  => %w[Object#method],
  ...
  168      Dir.mkdir @tmpdir
  169  
  170:     open File.join(@tmpdir, 'cache.ri'), 'wb' do |io|
  171:       Marshal.dump cache, io
  172      end
  173  
  174:     @s.load_cache
  175  
  176:     assert_equal cache, @s.cache
  177  
  178      assert_equal :encoding_value, @s.encoding
  179    end
  180  
  181:   def test_load_cache_encoding_differs
  182      skip "Encoding not implemented" unless Object.const_defined? :Encoding
  183  
  184:     cache = {
  185        :encoding => Encoding::ISO_8859_1,
  186        :methods  => %w[Object#method],
  ...
  190      Dir.mkdir @tmpdir
  191  
  192:     open File.join(@tmpdir, 'cache.ri'), 'wb' do |io|
  193:       Marshal.dump cache, io
  194      end
  195  
  196      @s.encoding = Encoding::UTF_8
  197  
  198:     @s.load_cache
  199  
  200:     assert_equal cache, @s.cache
  201  
  202      assert_equal Encoding::UTF_8, @s.encoding
  203    end
  204  
  205:   def test_load_cache_no_cache
  206:     cache = {
  207        :ancestors        => {},
  208        :attributes       => {},
  ...
  213      }
  214  
  215:     @s.load_cache
  216  
  217:     assert_equal cache, @s.cache
  218    end
  219  
  ...
  245    end
  246  
  247:   def test_save_cache
  248      @s.save_class @klass
  249      @s.save_method @klass, @meth
  ...
  252      @s.encoding = :encoding_value
  253  
  254:     @s.save_cache
  255  
  256:     assert_file File.join(@tmpdir, 'cache.ri')
  257  
  258      expected = {
  ...
  272      expected[:ancestors]['Object'] = %w[BasicObject] if defined?(::BasicObject)
  273  
  274:     open File.join(@tmpdir, 'cache.ri'), 'rb' do |io|
  275:       cache = Marshal.load io.read
  276  
  277:       assert_equal expected, cache
  278      end
  279    end
  280  
  281:   def test_save_cache_dry_run
  282      @s.dry_run = true
  283  
  ...
  287      @s.save_class @nest_klass
  288  
  289:     @s.save_cache
  290  
  291:     refute_file File.join(@tmpdir, 'cache.ri')
  292    end
  293  
  294:   def test_save_cache_duplicate_methods
  295      @s.save_method @klass, @meth
  296      @s.save_method @klass, @meth
  297  
  298:     @s.save_cache
  299  
  300:     assert_cache({ 'Object' => %w[method] }, {}, {}, [])
  301    end
  302  
  ...
  307      assert_file File.join(@tmpdir, 'Object', 'cdesc-Object.ri')
  308  
  309:     assert_cache nil, nil, nil, %w[Object], 'Object' => OBJECT_ANCESTORS
  310  
  311      assert_equal @klass, @s.load_class('Object')
  ...
  320      assert_file File.join(@tmpdir, 'Object', 'cdesc-Object.ri')
  321  
  322:     assert_cache(nil, nil, nil, %w[Object])
  323  
  324      assert_equal @klass, @s.load_class('Object')
  ...
  331      @s.save_method @klass, @meth_bang
  332      @s.save_method @klass, @cmeth
  333:     @s.save_cache
  334  
  335      klass = RDoc::NormalClass.new 'Object'
  ...
  340      # load original, save newly updated class
  341      @s = RDoc::RI::Store.new @tmpdir
  342:     @s.load_cache
  343      @s.save_class klass
  344:     @s.save_cache
  345  
  346      # load from disk again
  347      @s = RDoc::RI::Store.new @tmpdir
  348:     @s.load_cache
  349  
  350      @s.load_class 'Object'
  351  
  352:     assert_cache({ 'Object' => %w[replace] }, {},
  353                   { 'Object' => %w[attr_accessor\ attr] }, %w[Object],
  354                   'Object' => OBJECT_ANCESTORS)
  ...
  419      assert_file File.join(@tmpdir, 'Object', 'cdesc-Object.ri')
  420  
  421:     assert_cache nil, nil, nil, %w[Object], 'Object' => OBJECT_ANCESTORS
  422  
  423      assert_equal @klass, @s.load_class('Object')
  ...
  430      assert_file File.join(@tmpdir, 'Object', 'SubClass', 'cdesc-SubClass.ri')
  431  
  432:     assert_cache({ 'Object::SubClass' => %w[method] }, {}, {},
  433                   %w[Object::SubClass], 'Object::SubClass' => %w[Incl Object])
  434    end
  ...
  440      assert_file File.join(@tmpdir, 'Object', 'method-i.ri')
  441  
  442:     assert_cache({ 'Object' => %w[method] }, {}, {}, [])
  443  
  444      assert_equal @meth, @s.load_method('Object', '#method')
  ...
  460      assert_file File.join(@tmpdir, 'Object', 'SubClass', 'method-i.ri')
  461  
  462:     assert_cache({ 'Object::SubClass' => %w[method] }, {}, {}, [])
  463    end
  464  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rdoc-3.12.2/test/test_rdoc_rubygems_hook.rb:
  119  
  120      assert_path_exists File.join(@a.doc_dir('rdoc'), 'index.html')
  121:     assert_path_exists File.join(@a.doc_dir('ri'),   'cache.ri')
  122    end
  123  
  ...
  130  
  131      refute_path_exists File.join(@a.doc_dir('rdoc'), 'index.html')
  132:     refute_path_exists File.join(@a.doc_dir('ri'),   'cache.ri')
  133    end
  134  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-3.0.6/lib/redis.rb:
 2072    #     # => ["OK", 6]
 2073    #
 2074:   # @yield [multi] the commands that are called inside this block are cached
 2075    #   and written to the server upon returning from it
 2076    # @yieldparam [Redis] multi `self`

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-3.0.6/lib/redis/hash_ring.rb:
    4    class HashRing
    5  
    6:     POINTS_PER_SERVER = 160 # this is the default in libmemcached
    7  
    8      attr_reader :ring, :sorted_keys, :replicas, :nodes

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-3.0.6/Rakefile:
   95            "--title", "A Ruby client for Redis",
   96            "--output", "doc/#{tag}",
   97:           "--no-cache",
   98            "--no-save",
   99            "-q",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-actionpack-4.0.0/README.md:
   12  If you are using redis-store with Rails, consider using the [redis-rails gem](https://github.com/jodosha/redis-store/tree/master/redis-rails) instead. For standalone usage:
   13  
   14:     ActionController::Base.cache_store = ActionDispatch::Session::RedisSessionStore.new
   15  
   16  ## Running tests

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-actionpack-4.0.0/test/dummy/config/application.rb:
    8    class Application < Rails::Application
    9      # Disable class caching for session auto-load test
   10:     config.cache_classes = false
   11  
   12      config.eager_load = false

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/lib/active_support/cache/redis_store.rb:
    3  
    4  module ActiveSupport
    5:   module Cache
    6      class RedisStore < Store
    7        # Instantiate the store.
    .
   42        # Performance note: this operation can be dangerous for large production
   43        # databases, as it uses the Redis "KEYS" command, which is O(N) over the
   44:       # total number of keys in the database. Users of large Redis caches should
   45        # avoid this method.
   46        #
   47        # Example:
   48:       #   cache.del_matched "rab*"
   49        def delete_matched(matcher, options = nil)
   50          options = merged_options(options)
   ..
   59        end
   60  
   61:       # Reads multiple keys from the cache using a single call to the
   62        # servers for all keys. Options can be passed in the last argument.
   63        #
   64        # Example:
   65:       #   cache.read_multi "rabbit", "white-rabbit"
   66:       #   cache.read_multi "rabbit", "white-rabbit", :raw => true
   67        def read_multi(*names)
   68          values = @data.mget(*names)
   69:         values.map! { |v| v.is_a?(ActiveSupport::Cache::Entry) ? v.value : v }
   70  
   71          # Remove the options hash before mapping keys to values
   ..
   83        #
   84        # Example:
   85:       #   We have two objects in cache:
   86        #     counter # => 23
   87        #     rabbit  # => #<Rabbit:0x5eee6c>
   88        #
   89:       #   cache.increment "counter"
   90:       #   cache.read "counter", :raw => true      # => "24"
   91        #
   92:       #   cache.increment "counter", 6
   93:       #   cache.read "counter", :raw => true      # => "30"
   94        #
   95:       #   cache.increment "a counter"
   96:       #   cache.read "a counter", :raw => true    # => "1"
   97        #
   98:       #   cache.increment "rabbit"
   99:       #   cache.read "rabbit", :raw => true       # => "1"
  100        def increment(key, amount = 1)
  101          instrument(:increment, key, :amount => amount) do
  ...
  110        #
  111        # Example:
  112:       #   We have two objects in cache:
  113        #     counter # => 23
  114        #     rabbit  # => #<Rabbit:0x5eee6c>
  115        #
  116:       #   cache.decrement "counter"
  117:       #   cache.read "counter", :raw => true      # => "22"
  118        #
  119:       #   cache.decrement "counter", 2
  120:       #   cache.read "counter", :raw => true      # => "20"
  121        #
  122:       #   cache.decrement "a counter"
  123:       #   cache.read "a counter", :raw => true    # => "-1"
  124        #
  125:       #   cache.decrement "rabbit"
  126:       #   cache.read "rabbit", :raw => true       # => "-1"
  127        def decrement(key, amount = 1)
  128          instrument(:decrement, key, :amount => amount) do
  ...
  169            entry = @data.get key, options
  170            if entry
  171:             entry.is_a?(ActiveSupport::Cache::Entry) ? entry : ActiveSupport::Cache::Entry.new(entry)
  172            end
  173          rescue Errno::ECONNREFUSED => e
  ...
  176  
  177          ##
  178:         # Implement the ActiveSupport::Cache#delete_entry
  179          #
  180          # It's really needed and use

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/lib/redis-activesupport.rb:
    2  require 'active_support'
    3  require 'redis/activesupport/version'
    4: require 'active_support/cache/redis_store'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/README.md:
    1  # Redis stores for ActiveSupport
    2  
    3: __`redis-activesupport`__ provides a cache for __ActiveSupport__. See the main [redis-store readme](https://github.com/jodosha/redis-store) for general guidelines.
    4  
    5  ## Installation
    .
   12  If you are using redis-store with Rails, consider using the [redis-rails gem](https://github.com/jodosha/redis-store/tree/master/redis-rails) instead. For standalone usage:
   13  
   14:     ActiveSupport::Cache.lookup_store :redis_store # { ... optional configuration ... }
   15  
   16  ## Running tests

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/redis-activesupport.gemspec:
    9    s.email       = ["me@lucaguidi.com"]
   10    s.homepage    = "http://redis-store.org/redis-activesupport"
   11:   s.summary     = %q{Redis store for ActiveSupport::Cache}
   12:   s.description = %q{Redis store for ActiveSupport::Cache}
   13  
   14    s.rubyforge_project = "redis-activesupport"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/test/active_support/cache/redis_store_test.rb:
    1  require 'test_helper'
    2  
    3: describe ActiveSupport::Cache::RedisStore do
    4    def setup
    5:     @store  = ActiveSupport::Cache::RedisStore.new
    6:     @dstore = ActiveSupport::Cache::RedisStore.new "redis://127.0.0.1:6380/1", "redis://127.0.0.1:6381/1"
    7      @rabbit = OpenStruct.new :name => "bunny"
    8      @white_rabbit = OpenStruct.new :color => "white"
    .
   68        with_store_management do |store|
   69          result = store.read("rabbit", :raw => true)
   70:         result.must_include("ActiveSupport::Cache::Entry")
   71          result.must_include("\x0FOpenStruct{\x06:\tnameI\"\nbunny\x06:\x06EF")
   72        end
   ..
   76        with_store_management do |store|
   77          result = store.read("rabbit", :raw => true)
   78:         result.must_include("ActiveSupport::Cache::Entry")
   79          result.must_include("\017OpenStruct{\006:\tname")
   80        end
   ..
  175        store.fetch("rub-a-dub") { "Flora de Cana" }
  176        store.fetch("rub-a-dub").must_equal("Flora de Cana")
  177:       store.fetch("rabbit", :force => true) # force cache miss
  178        store.fetch("rabbit", :force => true, :expires_in => 1.second) { @white_rabbit }
  179        # store.fetch("rabbit").must_equal(@white_rabbit)
  ...
  205        read, generate, write = @events
  206  
  207:       read.name.must_equal('cache_read.active_support')
  208        read.payload.must_equal({ :key => 'radiohead', :super_operation => :fetch })
  209  
  210:       generate.name.must_equal('cache_generate.active_support')
  211        generate.payload.must_equal({ :key => 'radiohead' })
  212  
  213:       write.name.must_equal('cache_write.active_support')
  214        write.payload.must_equal({ :key => 'radiohead' })
  215      end
  ...
  221  
  222        read = @events.first
  223:       read.name.must_equal('cache_read.active_support')
  224        read.payload.must_equal({ :key => 'metallica', :hit => false })
  225      end
  ...
  231  
  232        write = @events.first
  233:       write.name.must_equal('cache_write.active_support')
  234        write.payload.must_equal({ :key => 'depeche mode' })
  235      end
  ...
  241  
  242        delete = @events.first
  243:       delete.name.must_equal('cache_delete.active_support')
  244        delete.payload.must_equal({ :key => 'the new cardigans' })
  245      end
  ...
  251  
  252        exist = @events.first
  253:       exist.name.must_equal('cache_exist?.active_support')
  254        exist.payload.must_equal({ :key => 'the smiths' })
  255      end
  ...
  261  
  262        delete_matched = @events.first
  263:       delete_matched.name.must_equal('cache_delete_matched.active_support')
  264        delete_matched.payload.must_equal({ :key => %("afterhours*") })
  265      end
  ...
  271  
  272        increment = @events.first
  273:       increment.name.must_equal('cache_increment.active_support')
  274        increment.payload.must_equal({ :key => 'pearl jam', :amount => 1 })
  275      end
  ...
  281  
  282        decrement = @events.first
  283:       decrement.name.must_equal('cache_decrement.active_support')
  284        decrement.payload.must_equal({ :key => 'placebo', :amount => 1 })
  285      end
  286  
  287:     # it "notifies on cleanup" # TODO implement in ActiveSupport::Cache::RedisStore
  288  
  289      it "should notify on clear" do
  ...
  293  
  294        clear = @events.first
  295:       clear.name.must_equal('cache_clear.active_support')
  296        clear.payload.must_equal({ :key => nil })
  297      end
  ...
  300    private
  301      def instantiate_store(addresses = nil)
  302:       ActiveSupport::Cache::RedisStore.new(addresses).instance_variable_get(:@data)
  303      end
  304  
  ...
  310      def with_notifications
  311        @events = [ ]
  312:       ActiveSupport::Cache::RedisStore.instrument = true
  313:       ActiveSupport::Notifications.subscribe(/^cache_(.*)\.active_support$/) do |*args|
  314          @events << ActiveSupport::Notifications::Event.new(*args)
  315        end
  316        yield
  317:       ActiveSupport::Cache::RedisStore.instrument = false
  318      end
  319  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-activesupport-4.0.0/test/test_helper.rb:
    3  require 'mocha/setup'
    4  require 'active_support'
    5: require 'active_support/cache/redis_store'
    6  
    7  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-rails-4.0.0/README.md:
    1  # Redis stores for Ruby on Rails
    2  
    3: __`redis-rails`__ provides a full set of stores (*Cache*, *Session*, *HTTP Cache*) for __Ruby on Rails__. See the main [redis-store readme](https://github.com/jodosha/redis-store) for general guidelines.
    4  
    5  ## Installation
    .
   13  
   14      # config/application.rb
   15:     config.cache_store = :redis_store, "redis://localhost:6379/0/cache", { expires_in: 90.minutes }
   16  
   17  Configuration values at the end are optional. If you want to use Redis as a backend for sessions, you will also need to set:
   ..
   20      MyApplication::Application.config.session_store :redis_store
   21  
   22: And if you would like to use Redis as a rack-cache backend for HTTP caching:
   23  
   24      # config/environments/production.rb
   25:     config.action_dispatch.rack_cache = {
   26        metastore:   "redis://localhost:6379/1/metastore",
   27        entitystore: "redis://localhost:6379/1/entitystore"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-rails-4.0.0/test/redis_rails_test.rb:
    3  describe Redis::Rails do
    4    it "must require ActiveSupport dependency" do
    5:     assert defined?(ActiveSupport::Cache::RedisStore)
    6    end
    7  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-store-1.1.4/README.md:
    1  # Redis stores for Ruby frameworks
    2  
    3: __Redis Store__ provides a full set of stores (*Cache*, *I18n*, *Session*, *HTTP Cache*) for all the modern Ruby frameworks like: __Ruby on Rails__, __Sinatra__, __Rack__, __Rack::Cache__ and __I18n__. It natively supports object marshalling, timeouts, single or multiple nodes and namespaces.
    4  
    5  See the main [redis-store readme](https://github.com/jodosha/redis-store) for general guidelines.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/redis-store-1.1.4/redis-store.gemspec:
   10    s.homepage    = 'http://redis-store.org/redis-store'
   11    s.summary     = %q{Redis stores for Ruby frameworks}
   12:   s.description = %q{Namespaced Rack::Session, Rack::Cache, I18n and cache Redis stores for Ruby web frameworks.}
   13  
   14    s.rubyforge_project = 'redis-store'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ref-1.0.5/lib/ref/soft_key_map.rb:
    4    # is the soft reference in the map.
    5    #
    6:   # This is often useful for cache implementations since the map can be allowed to grow
    7    # without bound and the garbage collector can be relied on to clean it up as necessary.
    8    # One must be careful, though, when accessing entries since they can be collected at
    .
   11    # === Example usage:
   12    #
   13:   #   cache = Ref::SoftKeyMap.new
   14    #   obj = MyObject.find_by_whatever
   15    #   obj_info = Service.lookup_object_info(obj)
   16:   #   cache[obj] = Service.lookup_object_info(obj)
   17:   #   cache[obj]  # The values looked up from the service
   18    #   obj = nil
   19    #   ObjectSpace.garbage_collect
   20:   #   cache.keys  # empty array since the keys and values have been reclaimed
   21    #
   22    # See AbstractReferenceKeyMap for details.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ref-1.0.5/lib/ref/soft_value_map.rb:
    4    # only reference to them is the soft reference in the map.
    5    #
    6:   # This is often useful for cache  implementations since the map can be allowed to grow
    7    # without bound and the  garbage collector can be relied on to clean it up as necessary.
    8    # One must be careful,  though, when accessing entries since the values can be collected
    .
   11    # === Example usage:
   12    #
   13:   #   cache = Ref::SoftValueMap.new
   14    #   foo = "foo"
   15:   #   cache["strong"] = foo  # add a value with a strong reference
   16:   #   cache["soft"] = "bar"  # add a value without a strong reference
   17:   #   cache["strong"]        # "foo"
   18:   #   cache["soft"]          # "bar"
   19    #   ObjectSpace.garbage_collect
   20    #   ObjectSpace.garbage_collect
   21:   #   cache["strong"]        # "foo"
   22:   #   cache["soft"]          # nil
   23    #
   24    # See AbstractReferenceValueMap for details.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ref-1.0.5/lib/ref/weak_key_map.rb:
    4    # is the weak reference in the map.
    5    #
    6:   # This is often useful for cache implementations since the map can be allowed to grow
    7    # without bound and the garbage collector can be relied on to clean it up as necessary.
    8    # One must be careful, though, when accessing entries since they can be collected at
    .
   11    # === Example usage:
   12    #
   13:   #   cache = Ref::WeakKeyMap.new
   14    #   obj = MyObject.find_by_whatever
   15    #   obj_info = Service.lookup_object_info(obj)
   16:   #   cache[obj] = Service.lookup_object_info(obj)
   17:   #   cache[obj]  # The values looked up from the service
   18    #   obj = nil
   19    #   ObjectSpace.garbage_collect
   20:   #   cache.keys  # empty array since the keys and values have been reclaimed
   21    #
   22    # See AbstractReferenceKeyMap for details.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/ref-1.0.5/lib/ref/weak_value_map.rb:
    4    # only reference to them is the weak reference in the map.
    5    #
    6:   # This is often useful for cache  implementations since the map can be allowed to grow
    7    # without bound and the  garbage collector can be relied on to clean it up as necessary.
    8    # One must be careful,  though, when accessing entries since the values can be collected
    .
   11    # === Example usage:
   12    #
   13:   #   cache = Ref::WeakValueMap.new
   14    #   foo = "foo"
   15:   #   cache["strong"] = foo  # add a value with a strong reference
   16:   #   cache["weak"] = "bar"  # add a value without a strong reference
   17:   #   cache["strong"]        # "foo"
   18:   #   cache["weak"]          # "bar"
   19    #   ObjectSpace.garbage_collect
   20:   #   cache["strong"]        # "foo"
   21:   #   cache["weak"]          # nil
   22    #
   23    # See AbstractReferenceValueMap for details.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rest-client-1.6.7/README.rdoc:
   29    ➔ {"Foo"=>"BAR", "QUUX"=>"QUUUUX"}
   30    response.headers
   31:   ➔ {:content_type=>"text/html; charset=utf-8", :cache_control=>"private" ...
   32    response.to_str
   33    ➔ \n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n   \"http://www.w3.org/TR/html4/strict.dtd\">\n\n<html ....

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/demos/http:
    1  POST /demo/submit/ HTTP/1.1
    2  Host: rouge.jayferd.us
    3: Cache-Control: max-age=0
    4  Origin: http://rouge.jayferd.us
    5  User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/formatters/terminal256.rb:
  109  
  110          def self.color_index(color)
  111:           @color_index_cache ||= {}
  112:           @color_index_cache[color] ||= closest_color(*get_rgb(color))
  113          end
  114  
  ...
  128  
  129          def self.closest_color(r, g, b)
  130:           @@colors_cache ||= {}
  131            key = (r << 16) + (g << 8) + b
  132:           @@colors_cache.fetch(key) do
  133              distance = 257 * 257 * 3 # (max distance, from #000000 to #ffffff)
  134  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/lexers/factor.rb:
   34              assoc-union assoc-combine at* assoc-empty? at+ set-at
   35              assoc-all? assoc-subset?  assoc-hashcode change-at assoc-each
   36:             assoc-diff zip values value-at rename-at inc-at enum? at cache
   37              assoc>map <enum> assoc assoc-map enum value-at* assoc-map-as
   38              >alist assoc-filter-as clear-assoc assoc-stack maybe-set-at
   39:             substitute assoc-filter 2cache delete-at assoc-find keys
   40              assoc-any? unzip
   41            )

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/lexers/php/builtins.rb:
    6          @builtins ||= {}.tap do |b|
    7            b["Apache"] = Set.new %w(apache_child_terminate apache_child_terminate apache_get_modules apache_get_version apache_getenv apache_lookup_uri apache_note apache_request_headers apache_reset_timeout apache_response_headers apache_setenv getallheaders virtual apache_child_terminate)
    8:           b["APC"] = Set.new %w(apc_add apc_add apc_bin_dump apc_bin_dumpfile apc_bin_load apc_bin_loadfile apc_cache_info apc_cas apc_clear_cache apc_compile_file apc_dec apc_define_constants apc_delete_file apc_delete apc_exists apc_fetch apc_inc apc_load_constants apc_sma_info apc_store apc_add)
    9            b["APD"] = Set.new %w(apd_breakpoint apd_breakpoint apd_callstack apd_clunk apd_continue apd_croak apd_dump_function_table apd_dump_persistent_resources apd_dump_regular_resources apd_echo apd_get_active_symbols apd_set_pprof_trace apd_set_session_trace_socket apd_set_session_trace apd_set_session override_function rename_function apd_breakpoint)
   10            b["Array"] = Set.new %w(array_change_key_case array_change_key_case array_chunk array_column array_combine array_count_values array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey array_diff array_fill_keys array_fill array_filter array_flip array_intersect_assoc array_intersect_key array_intersect_uassoc array_intersect_ukey array_intersect array_key_exists array_keys array_map array_merge_recursive array_merge array_multisort array_pad array_pop array_product array_push array_rand array_reduce array_replace_recursive array_replace array_reverse array_search array_shift array_slice array_splice array_sum array_udiff_assoc array_udiff_uassoc array_udiff array_uintersect_assoc array_uintersect_uassoc array_uintersect array_unique array_unshift array_values array_walk_recursive array_walk array arsort asort compact count current each end extract in_array key_exists key krsort ksort list natcasesort natsort next pos prev range reset rsort shuffle sizeof sort uasort uksort usort array_change_key_case)
   ..
   46            b["Fileinfo"] = Set.new %w(finfo_buffer finfo_buffer finfo_close finfo_file finfo_open finfo_set_flags mime_content_type finfo_buffer)
   47            b["filePro"] = Set.new %w(filepro_fieldcount filepro_fieldcount filepro_fieldname filepro_fieldtype filepro_fieldwidth filepro_retrieve filepro_rowcount filepro filepro_fieldcount)
   48:           b["Filesystem"] = Set.new %w(basename basename chgrp chmod chown clearstatcache copy delete dirname disk_free_space disk_total_space diskfreespace fclose feof fflush fgetc fgetcsv fgets fgetss file_exists file_get_contents file_put_contents file fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype flock fnmatch fopen fpassthru fputcsv fputs fread fscanf fseek fstat ftell ftruncate fwrite glob is_dir is_executable is_file is_link is_readable is_uploaded_file is_writable is_writeable lchgrp lchown link linkinfo lstat mkdir move_uploaded_file parse_ini_file parse_ini_string pathinfo pclose popen readfile readlink realpath_cache_get realpath_cache_size realpath rename rewind rmdir set_file_buffer stat symlink tempnam tmpfile touch umask unlink basename)
   49            b["Filter"] = Set.new %w(filter_has_var filter_has_var filter_id filter_input_array filter_input filter_list filter_var_array filter_var filter_has_var)
   50            b["FPM"] = Set.new %w(fastcgi_finish_request fastcgi_finish_request fastcgi_finish_request)
   ..
   58            b["Gupnp"] = Set.new %w(gupnp_context_get_host_ip gupnp_context_get_host_ip gupnp_context_get_port gupnp_context_get_subscription_timeout gupnp_context_host_path gupnp_context_new gupnp_context_set_subscription_timeout gupnp_context_timeout_add gupnp_context_unhost_path gupnp_control_point_browse_start gupnp_control_point_browse_stop gupnp_control_point_callback_set gupnp_control_point_new gupnp_device_action_callback_set gupnp_device_info_get_service gupnp_device_info_get gupnp_root_device_get_available gupnp_root_device_get_relative_location gupnp_root_device_new gupnp_root_device_set_available gupnp_root_device_start gupnp_root_device_stop gupnp_service_action_get gupnp_service_action_return_error gupnp_service_action_return gupnp_service_action_set gupnp_service_freeze_notify gupnp_service_info_get_introspection gupnp_service_info_get gupnp_service_introspection_get_state_variable gupnp_service_notify gupnp_service_proxy_action_get gupnp_service_proxy_action_set gupnp_service_proxy_add_notify gupnp_service_proxy_callback_set gupnp_service_proxy_get_subscribed gupnp_service_proxy_remove_notify gupnp_service_proxy_set_subscribed gupnp_service_thaw_notify gupnp_context_get_host_ip)
   59            b["Hash"] = Set.new %w(hash_algos hash_algos hash_copy hash_file hash_final hash_hmac_file hash_hmac hash_init hash_pbkdf2 hash_update_file hash_update_stream hash_update hash hash_algos)
   60:           b["HTTP"] = Set.new %w(http_cache_etag http_cache_etag http_cache_last_modified http_chunked_decode http_deflate http_inflate http_build_cookie http_date http_get_request_body_stream http_get_request_body http_get_request_headers http_match_etag http_match_modified http_match_request_header http_support http_negotiate_charset http_negotiate_content_type http_negotiate_language ob_deflatehandler ob_etaghandler ob_inflatehandler http_parse_cookie http_parse_headers http_parse_message http_parse_params http_persistent_handles_clean http_persistent_handles_count http_persistent_handles_ident http_get http_head http_post_data http_post_fields http_put_data http_put_file http_put_stream http_request_body_encode http_request_method_exists http_request_method_name http_request_method_register http_request_method_unregister http_request http_redirect http_send_content_disposition http_send_content_type http_send_data http_send_file http_send_last_modified http_send_status http_send_stream http_throttle http_build_str http_build_url http_cache_etag)
   61            b["Hyperwave"] = Set.new %w(hw_Array2Objrec hw_Array2Objrec hw_changeobject hw_Children hw_ChildrenObj hw_Close hw_Connect hw_connection_info hw_cp hw_Deleteobject hw_DocByAnchor hw_DocByAnchorObj hw_Document_Attributes hw_Document_BodyTag hw_Document_Content hw_Document_SetContent hw_Document_Size hw_dummy hw_EditText hw_Error hw_ErrorMsg hw_Free_Document hw_GetAnchors hw_GetAnchorsObj hw_GetAndLock hw_GetChildColl hw_GetChildCollObj hw_GetChildDocColl hw_GetChildDocCollObj hw_GetObject hw_GetObjectByQuery hw_GetObjectByQueryColl hw_GetObjectByQueryCollObj hw_GetObjectByQueryObj hw_GetParents hw_GetParentsObj hw_getrellink hw_GetRemote hw_getremotechildren hw_GetSrcByDestObj hw_GetText hw_getusername hw_Identify hw_InCollections hw_Info hw_InsColl hw_InsDoc hw_insertanchors hw_InsertDocument hw_InsertObject hw_mapid hw_Modifyobject hw_mv hw_New_Document hw_objrec2array hw_Output_Document hw_pConnect hw_PipeDocument hw_Root hw_setlinkroot hw_stat hw_Unlock hw_Who hw_Array2Objrec)
   62            b["Hyperwave API"] = Set.new %w(hwapi_attribute_new hwapi_content_new hwapi_hgcsp hwapi_object_new)
   ..
   91            b["Mcrypt"] = Set.new %w(mcrypt_cbc mcrypt_cbc mcrypt_cfb mcrypt_create_iv mcrypt_decrypt mcrypt_ecb mcrypt_enc_get_algorithms_name mcrypt_enc_get_block_size mcrypt_enc_get_iv_size mcrypt_enc_get_key_size mcrypt_enc_get_modes_name mcrypt_enc_get_supported_key_sizes mcrypt_enc_is_block_algorithm_mode mcrypt_enc_is_block_algorithm mcrypt_enc_is_block_mode mcrypt_enc_self_test mcrypt_encrypt mcrypt_generic_deinit mcrypt_generic_end mcrypt_generic_init mcrypt_generic mcrypt_get_block_size mcrypt_get_cipher_name mcrypt_get_iv_size mcrypt_get_key_size mcrypt_list_algorithms mcrypt_list_modes mcrypt_module_close mcrypt_module_get_algo_block_size mcrypt_module_get_algo_key_size mcrypt_module_get_supported_key_sizes mcrypt_module_is_block_algorithm_mode mcrypt_module_is_block_algorithm mcrypt_module_is_block_mode mcrypt_module_open mcrypt_module_self_test mcrypt_ofb mdecrypt_generic mcrypt_cbc)
   92            b["MCVE"] = Set.new %w(m_checkstatus m_checkstatus m_completeauthorizations m_connect m_connectionerror m_deletetrans m_destroyconn m_destroyengine m_getcell m_getcellbynum m_getcommadelimited m_getheader m_initconn m_initengine m_iscommadelimited m_maxconntimeout m_monitor m_numcolumns m_numrows m_parsecommadelimited m_responsekeys m_responseparam m_returnstatus m_setblocking m_setdropfile m_setip m_setssl_cafile m_setssl_files m_setssl m_settimeout m_sslcert_gen_hash m_transactionssent m_transinqueue m_transkeyval m_transnew m_transsend m_uwait m_validateidentifier m_verifyconnection m_verifysslcert m_checkstatus)
   93:           b["Memcache"] = Set.new %w(memcache_debug memcache_debug memcache_debug)
   94            b["Mhash"] = Set.new %w(mhash_count mhash_count mhash_get_block_size mhash_get_hash_name mhash_keygen_s2k mhash mhash_count)
   95            b["Ming"] = Set.new %w(ming_keypress ming_keypress ming_setcubicthreshold ming_setscale ming_setswfcompression ming_useconstants ming_useswfversion ming_keypress)
   ..
  102            b["Mssql"] = Set.new %w(mssql_bind mssql_bind mssql_close mssql_connect mssql_data_seek mssql_execute mssql_fetch_array mssql_fetch_assoc mssql_fetch_batch mssql_fetch_field mssql_fetch_object mssql_fetch_row mssql_field_length mssql_field_name mssql_field_seek mssql_field_type mssql_free_result mssql_free_statement mssql_get_last_message mssql_guid_string mssql_init mssql_min_error_severity mssql_min_message_severity mssql_next_result mssql_num_fields mssql_num_rows mssql_pconnect mssql_query mssql_result mssql_rows_affected mssql_select_db mssql_bind)
  103            b["MySQL"] = Set.new %w(mysql_affected_rows mysql_affected_rows mysql_client_encoding mysql_close mysql_connect mysql_create_db mysql_data_seek mysql_db_name mysql_db_query mysql_drop_db mysql_errno mysql_error mysql_escape_string mysql_fetch_array mysql_fetch_assoc mysql_fetch_field mysql_fetch_lengths mysql_fetch_object mysql_fetch_row mysql_field_flags mysql_field_len mysql_field_name mysql_field_seek mysql_field_table mysql_field_type mysql_free_result mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql_insert_id mysql_list_dbs mysql_list_fields mysql_list_processes mysql_list_tables mysql_num_fields mysql_num_rows mysql_pconnect mysql_ping mysql_query mysql_real_escape_string mysql_result mysql_select_db mysql_set_charset mysql_stat mysql_tablename mysql_thread_id mysql_unbuffered_query mysql_affected_rows)
  104:           b["Aliases and deprecated Mysqli"] = Set.new %w(mysqli_bind_param mysqli_bind_param mysqli_bind_result mysqli_client_encoding mysqli_connect mysqli::disable_reads_from_master mysqli_disable_rpl_parse mysqli_enable_reads_from_master mysqli_enable_rpl_parse mysqli_escape_string mysqli_execute mysqli_fetch mysqli_get_cache_stats mysqli_get_metadata mysqli_master_query mysqli_param_count mysqli_report mysqli_rpl_parse_enabled mysqli_rpl_probe mysqli_send_long_data mysqli::set_opt mysqli_slave_query mysqli_bind_param)
  105:           b["Mysqlnd_memcache"] = Set.new %w(mysqlnd_memcache_get_config mysqlnd_memcache_get_config mysqlnd_memcache_set mysqlnd_memcache_get_config)
  106            b["Mysqlnd_ms"] = Set.new %w(mysqlnd_ms_get_last_gtid mysqlnd_ms_get_last_gtid mysqlnd_ms_get_last_used_connection mysqlnd_ms_get_stats mysqlnd_ms_match_wild mysqlnd_ms_query_is_select mysqlnd_ms_set_qos mysqlnd_ms_set_user_pick_server mysqlnd_ms_get_last_gtid)
  107:           b["mysqlnd_qc"] = Set.new %w(mysqlnd_qc_clear_cache mysqlnd_qc_clear_cache mysqlnd_qc_get_available_handlers mysqlnd_qc_get_cache_info mysqlnd_qc_get_core_stats mysqlnd_qc_get_normalized_query_trace_log mysqlnd_qc_get_query_trace_log mysqlnd_qc_set_cache_condition mysqlnd_qc_set_is_select mysqlnd_qc_set_storage_handler mysqlnd_qc_set_user_handlers mysqlnd_qc_clear_cache)
  108            b["Mysqlnd_uh"] = Set.new %w(mysqlnd_uh_convert_to_mysqlnd mysqlnd_uh_convert_to_mysqlnd mysqlnd_uh_set_connection_proxy mysqlnd_uh_set_statement_proxy mysqlnd_uh_convert_to_mysqlnd)
  109            b["Ncurses"] = Set.new %w(ncurses_addch ncurses_addch ncurses_addchnstr ncurses_addchstr ncurses_addnstr ncurses_addstr ncurses_assume_default_colors ncurses_attroff ncurses_attron ncurses_attrset ncurses_baudrate ncurses_beep ncurses_bkgd ncurses_bkgdset ncurses_border ncurses_bottom_panel ncurses_can_change_color ncurses_cbreak ncurses_clear ncurses_clrtobot ncurses_clrtoeol ncurses_color_content ncurses_color_set ncurses_curs_set ncurses_def_prog_mode ncurses_def_shell_mode ncurses_define_key ncurses_del_panel ncurses_delay_output ncurses_delch ncurses_deleteln ncurses_delwin ncurses_doupdate ncurses_echo ncurses_echochar ncurses_end ncurses_erase ncurses_erasechar ncurses_filter ncurses_flash ncurses_flushinp ncurses_getch ncurses_getmaxyx ncurses_getmouse ncurses_getyx ncurses_halfdelay ncurses_has_colors ncurses_has_ic ncurses_has_il ncurses_has_key ncurses_hide_panel ncurses_hline ncurses_inch ncurses_init_color ncurses_init_pair ncurses_init ncurses_insch ncurses_insdelln ncurses_insertln ncurses_insstr ncurses_instr ncurses_isendwin ncurses_keyok ncurses_keypad ncurses_killchar ncurses_longname ncurses_meta ncurses_mouse_trafo ncurses_mouseinterval ncurses_mousemask ncurses_move_panel ncurses_move ncurses_mvaddch ncurses_mvaddchnstr ncurses_mvaddchstr ncurses_mvaddnstr ncurses_mvaddstr ncurses_mvcur ncurses_mvdelch ncurses_mvgetch ncurses_mvhline ncurses_mvinch ncurses_mvvline ncurses_mvwaddstr ncurses_napms ncurses_new_panel ncurses_newpad ncurses_newwin ncurses_nl ncurses_nocbreak ncurses_noecho ncurses_nonl ncurses_noqiflush ncurses_noraw ncurses_pair_content ncurses_panel_above ncurses_panel_below ncurses_panel_window ncurses_pnoutrefresh ncurses_prefresh ncurses_putp ncurses_qiflush ncurses_raw ncurses_refresh ncurses_replace_panel ncurses_reset_prog_mode ncurses_reset_shell_mode ncurses_resetty ncurses_savetty ncurses_scr_dump ncurses_scr_init ncurses_scr_restore ncurses_scr_set ncurses_scrl ncurses_show_panel ncurses_slk_attr ncurses_slk_attroff ncurses_slk_attron ncurses_slk_attrset ncurses_slk_clear ncurses_slk_color ncurses_slk_init ncurses_slk_noutrefresh ncurses_slk_refresh ncurses_slk_restore ncurses_slk_set ncurses_slk_touch ncurses_standend ncurses_standout ncurses_start_color ncurses_termattrs ncurses_termname ncurses_timeout ncurses_top_panel ncurses_typeahead ncurses_ungetch ncurses_ungetmouse ncurses_update_panels ncurses_use_default_colors ncurses_use_env ncurses_use_extended_names ncurses_vidattr ncurses_vline ncurses_waddch ncurses_waddstr ncurses_wattroff ncurses_wattron ncurses_wattrset ncurses_wborder ncurses_wclear ncurses_wcolor_set ncurses_werase ncurses_wgetch ncurses_whline ncurses_wmouse_trafo ncurses_wmove ncurses_wnoutrefresh ncurses_wrefresh ncurses_wstandend ncurses_wstandout ncurses_wvline ncurses_addch)
  ...
  117            b["Object Aggregation"] = Set.new %w(aggregate_info aggregate_info aggregate_methods_by_list aggregate_methods_by_regexp aggregate_methods aggregate_properties_by_list aggregate_properties_by_regexp aggregate_properties aggregate aggregation_info deaggregate aggregate_info)
  118            b["OCI8"] = Set.new %w(oci_bind_array_by_name oci_bind_array_by_name oci_bind_by_name oci_cancel oci_client_version oci_close oci_commit oci_connect oci_define_by_name oci_error oci_execute oci_fetch_all oci_fetch_array oci_fetch_assoc oci_fetch_object oci_fetch_row oci_fetch oci_field_is_null oci_field_name oci_field_precision oci_field_scale oci_field_size oci_field_type_raw oci_field_type oci_free_descriptor oci_free_statement oci_get_implicit_resultset oci_internal_debug oci_lob_copy oci_lob_is_equal oci_new_collection oci_new_connect oci_new_cursor oci_new_descriptor oci_num_fields oci_num_rows oci_parse oci_password_change oci_pconnect oci_result oci_rollback oci_server_version oci_set_action oci_set_client_identifier oci_set_client_info oci_set_edition oci_set_module_name oci_set_prefetch oci_statement_type oci_bind_array_by_name)
  119:           b["OPcache"] = Set.new %w(opcache_compile_file opcache_compile_file opcache_invalidate opcache_reset opcache_compile_file)
  120            b["OpenAL"] = Set.new %w(openal_buffer_create openal_buffer_create openal_buffer_data openal_buffer_destroy openal_buffer_get openal_buffer_loadwav openal_context_create openal_context_current openal_context_destroy openal_context_process openal_context_suspend openal_device_close openal_device_open openal_listener_get openal_listener_set openal_source_create openal_source_destroy openal_source_get openal_source_pause openal_source_play openal_source_rewind openal_source_set openal_source_stop openal_stream openal_buffer_create)
  121            b["OpenSSL"] = Set.new %w(openssl_cipher_iv_length openssl_cipher_iv_length openssl_csr_export_to_file openssl_csr_export openssl_csr_get_public_key openssl_csr_get_subject openssl_csr_new openssl_csr_sign openssl_decrypt openssl_dh_compute_key openssl_digest openssl_encrypt openssl_error_string openssl_free_key openssl_get_cipher_methods openssl_get_md_methods openssl_get_privatekey openssl_get_publickey openssl_open openssl_pbkdf2 openssl_pkcs12_export_to_file openssl_pkcs12_export openssl_pkcs12_read openssl_pkcs7_decrypt openssl_pkcs7_encrypt openssl_pkcs7_sign openssl_pkcs7_verify openssl_pkey_export_to_file openssl_pkey_export openssl_pkey_free openssl_pkey_get_details openssl_pkey_get_private openssl_pkey_get_public openssl_pkey_new openssl_private_decrypt openssl_private_encrypt openssl_public_decrypt openssl_public_encrypt openssl_random_pseudo_bytes openssl_seal openssl_sign openssl_verify openssl_x509_check_private_key openssl_x509_checkpurpose openssl_x509_export_to_file openssl_x509_export openssl_x509_free openssl_x509_parse openssl_x509_read openssl_cipher_iv_length)
  ...
  136            b["qtdom"] = Set.new %w(qdom_error qdom_error qdom_tree qdom_error)
  137            b["Radius"] = Set.new %w(radius_acct_open radius_acct_open radius_add_server radius_auth_open radius_close radius_config radius_create_request radius_cvt_addr radius_cvt_int radius_cvt_string radius_demangle_mppe_key radius_demangle radius_get_attr radius_get_tagged_attr_data radius_get_tagged_attr_tag radius_get_vendor_attr radius_put_addr radius_put_attr radius_put_int radius_put_string radius_put_vendor_addr radius_put_vendor_attr radius_put_vendor_int radius_put_vendor_string radius_request_authenticator radius_salt_encrypt_attr radius_send_request radius_server_secret radius_strerror radius_acct_open)
  138:           b["Rar"] = Set.new %w(rar_wrapper_cache_stats rar_wrapper_cache_stats rar_wrapper_cache_stats)
  139            b["Readline"] = Set.new %w(readline_add_history readline_add_history readline_callback_handler_install readline_callback_handler_remove readline_callback_read_char readline_clear_history readline_completion_function readline_info readline_list_history readline_on_new_line readline_read_history readline_redisplay readline_write_history readline readline_add_history)
  140            b["Recode"] = Set.new %w(recode_file recode_file recode_string recode recode_file)
  ...
  150            b["Semaphore"] = Set.new %w(ftok ftok msg_get_queue msg_queue_exists msg_receive msg_remove_queue msg_send msg_set_queue msg_stat_queue sem_acquire sem_get sem_release sem_remove shm_attach shm_detach shm_get_var shm_has_var shm_put_var shm_remove_var shm_remove ftok)
  151            b["Session PgSQL"] = Set.new %w(session_pgsql_add_error session_pgsql_add_error session_pgsql_get_error session_pgsql_get_field session_pgsql_reset session_pgsql_set_field session_pgsql_status session_pgsql_add_error)
  152:           b["Session"] = Set.new %w(session_cache_expire session_cache_expire session_cache_limiter session_commit session_decode session_destroy session_encode session_get_cookie_params session_id session_is_registered session_module_name session_name session_regenerate_id session_register_shutdown session_register session_save_path session_set_cookie_params session_set_save_handler session_start session_status session_unregister session_unset session_write_close session_cache_expire)
  153            b["Shared Memory"] = Set.new %w(shmop_close shmop_close shmop_delete shmop_open shmop_read shmop_size shmop_write shmop_close)
  154            b["SimpleXML"] = Set.new %w(simplexml_import_dom simplexml_import_dom simplexml_load_file simplexml_load_string simplexml_import_dom)
  ...
  184            b["win32ps"] = Set.new %w(win32_ps_list_procs win32_ps_list_procs win32_ps_stat_mem win32_ps_stat_proc win32_ps_list_procs)
  185            b["win32service"] = Set.new %w(win32_continue_service win32_continue_service win32_create_service win32_delete_service win32_get_last_control_message win32_pause_service win32_query_service_status win32_set_service_status win32_start_service_ctrl_dispatcher win32_start_service win32_stop_service win32_continue_service)
  186:           b["WinCache"] = Set.new %w(wincache_fcache_fileinfo wincache_fcache_fileinfo wincache_fcache_meminfo wincache_lock wincache_ocache_fileinfo wincache_ocache_meminfo wincache_refresh_if_changed wincache_rplist_fileinfo wincache_rplist_meminfo wincache_scache_info wincache_scache_meminfo wincache_ucache_add wincache_ucache_cas wincache_ucache_clear wincache_ucache_dec wincache_ucache_delete wincache_ucache_exists wincache_ucache_get wincache_ucache_inc wincache_ucache_info wincache_ucache_meminfo wincache_ucache_set wincache_unlock wincache_fcache_fileinfo)
  187            b["xattr"] = Set.new %w(xattr_get xattr_get xattr_list xattr_remove xattr_set xattr_supported xattr_get)
  188            b["xdiff"] = Set.new %w(xdiff_file_bdiff_size xdiff_file_bdiff_size xdiff_file_bdiff xdiff_file_bpatch xdiff_file_diff_binary xdiff_file_diff xdiff_file_merge3 xdiff_file_patch_binary xdiff_file_patch xdiff_file_rabdiff xdiff_string_bdiff_size xdiff_string_bdiff xdiff_string_bpatch xdiff_string_diff_binary xdiff_string_diff xdiff_string_merge3 xdiff_string_patch_binary xdiff_string_patch xdiff_string_rabdiff xdiff_file_bdiff_size)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/lexers/sql.rb:
   13            ASSERTION ASSIGNMENT ASYMMETRIC AT ATOMIC AUTHORIZATION
   14            AVG BACKWARD BEFORE BEGIN BETWEEN BITVAR BIT_LENGTH BOTH
   15:           BREADTH BY C CACHE CALL CALLED CARDINALITY CASCADE CASCADED
   16            CASE CAST CATALOG CATALOG_NAME CHAIN CHARACTERISTICS
   17            CHARACTER_LENGTH CHARACTER_SET_CATALOG CHARACTER_SET_NAME

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rouge-1.3.3/lib/rouge/token.rb:
    6        attr_reader :shortname
    7  
    8:       def cache
    9:         @cache ||= {}
   10        end
   11  
   ..
   17          return qualname unless qualname.is_a? ::String
   18  
   19:         Token.cache[qualname]
   20        end
   21  
   ..
   37  
   38        def register!
   39:         Token.cache[self.qualname] = self
   40          parent.sub_tokens[self.name] = self
   41        end
   ..
   58  
   59        def each_token(&b)
   60:         Token.cache.each do |(_, t)|
   61            b.call(t)
   62          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/features/helper_methods/let.feature:
    1  Feature: let and let!
    2  
    3:   Use `let` to define a memoized helper method.  The value will be cached
    4    across multiple calls in the same example but not across examples.
    5  
    .
   20          end
   21  
   22:         it "is not cached across examples" do
   23            count.should eq(2)
   24          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/lib/rspec/core/formatters/html_printer.rb:
  382    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  383    <meta http-equiv="Expires" content="-1" />
  384:   <meta http-equiv="Pragma" content="no-cache" />
  385    <style type="text/css">
  386    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/example_group_spec.rb:
    2  
    3  class SelfObserver
    4:   def self.cache
    5:     @cache ||= []
    6    end
    7  
    8    def initialize
    9:     self.class.cache << self
   10    end
   11  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.8.7-jruby.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.8.7-rbx.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.8.7.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.9.2.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.9.3-jruby.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.9.3-rbx.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-1.9.3.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/html_formatted-2.0.0.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.8.7-jruby.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.8.7-rbx.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.8.7.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.9.2.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.9.3-jruby.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.9.3-rbx.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-1.9.3.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/formatters/text_mate_formatted-2.0.0.html:
    5    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    6    <meta http-equiv="Expires" content="-1" />
    7:   <meta http-equiv="Pragma" content="no-cache" />
    8    <style type="text/css">
    9    body {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/rspec/core/memoized_helpers_spec.rb:
  504      end
  505  
  506:     it "caches the value" do
  507        expect(counter.count).to eq(1)
  508        expect(counter.count).to eq(2)
  509      end
  510  
  511:     it "caches a nil value" do
  512        @nil_value_count = 0
  513        nil_value

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-core-2.14.7/spec/support/sandboxed_mock_space.rb:
    6      # examples that define example groups and examples and run them. The
    7      # usual lifetime of an RSpec::Mocks::Proxy is for one example
    8:     # (the proxy cache gets cleared between each example), but since the
    9      # specs in rspec-core's suite sometimes create test doubles and pass
   10      # them to examples a spec defines and runs, the test double's proxy

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rspec-expectations-2.14.4/lib/rspec/matchers/matcher.rb:
  138          # @yield [Object] actual the actual object
  139          def failure_message_for_should(&block)
  140:           cache_or_call_cached(:failure_message_for_should, &block)
  141          end
  142  
  ...
  158          # @yield [Object] actual the actual object
  159          def failure_message_for_should_not(&block)
  160:           cache_or_call_cached(:failure_message_for_should_not, &block)
  161          end
  162  
  ...
  175          #     end
  176          def description(&block)
  177:           cache_or_call_cached(:description, &block)
  178          end
  179  
  ...
  262          end
  263  
  264:         def cache_or_call_cached(key, &block)
  265:           block ? cache(key, &block) : call_cached(key)
  266          end
  267  
  268:         def cache(key, &block)
  269            @messages[key] = block
  270          end
  271  
  272:         def call_cached(key)
  273            if @messages.has_key?(key)
  274              @messages[key].arity == 1 ? @messages[key].call(@actual) : @messages[key].call

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/ext/rugged/mkmf.log:
   33  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/buf_text.o src/buf_text.c
   34  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/buffer.o src/buffer.c
   35: cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/cache.o src/cache.c
   36  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/checkout.o src/checkout.c
   37  src/checkout.c: In function 'checkout_get_actions':
   ..
   56  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/compress.o src/compress.c
   57  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/config.o src/config.c
   58: cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/config_cache.o src/config_cache.c
   59  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/config_file.o src/config_file.c
   60  src/config_file.c: In function 'config_write':
   ..
  268  src/transport.c:42:2: warning: missing initializer [-Wmissing-field-initializers]
  269  src/transport.c:42:2: warning: (near initialization for 'transports[4].param') [-Wmissing-field-initializers]
  270: cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/tree-cache.o src/tree-cache.c
  271  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/tree.o src/tree.c
  272  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/tsort.o src/tsort.c
  ...
  315  cc -g -I. -Isrc -Iinclude -Ideps/http-parser -Ideps/zlib -DNO_VIZ -DSTDC -DNO_GZIP -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE  -Wall -Wextra -O2  -fPIC   -c -o src/unix/realpath.o src/unix/realpath.c
  316  rm -f libgit2.a
  317: ar cq libgit2.a src/attr.o src/attr_file.o src/blob.o src/branch.o src/buf_text.o src/buffer.o src/cache.o src/checkout.o src/clone.o src/commit.o src/commit_list.o src/compress.o src/config.o src/config_cache.o src/config_file.o src/crlf.o src/date.o src/delta-apply.o src/delta.o src/diff.o src/diff_driver.o src/diff_file.o src/diff_patch.o src/diff_print.o src/diff_tform.o src/diff_xdiff.o src/errors.o src/fetch.o src/fetchhead.o src/filebuf.o src/fileops.o src/filter.o src/fnmatch.o src/global.o src/graph.o src/hash.o src/hashsig.o src/ignore.o src/index.o src/indexer.o src/iterator.o src/merge.o src/merge_file.o src/message.o src/mwindow.o src/netops.o src/notes.o src/object.o src/object_api.o src/odb.o src/odb_loose.o src/odb_pack.o src/oid.o src/pack-objects.o src/pack.o src/path.o src/pathspec.o src/pool.o src/posix.o src/pqueue.o src/push.o src/refdb.o src/refdb_fs.o src/reflog.o src/refs.o src/refspec.o src/remote.o src/repository.o src/reset.o src/revparse.o src/revwalk.o src/sha1_lookup.o src/signature.o src/stash.o src/status.o src/submodule.o src/tag.o src/thread-utils.o src/trace.o src/transport.o src/tree-cache.o src/tree.o src/tsort.o src/util.o src/vector.o src/transports/cred.o src/transports/cred_helpers.o src/transports/git.o src/transports/http.o src/transports/local.o src/transports/smart.o src/transports/smart_pkt.o src/transports/smart_protocol.o src/transports/ssh.o src/transports/winhttp.o src/xdiff/xdiffi.o src/xdiff/xemit.o src/xdiff/xhistogram.o src/xdiff/xmerge.o src/xdiff/xpatience.o src/xdiff/xprepare.o src/xdiff/xutils.o deps/http-parser/http_parser.o deps/zlib/adler32.o deps/zlib/crc32.o deps/zlib/deflate.o deps/zlib/inffast.o deps/zlib/inflate.o deps/zlib/inftrees.o deps/zlib/trees.o deps/zlib/zutil.o src/hash/hash_generic.o src/unix/map.o src/unix/realpath.o
  318  ranlib libgit2.a
  319  have_library: checking for main() in -lgit2_embed... -------------------- yes

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/ext/rugged/rugged.c:
  303  /*
  304   *  call-seq:
  305:  *    Rugged.__cache_usage__ -> [current, max]
  306   *
  307   *  Returns an array representing the current bytes in the internal
  308:  *  libgit2 cache and the maximum size of the cache.
  309   */
  310: static VALUE rb_git_cache_usage(VALUE self)
  311  {
  312  	int64_t used, max;
  313: 	git_libgit2_opts(GIT_OPT_GET_CACHED_MEMORY, &used, &max);
  314  	return rb_ary_new3(2, LL2NUM(used), LL2NUM(max));
  315  }
  ...
  383  	rb_define_module_function(rb_mRugged, "minimize_oid", rb_git_minimize_oid, -1);
  384  	rb_define_module_function(rb_mRugged, "prettify_message", rb_git_prettify_message, 2);
  385: 	rb_define_module_function(rb_mRugged, "__cache_usage__", rb_git_cache_usage, 0);
  386  
  387  	Init_rugged_object();

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/deps/regex/regex_internal.h:
  599  } re_sub_match_top_t;
  600  
  601: struct re_backref_cache_entry
  602  {
  603    int node;
  ...
  627    re_dfastate_t **state_log;
  628    int state_log_top;
  629:   /* Back reference cache.  */
  630    int nbkref_ents;
  631    int abkref_ents;
  632:   struct re_backref_cache_entry *bkref_ents;
  633    int max_mb_elem_len;
  634    int nsub_tops;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/deps/regex/regexec.c:
   19     02110-1301 USA.  */
   20  
   21: static reg_errcode_t match_ctx_init (re_match_context_t *cache, int eflags,
   22  				     int n) internal_function;
   23  static void match_ctx_clean (re_match_context_t *mctx) internal_function;
   24: static void match_ctx_free (re_match_context_t *cache) internal_function;
   25: static reg_errcode_t match_ctx_add_entry (re_match_context_t *cache, int node,
   26  					  int str_idx, int from, int to)
   27       internal_function;
   ..
  112  					  const re_node_set *candidates,
  113  					  re_node_set *limits,
  114: 					  struct re_backref_cache_entry *bkref_ents,
  115  					  int str_idx) internal_function;
  116  static reg_errcode_t sift_states_bkref (const re_match_context_t *mctx,
  ...
  175  						   int target, int ex_subexp,
  176  						   int type) internal_function;
  177: static reg_errcode_t expand_bkref_cache (re_match_context_t *mctx,
  178  					 re_node_set *cur_nodes, int cur_str,
  179  					 int subexp_num, int type)
  ...
 1904      {
 1905        int subexp_idx;
 1906:       struct re_backref_cache_entry *ent;
 1907        ent = mctx->bkref_ents + limits->elems[lim_idx];
 1908        subexp_idx = dfa->nodes[ent->node].opr.idx;
 ....
 1946  	  if (bkref_idx != -1)
 1947  	    {
 1948: 	      struct re_backref_cache_entry *ent = mctx->bkref_ents + bkref_idx;
 1949  	      do
 1950  		{
 ....
 2014  			   int bkref_idx)
 2015  {
 2016:   struct re_backref_cache_entry *lim = mctx->bkref_ents + limit;
 2017    int boundaries;
 2018  
 ....
 2042  check_subexp_limits (const re_dfa_t *dfa, re_node_set *dest_nodes,
 2043  		     const re_node_set *candidates, re_node_set *limits,
 2044: 		     struct re_backref_cache_entry *bkref_ents, int str_idx)
 2045  {
 2046    reg_errcode_t err;
 ....
 2050      {
 2051        int subexp_idx;
 2052:       struct re_backref_cache_entry *ent;
 2053        ent = bkref_ents + limits->elems[lim_idx];
 2054  
 ....
 2146        int enabled_idx;
 2147        re_token_type_t type;
 2148:       struct re_backref_cache_entry *entry;
 2149        node = candidates->elems[node_idx];
 2150        type = dfa->nodes[node].type;
 ....
 2612  	  int subexp_len;
 2613  	  re_dfastate_t *dest_state;
 2614: 	  struct re_backref_cache_entry *bkref_ent;
 2615  	  bkref_ent = mctx->bkref_ents + bkc_idx;
 2616  	  if (bkref_ent->node != node_idx || bkref_ent->str_idx != cur_str_idx)
 ....
 2689    const char *buf = (const char *) re_string_get_buffer (&mctx->input);
 2690    /* Return if we have already checked BKREF_NODE at BKREF_STR_IDX.  */
 2691:   int cache_idx = search_cur_bkref_entry (mctx, bkref_str_idx);
 2692:   if (cache_idx != -1)
 2693      {
 2694:       const struct re_backref_cache_entry *entry
 2695: 	= mctx->bkref_ents + cache_idx;
 2696        do
 2697  	if (entry->node == bkref_node)
 ....
 2950        if (next_nodes.nelem)
 2951  	{
 2952: 	  err = expand_bkref_cache (mctx, &next_nodes, str_idx,
 2953  				    subexp_num, type);
 2954  	  if (BE (err != REG_NOERROR, 0))
 ....
 3000  	      return err;
 3001  	    }
 3002: 	  err = expand_bkref_cache (mctx, &next_nodes, str_idx,
 3003  				    subexp_num, type);
 3004  	  if (BE (err != REG_NOERROR, 0))
 ....
 3222  static reg_errcode_t
 3223  internal_function
 3224: expand_bkref_cache (re_match_context_t *mctx, re_node_set *cur_nodes,
 3225  		    int cur_str, int subexp_num, int type)
 3226  {
 3227    const re_dfa_t *const dfa = mctx->dfa;
 3228    reg_errcode_t err;
 3229:   int cache_idx_start = search_cur_bkref_entry (mctx, cur_str);
 3230:   struct re_backref_cache_entry *ent;
 3231  
 3232:   if (cache_idx_start == -1)
 3233      return REG_NOERROR;
 3234  
 3235   restart:
 3236:   ent = mctx->bkref_ents + cache_idx_start;
 3237    do
 3238      {
 ....
 4163    if (n > 0)
 4164      {
 4165:       mctx->bkref_ents = re_malloc (struct re_backref_cache_entry, n);
 4166        mctx->sub_tops = re_malloc (re_sub_match_top_t *, n);
 4167        if (BE (mctx->bkref_ents == NULL || mctx->sub_tops == NULL, 0))
 ....
 4235    if (mctx->nbkref_ents >= mctx->abkref_ents)
 4236      {
 4237:       struct re_backref_cache_entry* new_entry;
 4238:       new_entry = re_realloc (mctx->bkref_ents, struct re_backref_cache_entry,
 4239  			      mctx->abkref_ents * 2);
 4240        if (BE (new_entry == NULL, 0))
 ....
 4245        mctx->bkref_ents = new_entry;
 4246        memset (mctx->bkref_ents + mctx->nbkref_ents, '\0',
 4247: 	      sizeof (struct re_backref_cache_entry) * mctx->abkref_ents);
 4248        mctx->abkref_ents *= 2;
 4249      }
 ....
 4257    mctx->bkref_ents[mctx->nbkref_ents].subexp_to = to;
 4258  
 4259:   /* This is a cache that saves negative results of check_dst_limits_calc_pos.
 4260       If bit N is clear, means that this entry won't epsilon-transition to
 4261       an OP_OPEN_SUBEXP or OP_CLOSE_SUBEXP for the N+1-th subexpression.  If

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/deps/zlib/inflate.c:
  354     upon return from inflate(), and since all distances after the first 32K of
  355     output will fall in the output data, making match copies simpler and faster.
  356:    The advantage may be dependent on the size of the processor's data caches.
  357   */
  358  local int updatewindow(strm, out)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/attr.h:
  211  
  212  /**
  213:  * Flush the gitattributes cache.
  214   *
  215   * Call this if you have reason to believe that the attributes files on
  216:  * disk no longer match the cached contents of memory.  This will cause
  217   * the attributes files to be reloaded the next time that an attribute
  218   * access function is called.
  219   */
  220: GIT_EXTERN(void) git_attr_cache_flush(
  221  	git_repository *repo);
  222  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/common.h:
  133  	GIT_OPT_GET_SEARCH_PATH,
  134  	GIT_OPT_SET_SEARCH_PATH,
  135: 	GIT_OPT_SET_CACHE_OBJECT_LIMIT,
  136: 	GIT_OPT_SET_CACHE_MAX_SIZE,
  137  	GIT_OPT_ENABLE_CACHING,
  138: 	GIT_OPT_GET_CACHED_MEMORY
  139  } git_libgit2_opt_t;
  140  
  ...
  181   *		>   or GIT_CONFIG_LEVEL_XDG.
  182   *
  183:  *	* opts(GIT_OPT_SET_CACHE_OBJECT_LIMIT, git_otype type, size_t size)
  184   *
  185   *		> Set the maximum data size for the given type of object to be
  186   *		> considered eligible for caching in memory.  Setting to value to
  187:  *		> zero means that that type of object will not be cached.
  188:  *		> Defaults to 0 for GIT_OBJ_BLOB (i.e. won't cache blobs) and 4k
  189   *		> for GIT_OBJ_COMMIT, GIT_OBJ_TREE, and GIT_OBJ_TAG.
  190   *
  191:  *	* opts(GIT_OPT_SET_CACHE_MAX_SIZE, ssize_t max_storage_bytes)
  192   *
  193:  *		> Set the maximum total data size that will be cached in memory
  194   *		> across all repositories before libgit2 starts evicting objects
  195:  *		> from the cache.  This is a soft limit, in that the library might
  196   *		> briefly exceed it, but will start aggressively evicting objects
  197:  *		> from cache when that happens.  The default cache size is 256Mb.
  198   *
  199   *	* opts(GIT_OPT_ENABLE_CACHING, int enabled)
  ...
  201   *		> Enable or disable caching completely.
  202   *		>
  203:  *		> Because caches are repository-specific, disabling the cache
  204:  *		> cannot immediately clear all cached objects, but each cache will
  205   *		> be cleared on the next attempt to update anything in it.
  206   *
  207:  *	* opts(GIT_OPT_GET_CACHED_MEMORY, ssize_t *current, ssize_t *allowed)
  208   *
  209:  *		> Get the current bytes in cache and the maximum that would be
  210:  *		> allowed in the cache.
  211   *
  212   * @param option Option key

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/diff.h:
  556   * Create a diff list between a tree and repository index.
  557   *
  558:  * This is equivalent to `git diff --cached <treeish>` or if you pass
  559:  * the HEAD tree, then like `git diff --cached`.
  560   *
  561   * The tree you pass will be used for the "old_file" side of the delta, and

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/object.h:
  113   *
  114   * This method instructs the library to close an existing
  115:  * object; note that git_objects are owned and cached by the repository
  116   * so the object may or may not be freed after this library call,
  117   * depending on how aggressive is the caching mechanism used

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/odb.h:
   87   *
   88   * The returned object is reference counted and
   89:  * internally cached, so it should be closed
   90   * by the user once it's no longer in use.
   91   *
   ..
  114   *
  115   * The returned object is reference counted and
  116:  * internally cached, so it should be closed
  117   * by the user once it's no longer in use.
  118   *

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/revwalk.h:
   54   *
   55   * This revision walker uses a custom memory pool and an internal
   56:  * commit cache, so it is relatively expensive to allocate.
   57   *
   58   * For maximum performance, this revision walker should be

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/include/git2/submodule.h:
  493   * Reread submodule info from config, index, and HEAD.
  494   *
  495:  * Call this to reread cached submodule information for this submodule if
  496   * you have reason to believe that it has changed.
  497   */
  ...
  501   * Reread all submodule info.
  502   *
  503:  * Call this to reload all cached submodule information for the repo.
  504   */
  505  GIT_EXTERN(int) git_submodule_reload_all(git_repository *repo);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/attr.c:
  217  	git_pool *pool;
  218  
  219: 	if (git_attr_cache__init(repo) < 0)
  220  		return -1;
  221  
  ...
  223  	GITERR_CHECK_ALLOC(macro);
  224  
  225: 	pool = &git_repository_attr_cache(repo)->pool;
  226  
  227  	macro->match.pattern = git_pool_strdup(pool, name);
  ...
  234  
  235  	if (!error)
  236: 		error = git_attr_cache__insert_macro(repo, macro);
  237  
  238  	if (error < 0)
  ...
  242  }
  243  
  244: bool git_attr_cache__is_cached(
  245  	git_repository *repo, git_attr_file_source source, const char *path)
  246  {
  247: 	git_buf cache_key = GIT_BUF_INIT;
  248: 	git_strmap *files = git_repository_attr_cache(repo)->files;
  249  	const char *workdir = git_repository_workdir(repo);
  250  	bool rval;
  ...
  252  	if (workdir && git__prefixcmp(path, workdir) == 0)
  253  		path += strlen(workdir);
  254: 	if (git_buf_printf(&cache_key, "%d#%s", (int)source, path) < 0)
  255  		return false;
  256  
  257: 	rval = git_strmap_exists(files, git_buf_cstr(&cache_key));
  258  
  259: 	git_buf_free(&cache_key);
  260  
  261  	return rval;
  ...
  323  }
  324  
  325: static int load_attr_from_cache(
  326  	git_attr_file **file,
  327: 	git_attr_cache *cache,
  328  	git_attr_file_source source,
  329  	const char *relative_path)
  330  {
  331: 	git_buf  cache_key = GIT_BUF_INIT;
  332: 	khiter_t cache_pos;
  333  
  334  	*file = NULL;
  335  
  336: 	if (!cache || !cache->files)
  337  		return 0;
  338  
  339: 	if (git_buf_printf(&cache_key, "%d#%s", (int)source, relative_path) < 0)
  340  		return -1;
  341  
  342: 	cache_pos = git_strmap_lookup_index(cache->files, cache_key.ptr);
  343  
  344: 	git_buf_free(&cache_key);
  345  
  346: 	if (git_strmap_valid_index(cache->files, cache_pos))
  347: 		*file = git_strmap_value_at(cache->files, cache_pos);
  348  
  349  	return 0;
  350  }
  351  
  352: int git_attr_cache__internal_file(
  353  	git_repository *repo,
  354  	const char *filename,
  ...
  356  {
  357  	int error = 0;
  358: 	git_attr_cache *cache = git_repository_attr_cache(repo);
  359: 	khiter_t cache_pos = git_strmap_lookup_index(cache->files, filename);
  360  
  361: 	if (git_strmap_valid_index(cache->files, cache_pos)) {
  362: 		*file = git_strmap_value_at(cache->files, cache_pos);
  363  		return 0;
  364  	}
  365  
  366: 	if (git_attr_file__new(file, 0, filename, &cache->pool) < 0)
  367  		return -1;
  368  
  369: 	git_strmap_insert(cache->files, (*file)->key + 2, *file, error);
  370  	if (error > 0)
  371  		error = 0;
  ...
  374  }
  375  
  376: int git_attr_cache__push_file(
  377  	git_repository *repo,
  378  	const char *base,
  ...
  387  	const char *workdir = git_repository_workdir(repo);
  388  	const char *relfile, *content = NULL;
  389: 	git_attr_cache *cache = git_repository_attr_cache(repo);
  390  	git_attr_file *file = NULL;
  391  	git_blob *blob = NULL;
  ...
  405  		relfile += strlen(workdir);
  406  
  407: 	/* check cache */
  408: 	if (load_attr_from_cache(&file, cache, source, relfile) < 0)
  409  		return -1;
  410  
  411: 	/* if not in cache, load data, parse, and cache */
  412  
  413  	if (source == GIT_ATTR_FILE_FROM_FILE) {
  414  		git_futils_filestamp_set(
  415: 			&stamp, file ? &file->cache_data.stamp : NULL);
  416  
  417  		error = load_attr_file(&content, &stamp, filename);
  418  	} else {
  419  		error = load_attr_blob_from_index(&content, &blob,
  420: 			repo, file ? &file->cache_data.oid : NULL, relfile);
  421  	}
  422  
  ...
  434  		git_attr_file__clear_rules(file);
  435  	else {
  436: 		error = git_attr_file__new(&file, source, relfile, &cache->pool);
  437  		if (error < 0)
  438  			goto finish;
  ...
  442  		goto finish;
  443  
  444: 	git_strmap_insert(cache->files, file->key, file, error); //-V595
  445  	if (error > 0)
  446  		error = 0;
  447  
  448: 	/* remember "cache buster" file signature */
  449  	if (blob)
  450: 		git_oid_cpy(&file->cache_data.oid, git_object_id((git_object *)blob));
  451  	else
  452: 		git_futils_filestamp_set(&file->cache_data.stamp, &stamp);
  453  
  454  finish:
  ...
  471  
  472  #define push_attr_file(R,S,B,F) \
  473: 	git_attr_cache__push_file((R),(B),(F),GIT_ATTR_FILE_FROM_FILE,git_attr_file__parse_buffer,NULL,(S))
  474  
  475  typedef struct {
  ...
  481  } attr_walk_up_info;
  482  
  483: int git_attr_cache__decide_sources(
  484  	uint32_t flags, bool has_wd, bool has_index, git_attr_file_source *srcs)
  485  {
  ...
  514  	git_attr_file_source src[2];
  515  
  516: 	n_src = git_attr_cache__decide_sources(
  517  		info->flags, info->workdir != NULL, info->index != NULL, src);
  518  
  519  	for (i = 0; !error && i < n_src; ++i)
  520: 		error = git_attr_cache__push_file(
  521  			info->repo, path->ptr, GIT_ATTR_FILE, src[i],
  522  			git_attr_file__parse_buffer, NULL, info->files);
  ...
  536  	attr_walk_up_info info;
  537  
  538: 	if (git_attr_cache__init(repo) < 0 ||
  539  		git_vector_init(files, 4, NULL) < 0)
  540  		return -1;
  ...
  571  		goto cleanup;
  572  
  573: 	if (git_repository_attr_cache(repo)->cfg_attr_file != NULL) {
  574  		error = push_attr_file(
  575: 			repo, files, NULL, git_repository_attr_cache(repo)->cfg_attr_file);
  576  		if (error < 0)
  577  			goto cleanup;
  ...
  596  }
  597  
  598: static int attr_cache__lookup_path(
  599  	char **out, git_config *cfg, const char *key, const char *fallback)
  600  {
  ...
  627  }
  628  
  629: int git_attr_cache__init(git_repository *repo)
  630  {
  631  	int ret;
  632: 	git_attr_cache *cache = git_repository_attr_cache(repo);
  633  	git_config *cfg;
  634  
  635: 	if (cache->initialized)
  636  		return 0;
  637  
  638: 	/* cache config settings for attributes and ignores */
  639  	if (git_repository_config__weakptr(&cfg, repo) < 0)
  640  		return -1;
  641  
  642: 	ret = attr_cache__lookup_path(
  643: 		&cache->cfg_attr_file, cfg, GIT_ATTR_CONFIG, GIT_ATTR_FILE_XDG);
  644  	if (ret < 0)
  645  		return ret;
  646  
  647: 	ret = attr_cache__lookup_path(
  648: 		&cache->cfg_excl_file, cfg, GIT_IGNORE_CONFIG, GIT_IGNORE_FILE_XDG);
  649  	if (ret < 0)
  650  		return ret;
  651  
  652  	/* allocate hashtable for attribute and ignore file contents */
  653: 	if (cache->files == NULL) {
  654: 		cache->files = git_strmap_alloc();
  655: 		GITERR_CHECK_ALLOC(cache->files);
  656  	}
  657  
  658  	/* allocate hashtable for attribute macros */
  659: 	if (cache->macros == NULL) {
  660: 		cache->macros = git_strmap_alloc();
  661: 		GITERR_CHECK_ALLOC(cache->macros);
  662  	}
  663  
  664  	/* allocate string pool */
  665: 	if (git_pool_init(&cache->pool, 1, 0) < 0)
  666  		return -1;
  667  
  668: 	cache->initialized = 1;
  669  
  670  	/* insert default macros */
  ...
  672  }
  673  
  674: void git_attr_cache_flush(
  675  	git_repository *repo)
  676  {
  677: 	git_attr_cache *cache;
  678  
  679  	if (!repo)
  680  		return;
  681  
  682: 	cache = git_repository_attr_cache(repo);
  683  
  684: 	if (cache->files != NULL) {
  685  		git_attr_file *file;
  686  
  687: 		git_strmap_foreach_value(cache->files, file, {
  688  			git_attr_file__free(file);
  689  		});
  690  
  691: 		git_strmap_free(cache->files);
  692  	}
  693  
  694: 	if (cache->macros != NULL) {
  695  		git_attr_rule *rule;
  696  
  697: 		git_strmap_foreach_value(cache->macros, rule, {
  698  			git_attr_rule__free(rule);
  699  		});
  700  
  701: 		git_strmap_free(cache->macros);
  702  	}
  703  
  704: 	git_pool_clear(&cache->pool);
  705  
  706: 	git__free(cache->cfg_attr_file);
  707: 	cache->cfg_attr_file = NULL;
  708  
  709: 	git__free(cache->cfg_excl_file);
  710: 	cache->cfg_excl_file = NULL;
  711  
  712: 	cache->initialized = 0;
  713  }
  714  
  715: int git_attr_cache__insert_macro(git_repository *repo, git_attr_rule *macro)
  716  {
  717: 	git_strmap *macros = git_repository_attr_cache(repo)->macros;
  718  	int error;
  719  
  ...
  726  }
  727  
  728: git_attr_rule *git_attr_cache__lookup_macro(
  729  	git_repository *repo, const char *name)
  730  {
  731: 	git_strmap *macros = git_repository_attr_cache(repo)->macros;
  732  	khiter_t pos;
  733  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/attr.h:
   16  	git_repository *, void *, const char *, git_attr_file *);
   17  
   18: extern int git_attr_cache__insert_macro(
   19  	git_repository *repo, git_attr_rule *macro);
   20  
   21: extern git_attr_rule *git_attr_cache__lookup_macro(
   22  	git_repository *repo, const char *name);
   23  
   24: extern int git_attr_cache__push_file(
   25  	git_repository *repo,
   26  	const char *base,
   ..
   31  	git_vector *stack);
   32  
   33: extern int git_attr_cache__internal_file(
   34  	git_repository *repo,
   35  	const char *key,
   36  	git_attr_file **file_ptr);
   37  
   38: /* returns true if path is in cache */
   39: extern bool git_attr_cache__is_cached(
   40  	git_repository *repo, git_attr_file_source source, const char *path);
   41  
   42: extern int git_attr_cache__decide_sources(
   43  	uint32_t flags, bool has_wd, bool has_index, git_attr_file_source *srcs);
   44  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/attr_file.c:
   95  				 * file other than .gitattributes at repo root.
   96  				 */
   97: 				error = git_attr_cache__insert_macro(repo, rule);
   98  			else
   99  				error = git_vector_insert(&attrs->rules, rule);
  ...
  557  		}
  558  
  559: 		/* expand macros (if given a repo with a macro cache) */
  560  		if (repo != NULL && assign->value == git_attr__true) {
  561  			git_attr_rule *macro =
  562: 				git_attr_cache__lookup_macro(repo, assign->name);
  563  
  564  			if (macro != NULL) {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/attr_file.h:
   59  
   60  typedef struct {
   61: 	char *key;				/* cache "source#path" this was loaded from */
   62  	git_vector rules;		/* vector of <rule*> or <fnmatch*> */
   63  	git_pool *pool;
   ..
   66  		git_oid oid;
   67  		git_futils_filestamp stamp;
   68: 	} cache_data;
   69  } git_attr_file;
   70  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/attrcache.h:
    5   * a Linking Exception. For full terms see the included COPYING file.
    6   */
    7: #ifndef INCLUDE_attrcache_h__
    8: #define INCLUDE_attrcache_h__
    9  
   10  #include "pool.h"
   ..
   16  	git_strmap *files;	 /* hash path to git_attr_file of rules */
   17  	git_strmap *macros;	 /* hash name to vector<git_attr_assignment> */
   18: 	char *cfg_attr_file; /* cached value of core.attributesfile */
   19: 	char *cfg_excl_file; /* cached value of core.excludesfile */
   20: } git_attr_cache;
   21  
   22: extern int git_attr_cache__init(git_repository *repo);
   23  
   24  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/blob.c:
   46  {
   47  	assert(blob);
   48: 	git_cached_obj_incref((git_cached_obj *)odb_obj);
   49  	((git_blob *)blob)->odb_object = odb_obj;
   50  	return 0;
   ..
  320  
  321  	content.ptr = blob->odb_object->buffer;
  322: 	content.size = min(blob->odb_object->cached.size, 4000);
  323  
  324  	return git_buf_text_is_binary(&content);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/cache.c:
   11  #include "thread-utils.h"
   12  #include "util.h"
   13: #include "cache.h"
   14  #include "odb.h"
   15  #include "object.h"
   ..
   18  GIT__USE_OIDMAP
   19  
   20: bool git_cache__enabled = true;
   21: ssize_t git_cache__max_storage = (256 * 1024 * 1024);
   22: git_atomic_ssize git_cache__current_storage = {0};
   23  
   24: static size_t git_cache__max_object_size[8] = {
   25  	0,     /* GIT_OBJ__EXT1 */
   26  	4096,  /* GIT_OBJ_COMMIT */
   ..
   33  };
   34  
   35: int git_cache_set_max_object_size(git_otype type, size_t size)
   36  {
   37: 	if (type < 0 || (size_t)type >= ARRAY_SIZE(git_cache__max_object_size)) {
   38  		giterr_set(GITERR_INVALID, "type out of range");
   39  		return -1;
   40  	}
   41  
   42: 	git_cache__max_object_size[type] = size;
   43  	return 0;
   44  }
   45  
   46: void git_cache_dump_stats(git_cache *cache)
   47  {
   48: 	git_cached_obj *object;
   49  
   50: 	if (kh_size(cache->map) == 0)
   51  		return;
   52  
   53: 	printf("Cache %p: %d items cached, %d bytes\n",
   54: 		cache, kh_size(cache->map), (int)cache->used_memory);
   55  
   56: 	kh_foreach_value(cache->map, object, {
   57  		char oid_str[9];
   58  		printf(" %s%c %s (%d)\n",
   59  			git_object_type2string(object->type),
   60: 			object->flags == GIT_CACHE_STORE_PARSED ? '*' : ' ',
   61  			git_oid_tostr(oid_str, sizeof(oid_str), &object->oid),
   62  			(int)object->size
   ..
   65  }
   66  
   67: int git_cache_init(git_cache *cache)
   68  {
   69: 	memset(cache, 0, sizeof(*cache));
   70: 	cache->map = git_oidmap_alloc();
   71: 	if (git_mutex_init(&cache->lock)) {
   72: 		giterr_set(GITERR_OS, "Failed to initialize cache mutex");
   73  		return -1;
   74  	}
   ..
   77  
   78  /* called with lock */
   79: static void clear_cache(git_cache *cache)
   80  {
   81: 	git_cached_obj *evict = NULL;
   82  
   83: 	if (kh_size(cache->map) == 0)
   84  		return;
   85  
   86: 	kh_foreach_value(cache->map, evict, {
   87: 		git_cached_obj_decref(evict);
   88  	});
   89  
   90: 	kh_clear(oid, cache->map);
   91: 	git_atomic_ssize_add(&git_cache__current_storage, -cache->used_memory);
   92: 	cache->used_memory = 0;
   93  }
   94  
   95: void git_cache_clear(git_cache *cache)
   96  {
   97: 	if (git_mutex_lock(&cache->lock) < 0)
   98  		return;
   99  
  100: 	clear_cache(cache);
  101  
  102: 	git_mutex_unlock(&cache->lock);
  103  }
  104  
  105: void git_cache_free(git_cache *cache)
  106  {
  107: 	git_cache_clear(cache);
  108: 	git_oidmap_free(cache->map);
  109: 	git_mutex_free(&cache->lock);
  110: 	git__memzero(cache, sizeof(*cache));
  111  }
  112  
  113  /* Called with lock */
  114: static void cache_evict_entries(git_cache *cache)
  115  {
  116  	uint32_t seed = rand();
  ...
  119  
  120  	/* do not infinite loop if there's not enough entries to evict  */
  121: 	if (evict_count > kh_size(cache->map)) {
  122: 		clear_cache(cache);
  123  		return;
  124  	}
  125  
  126  	while (evict_count > 0) {
  127: 		khiter_t pos = seed++ % kh_end(cache->map);
  128  
  129: 		if (kh_exist(cache->map, pos)) {
  130: 			git_cached_obj *evict = kh_val(cache->map, pos);
  131  
  132  			evict_count--;
  133  			evicted_memory += evict->size;
  134: 			git_cached_obj_decref(evict);
  135  
  136: 			kh_del(oid, cache->map, pos);
  137  		}
  138  	}
  139  
  140: 	cache->used_memory -= evicted_memory;
  141: 	git_atomic_ssize_add(&git_cache__current_storage, -evicted_memory);
  142  }
  143  
  144: static bool cache_should_store(git_otype object_type, size_t object_size)
  145  {
  146: 	size_t max_size = git_cache__max_object_size[object_type];
  147: 	return git_cache__enabled && object_size < max_size;
  148  }
  149  
  150: static void *cache_get(git_cache *cache, const git_oid *oid, unsigned int flags)
  151  {
  152  	khiter_t pos;
  153: 	git_cached_obj *entry = NULL;
  154  
  155: 	if (!git_cache__enabled || git_mutex_lock(&cache->lock) < 0)
  156  		return NULL;
  157  
  158: 	pos = kh_get(oid, cache->map, oid);
  159: 	if (pos != kh_end(cache->map)) {
  160: 		entry = kh_val(cache->map, pos);
  161  
  162  		if (flags && entry->flags != flags) {
  163  			entry = NULL;
  164  		} else {
  165: 			git_cached_obj_incref(entry);
  166  		}
  167  	}
  168  
  169: 	git_mutex_unlock(&cache->lock);
  170  
  171  	return entry;
  172  }
  173  
  174: static void *cache_store(git_cache *cache, git_cached_obj *entry)
  175  {
  176  	khiter_t pos;
  177  
  178: 	git_cached_obj_incref(entry);
  179  
  180: 	if (!git_cache__enabled && cache->used_memory > 0) {
  181: 		git_cache_clear(cache);
  182  		return entry;
  183  	}
  184  
  185: 	if (!cache_should_store(entry->type, entry->size))
  186  		return entry;
  187  
  188: 	if (git_mutex_lock(&cache->lock) < 0)
  189  		return entry;
  190  
  191: 	/* soften the load on the cache */
  192: 	if (git_cache__current_storage.val > git_cache__max_storage)
  193: 		cache_evict_entries(cache);
  194  
  195: 	pos = kh_get(oid, cache->map, &entry->oid);
  196  
  197  	/* not found */
  198: 	if (pos == kh_end(cache->map)) {
  199  		int rval;
  200  
  201: 		pos = kh_put(oid, cache->map, &entry->oid, &rval);
  202  		if (rval >= 0) {
  203: 			kh_key(cache->map, pos) = &entry->oid;
  204: 			kh_val(cache->map, pos) = entry;
  205: 			git_cached_obj_incref(entry);
  206: 			cache->used_memory += entry->size;
  207: 			git_atomic_ssize_add(&git_cache__current_storage, (ssize_t)entry->size);
  208  		}
  209  	}
  210  	/* found */
  211  	else {
  212: 		git_cached_obj *stored_entry = kh_val(cache->map, pos);
  213  
  214  		if (stored_entry->flags == entry->flags) {
  215: 			git_cached_obj_decref(entry);
  216: 			git_cached_obj_incref(stored_entry);
  217  			entry = stored_entry;
  218: 		} else if (stored_entry->flags == GIT_CACHE_STORE_RAW &&
  219: 			entry->flags == GIT_CACHE_STORE_PARSED) {
  220: 			git_cached_obj_decref(stored_entry);
  221: 			git_cached_obj_incref(entry);
  222  
  223: 			kh_key(cache->map, pos) = &entry->oid;
  224: 			kh_val(cache->map, pos) = entry;
  225  		} else {
  226  			/* NO OP */
  ...
  228  	}
  229  
  230: 	git_mutex_unlock(&cache->lock);
  231  	return entry;
  232  }
  233  
  234: void *git_cache_store_raw(git_cache *cache, git_odb_object *entry)
  235  {
  236: 	entry->cached.flags = GIT_CACHE_STORE_RAW;
  237: 	return cache_store(cache, (git_cached_obj *)entry);
  238  }
  239  
  240: void *git_cache_store_parsed(git_cache *cache, git_object *entry)
  241  {
  242: 	entry->cached.flags = GIT_CACHE_STORE_PARSED;
  243: 	return cache_store(cache, (git_cached_obj *)entry);
  244  }
  245  
  246: git_odb_object *git_cache_get_raw(git_cache *cache, const git_oid *oid)
  247  {
  248: 	return cache_get(cache, oid, GIT_CACHE_STORE_RAW);
  249  }
  250  
  251: git_object *git_cache_get_parsed(git_cache *cache, const git_oid *oid)
  252  {
  253: 	return cache_get(cache, oid, GIT_CACHE_STORE_PARSED);
  254  }
  255  
  256: void *git_cache_get_any(git_cache *cache, const git_oid *oid)
  257  {
  258: 	return cache_get(cache, oid, GIT_CACHE_STORE_ANY);
  259  }
  260  
  261: void git_cached_obj_decref(void *_obj)
  262  {
  263: 	git_cached_obj *obj = _obj;
  264  
  265  	if (git_atomic_dec(&obj->refcount) == 0) {
  266  		switch (obj->flags) {
  267: 		case GIT_CACHE_STORE_RAW:
  268  			git_odb_object__free(_obj);
  269  			break;
  270  
  271: 		case GIT_CACHE_STORE_PARSED:
  272  			git_object__free(_obj);
  273  			break;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/cache.h:
    5   * a Linking Exception. For full terms see the included COPYING file.
    6   */
    7: #ifndef INCLUDE_cache_h__
    8: #define INCLUDE_cache_h__
    9  
   10  #include "git2/common.h"
   ..
   16  
   17  enum {
   18: 	GIT_CACHE_STORE_ANY = 0,
   19: 	GIT_CACHE_STORE_RAW = 1,
   20: 	GIT_CACHE_STORE_PARSED = 2
   21  };
   22  
   ..
   24  	git_oid    oid;
   25  	int16_t    type;  /* git_otype value */
   26: 	uint16_t   flags; /* GIT_CACHE_STORE value */
   27  	size_t     size;
   28  	git_atomic refcount;
   29: } git_cached_obj;
   30  
   31  typedef struct {
   ..
   33  	git_mutex   lock;
   34  	ssize_t     used_memory;
   35: } git_cache;
   36  
   37: extern bool git_cache__enabled;
   38: extern ssize_t git_cache__max_storage;
   39: extern git_atomic_ssize git_cache__current_storage;
   40  
   41: int git_cache_set_max_object_size(git_otype type, size_t size);
   42  
   43: int git_cache_init(git_cache *cache);
   44: void git_cache_free(git_cache *cache);
   45: void git_cache_clear(git_cache *cache);
   46  
   47: void *git_cache_store_raw(git_cache *cache, git_odb_object *entry);
   48: void *git_cache_store_parsed(git_cache *cache, git_object *entry);
   49  
   50: git_odb_object *git_cache_get_raw(git_cache *cache, const git_oid *oid);
   51: git_object *git_cache_get_parsed(git_cache *cache, const git_oid *oid);
   52: void *git_cache_get_any(git_cache *cache, const git_oid *oid);
   53  
   54: GIT_INLINE(size_t) git_cache_size(git_cache *cache)
   55  {
   56: 	return (size_t)kh_size(cache->map);
   57  }
   58  
   59: GIT_INLINE(void) git_cached_obj_incref(void *_obj)
   60  {
   61: 	git_cached_obj *obj = _obj;
   62  	git_atomic_inc(&obj->refcount);
   63  }
   64  
   65: void git_cached_obj_decref(void *_obj);
   66  
   67  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/checkout.c:
  144  	}
  145  
  146: 	/* Look at the cache to decide if the workdir is modified.  If not,
  147: 	 * we can simply compare the oid in the cache to the baseitem instead
  148  	 * of hashing the file.
  149  	 */

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/commit_list.c:
  186  		return error;
  187  
  188: 	if (obj->cached.type != GIT_OBJ_COMMIT) {
  189  		giterr_set(GITERR_INVALID, "Object is no commit object");
  190  		error = -1;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/config.c:
  307  
  308  	if (!error && GIT_REFCOUNT_OWNER(cfg) != NULL)
  309: 		git_repository__cvar_cache_clear(GIT_REFCOUNT_OWNER(cfg));
  310  
  311  	return error;
  ...
  402  
  403  	if (!error && GIT_REFCOUNT_OWNER(cfg) != NULL)
  404: 		git_repository__cvar_cache_clear(GIT_REFCOUNT_OWNER(cfg));
  405  
  406  	return error;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/config_cache.c:
   70  };
   71  
   72: int git_repository__cvar(int *out, git_repository *repo, git_cvar_cached cvar)
   73  {
   74: 	*out = repo->cvar_cache[(int)cvar];
   75  
   76: 	if (*out == GIT_CVAR_NOT_CACHED) {
   77  		struct map_data *data = &_cvar_maps[(int)cvar];
   78  		git_config *config;
   ..
   96  			return error;
   97  
   98: 		repo->cvar_cache[(int)cvar] = *out;
   99  	}
  100  
  ...
  102  }
  103  
  104: void git_repository__cvar_cache_clear(git_repository *repo)
  105  {
  106  	int i;
  107  
  108: 	for (i = 0; i < GIT_CVAR_CACHE_MAX; ++i)
  109: 		repo->cvar_cache[i] = GIT_CVAR_NOT_CACHED;
  110  }
  111  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/date.c:
   12  
   13  #include "util.h"
   14: #include "cache.h"
   15  #include "posix.h"
   16  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/diff_patch.c:
   13  #include "fileops.h"
   14  
   15: /* cached information about a single span in a diff */
   16  typedef struct diff_patch_line diff_patch_line;
   17  struct diff_patch_line {
   ..
   22  };
   23  
   24: /* cached information about a hunk in a diff */
   25  typedef struct diff_patch_hunk diff_patch_hunk;
   26  struct diff_patch_hunk {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/diff_tform.c:
  413  	const git_diff_find_options *opts,
  414  	size_t file_idx,
  415: 	void **cache)
  416  {
  417  	int error = 0;
  ...
  431  		if (git_path_isfile(path.ptr))
  432  			error = opts->metric->file_signature(
  433: 				&cache[file_idx], file, path.ptr, opts->metric->payload);
  434  
  435  		git_buf_free(&path);
  ...
  451  
  452  		error = opts->metric->buffer_signature(
  453: 			&cache[file_idx], file, git_blob_rawcontent(blob),
  454  			(size_t)blobsize, opts->metric->payload);
  455  
  ...
  470  	git_diff_list *diff,
  471  	const git_diff_find_options *opts,
  472: 	void **cache,
  473  	size_t a_idx,
  474  	size_t b_idx)
  ...
  511  	}
  512  
  513: 	/* update signature cache if needed */
  514: 	if (!cache[a_idx] && similarity_calc(diff, opts, a_idx, cache) < 0)
  515  		return -1;
  516: 	if (!cache[b_idx] && similarity_calc(diff, opts, b_idx, cache) < 0)
  517  		return -1;
  518  
  519  	/* some metrics may not wish to process this file (too big / too small) */
  520: 	if (!cache[a_idx] || !cache[b_idx])
  521  		return 0;
  522  
  523  	/* compare signatures */
  524  	return opts->metric->similarity(
  525: 		score, cache[a_idx], cache[b_idx], opts->metric->payload);
  526  }
  527  
  ...
  530  	const git_diff_find_options *opts,
  531  	size_t delta_idx,
  532: 	void **cache)
  533  {
  534  	int error, similarity = -1;
  ...
  539  
  540  	error = similarity_measure(
  541: 		&similarity, diff, opts, cache, 2 * delta_idx, 2 * delta_idx + 1);
  542  	if (error < 0)
  543  		return error;
  ...
  555  	const git_diff_find_options *opts,
  556  	size_t delta_idx,
  557: 	void **cache)
  558  {
  559  	git_diff_delta *delta = GIT_VECTOR_GET(&diff->deltas, delta_idx);
  ...
  576  			return false;
  577  
  578: 		if (calc_self_similarity(diff, opts, delta_idx, cache) < 0)
  579  			return false;
  580  
  ...
  608  	const git_diff_find_options *opts,
  609  	size_t delta_idx,
  610: 	void **cache)
  611  {
  612  	git_diff_delta *delta = GIT_VECTOR_GET(&diff->deltas, delta_idx);
  ...
  641  			return false;
  642  
  643: 		if (calc_self_similarity(diff, opts, delta_idx, cache) < 0)
  644  			return false;
  645  
  ...
  692  	git_diff_find_options *given_opts)
  693  {
  694: 	size_t i, j, sigcache_size;
  695  	int error = 0, similarity;
  696  	git_diff_delta *from, *to;
  ...
  698  	size_t num_srcs = 0, num_tgts = 0, tried_srcs = 0, tried_tgts = 0;
  699  	size_t num_rewrites = 0, num_updates = 0, num_bumped = 0;
  700: 	void **sigcache; /* cache of similarity metric file signatures */
  701  	diff_find_match *match_srcs = NULL, *match_tgts = NULL, *best_match;
  702  	git_diff_file swap;
  ...
  709  		return 0;
  710  
  711: 	sigcache_size = diff->deltas.length * 2; /* keep size b/c diff may change */
  712: 	sigcache = git__calloc(sigcache_size, sizeof(void *));
  713: 	GITERR_CHECK_ALLOC(sigcache);
  714  
  715  	/* Label rename sources and targets
  ...
  719  	 */
  720  	git_vector_foreach(&diff->deltas, i, to) {
  721: 		if (is_rename_source(diff, &opts, i, sigcache))
  722  			++num_srcs;
  723  
  724: 		if (is_rename_target(diff, &opts, i, sigcache))
  725  			++num_tgts;
  726  	}
  ...
  758  				similarity = -1; /* don't measure self-similarity here */
  759  			else if ((error = similarity_measure(
  760: 				&similarity, diff, &opts, sigcache, 2 * j, 2 * i + 1)) < 0)
  761  				goto cleanup;
  762  
  ...
  934  	git__free(match_tgts);
  935  
  936: 	for (i = 0; i < sigcache_size; ++i) {
  937: 		if (sigcache[i] != NULL)
  938: 			opts.metric->free_signature(sigcache[i], opts.metric->payload);
  939  	}
  940: 	git__free(sigcache);
  941  
  942  	if (!given_opts || !given_opts->metric)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/filebuf.c:
  216  	file->last_error = BUFERR_OK;
  217  
  218: 	/* Allocate the main cache buffer */
  219  	if (!file->do_not_buffer) {
  220  		file->buffer = git__malloc(file->buf_size);
  ...
  240  		}
  241  
  242: 		/* Allocate the Zlib cache buffer */
  243  		file->z_buf = git__malloc(file->buf_size);
  244  		GITERR_CHECK_ALLOC(file->z_buf);
  ...
  359  }
  360  
  361: GIT_INLINE(void) add_to_cache(git_filebuf *file, const void *buf, size_t len)
  362  {
  363  	memcpy(file->buffer + file->buf_pos, buf, len);
  ...
  377  		size_t space_left = file->buf_size - file->buf_pos;
  378  
  379: 		/* cache if it's small */
  380  		if (space_left > len) {
  381: 			add_to_cache(file, buf, len);
  382  			return 0;
  383  		}
  384  
  385: 		add_to_cache(file, buf, space_left);
  386  		if (flush_buffer(file) < 0)
  387  			return -1;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/global.c:
   45   * which may take place in the global scope.  An explicit memory
   46   * fence exists at the exit of `git_threads_init()`.  Without this,
   47:  * CPU cores are free to reorder cache invalidation of `_tls_init`
   48:  * before cache invalidation of the subsystems' newly written global
   49   * state.
   50   */

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/ignore.c:
   72  
   73  #define push_ignore_file(R,IGN,S,B,F) \
   74: 	git_attr_cache__push_file((R),(B),(F),GIT_ATTR_FILE_FROM_FILE,parse_ignore_file,(IGN),(S))
   75  
   76  static int push_one_ignore(void *ref, git_buf *path)
   ..
   84  	int error;
   85  
   86: 	if (!(error = git_attr_cache__init(repo)))
   87: 		error = git_attr_cache__internal_file(repo, GIT_IGNORE_INTERNAL, ign);
   88  
   89  	if (!error && !(*ign)->rules.length)
   ..
  114  	if ((error = git_vector_init(&ignores->ign_path, 8, NULL)) < 0 ||
  115  		(error = git_vector_init(&ignores->ign_global, 2, NULL)) < 0 ||
  116: 		(error = git_attr_cache__init(repo)) < 0)
  117  		goto cleanup;
  118  
  ...
  145  
  146  	/* load core.excludesfile */
  147: 	if (git_repository_attr_cache(repo)->cfg_excl_file != NULL)
  148  		error = push_ignore_file(repo, ignores, &ignores->ign_global, NULL,
  149: 			git_repository_attr_cache(repo)->cfg_excl_file);
  150  
  151  cleanup:
  ...
  178  void git_ignore__free(git_ignores *ignores)
  179  {
  180: 	/* don't need to free ignores->ign_internal since it is in cache */
  181  	git_vector_free(&ignores->ign_path);
  182  	git_vector_free(&ignores->ign_global);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/index.c:
   12  #include "index.h"
   13  #include "tree.h"
   14: #include "tree-cache.h"
   15  #include "hash.h"
   16  #include "iterator.h"
   ..
   37  
   38  static const unsigned int INDEX_HEADER_SIG = 0x44495243;
   39: static const char INDEX_EXT_TREECACHE_SIG[] = {'T', 'R', 'E', 'E'};
   40  static const char INDEX_EXT_UNMERGED_SIG[] = {'R', 'E', 'U', 'C'};
   41  static const char INDEX_EXT_CONFLICT_NAME_SIG[] = {'N', 'A', 'M', 'E'};
   ..
  387  	git_futils_filestamp_set(&index->stamp, NULL);
  388  
  389: 	git_tree_cache_free(index->tree);
  390  	index->tree = NULL;
  391  }
  ...
  787  		goto on_error;
  788  
  789: 	git_tree_cache_invalidate_path(index->tree, entry->path);
  790  	return 0;
  791  
  ...
  824  	}
  825  
  826: 	git_tree_cache_invalidate_path(index->tree, entry->path);
  827  	return 0;
  828  }
  ...
  844  	entry = git_vector_get(&index->entries, position);
  845  	if (entry != NULL)
  846: 		git_tree_cache_invalidate_path(index->tree, entry->path);
  847  
  848  	error = git_vector_remove(&index->entries, position);
  ...
  878  		}
  879  
  880: 		git_tree_cache_invalidate_path(index->tree, entry->path);
  881  
  882  		if ((error = git_vector_remove(&index->entries, pos)) < 0)
  ...
 1590  	/* optional extension */
 1591  	if (dest.signature[0] >= 'A' && dest.signature[0] <= 'Z') {
 1592: 		/* tree cache */
 1593: 		if (memcmp(dest.signature, INDEX_EXT_TREECACHE_SIG, 4) == 0) {
 1594: 			if (git_tree_cache_read(&index->tree, buffer + 8, dest.extension_size) < 0)
 1595  				return 0;
 1596  		} else if (memcmp(dest.signature, INDEX_EXT_UNMERGED_SIG, 4) == 0) {
 ....
 1936  		return -1;
 1937  
 1938: 	/* TODO: write tree cache extension */
 1939  
 1940  	/* write the rename conflict extension */
 ....
 2140  		}
 2141  
 2142: 		git_tree_cache_invalidate_path(index->tree, wd->path);
 2143  
 2144  		/* add implies conflict resolved, move conflict entries to REUC */

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/index.h:
   11  #include "filebuf.h"
   12  #include "vector.h"
   13: #include "tree-cache.h"
   14  #include "git2/odb.h"
   15  #include "git2/index.h"
   ..
   32  	unsigned int no_symlinks:1;
   33  
   34: 	git_tree_cache *tree;
   35  
   36  	git_vector names;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/indexer.c:
  275  	pentry->offset = entry_start;
  276  
  277: 	k = kh_put(oid, idx->pack->idx_cache, &pentry->sha1, &error);
  278  	if (!error) {
  279  		git__free(pentry);
  ...
  281  	}
  282  
  283: 	kh_value(idx->pack->idx_cache, k) = pentry;
  284  
  285  	git_oid_cpy(&entry->oid, &oid);
  ...
  334  	git_oid_cpy(&pentry->sha1, &oid);
  335  	pentry->offset = entry_start;
  336: 	k = kh_put(oid, idx->pack->idx_cache, &pentry->sha1, &error);
  337  	if (!error) {
  338  		git__free(pentry);
  ...
  340  	}
  341  
  342: 	kh_value(idx->pack->idx_cache, k) = pentry;
  343  
  344  	git_oid_cpy(&entry->oid, &oid);
  ...
  417  			total_objects = UINT_MAX;
  418  
  419: 		idx->pack->idx_cache = git_oidmap_alloc();
  420: 		GITERR_CHECK_ALLOC(idx->pack->idx_cache);
  421  
  422: 		idx->pack->has_cache = 1;
  423  		if (git_vector_init(&idx->objects, total_objects, objects_cmp) < 0)
  424  			return -1;
  ...
  722  
  723  	if (idx->pack) {
  724: 		for (k = kh_begin(idx->pack->idx_cache); k != kh_end(idx->pack->idx_cache); k++) {
  725: 			if (kh_exist(idx->pack->idx_cache, k))
  726: 				git__free(kh_value(idx->pack->idx_cache, k));
  727  		}
  728  
  729: 		git_oidmap_free(idx->pack->idx_cache);
  730  	}
  731  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/merge.c:
  625  	git_index_entry *b,
  626  	size_t b_idx,
  627: 	void **cache,
  628  	const git_merge_tree_opts *opts)
  629  {
  ...
  631  	GIT_UNUSED(a_idx);
  632  	GIT_UNUSED(b_idx);
  633: 	GIT_UNUSED(cache);
  634  	GIT_UNUSED(opts);
  635  
  ...
  683  	git_index_entry *b,
  684  	size_t b_idx,
  685: 	void **cache,
  686  	const git_merge_tree_opts *opts)
  687  {
  ...
  692  		return 0;
  693  
  694: 	/* update signature cache if needed */
  695: 	if (!cache[a_idx] && (error = index_entry_similarity_calc(&cache[a_idx], repo, a, opts)) < 0)
  696  		return error;
  697: 	if (!cache[b_idx] && (error = index_entry_similarity_calc(&cache[b_idx], repo, b, opts)) < 0)
  698  		return error;
  699  
  700  	/* some metrics may not wish to process this file (too big / too small) */
  701: 	if (!cache[a_idx] || !cache[b_idx])
  702  		return 0;
  703  
  704  	/* compare signatures */
  705  	if (opts->metric->similarity(
  706: 		&score, cache[a_idx], cache[b_idx], opts->metric->payload) < 0)
  707  		return -1;
  708  
  ...
  722  	struct merge_diff_similarity *similarity_theirs,
  723  	int (*similarity_fn)(git_repository *, git_index_entry *, size_t, git_index_entry *, size_t, void **, const git_merge_tree_opts *),
  724: 	void **cache,
  725  	const git_merge_tree_opts *opts)
  726  {
  ...
  746  			if (GIT_MERGE_INDEX_ENTRY_EXISTS(conflict_tgt->our_entry) &&
  747  				!GIT_MERGE_INDEX_ENTRY_EXISTS(conflict_src->our_entry)) {
  748: 				similarity = similarity_fn(repo, &conflict_src->ancestor_entry, i, &conflict_tgt->our_entry, our_idx, cache, opts);
  749  
  750  				if (similarity == GIT_EBUFS)
  ...
  772  			if (GIT_MERGE_INDEX_ENTRY_EXISTS(conflict_tgt->their_entry) &&
  773  				!GIT_MERGE_INDEX_ENTRY_EXISTS(conflict_src->their_entry)) {
  774: 				similarity = similarity_fn(repo, &conflict_src->ancestor_entry, i, &conflict_tgt->their_entry, their_idx, cache, opts);
  775  
  776  				if (similarity > similarity_theirs[i].similarity &&
  ...
  987  {
  988  	struct merge_diff_similarity *similarity_ours, *similarity_theirs;
  989: 	void **cache = NULL;
  990: 	size_t cache_size = 0;
  991  	size_t src_count, tgt_count, i;
  992  	int error = 0;
  ...
 1013  
 1014  	if (diff_list->conflicts.length <= opts->target_limit) {
 1015: 		cache_size = diff_list->conflicts.length * 3;
 1016: 		cache = git__calloc(cache_size, sizeof(void *));
 1017: 		GITERR_CHECK_ALLOC(cache);
 1018  
 1019  		merge_diff_list_count_candidates(diff_list, &src_count, &tgt_count);
 ....
 1024  			if ((error = merge_diff_mark_similarity(
 1025  				repo, diff_list, similarity_ours, similarity_theirs,
 1026: 				index_entry_similarity_inexact, cache, opts)) < 0)
 1027  				goto done;
 1028  		}
 ....
 1038  
 1039  done:
 1040: 	if (cache != NULL) {
 1041: 		for (i = 0; i < cache_size; ++i) {
 1042: 			if (cache[i] != NULL)
 1043: 				opts->metric->free_signature(cache[i], opts->metric->payload);
 1044  		}
 1045  
 1046: 		git__free(cache);
 1047  	}
 1048  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/object.c:
   66  
   67  	/* Validate type match */
   68: 	if (type != GIT_OBJ_ANY && type != odb_obj->cached.type) {
   69  		giterr_set(GITERR_INVALID,
   70  			"The requested type does not match the type in the ODB");
   ..
   72  	}
   73  
   74: 	if ((object_size = git_object__size(odb_obj->cached.type)) == 0) {
   75  		giterr_set(GITERR_INVALID, "The requested type is invalid");
   76  		return GIT_ENOTFOUND;
   ..
   81  	GITERR_CHECK_ALLOC(object);
   82  
   83: 	git_oid_cpy(&object->cached.oid, &odb_obj->cached.oid);
   84: 	object->cached.type = odb_obj->cached.type;
   85: 	object->cached.size = odb_obj->cached.size;
   86  	object->repo = repo;
   87  
   88  	/* Parse raw object data */
   89: 	def = &git_objects_table[odb_obj->cached.type];
   90  	assert(def->free && def->parse);
   91  
   ..
   93  		def->free(object);
   94  	else
   95: 		*object_out = git_cache_store_parsed(&repo->objects, object);
   96  
   97  	return error;
   ..
  100  void git_object__free(void *obj)
  101  {
  102: 	git_otype type = ((git_object *)obj)->cached.type;
  103  
  104  	if (type < 0 || ((size_t)type) >= ARRAY_SIZE(git_objects_table) ||
  ...
  136  
  137  	if (len == GIT_OID_HEXSZ) {
  138: 		git_cached_obj *cached = NULL;
  139  
  140: 		/* We want to match the full id : we can first look up in the cache,
  141  		 * since there is no need to check for non ambiguousity
  142  		 */
  143: 		cached = git_cache_get_any(&repo->objects, id);
  144: 		if (cached != NULL) {
  145: 			if (cached->flags == GIT_CACHE_STORE_PARSED) {
  146: 				object = (git_object *)cached;
  147  
  148: 				if (type != GIT_OBJ_ANY && type != object->cached.type) {
  149  					git_object_free(object);
  150  					giterr_set(GITERR_INVALID,
  ...
  155  				*object_out = object;
  156  				return 0;
  157: 			} else if (cached->flags == GIT_CACHE_STORE_RAW) {
  158: 				odb_obj = (git_odb_object *)cached;
  159  			} else {
  160: 				assert(!"Wrong caching type in the global object cache");
  161  			}
  162  		} else {
  163: 			/* Object was not found in the cache, let's explore the backends.
  164  			 * We could just use git_odb_read_unique_short_oid,
  165  			 * it is the same cost for packed and loose object backends,
  ...
  179  		/* If len < GIT_OID_HEXSZ (a strict short oid was given), we have
  180  		 * 2 options :
  181: 		 * - We always search in the cache first. If we find that short oid is
  182  		 *	ambiguous, we can stop. But in all the other cases, we must then
  183  		 *	explore all the backends (to find an object if there was match,
  184  		 *	or to check that oid is not ambiguous if we have found 1 match in
  185: 		 *	the cache)
  186: 		 * - We never explore the cache, go right to exploring the backends
  187  		 * We chose the latter : we explore directly the backends.
  188  		 */
  ...
  209  		return;
  210  
  211: 	git_cached_obj_decref(object);
  212  }
  213  
  ...
  215  {
  216  	assert(obj);
  217: 	return &obj->cached.oid;
  218  }
  219  
  ...
  221  {
  222  	assert(obj);
  223: 	return obj->cached.type;
  224  }
  225  
  ...
  361  int git_object_dup(git_object **dest, git_object *source)
  362  {
  363: 	git_cached_obj_incref(source);
  364  	*dest = source;
  365  	return 0;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/object.h:
   10  /** Base git object for inheritance */
   11  struct git_object {
   12: 	git_cached_obj cached;
   13  	git_repository *repo;
   14  };

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/odb.c:
   36  } backend_internal;
   37  
   38: static git_cache *odb_cache(git_odb *odb)
   39  {
   40  	if (odb->rc.owner != NULL) {
   ..
   43  	}
   44  
   45: 	return &odb->own_cache;
   46  }
   47  
   ..
   88  
   89  	if (object != NULL) {
   90: 		git_oid_cpy(&object->cached.oid, oid);
   91: 		object->cached.type = source->type;
   92: 		object->cached.size = source->len;
   93  		object->buffer      = source->data;
   94  	}
   ..
  107  const git_oid *git_odb_object_id(git_odb_object *object)
  108  {
  109: 	return &object->cached.oid;
  110  }
  111  
  ...
  117  size_t git_odb_object_size(git_odb_object *object)
  118  {
  119: 	return object->cached.size;
  120  }
  121  
  122  git_otype git_odb_object_type(git_odb_object *object)
  123  {
  124: 	return object->cached.type;
  125  }
  126  
  ...
  130  		return;
  131  
  132: 	git_cached_obj_decref(object);
  133  }
  134  
  ...
  367  	GITERR_CHECK_ALLOC(db);
  368  
  369: 	if (git_cache_init(&db->own_cache) < 0 ||
  370  		git_vector_init(&db->backends, 4, backend_sort_cmp) < 0) {
  371  		git__free(db);
  ...
  589  
  590  	git_vector_free(&db->backends);
  591: 	git_cache_free(&db->own_cache);
  592  
  593  	git__memzero(db, sizeof(*db));
  ...
  612  	assert(db && id);
  613  
  614: 	if ((object = git_cache_get_raw(odb_cache(db), id)) != NULL) {
  615  		git_odb_object_free(object);
  616  		return (int)true;
  ...
  662  	assert(db && id && out && len_p && type_p);
  663  
  664: 	if ((object = git_cache_get_raw(odb_cache(db), id)) != NULL) {
  665: 		*len_p = object->cached.size;
  666: 		*type_p = object->cached.type;
  667  		*out = object;
  668  		return 0;
  ...
  689  		return error; /* error already set - pass along */
  690  
  691: 	*len_p = object->cached.size;
  692: 	*type_p = object->cached.type;
  693  	*out = object;
  694  
  ...
  706  	assert(out && db && id);
  707  
  708: 	*out = git_cache_get_raw(odb_cache(db), id);
  709  	if (*out != NULL)
  710  		return 0;
  ...
  740  		return -1;
  741  
  742: 	*out = git_cache_store_raw(odb_cache(db), object);
  743  	return 0;
  744  }
  ...
  764  
  765  	if (len == GIT_OID_HEXSZ) {
  766: 		*out = git_cache_get_raw(odb_cache(db), short_id);
  767  		if (*out != NULL)
  768  			return 0;
  ...
  808  		return -1;
  809  
  810: 	*out = git_cache_store_raw(odb_cache(db), object);
  811  	return 0;
  812  }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/odb.h:
   13  
   14  #include "vector.h"
   15: #include "cache.h"
   16  #include "posix.h"
   17  
   ..
   29  /* EXPORT */
   30  struct git_odb_object {
   31: 	git_cached_obj cached;
   32  	void *buffer;
   33  };
   ..
   37  	git_refcount rc;
   38  	git_vector backends;
   39: 	git_cache own_cache;
   40  };
   41  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/oid.c:
  346   *	- All the nodes in om->index array are stored contiguously in
  347   *	memory, and each of them is 32 bytes, so we fit 2x nodes per
  348:  *	cache line. Convenient for speed.
  349   *
  350   *	- To differentiate the leafs from the normal nodes, we store all
  ...
  355   *	the size of each node by 1-4 bytes (the amount we would need to
  356   *	add a `is_leaf` field): this is good because it allows the nodes
  357:  *	to fit cleanly in cache lines.
  358   *
  359   *	- Once we reach an empty children, instead of continuing to insert

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/pack-objects.c:
   53  #endif /* GIT_THREADS */
   54  
   55: #define git_packbuilder__cache_lock(pb) GIT_PACKBUILDER__MUTEX_OP(pb, cache_mutex, lock)
   56: #define git_packbuilder__cache_unlock(pb) GIT_PACKBUILDER__MUTEX_OP(pb, cache_mutex, unlock)
   57  #define git_packbuilder__progress_lock(pb) GIT_PACKBUILDER__MUTEX_OP(pb, progress_mutex, lock)
   58  #define git_packbuilder__progress_unlock(pb) GIT_PACKBUILDER__MUTEX_OP(pb, progress_mutex, unlock)
   ..
   93  	else if (ret < 0) return -1; } while (0)
   94  
   95: 	config_get("pack.deltaCacheSize", pb->max_delta_cache_size,
   96: 		   GIT_PACK_DELTA_CACHE_SIZE);
   97: 	config_get("pack.deltaCacheLimit", pb->cache_max_small_delta_size,
   98: 		   GIT_PACK_DELTA_CACHE_LIMIT);
   99: 	config_get("pack.deltaCacheSize", pb->big_file_threshold,
  100  		   GIT_PACK_BIG_FILE_THRESHOLD);
  101  	config_get("pack.windowMemory", pb->window_memory_limit, 0);
  ...
  130  #ifdef GIT_THREADS
  131  
  132: 	if (git_mutex_init(&pb->cache_mutex) ||
  133  		git_mutex_init(&pb->progress_mutex) ||
  134  		git_cond_init(&pb->progress_cond))
  ...
  657  }
  658  
  659: static int delta_cacheable(git_packbuilder *pb, unsigned long src_size,
  660  			   unsigned long trg_size, unsigned long delta_size)
  661  {
  662: 	if (pb->max_delta_cache_size &&
  663: 		pb->delta_cache_size + delta_size > pb->max_delta_cache_size)
  664  		return 0;
  665  
  666: 	if (delta_size < pb->cache_max_small_delta_size)
  667  		return 1;
  668  
  669: 	/* cache delta, if objects are large enough compared to delta size */
  670  	if ((src_size >> 20) + (trg_size >> 21) > (delta_size >> 10))
  671  		return 1;
  ...
  783  	}
  784  
  785: 	git_packbuilder__cache_lock(pb);
  786  	if (trg_object->delta_data) {
  787  		git__free(trg_object->delta_data);
  788: 		pb->delta_cache_size -= trg_object->delta_size;
  789  		trg_object->delta_data = NULL;
  790  	}
  791: 	if (delta_cacheable(pb, src_size, trg_size, delta_size)) {
  792: 		pb->delta_cache_size += delta_size;
  793: 		git_packbuilder__cache_unlock(pb);
  794  
  795  		trg_object->delta_data = git__realloc(delta_buf, delta_size);
  ...
  797  	} else {
  798  		/* create delta when writing the pack */
  799: 		git_packbuilder__cache_unlock(pb);
  800  		git__free(delta_buf);
  801  	}
  ...
  913  
  914  		/*
  915: 		 * If we decided to cache the delta data, then it is best
  916  		 * to compress it right away.  First because we have to do
  917  		 * it anyway, and doing it here while we're threaded will
  918  		 * save a lot of time in the non threaded write phase,
  919  		 * as well as allow for caching more deltas within
  920: 		 * the same cache size limit.
  921  		 * ...
  922  		 * But only if not writing to stdout, since in that case
  ...
  938  			git_buf_clear(&zbuf);
  939  
  940: 			git_packbuilder__cache_lock(pb);
  941: 			pb->delta_cache_size -= po->delta_size;
  942: 			pb->delta_cache_size += po->z_delta_size;
  943: 			git_packbuilder__cache_unlock(pb);
  944  		}
  945  
  ...
 1354  #ifdef GIT_THREADS
 1355  
 1356: 	git_mutex_free(&pb->cache_mutex);
 1357  	git_mutex_free(&pb->progress_mutex);
 1358  	git_cond_free(&pb->progress_cond);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/pack-objects.h:
   20  #define GIT_PACK_WINDOW 10 /* number of objects to possibly delta against */
   21  #define GIT_PACK_DEPTH 50 /* max delta depth */
   22: #define GIT_PACK_DELTA_CACHE_SIZE (256 * 1024 * 1024)
   23: #define GIT_PACK_DELTA_CACHE_LIMIT 1000
   24  #define GIT_PACK_BIG_FILE_THRESHOLD (512 * 1024 * 1024)
   25  
   ..
   67  
   68  	/* synchronization objects */
   69: 	git_mutex cache_mutex;
   70  	git_mutex progress_mutex;
   71  	git_cond progress_cond;
   72  
   73  	/* configs */
   74: 	uint64_t delta_cache_size;
   75: 	uint64_t max_delta_cache_size;
   76: 	uint64_t cache_max_small_delta_size;
   77  	uint64_t big_file_threshold;
   78  	uint64_t window_memory_limit;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/pack.c:
   48  
   49  /********************
   50:  * Delta base cache
   51   ********************/
   52  
   53: static git_pack_cache_entry *new_cache_object(git_rawobj *source)
   54  {
   55: 	git_pack_cache_entry *e = git__calloc(1, sizeof(git_pack_cache_entry));
   56  	if (!e)
   57  		return NULL;
   ..
   62  }
   63  
   64: static void free_cache_object(void *o)
   65  {
   66: 	git_pack_cache_entry *e = (git_pack_cache_entry *)o;
   67  
   68  	if (e != NULL) {
   ..
   73  }
   74  
   75: static void cache_free(git_pack_cache *cache)
   76  {
   77  	khiter_t k;
   78  
   79: 	if (cache->entries) {
   80: 		for (k = kh_begin(cache->entries); k != kh_end(cache->entries); k++) {
   81: 			if (kh_exist(cache->entries, k))
   82: 				free_cache_object(kh_value(cache->entries, k));
   83  		}
   84  
   85: 		git_offmap_free(cache->entries);
   86: 		git_mutex_free(&cache->lock);
   87  	}
   88  
   89: 	memset(cache, 0, sizeof(*cache));
   90  }
   91  
   92: static int cache_init(git_pack_cache *cache)
   93  {
   94: 	memset(cache, 0, sizeof(*cache));
   95  
   96: 	cache->entries = git_offmap_alloc();
   97: 	GITERR_CHECK_ALLOC(cache->entries);
   98  
   99: 	cache->memory_limit = GIT_PACK_CACHE_MEMORY_LIMIT;
  100  
  101: 	if (git_mutex_init(&cache->lock)) {
  102: 		giterr_set(GITERR_OS, "Failed to initialize pack cache mutex");
  103  
  104: 		git__free(cache->entries);
  105: 		cache->entries = NULL;
  106  
  107  		return -1;
  ...
  111  }
  112  
  113: static git_pack_cache_entry *cache_get(git_pack_cache *cache, git_off_t offset)
  114  {
  115  	khiter_t k;
  116: 	git_pack_cache_entry *entry = NULL;
  117  
  118: 	if (git_mutex_lock(&cache->lock) < 0)
  119  		return NULL;
  120  
  121: 	k = kh_get(off, cache->entries, offset);
  122: 	if (k != kh_end(cache->entries)) { /* found it */
  123: 		entry = kh_value(cache->entries, k);
  124  		git_atomic_inc(&entry->refcount);
  125: 		entry->last_usage = cache->use_ctr++;
  126  	}
  127: 	git_mutex_unlock(&cache->lock);
  128  
  129  	return entry;
  130  }
  131  
  132: /* Run with the cache lock held */
  133: static void free_lowest_entry(git_pack_cache *cache)
  134  {
  135: 	git_pack_cache_entry *entry;
  136  	khiter_t k;
  137  
  138: 	for (k = kh_begin(cache->entries); k != kh_end(cache->entries); k++) {
  139: 		if (!kh_exist(cache->entries, k))
  140  			continue;
  141  
  142: 		entry = kh_value(cache->entries, k);
  143  
  144  		if (entry && entry->refcount.val == 0) {
  145: 			cache->memory_used -= entry->raw.len;
  146: 			kh_del(off, cache->entries, k);
  147: 			free_cache_object(entry);
  148  		}
  149  	}
  150  }
  151  
  152: static int cache_add(git_pack_cache *cache, git_rawobj *base, git_off_t offset)
  153  {
  154: 	git_pack_cache_entry *entry;
  155  	int error, exists = 0;
  156  	khiter_t k;
  157  
  158: 	if (base->len > GIT_PACK_CACHE_SIZE_LIMIT)
  159  		return -1;
  160  
  161: 	entry = new_cache_object(base);
  162  	if (entry) {
  163: 		if (git_mutex_lock(&cache->lock) < 0) {
  164: 			giterr_set(GITERR_OS, "failed to lock cache");
  165  			return -1;
  166  		}
  167: 		/* Add it to the cache if nobody else has */
  168: 		exists = kh_get(off, cache->entries, offset) != kh_end(cache->entries);
  169  		if (!exists) {
  170: 			while (cache->memory_used + base->len > cache->memory_limit)
  171: 				free_lowest_entry(cache);
  172  
  173: 			k = kh_put(off, cache->entries, offset, &error);
  174  			assert(error != 0);
  175: 			kh_value(cache->entries, k) = entry;
  176: 			cache->memory_used += entry->raw.len;
  177  		}
  178: 		git_mutex_unlock(&cache->lock);
  179: 		/* Somebody beat us to adding it into the cache */
  180  		if (exists) {
  181  			git__free(entry);
  ...
  492  	git_off_t base_offset, base_key;
  493  	git_rawobj base, delta;
  494: 	git_pack_cache_entry *cached = NULL;
  495  	int error, found_base = 0;
  496  
  ...
  502  		return (int)base_offset;
  503  
  504: 	if (!p->bases.entries && (cache_init(&p->bases) < 0))
  505  		return -1;
  506  
  507  	base_key = base_offset; /* git_packfile_unpack modifies base_offset */
  508: 	if ((cached = cache_get(&p->bases, base_offset)) != NULL) {
  509: 		memcpy(&base, &cached->raw, sizeof(git_rawobj));
  510  		found_base = 1;
  511  	}
  512  
  513: 	if (!cached) { /* have to inflate it */
  514  		error = git_packfile_unpack(&base, p, &base_offset);
  515  
  ...
  539  
  540  	if (found_base)
  541: 		git_atomic_dec(&cached->refcount);
  542: 	else if (cache_add(&p->bases, &base, base_key) < 0)
  543  		git__free(base.data);
  544  
  ...
  784  		*curpos += used;
  785  	} else if (type == GIT_OBJ_REF_DELTA) {
  786: 		/* If we have the cooperative cache, search in it first */
  787: 		if (p->has_cache) {
  788  			khiter_t k;
  789  			git_oid oid;
  790  
  791  			git_oid_fromraw(&oid, base_info);
  792: 			k = kh_get(oid, p->idx_cache, &oid);
  793: 			if (k != kh_end(p->idx_cache)) {
  794  				*curpos += 20;
  795: 				return ((struct git_pack_entry *)kh_value(p->idx_cache, k))->offset;
  796  			}
  797  		}
  ...
  817  		return;
  818  
  819: 	cache_free(&p->bases);
  820  
  821  	git_mwindow_free_all(&p->mwf);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/pack.h:
   55  };
   56  
   57: typedef struct git_pack_cache_entry {
   58  	size_t last_usage; /* enough? */
   59  	git_atomic refcount;
   60  	git_rawobj raw;
   61: } git_pack_cache_entry;
   62  
   63  #include "offmap.h"
   ..
   66  GIT__USE_OIDMAP;
   67  
   68: #define GIT_PACK_CACHE_MEMORY_LIMIT 16 * 1024 * 1024
   69: #define GIT_PACK_CACHE_SIZE_LIMIT 1024 * 1024 /* don't bother caching anything over 1MB */
   70  
   71  typedef struct {
   ..
   75  	git_mutex lock;
   76  	git_offmap *entries;
   77: } git_pack_cache;
   78  
   79  struct git_pack_file {
   ..
   88  	int index_version;
   89  	git_time_t mtime;
   90: 	unsigned pack_local:1, pack_keep:1, has_cache:1;
   91  	git_oid sha1;
   92: 	git_oidmap *idx_cache;
   93  	git_oid **oids;
   94  
   95: 	git_pack_cache bases; /* delta base cache */
   96  
   97  	/* something like ".git/objects/pack/xxxxx.pack" */

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/refdb_fs.c:
   54  	char *path;
   55  
   56: 	git_refcache refcache;
   57  	int peeling_mode;
   58  } refdb_fs_backend;
   ..
  173  	git_buf packfile = GIT_BUF_INIT;
  174  	const char *buffer_start, *buffer_end;
  175: 	git_refcache *ref_cache = &backend->refcache;
  176  
  177  	/* First we make sure we have allocated the hash table */
  178: 	if (ref_cache->packfile == NULL) {
  179: 		ref_cache->packfile = git_strmap_alloc();
  180: 		GITERR_CHECK_ALLOC(ref_cache->packfile);
  181  	}
  182  
  ...
  184  		return 0;
  185  
  186: 	result = reference_read(&packfile, &ref_cache->packfile_time,
  187  		backend->path, GIT_PACKEDREFS_FILE, &updated);
  188  
  ...
  195  	 */
  196  	if (result == GIT_ENOTFOUND) {
  197: 		git_strmap_clear(ref_cache->packfile);
  198  		return 0;
  199  	}
  ...
  209  	 * have the contents in our buffer.
  210  	 */
  211: 	git_strmap_clear(ref_cache->packfile);
  212  
  213  	buffer_start = (const char *)packfile.ptr;
  ...
  262  		}
  263  
  264: 		git_strmap_insert(ref_cache->packfile, ref->name, ref, err);
  265  		if (err < 0)
  266  			goto parse_failed;
  ...
  271  
  272  parse_failed:
  273: 	git_strmap_free(ref_cache->packfile);
  274: 	ref_cache->packfile = NULL;
  275  	git_buf_free(&packfile);
  276  	return -1;
  ...
  357  
  358  	git_strmap_insert2(
  359: 		backend->refcache.packfile, ref->name, ref, old_ref, err);
  360  	if (err < 0) {
  361  		git__free(ref);
  ...
  379  
  380  	/* the packfile must have been previously loaded! */
  381: 	assert(backend->refcache.packfile);
  382  
  383  	if (git_buf_joinpath(&refs_path, backend->path, GIT_REFS_DIR) < 0)
  ...
  413  
  414  	if (git_path_isfile(ref_path.ptr) == true ||
  415: 		git_strmap_exists(backend->refcache.packfile, ref_path.ptr))
  416  		*exists = 1;
  417  	else
  ...
  494  
  495  	/* Look up on the packfile */
  496: 	packfile_refs = backend->refcache.packfile;
  497  
  498  	*pos = git_strmap_lookup_index(packfile_refs, ref_name);
  ...
  579  static int iter_load_loose_paths(refdb_fs_backend *backend, refdb_fs_iter *iter)
  580  {
  581: 	git_strmap *packfile = backend->refcache.packfile;
  582  	git_buf path = GIT_BUF_INIT;
  583  	git_iterator *fsit;
  ...
  628  	refdb_fs_iter *iter = (refdb_fs_iter *)_iter;
  629  	refdb_fs_backend *backend = (refdb_fs_backend *)iter->parent.db->backend;
  630: 	git_strmap *packfile = backend->refcache.packfile;
  631  
  632  	while (iter->loose_pos < iter->loose.length) {
  ...
  672  	refdb_fs_iter *iter = (refdb_fs_iter *)_iter;
  673  	refdb_fs_backend *backend = (refdb_fs_backend *)iter->parent.db->backend;
  674: 	git_strmap *packfile = backend->refcache.packfile;
  675  
  676  	while (iter->loose_pos < iter->loose.length) {
  ...
  776  	}
  777  
  778: 	git_strmap_foreach_value(backend->refcache.packfile, this_ref, {
  779  		if (!ref_is_available(old_ref, new_ref, this_ref->name)) {
  780  			giterr_set(GITERR_REFERENCE,
  ...
  838   * For references that point to a 'big' tag (e.g. an
  839   * actual tag object on the repository), we need to
  840:  * cache on the packfile the OID of the object to
  841   * which that 'big tag' is pointing to.
  842   */
  ...
  869  
  870  		/*
  871: 		 * The reference has now cached the resolved OID, and is
  872  		 * marked at such. When written to the packfile, it'll be
  873  		 * accompanied by this resolved oid
  ...
  976  	unsigned int total_refs;
  977  
  978: 	assert(backend && backend->refcache.packfile);
  979  
  980  	total_refs =
  981: 		(unsigned int)git_strmap_num_entries(backend->refcache.packfile);
  982  
  983  	if (git_vector_init(&packing_list, total_refs, packed_sort) < 0)
  ...
  989  
  990  		/* cannot fail: vector already has the right size */
  991: 		git_strmap_foreach_value(backend->refcache.packfile, reference, {
  992  			git_vector_insert(&packing_list, reference);
  993  		});
  ...
 1034  		struct stat st;
 1035  		if (p_stat(pack_file_path.ptr, &st) == 0)
 1036: 			backend->refcache.packfile_time = st.st_mtime;
 1037  	 }
 1038  
 ....
 1108  
 1109  	if (error == 0) {
 1110: 		git_strmap_delete_at(backend->refcache.packfile, pack_ref_pos);
 1111  		git__free(pack_ref);
 1112  		error = packed_write(backend);
 ....
 1177  }
 1178  
 1179: static void refcache_free(git_refcache *refs)
 1180  {
 1181  	assert(refs);
 ....
 1199  	backend = (refdb_fs_backend *)_backend;
 1200  
 1201: 	refcache_free(&backend->refcache);
 1202  	git__free(backend->path);
 1203  	git__free(backend);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/refdb_fs.h:
   11  	git_strmap *packfile;
   12  	time_t packfile_time;
   13: } git_refcache;
   14  
   15  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/repository.c:
   74  	}
   75  
   76: 	git_repository__cvar_cache_clear(repo);
   77  }
   78  
   ..
   94  	assert(repo);
   95  
   96: 	git_cache_clear(&repo->objects);
   97: 	git_attr_cache_flush(repo);
   98  
   99  	set_config(repo, NULL);
  ...
  110  	git_repository__cleanup(repo);
  111  
  112: 	git_cache_free(&repo->objects);
  113  	git_submodule_config_free(repo);
  114  
  ...
  151  		return NULL;
  152  
  153: 	if (git_cache_init(&repo->objects) < 0) {
  154  		git__free(repo);
  155  		return NULL;
  156  	}
  157  
  158: 	/* set all the entries in the cvar cache to `unset` */
  159: 	git_repository__cvar_cache_clear(repo);
  160  
  161  	return repo;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/repository.h:
   15  #include "git2/config.h"
   16  
   17: #include "cache.h"
   18  #include "refs.h"
   19  #include "buffer.h"
   20  #include "object.h"
   21: #include "attrcache.h"
   22  #include "strmap.h"
   23  #include "diff_driver.h"
   ..
   28  #define GIT_BARE_DIR_MODE 0777
   29  
   30: /** Cvar cache identifiers */
   31  typedef enum {
   32  	GIT_CVAR_AUTO_CRLF = 0, /* core.autocrlf */
   ..
   38  	GIT_CVAR_TRUSTCTIME,    /* core.trustctime */
   39  	GIT_CVAR_ABBREV,        /* core.abbrev */
   40: 	GIT_CVAR_CACHE_MAX
   41: } git_cvar_cached;
   42  
   43  /**
   44   * CVAR value enumerations
   45   *
   46:  * These are the values that are actually stored in the cvar cache, instead
   47   * of their string equivalents. These values are internal and symbolic;
   48   * make sure that none of them is set to `-1`, since that is the unique
   49:  * identifier for "not cached"
   50   */
   51  typedef enum {
   52: 	/* The value hasn't been loaded from the cache yet */
   53: 	GIT_CVAR_NOT_CACHED = -1,
   54  
   55  	/* core.safecrlf: false, 'fail', 'warn' */
   ..
  104  	git_index *_index;
  105  
  106: 	git_cache objects;
  107: 	git_attr_cache attrcache;
  108  	git_strmap *submodules;
  109  	git_diff_driver_registry *diff_drivers;
  ...
  116  	unsigned int lru_counter;
  117  
  118: 	git_cvar_value cvar_cache[GIT_CVAR_CACHE_MAX];
  119  };
  120  
  121: GIT_INLINE(git_attr_cache *) git_repository_attr_cache(git_repository *repo)
  122  {
  123: 	return &repo->attrcache;
  124  }
  125  
  ...
  139  
  140  /*
  141:  * CVAR cache
  142   *
  143   * Efficient access to the most used config variables of a repository.
  144:  * The cache is cleared everytime the config backend is replaced.
  145   */
  146: int git_repository__cvar(int *out, git_repository *repo, git_cvar_cached cvar);
  147: void git_repository__cvar_cache_clear(git_repository *repo);
  148  
  149  /*
  150:  * Submodule cache
  151   */
  152  extern void git_submodule_config_free(git_repository *repo);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/tag.c:
  341  		goto on_error;
  342  
  343: 	if (tag.type != target_obj->cached.type) {
  344  		giterr_set(GITERR_TAG, "The type for the given target is invalid");
  345  		goto on_error;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/transports/winhttp.c:
   30  #define MAX_CONTENT_TYPE_LEN	100
   31  #define WINHTTP_OPTION_PEERDIST_EXTENSION_STATE	109
   32: #define CACHED_POST_BODY_BUF_SIZE	4096
   33  #define UUID_LENGTH_CCH	32
   34  
   ..
   43  static const wchar_t *get_verb = L"GET";
   44  static const wchar_t *post_verb = L"POST";
   45: static const wchar_t *pragma_nocache = L"Pragma: no-cache";
   46  static const wchar_t *transfer_encoding = L"Transfer-Encoding: chunked";
   47  static const int no_check_cert_flags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID |
   ..
  253  		sizeof(peerdist));
  254  
  255: 	/* Send Pragma: no-cache header */
  256: 	if (!WinHttpAddRequestHeaders(s->request, pragma_nocache, (ULONG) -1L, WINHTTP_ADDREQ_FLAG_ADD)) {
  257  		giterr_set(GITERR_OS, "Failed to add a header to the request");
  258  		goto on_error;
  ...
  449  			}
  450  
  451: 			buffer = git__malloc(CACHED_POST_BODY_BUF_SIZE);
  452  
  453  			while (len > 0) {
  ...
  455  
  456  				if (!ReadFile(s->post_body, buffer,
  457: 					min(CACHED_POST_BODY_BUF_SIZE, len),
  458  					&bytes_read, NULL) ||
  459  					!bytes_read) {
  ...
  799  	}
  800  
  801: 	if (len > CACHED_POST_BODY_BUF_SIZE) {
  802  		/* Flush, if necessary */
  803  		if (s->chunk_buffer_len > 0) {
  ...
  814  	else {
  815  		/* Append as much to the buffer as we can */
  816: 		int count = min(CACHED_POST_BODY_BUF_SIZE - s->chunk_buffer_len, (int)len);
  817  
  818  		if (!s->chunk_buffer)
  819: 			s->chunk_buffer = git__malloc(CACHED_POST_BODY_BUF_SIZE);
  820  
  821  		memcpy(s->chunk_buffer + s->chunk_buffer_len, buffer, count);
  ...
  825  
  826  		/* Is the buffer full? If so, then flush */
  827: 		if (CACHED_POST_BODY_BUF_SIZE == s->chunk_buffer_len) {
  828  			if (write_chunk(s->request, s->chunk_buffer, s->chunk_buffer_len) < 0)
  829  				return -1;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/tree-cache.c:
    6   */
    7  
    8: #include "tree-cache.h"
    9  
   10: static git_tree_cache *find_child(const git_tree_cache *tree, const char *path)
   11  {
   12  	size_t i, dirlen;
   ..
   30  }
   31  
   32: void git_tree_cache_invalidate_path(git_tree_cache *tree, const char *path)
   33  {
   34  	const char *ptr = path, *end;
   ..
   54  }
   55  
   56: const git_tree_cache *git_tree_cache_get(const git_tree_cache *tree, const char *path)
   57  {
   58  	const char *ptr = path, *end;
   ..
   77  }
   78  
   79: static int read_tree_internal(git_tree_cache **out,
   80: 		const char **buffer_in, const char *buffer_end, git_tree_cache *parent)
   81  {
   82: 	git_tree_cache *tree = NULL;
   83  	const char *name_start, *buffer;
   84  	int count;
   ..
   94  
   95  	name_len = strlen(name_start);
   96: 	tree = git__malloc(sizeof(git_tree_cache) + name_len + 1);
   97  	GITERR_CHECK_ALLOC(tree);
   98  
   99: 	memset(tree, 0x0, sizeof(git_tree_cache));
  100  	tree->parent = parent;
  101  
  ...
  136  		unsigned int i;
  137  
  138: 		tree->children = git__malloc(tree->children_count * sizeof(git_tree_cache *));
  139  		GITERR_CHECK_ALLOC(tree->children);
  140  
  ...
  150  
  151   corrupted:
  152: 	git_tree_cache_free(tree);
  153  	giterr_set(GITERR_INDEX, "Corruped TREE extension in index");
  154  	return -1;
  155  }
  156  
  157: int git_tree_cache_read(git_tree_cache **tree, const char *buffer, size_t buffer_size)
  158  {
  159  	const char *buffer_end = buffer + buffer_size;
  ...
  170  }
  171  
  172: void git_tree_cache_free(git_tree_cache *tree)
  173  {
  174  	unsigned int i;
  ...
  178  
  179  	for (i = 0; i < tree->children_count; ++i)
  180: 		git_tree_cache_free(tree->children[i]);
  181  
  182  	git__free(tree->children);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/tree-cache.h:
    6   */
    7  
    8: #ifndef INCLUDE_tree_cache_h__
    9: #define INCLUDE_tree_cache_h__
   10  
   11  #include "common.h"
   12  #include "git2/oid.h"
   13  
   14: struct git_tree_cache {
   15: 	struct git_tree_cache *parent;
   16: 	struct git_tree_cache **children;
   17  	size_t children_count;
   18  
   ..
   22  };
   23  
   24: typedef struct git_tree_cache git_tree_cache;
   25  
   26: int git_tree_cache_read(git_tree_cache **tree, const char *buffer, size_t buffer_size);
   27: void git_tree_cache_invalidate_path(git_tree_cache *tree, const char *path);
   28: const git_tree_cache *git_tree_cache_get(const git_tree_cache *tree, const char *path);
   29: void git_tree_cache_free(git_tree_cache *tree);
   30  
   31  #endif

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/tree.c:
   12  #include "git2/object.h"
   13  #include "path.h"
   14: #include "tree-cache.h"
   15  #include "index.h"
   16  
   ..
  476  	int error;
  477  	size_t dirname_len = strlen(dirname);
  478: 	const git_tree_cache *cache;
  479  
  480: 	cache = git_tree_cache_get(index->tree, dirname);
  481: 	if (cache != NULL && cache->entries >= 0){
  482: 		git_oid_cpy(oid, &cache->oid);
  483  		return (int)find_next_dir(dirname, index, start);
  484  	}
  ...
  585  	}
  586  
  587: 	/* The tree cache didn't help us; we'll have to write
  588  	 * out a tree. If the index is ignore_case, we must
  589  	 * make it case-sensitive for the duration of the tree-write

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/rugged-0.19.0/vendor/libgit2/src/util.c:
   12  #include "posix.h"
   13  #include "fileops.h"
   14: #include "cache.h"
   15  
   16  #ifdef _MSC_VER
   ..
   95  		break;
   96  
   97: 	case GIT_OPT_SET_CACHE_OBJECT_LIMIT:
   98  		{
   99  			git_otype type = (git_otype)va_arg(ap, int);
  100  			size_t size = va_arg(ap, size_t);
  101: 			error = git_cache_set_max_object_size(type, size);
  102  			break;
  103  		}
  104  
  105: 	case GIT_OPT_SET_CACHE_MAX_SIZE:
  106: 		git_cache__max_storage = va_arg(ap, ssize_t);
  107  		break;
  108  
  109  	case GIT_OPT_ENABLE_CACHING:
  110: 		git_cache__enabled = (va_arg(ap, int) != 0);
  111  		break;
  112  
  113: 	case GIT_OPT_GET_CACHED_MEMORY:
  114: 		*(va_arg(ap, ssize_t *)) = git_cache__current_storage.val;
  115: 		*(va_arg(ap, ssize_t *)) = git_cache__max_storage;
  116  		break;
  117  	}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores.rb:
    2  
    3  module Sass
    4:   # Sass cache stores are in charge of storing cached information,
    5    # especially parse trees for Sass documents.
    6    #
    7:   # User-created importers must inherit from {CacheStores::Base}.
    8:   module CacheStores
    9    end
   10  end
   11  
   12: require 'sass/cache_stores/base'
   13: require 'sass/cache_stores/filesystem'
   14: require 'sass/cache_stores/memory'
   15: require 'sass/cache_stores/chain'
   16  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores/base.rb:
    1  module Sass
    2:   module CacheStores
    3:     # An abstract base class for backends for the Sass cache.
    4      # Any key-value store can act as such a backend;
    5      # it just needs to implement the
    6      # \{#_store} and \{#_retrieve} methods.
    7      #
    8:     # To use a cache store with Sass,
    9:     # use the {file:SASS_REFERENCE.md#cache_store-option `:cache_store` option}.
   10      #
   11      # @abstract
   12      class Base
   13:       # Store cached contents for later retrieval
   14:       # Must be implemented by all CacheStore subclasses
   15        #
   16:       # Note: cache contents contain binary data.
   17        #
   18        # @param key [String] The key to store the contents under
   19        # @param version [String] The current sass version.
   20:       #                Cached contents must not be retrieved across different versions of sass.
   21        # @param sha [String] The sha of the sass source.
   22:       #                Cached contents must not be retrieved if the sha has changed.
   23        # @param contents [String] The contents to store.
   24        def _store(key, version, sha, contents)
   ..
   26        end
   27  
   28:       # Retrieved cached contents.
   29        # Must be implemented by all subclasses.
   30        # 
   31        # Note: if the key exists but the sha or version have changed,
   32:       # then the key may be deleted by the cache store, if it wants to do so.
   33        #
   34        # @param key [String] The key to retrieve
   35        # @param version [String] The current sass version.
   36:       #                Cached contents must not be retrieved across different versions of sass.
   37        # @param sha [String] The sha of the sass source.
   38:       #                Cached contents must not be retrieved if the sha has changed.
   39        # @return [String] The contents that were previously stored.
   40:       # @return [NilClass] when the cache key is not found or the version or sha have changed.
   41        def _retrieve(key, version, sha)
   42          raise "#{self.class} must implement #_retrieve."
   ..
   47        # @param key [String] The key to store it under.
   48        # @param sha [String] The checksum for the contents that are being stored.
   49:       # @param obj [Object] The object to cache.
   50        def store(key, sha, root)
   51          _store(key, Sass::VERSION, sha, Marshal.dump(root))
   52        rescue TypeError, LoadError => e
   53:         Sass::Util.sass_warn "Warning. Error encountered while saving cache #{path_to(key)}: #{e}"
   54          nil
   55        end
   ..
   59        # @param key [String] The key the root element was stored under.
   60        # @param sha [String] The checksum of the root element's content.
   61:       # @return [Object] The cached object.
   62        def retrieve(key, sha)
   63          contents = _retrieve(key, Sass::VERSION, sha)
   64          Marshal.load(contents) if contents
   65        rescue EOFError, TypeError, ArgumentError, LoadError => e
   66:         Sass::Util.sass_warn "Warning. Error encountered while reading cache #{path_to(key)}: #{e}"
   67          nil
   68        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores/chain.rb:
    1  module Sass
    2:   module CacheStores
    3:     # A meta-cache that chains multiple caches together.
    4      # Specifically:
    5      #
    6:     # * All `#store`s are passed to all caches.
    7:     # * `#retrieve`s are passed to each cache until one has a hit.
    8:     # * When one cache has a hit, the value is `#store`d in all earlier caches.
    9      class Chain < Base
   10:       # Create a new cache chaining the given caches.
   11        #
   12:       # @param caches [Array<Sass::CacheStores::Base>] The caches to chain.
   13:       def initialize(*caches)
   14:         @caches = caches
   15        end
   16  
   17        # @see Base#store
   18        def store(key, sha, obj)
   19:         @caches.each {|c| c.store(key, sha, obj)}
   20        end
   21  
   22        # @see Base#retrieve
   23        def retrieve(key, sha)
   24:         @caches.each_with_index do |c, i|
   25            next unless obj = c.retrieve(key, sha)
   26:           @caches[0...i].each {|prev| prev.store(key, sha, obj)}
   27            return obj
   28          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores/filesystem.rb:
    2  
    3  module Sass
    4:   module CacheStores
    5:     # A backend for the Sass cache using the filesystem.
    6      class Filesystem < Base
    7:       # The directory where the cached files will be stored.
    8        #
    9        # @return [String]
   10:       attr_accessor :cache_location
   11  
   12:       # @param cache_location [String] see \{#cache\_location}
   13:       def initialize(cache_location)
   14:         @cache_location = cache_location
   15        end
   16  
   ..
   26          nil
   27        rescue EOFError, TypeError, ArgumentError => e
   28:         Sass::Util.sass_warn "Warning. Error encountered while reading cache #{path_to(key)}: #{e}"
   29        end
   30  
   31        # @see Base#\_store
   32        def _store(key, version, sha, contents)
   33:         # return unless File.writable?(File.dirname(@cache_location))
   34:         # return if File.exists?(@cache_location) && !File.writable?(@cache_location)
   35          compiled_filename = path_to(key)
   36          # return if File.exists?(File.dirname(compiled_filename)) && !File.writable?(File.dirname(compiled_filename))
   ..
   51        #
   52        # @param key [String]
   53:       # @return [String] The path to the cache file.
   54        def path_to(key)
   55          key = key.gsub(/[<>:\\|?*%]/) {|c| "%%%03d" % Sass::Util.ord(c)}
   56:         File.join(cache_location, key)
   57        end
   58      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores/memory.rb:
    1  module Sass
    2:   module CacheStores
    3:     # A backend for the Sass cache using in-process memory.
    4      class Memory < Base
    5        # Since the {Memory} store is stored in the Sass tree's options hash,
    6        # when the options get serialized as part of serializing the tree,
    7:       # you get crazy exponential growth in the size of the cached objects
    8:       # unless you don't dump the cache.
    9        #
   10        # @private
   ..
   20        end
   21  
   22:       # Create a new, empty cache store.
   23        def initialize
   24          @contents = {}
   ..
   39        end
   40        
   41:       # Destructively clear the cache.
   42        def reset!
   43          @contents = {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/cache_stores/null.rb:
    1  module Sass
    2:   module CacheStores
    3      # Doesn't store anything, but records what things it should have stored.
    4      # This doesn't currently have any use except for testing and debugging.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/engine.rb:
    1  require 'set'
    2  require 'digest/sha1'
    3: require 'sass/cache_stores'
    4  require 'sass/tree/node'
    5  require 'sass/tree/root_node'
    .
  155        :style => :nested,
  156        :load_paths => ['.'],
  157:       :cache => true,
  158:       :cache_location => './.sass-cache',
  159        :syntax => :sass,
  160        :filesystem_importer => Sass::Importers::Filesystem
  ...
  178        options[:original_filename] ||= options[:filename]
  179  
  180:       options[:cache_store] ||= Sass::CacheStores::Chain.new(
  181:         Sass::CacheStores::Memory.new, Sass::CacheStores::Filesystem.new(options[:cache_location]))
  182        # Support both, because the docs said one and the other actually worked
  183        # for quite a long time.
  ...
  326  
  327      def _to_tree
  328:       if (@options[:cache] || @options[:read_cache]) &&
  329            @options[:filename] && @options[:importer]
  330          key = sassc_key
  331          sha = Digest::SHA1.hexdigest(@template)
  332  
  333:         if root = @options[:cache_store].retrieve(key, sha)
  334            root.options = @options
  335            return root
  ...
  347  
  348        root.options = @options
  349:       if @options[:cache] && key && sha
  350          begin
  351            old_options = root.options
  352            root.options = {}
  353:           @options[:cache_store].store(key, sha, root)
  354          ensure
  355            root.options = old_options
  ...
  364  
  365      def sassc_key
  366:       @options[:cache_store].key(*@options[:importer].key(@options[:filename], @options))
  367      end
  368  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/exec.rb:
  287            require lib
  288          end
  289:         opts.on('--cache-location PATH', 'The path to put cached Sass files. Defaults to .sass-cache.') do |loc|
  290:           @options[:for_engine][:cache_location] = loc
  291          end
  292:         opts.on('-C', '--no-cache', "Don't cache to sassc files.") do
  293:           @options[:for_engine][:cache] = false
  294          end
  295  
  ...
  504          require 'sass'
  505          @options[:for_tree] = {}
  506:         @options[:for_engine] = {:cache => false, :read_cache => true}
  507        end
  508  
  ...
  574          end
  575  
  576:         opts.on('-C', '--no-cache', "Don't cache to sassc files.") do
  577:           @options[:for_engine][:read_cache] = false
  578          end
  579  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/importers/base.rb:
  102        end
  103  
  104:       # Get the cache key pair for the given Sass URI.
  105        # The URI need not be checked for validity.
  106        #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin.rb:
   83  
   84      # Updates all stylesheets, even those that aren't out-of-date.
   85:     # Ignores the cache.
   86      #
   87      # @param individual_files [Array<(String, String)>]
   ..
   96            :never_update => false,
   97            :always_update => true,
   98:           :cache => false)).update_stylesheets(individual_files)
   99      end
  100  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/compiler.rb:
  237        load_listen!
  238  
  239:       template_paths = template_locations # cache the locations
  240        individual_files_hash = individual_files.inject({}) do |h, files|
  241          parent = File.dirname(files.first)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/configuration.rb:
   16            :always_check       => true,
   17            :full_exception     => true,
   18:           :cache_location     => ".sass-cache"
   19          }.freeze
   20        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/merb.rb:
   19            :template_location => root + '/public/stylesheets/sass',
   20            :css_location      => root + '/public/stylesheets',
   21:           :cache_location    => root + '/tmp/sass-cache',
   22            :always_check      => env != "production",
   23            :quiet             => env != "production",

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/rack.rb:
   11      #
   12      #     Sass::Plugin.options.merge(
   13:     #       :cache_location => './tmp/sass-cache',
   14      #       :never_update => environment != :production,
   15      #       :full_exception => environment != :production)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/rails.rb:
    9          :quiet             => Sass::Util.rails_env != "production",
   10          :full_exception    => Sass::Util.rails_env != "production",
   11:         :cache_location    => Sass::Util.rails_root + '/tmp/sass-cache'
   12        }
   13  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/plugin/staleness_checker.rb:
    5      # The class handles `.s[ca]ss` file staleness checks via their mtime timestamps.
    6      #
    7:     # To speed things up two level of caches are employed:
    8      #
    9:     # * A class-level dependency cache which stores @import paths for each file.
   10:     #   This is a long-lived cache that is reused by every StalenessChecker instance.
   11:     # * Three short-lived instance-level caches, one for file mtimes,
   12      #   one for whether a file is stale during this particular run.
   13      #   and one for the parse tree for a file.
   ..
   22      #   a StalenessChecker instance should be created,
   23      #   and the instance-level \{#stylesheet\_needs\_update?} method should be used.
   24:     #   the caches should make the whole process significantly faster.
   25      #   *WARNING*: It is important not to retain the instance for too long,
   26:     #   as its instance-level caches are never explicitly expired.
   27      class StalenessChecker
   28:       @dependencies_cache = {}
   29:       @dependency_cache_mutex = Mutex.new
   30  
   31        class << self
   32          # TODO: attach this to a compiler instance.
   33          # @private
   34:         attr_accessor :dependencies_cache
   35:         attr_reader :dependency_cache_mutex
   36        end
   37  
   ..
   46          @actively_checking = Set.new
   47  
   48:         # Entries in the following instance-level caches are never explicitly expired.
   49          # Instead they are supposed to automaticaly go out of scope when a series of staleness checks
   50          # (this instance of StalenessChecker was created for) is finished.
   ..
   86        #
   87        # The distinction between this method and the instance-level \{#stylesheet\_needs\_update?}
   88:       # is that the instance method preserves mtime and stale-dependency caches,
   89        # so it's better to use when checking multiple stylesheets at once.
   90        #
   ..
  100        #
  101        # The distinction between this method and the instance-level \{#stylesheet\_modified\_since?}
  102:       # is that the instance method preserves mtime and stale-dependency caches,
  103        # so it's better to use when checking multiple stylesheets at once.
  104        #
  ...
  134              mtime = importer.mtime(uri, @options)
  135              if mtime.nil?
  136:               with_dependency_cache {|cache| cache.delete([uri, importer])}
  137                nil
  138              else
  ...
  144        def dependencies(uri, importer)
  145          stored_mtime, dependencies =
  146:           with_dependency_cache {|cache| Sass::Util.destructure(cache[[uri, importer]])}
  147  
  148          if !stored_mtime || stored_mtime < mtime(uri, importer)
  149            dependencies = compute_dependencies(uri, importer)
  150:           with_dependency_cache do |cache|
  151:             cache[[uri, importer]] = [mtime(uri, importer), dependencies]
  152            end
  153          end
  ...
  185        end
  186  
  187:       # Get access to the global dependency cache in a threadsafe manner.
  188:       # Inside the block, no other thread can access the dependency cache.
  189        #
  190:       # @yieldparam cache [Hash] The hash that is the global dependency cache
  191        # @return The value returned by the block to which this method yields
  192:       def with_dependency_cache
  193:         StalenessChecker.dependency_cache_mutex.synchronize do
  194:           yield StalenessChecker.dependencies_cache
  195          end
  196        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/script/color.rb:
   10    # Once a property is accessed that requires the other representation --
   11    # for example, \{#red} for an HSL color --
   12:   # that component is calculated and cached.
   13    #
   14    # The alpha channel of a color is independent of its RGB or HSL representation.
   15    # It's always stored, as 1 if nothing else is specified.
   16    # If only the alpha channel is modified using \{#with},
   17:   # the cached RGB and HSL values are retained.
   18    class Color < Literal
   19      class << self; include Sass::Util; end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/tree/media_node.rb:
    7    # @see Sass::Tree
    8    class MediaNode < DirectiveNode
    9:     # TODO: parse and cache the query immediately if it has no dynamic elements
   10  
   11      # The media query for this rule, interspersed with {Sass::Script::Node}s

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/lib/sass/tree/rule_node.rb:
   68      end
   69  
   70:     # If we've precached the parsed selector, set the line on it, too.
   71      def line=(line)
   72        @parsed_rules.line = line if @parsed_rules
   ..
   74      end
   75  
   76:     # If we've precached the parsed selector, set the filename on it, too.
   77      def filename=(filename)
   78        @parsed_rules.filename = filename if @parsed_rules

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/test/sass/cache_test.rb:
    4  require 'sass/engine'
    5  
    6: class CacheTest < Test::Unit::TestCase
    7:   @@cache_dir = "tmp/file_cache"
    8  
    9    def setup
   10:     FileUtils.mkdir_p @@cache_dir
   11    end
   12  
   13    def teardown
   14:     FileUtils.rm_rf @@cache_dir
   15      clean_up_sassc
   16    end
   17  
   18:   def test_file_cache_writes_a_file
   19:     file_store = Sass::CacheStores::Filesystem.new(@@cache_dir)
   20      file_store.store("asdf/foo.scssc", "fakesha1", root_node)
   21:     assert File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   22    end
   23  
   24:   def test_file_cache_reads_a_file
   25:     file_store = Sass::CacheStores::Filesystem.new(@@cache_dir)
   26:     assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   27      file_store.store("asdf/foo.scssc", "fakesha1", root_node)
   28:     assert File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   29      assert_kind_of Sass::Tree::RootNode, file_store.retrieve("asdf/foo.scssc", "fakesha1")
   30    end
   31  
   32:   def test_file_cache_miss_returns_nil
   33:     file_store = Sass::CacheStores::Filesystem.new(@@cache_dir)
   34:     assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   35      assert_nil file_store.retrieve("asdf/foo.scssc", "fakesha1")
   36    end
   37  
   38:   def test_sha_change_invalidates_cache_and_cleans_up
   39:     file_store = Sass::CacheStores::Filesystem.new(@@cache_dir)
   40:     assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   41      file_store.store("asdf/foo.scssc", "fakesha1", root_node)
   42:     assert File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   43      assert_nil file_store.retrieve("asdf/foo.scssc", "differentsha1")
   44:     assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   45    end
   46  
   47:   def test_version_change_invalidates_cache_and_cleans_up
   48:     file_store = Sass::CacheStores::Filesystem.new(@@cache_dir)
   49:     assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   50      file_store.store("asdf/foo.scssc", "fakesha1", root_node)
   51:     assert File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   52      real_version = Sass::VERSION
   53      begin
   54        Sass::VERSION.replace("a different version")
   55        assert_nil file_store.retrieve("asdf/foo.scssc", "fakesha1")
   56:       assert !File.exists?("#{@@cache_dir}/asdf/foo.scssc")
   57      ensure
   58        Sass::VERSION.replace(real_version)
   ..
   60    end
   61  
   62:   def test_arbitrary_objects_can_go_into_cache
   63:     cache = Sass::CacheStores::Memory.new
   64      an_object = {:foo => :bar}
   65:     cache.store("an_object", "", an_object)
   66:     assert_equal an_object, cache.retrieve("an_object", "")
   67    end
   68  
   ..
   73    end
   74  
   75:   def test_cache_node_with_unmarshalable_option
   76      engine = Sass::Engine.new("foo {a: b + c}",
   77        :syntax => :scss, :object => Unmarshalable.new, :filename => 'file.scss',

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/test/sass/engine_test.rb:
  754    end
  755  
  756:   def test_no_cache
  757      assert !File.exists?(sassc_path("importee"))
  758      renders_correctly("import", {
  759:         :style => :compact, :cache => false,
  760          :load_paths => [File.dirname(__FILE__) + "/templates"],
  761        })
  ...
 3238        :importer => Sass::Importers::Filesystem.new("."))
 3239      key = engine.send(:sassc_key)
 3240:     File.join(engine.options[:cache_location], key)
 3241    end
 3242  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/test/sass/plugin_test.rb:
   27    @@templates << 'import_charset_1_8' if Sass::Util.ruby1_8?
   28  
   29:   @@cache_store = Sass::CacheStores::Memory.new
   30  
   31    def setup
   ..
  336    ## Regression
  337  
  338:   def test_cached_dependencies_update
  339      FileUtils.mv(template_loc("basic"), template_loc("basic", "more_"))
  340      set_plugin_opts :load_paths => [template_loc(nil, "more_")]
  ...
  348    end
  349  
  350:   def test_cached_relative_import
  351      old_always_update = Sass::Plugin.options[:always_update]
  352      Sass::Plugin.options[:always_update] = true
  ...
  357    end
  358  
  359:   def test_cached_if
  360:     set_plugin_opts :cache_store => Sass::CacheStores::Filesystem.new(tempfile_loc + '/cache')
  361      check_for_updates!
  362      assert_renders_correctly 'if'
  ...
  367    end
  368  
  369:   def test_cached_import_option
  370      set_plugin_opts :custom => {:whatever => "correct"}
  371      check_for_updates!
  372:     assert_renders_correctly "cached_import_option"
  373  
  374:     @@cache_store.reset!
  375      set_plugin_opts :custom => nil, :always_update => false
  376      check_for_updates!
  377:     assert_renders_correctly "cached_import_option"
  378  
  379      set_plugin_opts :custom => {:whatever => "correct"}, :always_update => true
  380      check_for_updates!
  381:     assert_renders_correctly "cached_import_option"
  382    ensure
  383      set_plugin_opts :custom => nil
  ...
  496  
  497    def reset_mtimes
  498:     Sass::Plugin::StalenessChecker.dependencies_cache = {}
  499      atime = Time.now
  500      mtime = Time.now - 5
  ...
  535        :never_update => false,
  536        :full_exception => true,
  537:       :cache_store => @@cache_store
  538      )
  539      Sass::Plugin.options.merge!(overrides)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/test/sass/templates/cached_import_option.scss:
    1: @import "cached_import_option_partial";
    2  
    3  main {value: whatever()}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/test/test_helper.rb:
   32  
   33    def clean_up_sassc
   34:     path = File.dirname(__FILE__) + "/../.sass-cache"
   35      FileUtils.rm_r(path) if File.exist?(path)
   36    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/.gitignore:
    3  Gemfile.lock
    4  pkg/*
    5: .sass-cache
    6  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/lib/sass/rails/railtie.rb:
    8      # Emit scss files during stylesheet generation of scaffold
    9      config.sass.preferred_syntax = :scss
   10:     # Write sass cache files for performance
   11:     config.sass.cache            = true
   12:     # Read sass cache files for performance
   13:     config.sass.read_cache       = true
   14      # Display line comments above each selector as a debugging aid
   15      config.sass.line_comments    = true
   ..
   39        config.app_generators.stylesheet_engine syntax
   40  
   41:       # Set the sass cache location
   42:       config.sass.cache_location   = File.join(Rails.root, "tmp/cache/sass")
   43  
   44        # Establish configuration defaults that are evironmental in nature

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/README.md:
   32      MyProject::Application.configure do
   33        config.sass.line_comments = false
   34:       config.sass.cache = false
   35      end
   36  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/.gitignore:
    3  log/*.log
    4  tmp/
    5: .sass-cache/
    6  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/config/application.rb:
   21  
   22      # Activate observers that should always be running.
   23:     # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
   24  
   25      # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/config/environments/development.rb:
    5    # every request.  This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    config.eager_load = false

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests
    5:   config.cache_classes = true
    6  
    7    config.eager_load = true
    .
   33    # config.logger = SyslogLogger.new
   34  
   35:   # Use a different cache store in production
   36:   # config.cache_store = :mem_cache_store
   37  
   38    # Enable serving of images, stylesheets, and JavaScripts from an asset server

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs.  Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10:   # Configure static asset server for tests with Cache-Control for performance
   11    config.serve_static_assets = true
   12:   config.static_cache_control = "public, max-age=3600"
   13  
   14    config.eager_load = false

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/alternate_config_project/README:
  185    |   `-- unit
  186    |-- tmp
  187:   |   |-- cache
  188    |   |-- pids
  189    |   |-- sessions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/engine_project/.gitignore:
    6  test/dummy/log/*.log
    7  test/dummy/tmp/
    8: test/dummy/.sass-cache
    9  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/engine_project/test/dummy/config/environments/development.rb:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Do not eager load code on boot.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/engine_project/test/dummy/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests.
    5:   config.cache_classes = true
    6  
    7    # Eager load code on boot. This eager loads most of Rails and
    .
   15    config.action_controller.perform_caching = true
   16  
   17:   # Enable Rack::Cache to put a simple HTTP cache in front of your application
   18:   # Add `rack-cache` to your Gemfile before enabling this.
   19    # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
   20:   # config.action_dispatch.rack_cache = true
   21  
   22    # Disable Rails's static asset server (Apache or nginx will already do this).
   ..
   52    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   53  
   54:   # Use a different cache store in production.
   55:   # config.cache_store = :mem_cache_store
   56  
   57    # Enable serving of images, stylesheets, and JavaScripts from an asset server.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/engine_project/test/dummy/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Do not eager load code on boot. This avoids loading your whole application
   ..
   13    config.eager_load = false
   14  
   15:   # Configure static asset server for tests with Cache-Control for performance.
   16    config.serve_static_assets = true
   17:   config.static_cache_control = "public, max-age=3600"
   18  
   19    # Show full error reports and disable caching.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/engine_project/test/dummy/README.rdoc:
   18  * How to run the test suite
   19  
   20: * Services (job queues, cache servers, search engines, etc.)
   21  
   22  * Deployment instructions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/.gitignore:
    3  log/*.log
    4  tmp/
    5: .sass-cache/
    6  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/config/application.rb:
   21  
   22      # Activate observers that should always be running.
   23:     # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
   24  
   25      # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/config/environments/development.rb:
    5    # every request.  This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests
    5:   config.cache_classes = true
    6  
    7    # Full error reports are disabled and caching is turned on
    .
   28    # config.logger = SyslogLogger.new
   29  
   30:   # Use a different cache store in production
   31:   # config.cache_store = :mem_cache_store
   32  
   33    # Enable serving of images, stylesheets, and JavaScripts from an asset server

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs.  Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10:   # Configure static asset server for tests with Cache-Control for performance
   11    config.serve_static_assets = true
   12:   config.static_cache_control = "public, max-age=3600"
   13  
   14    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/sass_project/README:
  185    |   `-- unit
  186    |-- tmp
  187:   |   |-- cache
  188    |   |-- pids
  189    |   |-- sessions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/.gitignore:
    3  log/*.log
    4  tmp/
    5: .sass-cache/
    6  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/config/application.rb:
   21  
   22      # Activate observers that should always be running.
   23:     # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
   24  
   25      # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/config/environments/development.rb:
    5    # every request.  This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    config.eager_load = false

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests
    5:   config.cache_classes = true
    6  
    7    config.eager_load = true
    .
   30    # config.logger = SyslogLogger.new
   31  
   32:   # Use a different cache store in production
   33:   # config.cache_store = :mem_cache_store
   34  
   35    # Enable serving of images, stylesheets, and JavaScripts from an asset server

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs.  Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    config.eager_load = false
   11  
   12:   # Configure static asset server for tests with Cache-Control for performance
   13    config.serve_static_assets = true
   14:   config.static_cache_control = "public, max-age=3600"
   15  
   16    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-rails-4.0.1/test/fixtures/scss_project/README:
  185    |   `-- unit
  186    |-- tmp
  187:   |   |-- cache
  188    |   |-- pids
  189    |   |-- sessions

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/rdoc/generator/template/rails/resources/js/jquery-1.3.2.min.js:
   10   * Revision: 6246
   11   */
   12: (function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=/^[^<]*(<(.|\s)+>)[^>]*$|^#([\w-]+)$/,f=/^.[^:#\[\.,]*$/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(/ jQuery\d+="(?:\d+|null)"/g,"").replace(/^\s*/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(/\r/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&/radio|checkbox/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(/ jQuery\d+="(?:\d+|null)"/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=/z-?index|font-?weight|opacity|zoom|line-?height/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&/\S/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(/\s+/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(/\s+/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(/\s+/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(/float/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(/float/i)){F="float"}F=F.replace(/([A-Z])/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(/\-(\w)/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!/^\d+(px)?$/i.test(L)&&/^\d/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=/^<(\w+)\s*\/?>$/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(/(<(\w+)[^>]*?)\/>/g,function(U,V,T){return T.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i)?U:V+"></"+T+">"});var O=S.replace(/^\s+/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","</select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","</fieldset>"]||O.match(/^<(thead|tbody|tfoot|colg|cap)/)&&[1,"<table>","</table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","</tbody></table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||!O.indexOf("<col")&&[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]||!o.support.htmlSerialize&&[1,"div<div>","</div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=/<tbody/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&/^\s/.test(S)){L.insertBefore(K.createTextNode(S.match(/^\s*/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=/href|src|style/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(/(button|input|object|select|textarea)/i)?0:J.nodeName.match(/^(a|area)$/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(/alpha\([^)]*\)/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(/opacity=([^)]*)/)[1])/100)+"":""}G=G.replace(/-([a-z])/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(/^\s+|\s+$/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/)||[0,"0"])[1],safari:/webkit/.test(C),opera:/opera/.test(C),msie:/msie/.test(C)&&!/opera/.test(C),mozilla:/mozilla/.test(C)&&!/(compatible|webkit)/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){var I=(K>0?this.clone(true):this).get();o.fn[F].apply(o(L[K]),I);J=J.concat(I)}return this.pushStack(J,E,G)}});o.each({removeAttr:function(E){o.attr(this,E,"");if(this.nodeType==1){this.removeAttribute(E)}},addClass:function(E){o.className.add(this,E)},removeClass:function(E){o.className.remove(this,E)},toggleClass:function(F,E){if(typeof E!=="boolean"){E=!o.className.has(this,F)}o.className[E?"add":"remove"](this,F)},remove:function(E){if(!E||o.filter(E,[this]).length){o("*",this).add([this]).each(function(){o.event.remove(this);o.removeData(this)});if(this.parentNode){this.parentNode.removeChild(this)}}},empty:function(){o(this).children().remove();while(this.firstChild){this.removeChild(this.firstChild)}}},function(E,F){o.fn[E]=function(){return this.each(F,arguments)}});function j(E,F){return E[0]&&parseInt(o.curCSS(E[0],F,true),10)||0}var h="jQuery"+e(),v=0,A={};o.extend({cache:{},data:function(F,E,G){F=F==l?A:F;var H=F[h];if(!H){H=F[h]=++v}if(E&&!o.cache[H]){o.cache[H]={}}if(G!==g){o.cache[H][E]=G}return E?o.cache[H][E]:H},removeData:function(F,E){F=F==l?A:F;var H=F[h];if(E){if(o.cache[H]){delete o.cache[H][E];E="";for(E in o.cache[H]){break}if(!E){o.removeData(F)}}}else{try{delete F[h]}catch(G){if(F.removeAttribute){F.removeAttribute(h)}}delete o.cache[H]}},queue:function(F,E,H){if(F){E=(E||"fx")+"queue";var G=o.data(F,E);if(!G||o.isArray(H)){G=o.data(F,E,o.makeArray(H))}else{if(H){G.push(H)}}}return G},dequeue:function(H,G){var E=o.queue(H,G),F=E.shift();if(!G||G==="fx"){F=E[0]}if(F!==g){F.call(H)}}});o.fn.extend({data:function(E,G){var H=E.split(".");H[1]=H[1]?"."+H[1]:"";if(G===g){var F=this.triggerHandler("getData"+H[1]+"!",[H[0]]);if(F===g&&this.length){F=o.data(this[0],E)}return F===g&&H[1]?this.data(H[0]):F}else{return this.trigger("setData"+H[1]+"!",[H[0],G]).each(function(){o.data(this,E,G)})}},removeData:function(E){return this.each(function(){o.removeData(this,E)})},queue:function(E,F){if(typeof E!=="string"){F=E;E="fx"}if(F===g){return o.queue(this[0],E)}return this.each(function(){var G=o.queue(this,E,F);if(E=="fx"&&G.length==1){G[0].call(this)}})},dequeue:function(E){return this.each(function(){o.dequeue(this,E)})}});
   13  /*
   14   * Sizzle CSS Selector Engine - v0.9.3
   ..
   17   *  More information: http://sizzlejs.com/
   18   */
   19: (function(){var R=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?/g,L=0,H=Object.prototype.toString;var F=function(Y,U,ab,ac){ab=ab||[];U=U||document;if(U.nodeType!==1&&U.nodeType!==9){return[]}if(!Y||typeof Y!=="string"){return ab}var Z=[],W,af,ai,T,ad,V,X=true;R.lastIndex=0;while((W=R.exec(Y))!==null){Z.push(W[1]);if(W[2]){V=RegExp.rightContext;break}}if(Z.length>1&&M.exec(Y)){if(Z.length===2&&I.relative[Z[0]]){af=J(Z[0]+Z[1],U)}else{af=I.relative[Z[0]]?[U]:F(Z.shift(),U);while(Z.length){Y=Z.shift();if(I.relative[Y]){Y+=Z.shift()}af=J(Y,af)}}}else{var ae=ac?{expr:Z.pop(),set:E(ac)}:F.find(Z.pop(),Z.length===1&&U.parentNode?U.parentNode:U,Q(U));af=F.filter(ae.expr,ae.set);if(Z.length>0){ai=E(af)}else{X=false}while(Z.length){var ah=Z.pop(),ag=ah;if(!I.relative[ah]){ah=""}else{ag=Z.pop()}if(ag==null){ag=U}I.relative[ah](ai,ag,Q(U))}}if(!ai){ai=af}if(!ai){throw"Syntax error, unrecognized expression: "+(ah||Y)}if(H.call(ai)==="[object Array]"){if(!X){ab.push.apply(ab,ai)}else{if(U.nodeType===1){for(var aa=0;ai[aa]!=null;aa++){if(ai[aa]&&(ai[aa]===true||ai[aa].nodeType===1&&K(U,ai[aa]))){ab.push(af[aa])}}}else{for(var aa=0;ai[aa]!=null;aa++){if(ai[aa]&&ai[aa].nodeType===1){ab.push(af[aa])}}}}}else{E(ai,ab)}if(V){F(V,U,ab,ac);if(G){hasDuplicate=false;ab.sort(G);if(hasDuplicate){for(var aa=1;aa<ab.length;aa++){if(ab[aa]===ab[aa-1]){ab.splice(aa--,1)}}}}}return ab};F.matches=function(T,U){return F(T,null,null,U)};F.find=function(aa,T,ab){var Z,X;if(!aa){return[]}for(var W=0,V=I.order.length;W<V;W++){var Y=I.order[W],X;if((X=I.match[Y].exec(aa))){var U=RegExp.leftContext;if(U.substr(U.length-1)!=="\\"){X[1]=(X[1]||"").replace(/\\/g,"");Z=I.find[Y](X,T,ab);if(Z!=null){aa=aa.replace(I.match[Y],"");break}}}}if(!Z){Z=T.getElementsByTagName("*")}return{set:Z,expr:aa}};F.filter=function(ad,ac,ag,W){var V=ad,ai=[],aa=ac,Y,T,Z=ac&&ac[0]&&Q(ac[0]);while(ad&&ac.length){for(var ab in I.filter){if((Y=I.match[ab].exec(ad))!=null){var U=I.filter[ab],ah,af;T=false;if(aa==ai){ai=[]}if(I.preFilter[ab]){Y=I.preFilter[ab](Y,aa,ag,ai,W,Z);if(!Y){T=ah=true}else{if(Y===true){continue}}}if(Y){for(var X=0;(af=aa[X])!=null;X++){if(af){ah=U(af,Y,X,aa);var ae=W^!!ah;if(ag&&ah!=null){if(ae){T=true}else{aa[X]=false}}else{if(ae){ai.push(af);T=true}}}}}if(ah!==g){if(!ag){aa=ai}ad=ad.replace(I.match[ab],"");if(!T){return[]}break}}}if(ad==V){if(T==null){throw"Syntax error, unrecognized expression: "+ad}else{break}}V=ad}return aa};var I=F.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF_-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF_-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*_-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF_-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(T){return T.getAttribute("href")}},relative:{"+":function(aa,T,Z){var X=typeof T==="string",ab=X&&!/\W/.test(T),Y=X&&!ab;if(ab&&!Z){T=T.toUpperCase()}for(var W=0,V=aa.length,U;W<V;W++){if((U=aa[W])){while((U=U.previousSibling)&&U.nodeType!==1){}aa[W]=Y||U&&U.nodeName===T?U||false:U===T}}if(Y){F.filter(T,aa,true)}},">":function(Z,U,aa){var X=typeof U==="string";if(X&&!/\W/.test(U)){U=aa?U:U.toUpperCase();for(var V=0,T=Z.length;V<T;V++){var Y=Z[V];if(Y){var W=Y.parentNode;Z[V]=W.nodeName===U?W:false}}}else{for(var V=0,T=Z.length;V<T;V++){var Y=Z[V];if(Y){Z[V]=X?Y.parentNode:Y.parentNode===U}}if(X){F.filter(U,Z,true)}}},"":function(W,U,Y){var V=L++,T=S;if(!U.match(/\W/)){var X=U=Y?U:U.toUpperCase();T=P}T("parentNode",U,V,W,X,Y)},"~":function(W,U,Y){var V=L++,T=S;if(typeof U==="string"&&!U.match(/\W/)){var X=U=Y?U:U.toUpperCase();T=P}T("previousSibling",U,V,W,X,Y)}},find:{ID:function(U,V,W){if(typeof V.getElementById!=="undefined"&&!W){var T=V.getElementById(U[1]);return T?[T]:[]}},NAME:function(V,Y,Z){if(typeof Y.getElementsByName!=="undefined"){var U=[],X=Y.getElementsByName(V[1]);for(var W=0,T=X.length;W<T;W++){if(X[W].getAttribute("name")===V[1]){U.push(X[W])}}return U.length===0?null:U}},TAG:function(T,U){return U.getElementsByTagName(T[1])}},preFilter:{CLASS:function(W,U,V,T,Z,aa){W=" "+W[1].replace(/\\/g,"")+" ";if(aa){return W}for(var X=0,Y;(Y=U[X])!=null;X++){if(Y){if(Z^(Y.className&&(" "+Y.className+" ").indexOf(W)>=0)){if(!V){T.push(Y)}}else{if(V){U[X]=false}}}}return false},ID:function(T){return T[1].replace(/\\/g,"")},TAG:function(U,T){for(var V=0;T[V]===false;V++){}return T[V]&&Q(T[V])?U[1]:U[1].toUpperCase()},CHILD:function(T){if(T[1]=="nth"){var U=/(-?)(\d*)n((?:\+|-)?\d*)/.exec(T[2]=="even"&&"2n"||T[2]=="odd"&&"2n+1"||!/\D/.test(T[2])&&"0n+"+T[2]||T[2]);T[2]=(U[1]+(U[2]||1))-0;T[3]=U[3]-0}T[0]=L++;return T},ATTR:function(X,U,V,T,Y,Z){var W=X[1].replace(/\\/g,"");if(!Z&&I.attrMap[W]){X[1]=I.attrMap[W]}if(X[2]==="~="){X[4]=" "+X[4]+" "}return X},PSEUDO:function(X,U,V,T,Y){if(X[1]==="not"){if(X[3].match(R).length>1||/^\w/.test(X[3])){X[3]=F(X[3],null,null,U)}else{var W=F.filter(X[3],U,V,true^Y);if(!V){T.push.apply(T,W)}return false}}else{if(I.match.POS.test(X[0])||I.match.CHILD.test(X[0])){return true}}return X},POS:function(T){T.unshift(true);return T}},filters:{enabled:function(T){return T.disabled===false&&T.type!=="hidden"},disabled:function(T){return T.disabled===true},checked:function(T){return T.checked===true},selected:function(T){T.parentNode.selectedIndex;return T.selected===true},parent:function(T){return !!T.firstChild},empty:function(T){return !T.firstChild},has:function(V,U,T){return !!F(T[3],V).length},header:function(T){return/h\d/i.test(T.nodeName)},text:function(T){return"text"===T.type},radio:function(T){return"radio"===T.type},checkbox:function(T){return"checkbox"===T.type},file:function(T){return"file"===T.type},password:function(T){return"password"===T.type},submit:function(T){return"submit"===T.type},image:function(T){return"image"===T.type},reset:function(T){return"reset"===T.type},button:function(T){return"button"===T.type||T.nodeName.toUpperCase()==="BUTTON"},input:function(T){return/input|select|textarea|button/i.test(T.nodeName)}},setFilters:{first:function(U,T){return T===0},last:function(V,U,T,W){return U===W.length-1},even:function(U,T){return T%2===0},odd:function(U,T){return T%2===1},lt:function(V,U,T){return U<T[3]-0},gt:function(V,U,T){return U>T[3]-0},nth:function(V,U,T){return T[3]-0==U},eq:function(V,U,T){return T[3]-0==U}},filter:{PSEUDO:function(Z,V,W,aa){var U=V[1],X=I.filters[U];if(X){return X(Z,W,V,aa)}else{if(U==="contains"){return(Z.textContent||Z.innerText||"").indexOf(V[3])>=0}else{if(U==="not"){var Y=V[3];for(var W=0,T=Y.length;W<T;W++){if(Y[W]===Z){return false}}return true}}}},CHILD:function(T,W){var Z=W[1],U=T;switch(Z){case"only":case"first":while(U=U.previousSibling){if(U.nodeType===1){return false}}if(Z=="first"){return true}U=T;case"last":while(U=U.nextSibling){if(U.nodeType===1){return false}}return true;case"nth":var V=W[2],ac=W[3];if(V==1&&ac==0){return true}var Y=W[0],ab=T.parentNode;if(ab&&(ab.sizcache!==Y||!T.nodeIndex)){var X=0;for(U=ab.firstChild;U;U=U.nextSibling){if(U.nodeType===1){U.nodeIndex=++X}}ab.sizcache=Y}var aa=T.nodeIndex-ac;if(V==0){return aa==0}else{return(aa%V==0&&aa/V>=0)}}},ID:function(U,T){return U.nodeType===1&&U.getAttribute("id")===T},TAG:function(U,T){return(T==="*"&&U.nodeType===1)||U.nodeName===T},CLASS:function(U,T){return(" "+(U.className||U.getAttribute("class"))+" ").indexOf(T)>-1},ATTR:function(Y,W){var V=W[1],T=I.attrHandle[V]?I.attrHandle[V](Y):Y[V]!=null?Y[V]:Y.getAttribute(V),Z=T+"",X=W[2],U=W[4];return T==null?X==="!=":X==="="?Z===U:X==="*="?Z.indexOf(U)>=0:X==="~="?(" "+Z+" ").indexOf(U)>=0:!U?Z&&T!==false:X==="!="?Z!=U:X==="^="?Z.indexOf(U)===0:X==="$="?Z.substr(Z.length-U.length)===U:X==="|="?Z===U||Z.substr(0,U.length+1)===U+"-":false},POS:function(X,U,V,Y){var T=U[2],W=I.setFilters[T];if(W){return W(X,V,U,Y)}}}};var M=I.match.POS;for(var O in I.match){I.match[O]=RegExp(I.match[O].source+/(?![^\[]*\])(?![^\(]*\))/.source)}var E=function(U,T){U=Array.prototype.slice.call(U);if(T){T.push.apply(T,U);return T}return U};try{Array.prototype.slice.call(document.documentElement.childNodes)}catch(N){E=function(X,W){var U=W||[];if(H.call(X)==="[object Array]"){Array.prototype.push.apply(U,X)}else{if(typeof X.length==="number"){for(var V=0,T=X.length;V<T;V++){U.push(X[V])}}else{for(var V=0;X[V];V++){U.push(X[V])}}}return U}}var G;if(document.documentElement.compareDocumentPosition){G=function(U,T){var V=U.compareDocumentPosition(T)&4?-1:U===T?0:1;if(V===0){hasDuplicate=true}return V}}else{if("sourceIndex" in document.documentElement){G=function(U,T){var V=U.sourceIndex-T.sourceIndex;if(V===0){hasDuplicate=true}return V}}else{if(document.createRange){G=function(W,U){var V=W.ownerDocument.createRange(),T=U.ownerDocument.createRange();V.selectNode(W);V.collapse(true);T.selectNode(U);T.collapse(true);var X=V.compareBoundaryPoints(Range.START_TO_END,T);if(X===0){hasDuplicate=true}return X}}}}(function(){var U=document.createElement("form"),V="script"+(new Date).getTime();U.innerHTML="<input name='"+V+"'/>";var T=document.documentElement;T.insertBefore(U,T.firstChild);if(!!document.getElementById(V)){I.find.ID=function(X,Y,Z){if(typeof Y.getElementById!=="undefined"&&!Z){var W=Y.getElementById(X[1]);return W?W.id===X[1]||typeof W.getAttributeNode!=="undefined"&&W.getAttributeNode("id").nodeValue===X[1]?[W]:g:[]}};I.filter.ID=function(Y,W){var X=typeof Y.getAttributeNode!=="undefined"&&Y.getAttributeNode("id");return Y.nodeType===1&&X&&X.nodeValue===W}}T.removeChild(U)})();(function(){var T=document.createElement("div");T.appendChild(document.createComment(""));if(T.getElementsByTagName("*").length>0){I.find.TAG=function(U,Y){var X=Y.getElementsByTagName(U[1]);if(U[1]==="*"){var W=[];for(var V=0;X[V];V++){if(X[V].nodeType===1){W.push(X[V])}}X=W}return X}}T.innerHTML="<a href='#'></a>";if(T.firstChild&&typeof T.firstChild.getAttribute!=="undefined"&&T.firstChild.getAttribute("href")!=="#"){I.attrHandle.href=function(U){return U.getAttribute("href",2)}}})();if(document.querySelectorAll){(function(){var T=F,U=document.createElement("div");U.innerHTML="<p class='TEST'></p>";if(U.querySelectorAll&&U.querySelectorAll(".TEST").length===0){return}F=function(Y,X,V,W){X=X||document;if(!W&&X.nodeType===9&&!Q(X)){try{return E(X.querySelectorAll(Y),V)}catch(Z){}}return T(Y,X,V,W)};F.find=T.find;F.filter=T.filter;F.selectors=T.selectors;F.matches=T.matches})()}if(document.getElementsByClassName&&document.documentElement.getElementsByClassName){(function(){var T=document.createElement("div");T.innerHTML="<div class='test e'></div><div class='test'></div>";if(T.getElementsByClassName("e").length===0){return}T.lastChild.className="e";if(T.getElementsByClassName("e").length===1){return}I.order.splice(1,0,"CLASS");I.find.CLASS=function(U,V,W){if(typeof V.getElementsByClassName!=="undefined"&&!W){return V.getElementsByClassName(U[1])}}})()}function P(U,Z,Y,ad,aa,ac){var ab=U=="previousSibling"&&!ac;for(var W=0,V=ad.length;W<V;W++){var T=ad[W];if(T){if(ab&&T.nodeType===1){T.sizcache=Y;T.sizset=W}T=T[U];var X=false;while(T){if(T.sizcache===Y){X=ad[T.sizset];break}if(T.nodeType===1&&!ac){T.sizcache=Y;T.sizset=W}if(T.nodeName===Z){X=T;break}T=T[U]}ad[W]=X}}}function S(U,Z,Y,ad,aa,ac){var ab=U=="previousSibling"&&!ac;for(var W=0,V=ad.length;W<V;W++){var T=ad[W];if(T){if(ab&&T.nodeType===1){T.sizcache=Y;T.sizset=W}T=T[U];var X=false;while(T){if(T.sizcache===Y){X=ad[T.sizset];break}if(T.nodeType===1){if(!ac){T.sizcache=Y;T.sizset=W}if(typeof Z!=="string"){if(T===Z){X=true;break}}else{if(F.filter(Z,[T]).length>0){X=T;break}}}T=T[U]}ad[W]=X}}}var K=document.compareDocumentPosition?function(U,T){return U.compareDocumentPosition(T)&16}:function(U,T){return U!==T&&(U.contains?U.contains(T):true)};var Q=function(T){return T.nodeType===9&&T.documentElement.nodeName!=="HTML"||!!T.ownerDocument&&Q(T.ownerDocument)};var J=function(T,aa){var W=[],X="",Y,V=aa.nodeType?[aa]:aa;while((Y=I.match.PSEUDO.exec(T))){X+=Y[0];T=T.replace(I.match.PSEUDO,"")}T=I.relative[T]?T+"*":T;for(var Z=0,U=V.length;Z<U;Z++){F(T,V[Z],W)}return F.filter(X,W)};o.find=F;o.filter=F.filter;o.expr=F.selectors;o.expr[":"]=o.expr.filters;F.selectors.filters.hidden=function(T){return T.offsetWidth===0||T.offsetHeight===0};F.selectors.filters.visible=function(T){return T.offsetWidth>0||T.offsetHeight>0};F.selectors.filters.animated=function(T){return o.grep(o.timers,function(U){return T===U.elem}).length};o.multiFilter=function(V,T,U){if(U){V=":not("+V+")"}return F.matches(V,T)};o.dir=function(V,U){var T=[],W=V[U];while(W&&W!=document){if(W.nodeType==1){T.push(W)}W=W[U]}return T};o.nth=function(X,T,V,W){T=T||1;var U=0;for(;X;X=X[V]){if(X.nodeType==1&&++U==T){break}}return X};o.sibling=function(V,U){var T=[];for(;V;V=V.nextSibling){if(V.nodeType==1&&V!=U){T.push(V)}}return T};return;l.Sizzle=F})();o.event={add:function(I,F,H,K){if(I.nodeType==3||I.nodeType==8){return}if(I.setInterval&&I!=l){I=l}if(!H.guid){H.guid=this.guid++}if(K!==g){var G=H;H=this.proxy(G);H.data=K}var E=o.data(I,"events")||o.data(I,"events",{}),J=o.data(I,"handle")||o.data(I,"handle",function(){return typeof o!=="undefined"&&!o.event.triggered?o.event.handle.apply(arguments.callee.elem,arguments):g});J.elem=I;o.each(F.split(/\s+/),function(M,N){var O=N.split(".");N=O.shift();H.type=O.slice().sort().join(".");var L=E[N];if(o.event.specialAll[N]){o.event.specialAll[N].setup.call(I,K,O)}if(!L){L=E[N]={};if(!o.event.special[N]||o.event.special[N].setup.call(I,K,O)===false){if(I.addEventListener){I.addEventListener(N,J,false)}else{if(I.attachEvent){I.attachEvent("on"+N,J)}}}}L[H.guid]=H;o.event.global[N]=true});I=null},guid:1,global:{},remove:function(K,H,J){if(K.nodeType==3||K.nodeType==8){return}var G=o.data(K,"events"),F,E;if(G){if(H===g||(typeof H==="string"&&H.charAt(0)==".")){for(var I in G){this.remove(K,I+(H||""))}}else{if(H.type){J=H.handler;H=H.type}o.each(H.split(/\s+/),function(M,O){var Q=O.split(".");O=Q.shift();var N=RegExp("(^|\\.)"+Q.slice().sort().join(".*\\.")+"(\\.|$)");if(G[O]){if(J){delete G[O][J.guid]}else{for(var P in G[O]){if(N.test(G[O][P].type)){delete G[O][P]}}}if(o.event.specialAll[O]){o.event.specialAll[O].teardown.call(K,Q)}for(F in G[O]){break}if(!F){if(!o.event.special[O]||o.event.special[O].teardown.call(K,Q)===false){if(K.removeEventListener){K.removeEventListener(O,o.data(K,"handle"),false)}else{if(K.detachEvent){K.detachEvent("on"+O,o.data(K,"handle"))}}}F=null;delete G[O]}}})}for(F in G){break}if(!F){var L=o.data(K,"handle");if(L){L.elem=null}o.removeData(K,"events");o.removeData(K,"handle")}}},trigger:function(I,K,H,E){var G=I.type||I;if(!E){I=typeof I==="object"?I[h]?I:o.extend(o.Event(G),I):o.Event(G);if(G.indexOf("!")>=0){I.type=G=G.slice(0,-1);I.exclusive=true}if(!H){I.stopPropagation();if(this.global[G]){o.each(o.cache,function(){if(this.events&&this.events[G]){o.event.trigger(I,K,this.handle.elem)}})}}if(!H||H.nodeType==3||H.nodeType==8){return g}I.result=g;I.target=H;K=o.makeArray(K);K.unshift(I)}I.currentTarget=H;var J=o.data(H,"handle");if(J){J.apply(H,K)}if((!H[G]||(o.nodeName(H,"a")&&G=="click"))&&H["on"+G]&&H["on"+G].apply(H,K)===false){I.result=false}if(!E&&H[G]&&!I.isDefaultPrevented()&&!(o.nodeName(H,"a")&&G=="click")){this.triggered=true;try{H[G]()}catch(L){}}this.triggered=false;if(!I.isPropagationStopped()){var F=H.parentNode||H.ownerDocument;if(F){o.event.trigger(I,K,F,true)}}},handle:function(K){var J,E;K=arguments[0]=o.event.fix(K||l.event);K.currentTarget=this;var L=K.type.split(".");K.type=L.shift();J=!L.length&&!K.exclusive;var I=RegExp("(^|\\.)"+L.slice().sort().join(".*\\.")+"(\\.|$)");E=(o.data(this,"events")||{})[K.type];for(var G in E){var H=E[G];if(J||I.test(H.type)){K.handler=H;K.data=H.data;var F=H.apply(this,arguments);if(F!==g){K.result=F;if(F===false){K.preventDefault();K.stopPropagation()}}if(K.isImmediatePropagationStopped()){break}}}},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(H){if(H[h]){return H}var F=H;H=o.Event(F);for(var G=this.props.length,J;G;){J=this.props[--G];H[J]=F[J]}if(!H.target){H.target=H.srcElement||document}if(H.target.nodeType==3){H.target=H.target.parentNode}if(!H.relatedTarget&&H.fromElement){H.relatedTarget=H.fromElement==H.target?H.toElement:H.fromElement}if(H.pageX==null&&H.clientX!=null){var I=document.documentElement,E=document.body;H.pageX=H.clientX+(I&&I.scrollLeft||E&&E.scrollLeft||0)-(I.clientLeft||0);H.pageY=H.clientY+(I&&I.scrollTop||E&&E.scrollTop||0)-(I.clientTop||0)}if(!H.which&&((H.charCode||H.charCode===0)?H.charCode:H.keyCode)){H.which=H.charCode||H.keyCode}if(!H.metaKey&&H.ctrlKey){H.metaKey=H.ctrlKey}if(!H.which&&H.button){H.which=(H.button&1?1:(H.button&2?3:(H.button&4?2:0)))}return H},proxy:function(F,E){E=E||function(){return F.apply(this,arguments)};E.guid=F.guid=F.guid||E.guid||this.guid++;return E},special:{ready:{setup:B,teardown:function(){}}},specialAll:{live:{setup:function(E,F){o.event.add(this,F[0],c)},teardown:function(G){if(G.length){var E=0,F=RegExp("(^|\\.)"+G[0]+"(\\.|$)");o.each((o.data(this,"events").live||{}),function(){if(F.test(this.type)){E++}});if(E<1){o.event.remove(this,G[0],c)}}}}}};o.Event=function(E){if(!this.preventDefault){return new o.Event(E)}if(E&&E.type){this.originalEvent=E;this.type=E.type}else{this.type=E}this.timeStamp=e();this[h]=true};function k(){return false}function u(){return true}o.Event.prototype={preventDefault:function(){this.isDefaultPrevented=u;var E=this.originalEvent;if(!E){return}if(E.preventDefault){E.preventDefault()}E.returnValue=false},stopPropagation:function(){this.isPropagationStopped=u;var E=this.originalEvent;if(!E){return}if(E.stopPropagation){E.stopPropagation()}E.cancelBubble=true},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=u;this.stopPropagation()},isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k};var a=function(F){var E=F.relatedTarget;while(E&&E!=this){try{E=E.parentNode}catch(G){E=this}}if(E!=this){F.type=F.data;o.event.handle.apply(this,arguments)}};o.each({mouseover:"mouseenter",mouseout:"mouseleave"},function(F,E){o.event.special[E]={setup:function(){o.event.add(this,F,a,E)},teardown:function(){o.event.remove(this,F,a)}}});o.fn.extend({bind:function(F,G,E){return F=="unload"?this.one(F,G,E):this.each(function(){o.event.add(this,F,E||G,E&&G)})},one:function(G,H,F){var E=o.event.proxy(F||H,function(I){o(this).unbind(I,E);return(F||H).apply(this,arguments)});return this.each(function(){o.event.add(this,G,E,F&&H)})},unbind:function(F,E){return this.each(function(){o.event.remove(this,F,E)})},trigger:function(E,F){return this.each(function(){o.event.trigger(E,F,this)})},triggerHandler:function(E,G){if(this[0]){var F=o.Event(E);F.preventDefault();F.stopPropagation();o.event.trigger(F,G,this[0]);return F.result}},toggle:function(G){var E=arguments,F=1;while(F<E.length){o.event.proxy(G,E[F++])}return this.click(o.event.proxy(G,function(H){this.lastToggle=(this.lastToggle||0)%F;H.preventDefault();return E[this.lastToggle++].apply(this,arguments)||false}))},hover:function(E,F){return this.mouseenter(E).mouseleave(F)},ready:function(E){B();if(o.isReady){E.call(document,o)}else{o.readyList.push(E)}return this},live:function(G,F){var E=o.event.proxy(F);E.guid+=this.selector+G;o(document).bind(i(G,this.selector),this.selector,E);return this},die:function(F,E){o(document).unbind(i(F,this.selector),E?{guid:E.guid+this.selector+F}:null);return this}});function c(H){var E=RegExp("(^|\\.)"+H.type+"(\\.|$)"),G=true,F=[];o.each(o.data(this,"events").live||[],function(I,J){if(E.test(J.type)){var K=o(H.target).closest(J.data)[0];if(K){F.push({elem:K,fn:J})}}});F.sort(function(J,I){return o.data(J.elem,"closest")-o.data(I.elem,"closest")});o.each(F,function(){if(this.fn.call(this.elem,H,this.fn.data)===false){return(G=false)}});return G}function i(F,E){return["live",F,E.replace(/\./g,"`").replace(/ /g,"|")].join(".")}o.extend({isReady:false,readyList:[],ready:function(){if(!o.isReady){o.isReady=true;if(o.readyList){o.each(o.readyList,function(){this.call(document,o)});o.readyList=null}o(document).triggerHandler("ready")}}});var x=false;function B(){if(x){return}x=true;if(document.addEventListener){document.addEventListener("DOMContentLoaded",function(){document.removeEventListener("DOMContentLoaded",arguments.callee,false);o.ready()},false)}else{if(document.attachEvent){document.attachEvent("onreadystatechange",function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",arguments.callee);o.ready()}});if(document.documentElement.doScroll&&l==l.top){(function(){if(o.isReady){return}try{document.documentElement.doScroll("left")}catch(E){setTimeout(arguments.callee,0);return}o.ready()})()}}}o.event.add(l,"load",o.ready)}o.each(("blur,focus,load,resize,scroll,unload,click,dblclick,mousedown,mouseup,mousemove,mouseover,mouseout,mouseenter,mouseleave,change,select,submit,keydown,keypress,keyup,error").split(","),function(F,E){o.fn[E]=function(G){return G?this.bind(E,G):this.trigger(E)}});o(l).bind("unload",function(){for(var E in o.cache){if(E!=1&&o.cache[E].handle){o.event.remove(o.cache[E].handle.elem)}}});(function(){o.support={};var F=document.documentElement,G=document.createElement("script"),K=document.createElement("div"),J="script"+(new Date).getTime();K.style.display="none";K.innerHTML='   <link/><table></table><a href="/a" style="color:red;float:left;opacity:.5;">a</a><select><option>text</option></select><object><param/></object>';var H=K.getElementsByTagName("*"),E=K.getElementsByTagName("a")[0];if(!H||!H.length||!E){return}o.support={leadingWhitespace:K.firstChild.nodeType==3,tbody:!K.getElementsByTagName("tbody").length,objectAll:!!K.getElementsByTagName("object")[0].getElementsByTagName("*").length,htmlSerialize:!!K.getElementsByTagName("link").length,style:/red/.test(E.getAttribute("style")),hrefNormalized:E.getAttribute("href")==="/a",opacity:E.style.opacity==="0.5",cssFloat:!!E.style.cssFloat,scriptEval:false,noCloneEvent:true,boxModel:null};G.type="text/javascript";try{G.appendChild(document.createTextNode("window."+J+"=1;"))}catch(I){}F.insertBefore(G,F.firstChild);if(l[J]){o.support.scriptEval=true;delete l[J]}F.removeChild(G);if(K.attachEvent&&K.fireEvent){K.attachEvent("onclick",function(){o.support.noCloneEvent=false;K.detachEvent("onclick",arguments.callee)});K.cloneNode(true).fireEvent("onclick")}o(function(){var L=document.createElement("div");L.style.width=L.style.paddingLeft="1px";document.body.appendChild(L);o.boxModel=o.support.boxModel=L.offsetWidth===2;document.body.removeChild(L).style.display="none"})})();var w=o.support.cssFloat?"cssFloat":"styleFloat";o.props={"for":"htmlFor","class":"className","float":w,cssFloat:w,styleFloat:w,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",tabindex:"tabIndex"};o.fn.extend({_load:o.fn.load,load:function(G,J,K){if(typeof G!=="string"){return this._load(G)}var I=G.indexOf(" ");if(I>=0){var E=G.slice(I,G.length);G=G.slice(0,I)}var H="GET";if(J){if(o.isFunction(J)){K=J;J=null}else{if(typeof J==="object"){J=o.param(J);H="POST"}}}var F=this;o.ajax({url:G,type:H,dataType:"html",data:J,complete:function(M,L){if(L=="success"||L=="notmodified"){F.html(E?o("<div/>").append(M.responseText.replace(/<script(.|\s)*?\/script>/g,"")).find(E):M.responseText)}if(K){F.each(K,[M.responseText,L,M])}}});return this},serialize:function(){return o.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?o.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||/select|textarea/i.test(this.nodeName)||/text|hidden|password|search/i.test(this.type))}).map(function(E,F){var G=o(this).val();return G==null?null:o.isArray(G)?o.map(G,function(I,H){return{name:F.name,value:I}}):{name:F.name,value:G}}).get()}});o.each("ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend".split(","),function(E,F){o.fn[F]=function(G){return this.bind(F,G)}});var r=e();o.extend({get:function(E,G,H,F){if(o.isFunction(G)){H=G;G=null}return o.ajax({type:"GET",url:E,data:G,success:H,dataType:F})},getScript:function(E,F){return o.get(E,null,F,"script")},getJSON:function(E,F,G){return o.get(E,F,G,"json")},post:function(E,G,H,F){if(o.isFunction(G)){H=G;G={}}return o.ajax({type:"POST",url:E,data:G,success:H,dataType:F})},ajaxSetup:function(E){o.extend(o.ajaxSettings,E)},ajaxSettings:{url:location.href,global:true,type:"GET",contentType:"application/x-www-form-urlencoded",processData:true,async:true,xhr:function(){return l.ActiveXObject?new ActiveXObject("Microsoft.XMLHTTP"):new XMLHttpRequest()},accepts:{xml:"application/xml, text/xml",html:"text/html",script:"text/javascript, application/javascript",json:"application/json, text/javascript",text:"text/plain",_default:"*/*"}},lastModified:{},ajax:function(M){M=o.extend(true,M,o.extend(true,{},o.ajaxSettings,M));var W,F=/=\?(&|$)/g,R,V,G=M.type.toUpperCase();if(M.data&&M.processData&&typeof M.data!=="string"){M.data=o.param(M.data)}if(M.dataType=="jsonp"){if(G=="GET"){if(!M.url.match(F)){M.url+=(M.url.match(/\?/)?"&":"?")+(M.jsonp||"callback")+"=?"}}else{if(!M.data||!M.data.match(F)){M.data=(M.data?M.data+"&":"")+(M.jsonp||"callback")+"=?"}}M.dataType="json"}if(M.dataType=="json"&&(M.data&&M.data.match(F)||M.url.match(F))){W="jsonp"+r++;if(M.data){M.data=(M.data+"").replace(F,"="+W+"$1")}M.url=M.url.replace(F,"="+W+"$1");M.dataType="script";l[W]=function(X){V=X;I();L();l[W]=g;try{delete l[W]}catch(Y){}if(H){H.removeChild(T)}}}if(M.dataType=="script"&&M.cache==null){M.cache=false}if(M.cache===false&&G=="GET"){var E=e();var U=M.url.replace(/(\?|&)_=.*?(&|$)/,"$1_="+E+"$2");M.url=U+((U==M.url)?(M.url.match(/\?/)?"&":"?")+"_="+E:"")}if(M.data&&G=="GET"){M.url+=(M.url.match(/\?/)?"&":"?")+M.data;M.data=null}if(M.global&&!o.active++){o.event.trigger("ajaxStart")}var Q=/^(\w+:)?\/\/([^\/?#]+)/.exec(M.url);if(M.dataType=="script"&&G=="GET"&&Q&&(Q[1]&&Q[1]!=location.protocol||Q[2]!=location.host)){var H=document.getElementsByTagName("head")[0];var T=document.createElement("script");T.src=M.url;if(M.scriptCharset){T.charset=M.scriptCharset}if(!W){var O=false;T.onload=T.onreadystatechange=function(){if(!O&&(!this.readyState||this.readyState=="loaded"||this.readyState=="complete")){O=true;I();L();T.onload=T.onreadystatechange=null;H.removeChild(T)}}}H.appendChild(T);return g}var K=false;var J=M.xhr();if(M.username){J.open(G,M.url,M.async,M.username,M.password)}else{J.open(G,M.url,M.async)}try{if(M.data){J.setRequestHeader("Content-Type",M.contentType)}if(M.ifModified){J.setRequestHeader("If-Modified-Since",o.lastModified[M.url]||"Thu, 01 Jan 1970 00:00:00 GMT")}J.setRequestHeader("X-Requested-With","XMLHttpRequest");J.setRequestHeader("Accept",M.dataType&&M.accepts[M.dataType]?M.accepts[M.dataType]+", */*":M.accepts._default)}catch(S){}if(M.beforeSend&&M.beforeSend(J,M)===false){if(M.global&&!--o.active){o.event.trigger("ajaxStop")}J.abort();return false}if(M.global){o.event.trigger("ajaxSend",[J,M])}var N=function(X){if(J.readyState==0){if(P){clearInterval(P);P=null;if(M.global&&!--o.active){o.event.trigger("ajaxStop")}}}else{if(!K&&J&&(J.readyState==4||X=="timeout")){K=true;if(P){clearInterval(P);P=null}R=X=="timeout"?"timeout":!o.httpSuccess(J)?"error":M.ifModified&&o.httpNotModified(J,M.url)?"notmodified":"success";if(R=="success"){try{V=o.httpData(J,M.dataType,M)}catch(Z){R="parsererror"}}if(R=="success"){var Y;try{Y=J.getResponseHeader("Last-Modified")}catch(Z){}if(M.ifModified&&Y){o.lastModified[M.url]=Y}if(!W){I()}}else{o.handleError(M,J,R)}L();if(X){J.abort()}if(M.async){J=null}}}};if(M.async){var P=setInterval(N,13);if(M.timeout>0){setTimeout(function(){if(J&&!K){N("timeout")}},M.timeout)}}try{J.send(M.data)}catch(S){o.handleError(M,J,null,S)}if(!M.async){N()}function I(){if(M.success){M.success(V,R)}if(M.global){o.event.trigger("ajaxSuccess",[J,M])}}function L(){if(M.complete){M.complete(J,R)}if(M.global){o.event.trigger("ajaxComplete",[J,M])}if(M.global&&!--o.active){o.event.trigger("ajaxStop")}}return J},handleError:function(F,H,E,G){if(F.error){F.error(H,E,G)}if(F.global){o.event.trigger("ajaxError",[H,F,G])}},active:0,httpSuccess:function(F){try{return !F.status&&location.protocol=="file:"||(F.status>=200&&F.status<300)||F.status==304||F.status==1223}catch(E){}return false},httpNotModified:function(G,E){try{var H=G.getResponseHeader("Last-Modified");return G.status==304||H==o.lastModified[E]}catch(F){}return false},httpData:function(J,H,G){var F=J.getResponseHeader("content-type"),E=H=="xml"||!H&&F&&F.indexOf("xml")>=0,I=E?J.responseXML:J.responseText;if(E&&I.documentElement.tagName=="parsererror"){throw"parsererror"}if(G&&G.dataFilter){I=G.dataFilter(I,H)}if(typeof I==="string"){if(H=="script"){o.globalEval(I)}if(H=="json"){I=l["eval"]("("+I+")")}}return I},param:function(E){var G=[];function H(I,J){G[G.length]=encodeURIComponent(I)+"="+encodeURIComponent(J)}if(o.isArray(E)||E.jquery){o.each(E,function(){H(this.name,this.value)})}else{for(var F in E){if(o.isArray(E[F])){o.each(E[F],function(){H(F,this)})}else{H(F,o.isFunction(E[F])?E[F]():E[F])}}}return G.join("&").replace(/%20/g,"+")}});var m={},n,d=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];function t(F,E){var G={};o.each(d.concat.apply([],d.slice(0,E)),function(){G[this]=F});return G}o.fn.extend({show:function(J,L){if(J){return this.animate(t("show",3),J,L)}else{for(var H=0,F=this.length;H<F;H++){var E=o.data(this[H],"olddisplay");this[H].style.display=E||"";if(o.css(this[H],"display")==="none"){var G=this[H].tagName,K;if(m[G]){K=m[G]}else{var I=o("<"+G+" />").appendTo("body");K=I.css("display");if(K==="none"){K="block"}I.remove();m[G]=K}o.data(this[H],"olddisplay",K)}}for(var H=0,F=this.length;H<F;H++){this[H].style.display=o.data(this[H],"olddisplay")||""}return this}},hide:function(H,I){if(H){return this.animate(t("hide",3),H,I)}else{for(var G=0,F=this.length;G<F;G++){var E=o.data(this[G],"olddisplay");if(!E&&E!=="none"){o.data(this[G],"olddisplay",o.css(this[G],"display"))}}for(var G=0,F=this.length;G<F;G++){this[G].style.display="none"}return this}},_toggle:o.fn.toggle,toggle:function(G,F){var E=typeof G==="boolean";return o.isFunction(G)&&o.isFunction(F)?this._toggle.apply(this,arguments):G==null||E?this.each(function(){var H=E?G:o(this).is(":hidden");o(this)[H?"show":"hide"]()}):this.animate(t("toggle",3),G,F)},fadeTo:function(E,G,F){return this.animate({opacity:G},E,F)},animate:function(I,F,H,G){var E=o.speed(F,H,G);return this[E.queue===false?"each":"queue"](function(){var K=o.extend({},E),M,L=this.nodeType==1&&o(this).is(":hidden"),J=this;for(M in I){if(I[M]=="hide"&&L||I[M]=="show"&&!L){return K.complete.call(this)}if((M=="height"||M=="width")&&this.style){K.display=o.css(this,"display");K.overflow=this.style.overflow}}if(K.overflow!=null){this.style.overflow="hidden"}K.curAnim=o.extend({},I);o.each(I,function(O,S){var R=new o.fx(J,K,O);if(/toggle|show|hide/.test(S)){R[S=="toggle"?L?"show":"hide":S](I)}else{var Q=S.toString().match(/^([+-]=)?([\d+-.]+)(.*)$/),T=R.cur(true)||0;if(Q){var N=parseFloat(Q[2]),P=Q[3]||"px";if(P!="px"){J.style[O]=(N||1)+P;T=((N||1)/R.cur(true))*T;J.style[O]=T+P}if(Q[1]){N=((Q[1]=="-="?-1:1)*N)+T}R.custom(T,N,P)}else{R.custom(T,S,"")}}});return true})},stop:function(F,E){var G=o.timers;if(F){this.queue([])}this.each(function(){for(var H=G.length-1;H>=0;H--){if(G[H].elem==this){if(E){G[H](true)}G.splice(H,1)}}});if(!E){this.dequeue()}return this}});o.each({slideDown:t("show",1),slideUp:t("hide",1),slideToggle:t("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"}},function(E,F){o.fn[E]=function(G,H){return this.animate(F,G,H)}});o.extend({speed:function(G,H,F){var E=typeof G==="object"?G:{complete:F||!F&&H||o.isFunction(G)&&G,duration:G,easing:F&&H||H&&!o.isFunction(H)&&H};E.duration=o.fx.off?0:typeof E.duration==="number"?E.duration:o.fx.speeds[E.duration]||o.fx.speeds._default;E.old=E.complete;E.complete=function(){if(E.queue!==false){o(this).dequeue()}if(o.isFunction(E.old)){E.old.call(this)}};return E},easing:{linear:function(G,H,E,F){return E+F*G},swing:function(G,H,E,F){return((-Math.cos(G*Math.PI)/2)+0.5)*F+E}},timers:[],fx:function(F,E,G){this.options=E;this.elem=F;this.prop=G;if(!E.orig){E.orig={}}}});o.fx.prototype={update:function(){if(this.options.step){this.options.step.call(this.elem,this.now,this)}(o.fx.step[this.prop]||o.fx.step._default)(this);if((this.prop=="height"||this.prop=="width")&&this.elem.style){this.elem.style.display="block"}},cur:function(F){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null)){return this.elem[this.prop]}var E=parseFloat(o.css(this.elem,this.prop,F));return E&&E>-10000?E:parseFloat(o.curCSS(this.elem,this.prop))||0},custom:function(I,H,G){this.startTime=e();this.start=I;this.end=H;this.unit=G||this.unit||"px";this.now=this.start;this.pos=this.state=0;var E=this;function F(J){return E.step(J)}F.elem=this.elem;if(F()&&o.timers.push(F)&&!n){n=setInterval(function(){var K=o.timers;for(var J=0;J<K.length;J++){if(!K[J]()){K.splice(J--,1)}}if(!K.length){clearInterval(n);n=g}},13)}},show:function(){this.options.orig[this.prop]=o.attr(this.elem.style,this.prop);this.options.show=true;this.custom(this.prop=="width"||this.prop=="height"?1:0,this.cur());o(this.elem).show()},hide:function(){this.options.orig[this.prop]=o.attr(this.elem.style,this.prop);this.options.hide=true;this.custom(this.cur(),0)},step:function(H){var G=e();if(H||G>=this.options.duration+this.startTime){this.now=this.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;var E=true;for(var F in this.options.curAnim){if(this.options.curAnim[F]!==true){E=false}}if(E){if(this.options.display!=null){this.elem.style.overflow=this.options.overflow;this.elem.style.display=this.options.display;if(o.css(this.elem,"display")=="none"){this.elem.style.display="block"}}if(this.options.hide){o(this.elem).hide()}if(this.options.hide||this.options.show){for(var I in this.options.curAnim){o.attr(this.elem.style,I,this.options.orig[I])}}this.options.complete.call(this.elem)}return false}else{var J=G-this.startTime;this.state=J/this.options.duration;this.pos=o.easing[this.options.easing||(o.easing.swing?"swing":"linear")](this.state,J,0,1,this.options.duration);this.now=this.start+((this.end-this.start)*this.pos);this.update()}return true}};o.extend(o.fx,{speeds:{slow:600,fast:200,_default:400},step:{opacity:function(E){o.attr(E.elem.style,"opacity",E.now)},_default:function(E){if(E.elem.style&&E.elem.style[E.prop]!=null){E.elem.style[E.prop]=E.now+E.unit}else{E.elem[E.prop]=E.now}}}});if(document.documentElement.getBoundingClientRect){o.fn.offset=function(){if(!this[0]){return{top:0,left:0}}if(this[0]===this[0].ownerDocument.body){return o.offset.bodyOffset(this[0])}var G=this[0].getBoundingClientRect(),J=this[0].ownerDocument,F=J.body,E=J.documentElement,L=E.clientTop||F.clientTop||0,K=E.clientLeft||F.clientLeft||0,I=G.top+(self.pageYOffset||o.boxModel&&E.scrollTop||F.scrollTop)-L,H=G.left+(self.pageXOffset||o.boxModel&&E.scrollLeft||F.scrollLeft)-K;return{top:I,left:H}}}else{o.fn.offset=function(){if(!this[0]){return{top:0,left:0}}if(this[0]===this[0].ownerDocument.body){return o.offset.bodyOffset(this[0])}o.offset.initialized||o.offset.initialize();var J=this[0],G=J.offsetParent,F=J,O=J.ownerDocument,M,H=O.documentElement,K=O.body,L=O.defaultView,E=L.getComputedStyle(J,null),N=J.offsetTop,I=J.offsetLeft;while((J=J.parentNode)&&J!==K&&J!==H){M=L.getComputedStyle(J,null);N-=J.scrollTop,I-=J.scrollLeft;if(J===G){N+=J.offsetTop,I+=J.offsetLeft;if(o.offset.doesNotAddBorder&&!(o.offset.doesAddBorderForTableAndCells&&/^t(able|d|h)$/i.test(J.tagName))){N+=parseInt(M.borderTopWidth,10)||0,I+=parseInt(M.borderLeftWidth,10)||0}F=G,G=J.offsetParent}if(o.offset.subtractsBorderForOverflowNotVisible&&M.overflow!=="visible"){N+=parseInt(M.borderTopWidth,10)||0,I+=parseInt(M.borderLeftWidth,10)||0}E=M}if(E.position==="relative"||E.position==="static"){N+=K.offsetTop,I+=K.offsetLeft}if(E.position==="fixed"){N+=Math.max(H.scrollTop,K.scrollTop),I+=Math.max(H.scrollLeft,K.scrollLeft)}return{top:N,left:I}}}o.offset={initialize:function(){if(this.initialized){return}var L=document.body,F=document.createElement("div"),H,G,N,I,M,E,J=L.style.marginTop,K='<div style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;"><div></div></div><table style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;" cellpadding="0" cellspacing="0"><tr><td></td></tr></table>';M={position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"};for(E in M){F.style[E]=M[E]}F.innerHTML=K;L.insertBefore(F,L.firstChild);H=F.firstChild,G=H.firstChild,I=H.nextSibling.firstChild.firstChild;this.doesNotAddBorder=(G.offsetTop!==5);this.doesAddBorderForTableAndCells=(I.offsetTop===5);H.style.overflow="hidden",H.style.position="relative";this.subtractsBorderForOverflowNotVisible=(G.offsetTop===-5);L.style.marginTop="1px";this.doesNotIncludeMarginInBodyOffset=(L.offsetTop===0);L.style.marginTop=J;L.removeChild(F);this.initialized=true},bodyOffset:function(E){o.offset.initialized||o.offset.initialize();var G=E.offsetTop,F=E.offsetLeft;if(o.offset.doesNotIncludeMarginInBodyOffset){G+=parseInt(o.curCSS(E,"marginTop",true),10)||0,F+=parseInt(o.curCSS(E,"marginLeft",true),10)||0}return{top:G,left:F}}};o.fn.extend({position:function(){var I=0,H=0,F;if(this[0]){var G=this.offsetParent(),J=this.offset(),E=/^body|html$/i.test(G[0].tagName)?{top:0,left:0}:G.offset();J.top-=j(this,"marginTop");J.left-=j(this,"marginLeft");E.top+=j(G,"borderTopWidth");E.left+=j(G,"borderLeftWidth");F={top:J.top-E.top,left:J.left-E.left}}return F},offsetParent:function(){var E=this[0].offsetParent||document.body;while(E&&(!/^body|html$/i.test(E.tagName)&&o.css(E,"position")=="static")){E=E.offsetParent}return o(E)}});o.each(["Left","Top"],function(F,E){var G="scroll"+E;o.fn[G]=function(H){if(!this[0]){return null}return H!==g?this.each(function(){this==l||this==document?l.scrollTo(!F?H:o(l).scrollLeft(),F?H:o(l).scrollTop()):this[G]=H}):this[0]==l||this[0]==document?self[F?"pageYOffset":"pageXOffset"]||o.boxModel&&document.documentElement[G]||document.body[G]:this[0][G]}});o.each(["Height","Width"],function(I,G){var E=I?"Left":"Top",H=I?"Right":"Bottom",F=G.toLowerCase();o.fn["inner"+G]=function(){return this[0]?o.css(this[0],F,false,"padding"):null};o.fn["outer"+G]=function(K){return this[0]?o.css(this[0],F,false,K?"margin":"border"):null};var J=G.toLowerCase();o.fn[J]=function(K){return this[0]==l?document.compatMode=="CSS1Compat"&&document.documentElement["client"+G]||document.body["client"+G]:this[0]==document?Math.max(document.documentElement["client"+G],document.body["scroll"+G],document.documentElement["scroll"+G],document.body["offset"+G],document.documentElement["offset"+G]):K===g?(this.length?o.css(this[0],J):null):this.css(J,typeof K==="string"?K:K+"px")}})})();

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/rdoc/generator/template/rails/resources/js/jquery-effect.js:
   59  			return element.parent();
   60  
   61: 		//Cache width,height and float properties of the element, and create a wrapper around it
   62  		var props = { width: element.outerWidth(true), height: element.outerHeight(true), 'float': element.css('float') };
   63  		element.wrap('<div class="ui-effects-wrapper" style="font-size:100%;background:transparent;border:none;margin:0;padding:0"></div>');

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/rdoc/generator/template/sdoc/resources/js/jquery-1.3.2.min.js:
   10   * Revision: 6246
   11   */
   12: (function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=/^[^<]*(<(.|\s)+>)[^>]*$|^#([\w-]+)$/,f=/^.[^:#\[\.,]*$/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(/ jQuery\d+="(?:\d+|null)"/g,"").replace(/^\s*/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(/\r/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&/radio|checkbox/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(/ jQuery\d+="(?:\d+|null)"/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=/z-?index|font-?weight|opacity|zoom|line-?height/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&/\S/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(/\s+/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(/\s+/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(/\s+/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(/float/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(/float/i)){F="float"}F=F.replace(/([A-Z])/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(/\-(\w)/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!/^\d+(px)?$/i.test(L)&&/^\d/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=/^<(\w+)\s*\/?>$/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(/(<(\w+)[^>]*?)\/>/g,function(U,V,T){return T.match(/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$/i)?U:V+"></"+T+">"});var O=S.replace(/^\s+/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","</select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","</fieldset>"]||O.match(/^<(thead|tbody|tfoot|colg|cap)/)&&[1,"<table>","</table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","</tbody></table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","</tr></tbody></table>"]||!O.indexOf("<col")&&[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]||!o.support.htmlSerialize&&[1,"div<div>","</div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=/<tbody/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&/^\s/.test(S)){L.insertBefore(K.createTextNode(S.match(/^\s*/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=/href|src|style/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(/(button|input|object|select|textarea)/i)?0:J.nodeName.match(/^(a|area)$/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(/alpha\([^)]*\)/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(/opacity=([^)]*)/)[1])/100)+"":""}G=G.replace(/-([a-z])/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(/^\s+|\s+$/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/)||[0,"0"])[1],safari:/webkit/.test(C),opera:/opera/.test(C),msie:/msie/.test(C)&&!/opera/.test(C),mozilla:/mozilla/.test(C)&&!/(compatible|webkit)/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){var I=(K>0?this.clone(true):this).get();o.fn[F].apply(o(L[K]),I);J=J.concat(I)}return this.pushStack(J,E,G)}});o.each({removeAttr:function(E){o.attr(this,E,"");if(this.nodeType==1){this.removeAttribute(E)}},addClass:function(E){o.className.add(this,E)},removeClass:function(E){o.className.remove(this,E)},toggleClass:function(F,E){if(typeof E!=="boolean"){E=!o.className.has(this,F)}o.className[E?"add":"remove"](this,F)},remove:function(E){if(!E||o.filter(E,[this]).length){o("*",this).add([this]).each(function(){o.event.remove(this);o.removeData(this)});if(this.parentNode){this.parentNode.removeChild(this)}}},empty:function(){o(this).children().remove();while(this.firstChild){this.removeChild(this.firstChild)}}},function(E,F){o.fn[E]=function(){return this.each(F,arguments)}});function j(E,F){return E[0]&&parseInt(o.curCSS(E[0],F,true),10)||0}var h="jQuery"+e(),v=0,A={};o.extend({cache:{},data:function(F,E,G){F=F==l?A:F;var H=F[h];if(!H){H=F[h]=++v}if(E&&!o.cache[H]){o.cache[H]={}}if(G!==g){o.cache[H][E]=G}return E?o.cache[H][E]:H},removeData:function(F,E){F=F==l?A:F;var H=F[h];if(E){if(o.cache[H]){delete o.cache[H][E];E="";for(E in o.cache[H]){break}if(!E){o.removeData(F)}}}else{try{delete F[h]}catch(G){if(F.removeAttribute){F.removeAttribute(h)}}delete o.cache[H]}},queue:function(F,E,H){if(F){E=(E||"fx")+"queue";var G=o.data(F,E);if(!G||o.isArray(H)){G=o.data(F,E,o.makeArray(H))}else{if(H){G.push(H)}}}return G},dequeue:function(H,G){var E=o.queue(H,G),F=E.shift();if(!G||G==="fx"){F=E[0]}if(F!==g){F.call(H)}}});o.fn.extend({data:function(E,G){var H=E.split(".");H[1]=H[1]?"."+H[1]:"";if(G===g){var F=this.triggerHandler("getData"+H[1]+"!",[H[0]]);if(F===g&&this.length){F=o.data(this[0],E)}return F===g&&H[1]?this.data(H[0]):F}else{return this.trigger("setData"+H[1]+"!",[H[0],G]).each(function(){o.data(this,E,G)})}},removeData:function(E){return this.each(function(){o.removeData(this,E)})},queue:function(E,F){if(typeof E!=="string"){F=E;E="fx"}if(F===g){return o.queue(this[0],E)}return this.each(function(){var G=o.queue(this,E,F);if(E=="fx"&&G.length==1){G[0].call(this)}})},dequeue:function(E){return this.each(function(){o.dequeue(this,E)})}});
   13  /*
   14   * Sizzle CSS Selector Engine - v0.9.3
   ..
   17   *  More information: http://sizzlejs.com/
   18   */
   19: (function(){var R=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?/g,L=0,H=Object.prototype.toString;var F=function(Y,U,ab,ac){ab=ab||[];U=U||document;if(U.nodeType!==1&&U.nodeType!==9){return[]}if(!Y||typeof Y!=="string"){return ab}var Z=[],W,af,ai,T,ad,V,X=true;R.lastIndex=0;while((W=R.exec(Y))!==null){Z.push(W[1]);if(W[2]){V=RegExp.rightContext;break}}if(Z.length>1&&M.exec(Y)){if(Z.length===2&&I.relative[Z[0]]){af=J(Z[0]+Z[1],U)}else{af=I.relative[Z[0]]?[U]:F(Z.shift(),U);while(Z.length){Y=Z.shift();if(I.relative[Y]){Y+=Z.shift()}af=J(Y,af)}}}else{var ae=ac?{expr:Z.pop(),set:E(ac)}:F.find(Z.pop(),Z.length===1&&U.parentNode?U.parentNode:U,Q(U));af=F.filter(ae.expr,ae.set);if(Z.length>0){ai=E(af)}else{X=false}while(Z.length){var ah=Z.pop(),ag=ah;if(!I.relative[ah]){ah=""}else{ag=Z.pop()}if(ag==null){ag=U}I.relative[ah](ai,ag,Q(U))}}if(!ai){ai=af}if(!ai){throw"Syntax error, unrecognized expression: "+(ah||Y)}if(H.call(ai)==="[object Array]"){if(!X){ab.push.apply(ab,ai)}else{if(U.nodeType===1){for(var aa=0;ai[aa]!=null;aa++){if(ai[aa]&&(ai[aa]===true||ai[aa].nodeType===1&&K(U,ai[aa]))){ab.push(af[aa])}}}else{for(var aa=0;ai[aa]!=null;aa++){if(ai[aa]&&ai[aa].nodeType===1){ab.push(af[aa])}}}}}else{E(ai,ab)}if(V){F(V,U,ab,ac);if(G){hasDuplicate=false;ab.sort(G);if(hasDuplicate){for(var aa=1;aa<ab.length;aa++){if(ab[aa]===ab[aa-1]){ab.splice(aa--,1)}}}}}return ab};F.matches=function(T,U){return F(T,null,null,U)};F.find=function(aa,T,ab){var Z,X;if(!aa){return[]}for(var W=0,V=I.order.length;W<V;W++){var Y=I.order[W],X;if((X=I.match[Y].exec(aa))){var U=RegExp.leftContext;if(U.substr(U.length-1)!=="\\"){X[1]=(X[1]||"").replace(/\\/g,"");Z=I.find[Y](X,T,ab);if(Z!=null){aa=aa.replace(I.match[Y],"");break}}}}if(!Z){Z=T.getElementsByTagName("*")}return{set:Z,expr:aa}};F.filter=function(ad,ac,ag,W){var V=ad,ai=[],aa=ac,Y,T,Z=ac&&ac[0]&&Q(ac[0]);while(ad&&ac.length){for(var ab in I.filter){if((Y=I.match[ab].exec(ad))!=null){var U=I.filter[ab],ah,af;T=false;if(aa==ai){ai=[]}if(I.preFilter[ab]){Y=I.preFilter[ab](Y,aa,ag,ai,W,Z);if(!Y){T=ah=true}else{if(Y===true){continue}}}if(Y){for(var X=0;(af=aa[X])!=null;X++){if(af){ah=U(af,Y,X,aa);var ae=W^!!ah;if(ag&&ah!=null){if(ae){T=true}else{aa[X]=false}}else{if(ae){ai.push(af);T=true}}}}}if(ah!==g){if(!ag){aa=ai}ad=ad.replace(I.match[ab],"");if(!T){return[]}break}}}if(ad==V){if(T==null){throw"Syntax error, unrecognized expression: "+ad}else{break}}V=ad}return aa};var I=F.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF_-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF_-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF_-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*_-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF_-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(T){return T.getAttribute("href")}},relative:{"+":function(aa,T,Z){var X=typeof T==="string",ab=X&&!/\W/.test(T),Y=X&&!ab;if(ab&&!Z){T=T.toUpperCase()}for(var W=0,V=aa.length,U;W<V;W++){if((U=aa[W])){while((U=U.previousSibling)&&U.nodeType!==1){}aa[W]=Y||U&&U.nodeName===T?U||false:U===T}}if(Y){F.filter(T,aa,true)}},">":function(Z,U,aa){var X=typeof U==="string";if(X&&!/\W/.test(U)){U=aa?U:U.toUpperCase();for(var V=0,T=Z.length;V<T;V++){var Y=Z[V];if(Y){var W=Y.parentNode;Z[V]=W.nodeName===U?W:false}}}else{for(var V=0,T=Z.length;V<T;V++){var Y=Z[V];if(Y){Z[V]=X?Y.parentNode:Y.parentNode===U}}if(X){F.filter(U,Z,true)}}},"":function(W,U,Y){var V=L++,T=S;if(!U.match(/\W/)){var X=U=Y?U:U.toUpperCase();T=P}T("parentNode",U,V,W,X,Y)},"~":function(W,U,Y){var V=L++,T=S;if(typeof U==="string"&&!U.match(/\W/)){var X=U=Y?U:U.toUpperCase();T=P}T("previousSibling",U,V,W,X,Y)}},find:{ID:function(U,V,W){if(typeof V.getElementById!=="undefined"&&!W){var T=V.getElementById(U[1]);return T?[T]:[]}},NAME:function(V,Y,Z){if(typeof Y.getElementsByName!=="undefined"){var U=[],X=Y.getElementsByName(V[1]);for(var W=0,T=X.length;W<T;W++){if(X[W].getAttribute("name")===V[1]){U.push(X[W])}}return U.length===0?null:U}},TAG:function(T,U){return U.getElementsByTagName(T[1])}},preFilter:{CLASS:function(W,U,V,T,Z,aa){W=" "+W[1].replace(/\\/g,"")+" ";if(aa){return W}for(var X=0,Y;(Y=U[X])!=null;X++){if(Y){if(Z^(Y.className&&(" "+Y.className+" ").indexOf(W)>=0)){if(!V){T.push(Y)}}else{if(V){U[X]=false}}}}return false},ID:function(T){return T[1].replace(/\\/g,"")},TAG:function(U,T){for(var V=0;T[V]===false;V++){}return T[V]&&Q(T[V])?U[1]:U[1].toUpperCase()},CHILD:function(T){if(T[1]=="nth"){var U=/(-?)(\d*)n((?:\+|-)?\d*)/.exec(T[2]=="even"&&"2n"||T[2]=="odd"&&"2n+1"||!/\D/.test(T[2])&&"0n+"+T[2]||T[2]);T[2]=(U[1]+(U[2]||1))-0;T[3]=U[3]-0}T[0]=L++;return T},ATTR:function(X,U,V,T,Y,Z){var W=X[1].replace(/\\/g,"");if(!Z&&I.attrMap[W]){X[1]=I.attrMap[W]}if(X[2]==="~="){X[4]=" "+X[4]+" "}return X},PSEUDO:function(X,U,V,T,Y){if(X[1]==="not"){if(X[3].match(R).length>1||/^\w/.test(X[3])){X[3]=F(X[3],null,null,U)}else{var W=F.filter(X[3],U,V,true^Y);if(!V){T.push.apply(T,W)}return false}}else{if(I.match.POS.test(X[0])||I.match.CHILD.test(X[0])){return true}}return X},POS:function(T){T.unshift(true);return T}},filters:{enabled:function(T){return T.disabled===false&&T.type!=="hidden"},disabled:function(T){return T.disabled===true},checked:function(T){return T.checked===true},selected:function(T){T.parentNode.selectedIndex;return T.selected===true},parent:function(T){return !!T.firstChild},empty:function(T){return !T.firstChild},has:function(V,U,T){return !!F(T[3],V).length},header:function(T){return/h\d/i.test(T.nodeName)},text:function(T){return"text"===T.type},radio:function(T){return"radio"===T.type},checkbox:function(T){return"checkbox"===T.type},file:function(T){return"file"===T.type},password:function(T){return"password"===T.type},submit:function(T){return"submit"===T.type},image:function(T){return"image"===T.type},reset:function(T){return"reset"===T.type},button:function(T){return"button"===T.type||T.nodeName.toUpperCase()==="BUTTON"},input:function(T){return/input|select|textarea|button/i.test(T.nodeName)}},setFilters:{first:function(U,T){return T===0},last:function(V,U,T,W){return U===W.length-1},even:function(U,T){return T%2===0},odd:function(U,T){return T%2===1},lt:function(V,U,T){return U<T[3]-0},gt:function(V,U,T){return U>T[3]-0},nth:function(V,U,T){return T[3]-0==U},eq:function(V,U,T){return T[3]-0==U}},filter:{PSEUDO:function(Z,V,W,aa){var U=V[1],X=I.filters[U];if(X){return X(Z,W,V,aa)}else{if(U==="contains"){return(Z.textContent||Z.innerText||"").indexOf(V[3])>=0}else{if(U==="not"){var Y=V[3];for(var W=0,T=Y.length;W<T;W++){if(Y[W]===Z){return false}}return true}}}},CHILD:function(T,W){var Z=W[1],U=T;switch(Z){case"only":case"first":while(U=U.previousSibling){if(U.nodeType===1){return false}}if(Z=="first"){return true}U=T;case"last":while(U=U.nextSibling){if(U.nodeType===1){return false}}return true;case"nth":var V=W[2],ac=W[3];if(V==1&&ac==0){return true}var Y=W[0],ab=T.parentNode;if(ab&&(ab.sizcache!==Y||!T.nodeIndex)){var X=0;for(U=ab.firstChild;U;U=U.nextSibling){if(U.nodeType===1){U.nodeIndex=++X}}ab.sizcache=Y}var aa=T.nodeIndex-ac;if(V==0){return aa==0}else{return(aa%V==0&&aa/V>=0)}}},ID:function(U,T){return U.nodeType===1&&U.getAttribute("id")===T},TAG:function(U,T){return(T==="*"&&U.nodeType===1)||U.nodeName===T},CLASS:function(U,T){return(" "+(U.className||U.getAttribute("class"))+" ").indexOf(T)>-1},ATTR:function(Y,W){var V=W[1],T=I.attrHandle[V]?I.attrHandle[V](Y):Y[V]!=null?Y[V]:Y.getAttribute(V),Z=T+"",X=W[2],U=W[4];return T==null?X==="!=":X==="="?Z===U:X==="*="?Z.indexOf(U)>=0:X==="~="?(" "+Z+" ").indexOf(U)>=0:!U?Z&&T!==false:X==="!="?Z!=U:X==="^="?Z.indexOf(U)===0:X==="$="?Z.substr(Z.length-U.length)===U:X==="|="?Z===U||Z.substr(0,U.length+1)===U+"-":false},POS:function(X,U,V,Y){var T=U[2],W=I.setFilters[T];if(W){return W(X,V,U,Y)}}}};var M=I.match.POS;for(var O in I.match){I.match[O]=RegExp(I.match[O].source+/(?![^\[]*\])(?![^\(]*\))/.source)}var E=function(U,T){U=Array.prototype.slice.call(U);if(T){T.push.apply(T,U);return T}return U};try{Array.prototype.slice.call(document.documentElement.childNodes)}catch(N){E=function(X,W){var U=W||[];if(H.call(X)==="[object Array]"){Array.prototype.push.apply(U,X)}else{if(typeof X.length==="number"){for(var V=0,T=X.length;V<T;V++){U.push(X[V])}}else{for(var V=0;X[V];V++){U.push(X[V])}}}return U}}var G;if(document.documentElement.compareDocumentPosition){G=function(U,T){var V=U.compareDocumentPosition(T)&4?-1:U===T?0:1;if(V===0){hasDuplicate=true}return V}}else{if("sourceIndex" in document.documentElement){G=function(U,T){var V=U.sourceIndex-T.sourceIndex;if(V===0){hasDuplicate=true}return V}}else{if(document.createRange){G=function(W,U){var V=W.ownerDocument.createRange(),T=U.ownerDocument.createRange();V.selectNode(W);V.collapse(true);T.selectNode(U);T.collapse(true);var X=V.compareBoundaryPoints(Range.START_TO_END,T);if(X===0){hasDuplicate=true}return X}}}}(function(){var U=document.createElement("form"),V="script"+(new Date).getTime();U.innerHTML="<input name='"+V+"'/>";var T=document.documentElement;T.insertBefore(U,T.firstChild);if(!!document.getElementById(V)){I.find.ID=function(X,Y,Z){if(typeof Y.getElementById!=="undefined"&&!Z){var W=Y.getElementById(X[1]);return W?W.id===X[1]||typeof W.getAttributeNode!=="undefined"&&W.getAttributeNode("id").nodeValue===X[1]?[W]:g:[]}};I.filter.ID=function(Y,W){var X=typeof Y.getAttributeNode!=="undefined"&&Y.getAttributeNode("id");return Y.nodeType===1&&X&&X.nodeValue===W}}T.removeChild(U)})();(function(){var T=document.createElement("div");T.appendChild(document.createComment(""));if(T.getElementsByTagName("*").length>0){I.find.TAG=function(U,Y){var X=Y.getElementsByTagName(U[1]);if(U[1]==="*"){var W=[];for(var V=0;X[V];V++){if(X[V].nodeType===1){W.push(X[V])}}X=W}return X}}T.innerHTML="<a href='#'></a>";if(T.firstChild&&typeof T.firstChild.getAttribute!=="undefined"&&T.firstChild.getAttribute("href")!=="#"){I.attrHandle.href=function(U){return U.getAttribute("href",2)}}})();if(document.querySelectorAll){(function(){var T=F,U=document.createElement("div");U.innerHTML="<p class='TEST'></p>";if(U.querySelectorAll&&U.querySelectorAll(".TEST").length===0){return}F=function(Y,X,V,W){X=X||document;if(!W&&X.nodeType===9&&!Q(X)){try{return E(X.querySelectorAll(Y),V)}catch(Z){}}return T(Y,X,V,W)};F.find=T.find;F.filter=T.filter;F.selectors=T.selectors;F.matches=T.matches})()}if(document.getElementsByClassName&&document.documentElement.getElementsByClassName){(function(){var T=document.createElement("div");T.innerHTML="<div class='test e'></div><div class='test'></div>";if(T.getElementsByClassName("e").length===0){return}T.lastChild.className="e";if(T.getElementsByClassName("e").length===1){return}I.order.splice(1,0,"CLASS");I.find.CLASS=function(U,V,W){if(typeof V.getElementsByClassName!=="undefined"&&!W){return V.getElementsByClassName(U[1])}}})()}function P(U,Z,Y,ad,aa,ac){var ab=U=="previousSibling"&&!ac;for(var W=0,V=ad.length;W<V;W++){var T=ad[W];if(T){if(ab&&T.nodeType===1){T.sizcache=Y;T.sizset=W}T=T[U];var X=false;while(T){if(T.sizcache===Y){X=ad[T.sizset];break}if(T.nodeType===1&&!ac){T.sizcache=Y;T.sizset=W}if(T.nodeName===Z){X=T;break}T=T[U]}ad[W]=X}}}function S(U,Z,Y,ad,aa,ac){var ab=U=="previousSibling"&&!ac;for(var W=0,V=ad.length;W<V;W++){var T=ad[W];if(T){if(ab&&T.nodeType===1){T.sizcache=Y;T.sizset=W}T=T[U];var X=false;while(T){if(T.sizcache===Y){X=ad[T.sizset];break}if(T.nodeType===1){if(!ac){T.sizcache=Y;T.sizset=W}if(typeof Z!=="string"){if(T===Z){X=true;break}}else{if(F.filter(Z,[T]).length>0){X=T;break}}}T=T[U]}ad[W]=X}}}var K=document.compareDocumentPosition?function(U,T){return U.compareDocumentPosition(T)&16}:function(U,T){return U!==T&&(U.contains?U.contains(T):true)};var Q=function(T){return T.nodeType===9&&T.documentElement.nodeName!=="HTML"||!!T.ownerDocument&&Q(T.ownerDocument)};var J=function(T,aa){var W=[],X="",Y,V=aa.nodeType?[aa]:aa;while((Y=I.match.PSEUDO.exec(T))){X+=Y[0];T=T.replace(I.match.PSEUDO,"")}T=I.relative[T]?T+"*":T;for(var Z=0,U=V.length;Z<U;Z++){F(T,V[Z],W)}return F.filter(X,W)};o.find=F;o.filter=F.filter;o.expr=F.selectors;o.expr[":"]=o.expr.filters;F.selectors.filters.hidden=function(T){return T.offsetWidth===0||T.offsetHeight===0};F.selectors.filters.visible=function(T){return T.offsetWidth>0||T.offsetHeight>0};F.selectors.filters.animated=function(T){return o.grep(o.timers,function(U){return T===U.elem}).length};o.multiFilter=function(V,T,U){if(U){V=":not("+V+")"}return F.matches(V,T)};o.dir=function(V,U){var T=[],W=V[U];while(W&&W!=document){if(W.nodeType==1){T.push(W)}W=W[U]}return T};o.nth=function(X,T,V,W){T=T||1;var U=0;for(;X;X=X[V]){if(X.nodeType==1&&++U==T){break}}return X};o.sibling=function(V,U){var T=[];for(;V;V=V.nextSibling){if(V.nodeType==1&&V!=U){T.push(V)}}return T};return;l.Sizzle=F})();o.event={add:function(I,F,H,K){if(I.nodeType==3||I.nodeType==8){return}if(I.setInterval&&I!=l){I=l}if(!H.guid){H.guid=this.guid++}if(K!==g){var G=H;H=this.proxy(G);H.data=K}var E=o.data(I,"events")||o.data(I,"events",{}),J=o.data(I,"handle")||o.data(I,"handle",function(){return typeof o!=="undefined"&&!o.event.triggered?o.event.handle.apply(arguments.callee.elem,arguments):g});J.elem=I;o.each(F.split(/\s+/),function(M,N){var O=N.split(".");N=O.shift();H.type=O.slice().sort().join(".");var L=E[N];if(o.event.specialAll[N]){o.event.specialAll[N].setup.call(I,K,O)}if(!L){L=E[N]={};if(!o.event.special[N]||o.event.special[N].setup.call(I,K,O)===false){if(I.addEventListener){I.addEventListener(N,J,false)}else{if(I.attachEvent){I.attachEvent("on"+N,J)}}}}L[H.guid]=H;o.event.global[N]=true});I=null},guid:1,global:{},remove:function(K,H,J){if(K.nodeType==3||K.nodeType==8){return}var G=o.data(K,"events"),F,E;if(G){if(H===g||(typeof H==="string"&&H.charAt(0)==".")){for(var I in G){this.remove(K,I+(H||""))}}else{if(H.type){J=H.handler;H=H.type}o.each(H.split(/\s+/),function(M,O){var Q=O.split(".");O=Q.shift();var N=RegExp("(^|\\.)"+Q.slice().sort().join(".*\\.")+"(\\.|$)");if(G[O]){if(J){delete G[O][J.guid]}else{for(var P in G[O]){if(N.test(G[O][P].type)){delete G[O][P]}}}if(o.event.specialAll[O]){o.event.specialAll[O].teardown.call(K,Q)}for(F in G[O]){break}if(!F){if(!o.event.special[O]||o.event.special[O].teardown.call(K,Q)===false){if(K.removeEventListener){K.removeEventListener(O,o.data(K,"handle"),false)}else{if(K.detachEvent){K.detachEvent("on"+O,o.data(K,"handle"))}}}F=null;delete G[O]}}})}for(F in G){break}if(!F){var L=o.data(K,"handle");if(L){L.elem=null}o.removeData(K,"events");o.removeData(K,"handle")}}},trigger:function(I,K,H,E){var G=I.type||I;if(!E){I=typeof I==="object"?I[h]?I:o.extend(o.Event(G),I):o.Event(G);if(G.indexOf("!")>=0){I.type=G=G.slice(0,-1);I.exclusive=true}if(!H){I.stopPropagation();if(this.global[G]){o.each(o.cache,function(){if(this.events&&this.events[G]){o.event.trigger(I,K,this.handle.elem)}})}}if(!H||H.nodeType==3||H.nodeType==8){return g}I.result=g;I.target=H;K=o.makeArray(K);K.unshift(I)}I.currentTarget=H;var J=o.data(H,"handle");if(J){J.apply(H,K)}if((!H[G]||(o.nodeName(H,"a")&&G=="click"))&&H["on"+G]&&H["on"+G].apply(H,K)===false){I.result=false}if(!E&&H[G]&&!I.isDefaultPrevented()&&!(o.nodeName(H,"a")&&G=="click")){this.triggered=true;try{H[G]()}catch(L){}}this.triggered=false;if(!I.isPropagationStopped()){var F=H.parentNode||H.ownerDocument;if(F){o.event.trigger(I,K,F,true)}}},handle:function(K){var J,E;K=arguments[0]=o.event.fix(K||l.event);K.currentTarget=this;var L=K.type.split(".");K.type=L.shift();J=!L.length&&!K.exclusive;var I=RegExp("(^|\\.)"+L.slice().sort().join(".*\\.")+"(\\.|$)");E=(o.data(this,"events")||{})[K.type];for(var G in E){var H=E[G];if(J||I.test(H.type)){K.handler=H;K.data=H.data;var F=H.apply(this,arguments);if(F!==g){K.result=F;if(F===false){K.preventDefault();K.stopPropagation()}}if(K.isImmediatePropagationStopped()){break}}}},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(H){if(H[h]){return H}var F=H;H=o.Event(F);for(var G=this.props.length,J;G;){J=this.props[--G];H[J]=F[J]}if(!H.target){H.target=H.srcElement||document}if(H.target.nodeType==3){H.target=H.target.parentNode}if(!H.relatedTarget&&H.fromElement){H.relatedTarget=H.fromElement==H.target?H.toElement:H.fromElement}if(H.pageX==null&&H.clientX!=null){var I=document.documentElement,E=document.body;H.pageX=H.clientX+(I&&I.scrollLeft||E&&E.scrollLeft||0)-(I.clientLeft||0);H.pageY=H.clientY+(I&&I.scrollTop||E&&E.scrollTop||0)-(I.clientTop||0)}if(!H.which&&((H.charCode||H.charCode===0)?H.charCode:H.keyCode)){H.which=H.charCode||H.keyCode}if(!H.metaKey&&H.ctrlKey){H.metaKey=H.ctrlKey}if(!H.which&&H.button){H.which=(H.button&1?1:(H.button&2?3:(H.button&4?2:0)))}return H},proxy:function(F,E){E=E||function(){return F.apply(this,arguments)};E.guid=F.guid=F.guid||E.guid||this.guid++;return E},special:{ready:{setup:B,teardown:function(){}}},specialAll:{live:{setup:function(E,F){o.event.add(this,F[0],c)},teardown:function(G){if(G.length){var E=0,F=RegExp("(^|\\.)"+G[0]+"(\\.|$)");o.each((o.data(this,"events").live||{}),function(){if(F.test(this.type)){E++}});if(E<1){o.event.remove(this,G[0],c)}}}}}};o.Event=function(E){if(!this.preventDefault){return new o.Event(E)}if(E&&E.type){this.originalEvent=E;this.type=E.type}else{this.type=E}this.timeStamp=e();this[h]=true};function k(){return false}function u(){return true}o.Event.prototype={preventDefault:function(){this.isDefaultPrevented=u;var E=this.originalEvent;if(!E){return}if(E.preventDefault){E.preventDefault()}E.returnValue=false},stopPropagation:function(){this.isPropagationStopped=u;var E=this.originalEvent;if(!E){return}if(E.stopPropagation){E.stopPropagation()}E.cancelBubble=true},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=u;this.stopPropagation()},isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k};var a=function(F){var E=F.relatedTarget;while(E&&E!=this){try{E=E.parentNode}catch(G){E=this}}if(E!=this){F.type=F.data;o.event.handle.apply(this,arguments)}};o.each({mouseover:"mouseenter",mouseout:"mouseleave"},function(F,E){o.event.special[E]={setup:function(){o.event.add(this,F,a,E)},teardown:function(){o.event.remove(this,F,a)}}});o.fn.extend({bind:function(F,G,E){return F=="unload"?this.one(F,G,E):this.each(function(){o.event.add(this,F,E||G,E&&G)})},one:function(G,H,F){var E=o.event.proxy(F||H,function(I){o(this).unbind(I,E);return(F||H).apply(this,arguments)});return this.each(function(){o.event.add(this,G,E,F&&H)})},unbind:function(F,E){return this.each(function(){o.event.remove(this,F,E)})},trigger:function(E,F){return this.each(function(){o.event.trigger(E,F,this)})},triggerHandler:function(E,G){if(this[0]){var F=o.Event(E);F.preventDefault();F.stopPropagation();o.event.trigger(F,G,this[0]);return F.result}},toggle:function(G){var E=arguments,F=1;while(F<E.length){o.event.proxy(G,E[F++])}return this.click(o.event.proxy(G,function(H){this.lastToggle=(this.lastToggle||0)%F;H.preventDefault();return E[this.lastToggle++].apply(this,arguments)||false}))},hover:function(E,F){return this.mouseenter(E).mouseleave(F)},ready:function(E){B();if(o.isReady){E.call(document,o)}else{o.readyList.push(E)}return this},live:function(G,F){var E=o.event.proxy(F);E.guid+=this.selector+G;o(document).bind(i(G,this.selector),this.selector,E);return this},die:function(F,E){o(document).unbind(i(F,this.selector),E?{guid:E.guid+this.selector+F}:null);return this}});function c(H){var E=RegExp("(^|\\.)"+H.type+"(\\.|$)"),G=true,F=[];o.each(o.data(this,"events").live||[],function(I,J){if(E.test(J.type)){var K=o(H.target).closest(J.data)[0];if(K){F.push({elem:K,fn:J})}}});F.sort(function(J,I){return o.data(J.elem,"closest")-o.data(I.elem,"closest")});o.each(F,function(){if(this.fn.call(this.elem,H,this.fn.data)===false){return(G=false)}});return G}function i(F,E){return["live",F,E.replace(/\./g,"`").replace(/ /g,"|")].join(".")}o.extend({isReady:false,readyList:[],ready:function(){if(!o.isReady){o.isReady=true;if(o.readyList){o.each(o.readyList,function(){this.call(document,o)});o.readyList=null}o(document).triggerHandler("ready")}}});var x=false;function B(){if(x){return}x=true;if(document.addEventListener){document.addEventListener("DOMContentLoaded",function(){document.removeEventListener("DOMContentLoaded",arguments.callee,false);o.ready()},false)}else{if(document.attachEvent){document.attachEvent("onreadystatechange",function(){if(document.readyState==="complete"){document.detachEvent("onreadystatechange",arguments.callee);o.ready()}});if(document.documentElement.doScroll&&l==l.top){(function(){if(o.isReady){return}try{document.documentElement.doScroll("left")}catch(E){setTimeout(arguments.callee,0);return}o.ready()})()}}}o.event.add(l,"load",o.ready)}o.each(("blur,focus,load,resize,scroll,unload,click,dblclick,mousedown,mouseup,mousemove,mouseover,mouseout,mouseenter,mouseleave,change,select,submit,keydown,keypress,keyup,error").split(","),function(F,E){o.fn[E]=function(G){return G?this.bind(E,G):this.trigger(E)}});o(l).bind("unload",function(){for(var E in o.cache){if(E!=1&&o.cache[E].handle){o.event.remove(o.cache[E].handle.elem)}}});(function(){o.support={};var F=document.documentElement,G=document.createElement("script"),K=document.createElement("div"),J="script"+(new Date).getTime();K.style.display="none";K.innerHTML='   <link/><table></table><a href="/a" style="color:red;float:left;opacity:.5;">a</a><select><option>text</option></select><object><param/></object>';var H=K.getElementsByTagName("*"),E=K.getElementsByTagName("a")[0];if(!H||!H.length||!E){return}o.support={leadingWhitespace:K.firstChild.nodeType==3,tbody:!K.getElementsByTagName("tbody").length,objectAll:!!K.getElementsByTagName("object")[0].getElementsByTagName("*").length,htmlSerialize:!!K.getElementsByTagName("link").length,style:/red/.test(E.getAttribute("style")),hrefNormalized:E.getAttribute("href")==="/a",opacity:E.style.opacity==="0.5",cssFloat:!!E.style.cssFloat,scriptEval:false,noCloneEvent:true,boxModel:null};G.type="text/javascript";try{G.appendChild(document.createTextNode("window."+J+"=1;"))}catch(I){}F.insertBefore(G,F.firstChild);if(l[J]){o.support.scriptEval=true;delete l[J]}F.removeChild(G);if(K.attachEvent&&K.fireEvent){K.attachEvent("onclick",function(){o.support.noCloneEvent=false;K.detachEvent("onclick",arguments.callee)});K.cloneNode(true).fireEvent("onclick")}o(function(){var L=document.createElement("div");L.style.width=L.style.paddingLeft="1px";document.body.appendChild(L);o.boxModel=o.support.boxModel=L.offsetWidth===2;document.body.removeChild(L).style.display="none"})})();var w=o.support.cssFloat?"cssFloat":"styleFloat";o.props={"for":"htmlFor","class":"className","float":w,cssFloat:w,styleFloat:w,readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",tabindex:"tabIndex"};o.fn.extend({_load:o.fn.load,load:function(G,J,K){if(typeof G!=="string"){return this._load(G)}var I=G.indexOf(" ");if(I>=0){var E=G.slice(I,G.length);G=G.slice(0,I)}var H="GET";if(J){if(o.isFunction(J)){K=J;J=null}else{if(typeof J==="object"){J=o.param(J);H="POST"}}}var F=this;o.ajax({url:G,type:H,dataType:"html",data:J,complete:function(M,L){if(L=="success"||L=="notmodified"){F.html(E?o("<div/>").append(M.responseText.replace(/<script(.|\s)*?\/script>/g,"")).find(E):M.responseText)}if(K){F.each(K,[M.responseText,L,M])}}});return this},serialize:function(){return o.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?o.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||/select|textarea/i.test(this.nodeName)||/text|hidden|password|search/i.test(this.type))}).map(function(E,F){var G=o(this).val();return G==null?null:o.isArray(G)?o.map(G,function(I,H){return{name:F.name,value:I}}):{name:F.name,value:G}}).get()}});o.each("ajaxStart,ajaxStop,ajaxComplete,ajaxError,ajaxSuccess,ajaxSend".split(","),function(E,F){o.fn[F]=function(G){return this.bind(F,G)}});var r=e();o.extend({get:function(E,G,H,F){if(o.isFunction(G)){H=G;G=null}return o.ajax({type:"GET",url:E,data:G,success:H,dataType:F})},getScript:function(E,F){return o.get(E,null,F,"script")},getJSON:function(E,F,G){return o.get(E,F,G,"json")},post:function(E,G,H,F){if(o.isFunction(G)){H=G;G={}}return o.ajax({type:"POST",url:E,data:G,success:H,dataType:F})},ajaxSetup:function(E){o.extend(o.ajaxSettings,E)},ajaxSettings:{url:location.href,global:true,type:"GET",contentType:"application/x-www-form-urlencoded",processData:true,async:true,xhr:function(){return l.ActiveXObject?new ActiveXObject("Microsoft.XMLHTTP"):new XMLHttpRequest()},accepts:{xml:"application/xml, text/xml",html:"text/html",script:"text/javascript, application/javascript",json:"application/json, text/javascript",text:"text/plain",_default:"*/*"}},lastModified:{},ajax:function(M){M=o.extend(true,M,o.extend(true,{},o.ajaxSettings,M));var W,F=/=\?(&|$)/g,R,V,G=M.type.toUpperCase();if(M.data&&M.processData&&typeof M.data!=="string"){M.data=o.param(M.data)}if(M.dataType=="jsonp"){if(G=="GET"){if(!M.url.match(F)){M.url+=(M.url.match(/\?/)?"&":"?")+(M.jsonp||"callback")+"=?"}}else{if(!M.data||!M.data.match(F)){M.data=(M.data?M.data+"&":"")+(M.jsonp||"callback")+"=?"}}M.dataType="json"}if(M.dataType=="json"&&(M.data&&M.data.match(F)||M.url.match(F))){W="jsonp"+r++;if(M.data){M.data=(M.data+"").replace(F,"="+W+"$1")}M.url=M.url.replace(F,"="+W+"$1");M.dataType="script";l[W]=function(X){V=X;I();L();l[W]=g;try{delete l[W]}catch(Y){}if(H){H.removeChild(T)}}}if(M.dataType=="script"&&M.cache==null){M.cache=false}if(M.cache===false&&G=="GET"){var E=e();var U=M.url.replace(/(\?|&)_=.*?(&|$)/,"$1_="+E+"$2");M.url=U+((U==M.url)?(M.url.match(/\?/)?"&":"?")+"_="+E:"")}if(M.data&&G=="GET"){M.url+=(M.url.match(/\?/)?"&":"?")+M.data;M.data=null}if(M.global&&!o.active++){o.event.trigger("ajaxStart")}var Q=/^(\w+:)?\/\/([^\/?#]+)/.exec(M.url);if(M.dataType=="script"&&G=="GET"&&Q&&(Q[1]&&Q[1]!=location.protocol||Q[2]!=location.host)){var H=document.getElementsByTagName("head")[0];var T=document.createElement("script");T.src=M.url;if(M.scriptCharset){T.charset=M.scriptCharset}if(!W){var O=false;T.onload=T.onreadystatechange=function(){if(!O&&(!this.readyState||this.readyState=="loaded"||this.readyState=="complete")){O=true;I();L();T.onload=T.onreadystatechange=null;H.removeChild(T)}}}H.appendChild(T);return g}var K=false;var J=M.xhr();if(M.username){J.open(G,M.url,M.async,M.username,M.password)}else{J.open(G,M.url,M.async)}try{if(M.data){J.setRequestHeader("Content-Type",M.contentType)}if(M.ifModified){J.setRequestHeader("If-Modified-Since",o.lastModified[M.url]||"Thu, 01 Jan 1970 00:00:00 GMT")}J.setRequestHeader("X-Requested-With","XMLHttpRequest");J.setRequestHeader("Accept",M.dataType&&M.accepts[M.dataType]?M.accepts[M.dataType]+", */*":M.accepts._default)}catch(S){}if(M.beforeSend&&M.beforeSend(J,M)===false){if(M.global&&!--o.active){o.event.trigger("ajaxStop")}J.abort();return false}if(M.global){o.event.trigger("ajaxSend",[J,M])}var N=function(X){if(J.readyState==0){if(P){clearInterval(P);P=null;if(M.global&&!--o.active){o.event.trigger("ajaxStop")}}}else{if(!K&&J&&(J.readyState==4||X=="timeout")){K=true;if(P){clearInterval(P);P=null}R=X=="timeout"?"timeout":!o.httpSuccess(J)?"error":M.ifModified&&o.httpNotModified(J,M.url)?"notmodified":"success";if(R=="success"){try{V=o.httpData(J,M.dataType,M)}catch(Z){R="parsererror"}}if(R=="success"){var Y;try{Y=J.getResponseHeader("Last-Modified")}catch(Z){}if(M.ifModified&&Y){o.lastModified[M.url]=Y}if(!W){I()}}else{o.handleError(M,J,R)}L();if(X){J.abort()}if(M.async){J=null}}}};if(M.async){var P=setInterval(N,13);if(M.timeout>0){setTimeout(function(){if(J&&!K){N("timeout")}},M.timeout)}}try{J.send(M.data)}catch(S){o.handleError(M,J,null,S)}if(!M.async){N()}function I(){if(M.success){M.success(V,R)}if(M.global){o.event.trigger("ajaxSuccess",[J,M])}}function L(){if(M.complete){M.complete(J,R)}if(M.global){o.event.trigger("ajaxComplete",[J,M])}if(M.global&&!--o.active){o.event.trigger("ajaxStop")}}return J},handleError:function(F,H,E,G){if(F.error){F.error(H,E,G)}if(F.global){o.event.trigger("ajaxError",[H,F,G])}},active:0,httpSuccess:function(F){try{return !F.status&&location.protocol=="file:"||(F.status>=200&&F.status<300)||F.status==304||F.status==1223}catch(E){}return false},httpNotModified:function(G,E){try{var H=G.getResponseHeader("Last-Modified");return G.status==304||H==o.lastModified[E]}catch(F){}return false},httpData:function(J,H,G){var F=J.getResponseHeader("content-type"),E=H=="xml"||!H&&F&&F.indexOf("xml")>=0,I=E?J.responseXML:J.responseText;if(E&&I.documentElement.tagName=="parsererror"){throw"parsererror"}if(G&&G.dataFilter){I=G.dataFilter(I,H)}if(typeof I==="string"){if(H=="script"){o.globalEval(I)}if(H=="json"){I=l["eval"]("("+I+")")}}return I},param:function(E){var G=[];function H(I,J){G[G.length]=encodeURIComponent(I)+"="+encodeURIComponent(J)}if(o.isArray(E)||E.jquery){o.each(E,function(){H(this.name,this.value)})}else{for(var F in E){if(o.isArray(E[F])){o.each(E[F],function(){H(F,this)})}else{H(F,o.isFunction(E[F])?E[F]():E[F])}}}return G.join("&").replace(/%20/g,"+")}});var m={},n,d=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];function t(F,E){var G={};o.each(d.concat.apply([],d.slice(0,E)),function(){G[this]=F});return G}o.fn.extend({show:function(J,L){if(J){return this.animate(t("show",3),J,L)}else{for(var H=0,F=this.length;H<F;H++){var E=o.data(this[H],"olddisplay");this[H].style.display=E||"";if(o.css(this[H],"display")==="none"){var G=this[H].tagName,K;if(m[G]){K=m[G]}else{var I=o("<"+G+" />").appendTo("body");K=I.css("display");if(K==="none"){K="block"}I.remove();m[G]=K}o.data(this[H],"olddisplay",K)}}for(var H=0,F=this.length;H<F;H++){this[H].style.display=o.data(this[H],"olddisplay")||""}return this}},hide:function(H,I){if(H){return this.animate(t("hide",3),H,I)}else{for(var G=0,F=this.length;G<F;G++){var E=o.data(this[G],"olddisplay");if(!E&&E!=="none"){o.data(this[G],"olddisplay",o.css(this[G],"display"))}}for(var G=0,F=this.length;G<F;G++){this[G].style.display="none"}return this}},_toggle:o.fn.toggle,toggle:function(G,F){var E=typeof G==="boolean";return o.isFunction(G)&&o.isFunction(F)?this._toggle.apply(this,arguments):G==null||E?this.each(function(){var H=E?G:o(this).is(":hidden");o(this)[H?"show":"hide"]()}):this.animate(t("toggle",3),G,F)},fadeTo:function(E,G,F){return this.animate({opacity:G},E,F)},animate:function(I,F,H,G){var E=o.speed(F,H,G);return this[E.queue===false?"each":"queue"](function(){var K=o.extend({},E),M,L=this.nodeType==1&&o(this).is(":hidden"),J=this;for(M in I){if(I[M]=="hide"&&L||I[M]=="show"&&!L){return K.complete.call(this)}if((M=="height"||M=="width")&&this.style){K.display=o.css(this,"display");K.overflow=this.style.overflow}}if(K.overflow!=null){this.style.overflow="hidden"}K.curAnim=o.extend({},I);o.each(I,function(O,S){var R=new o.fx(J,K,O);if(/toggle|show|hide/.test(S)){R[S=="toggle"?L?"show":"hide":S](I)}else{var Q=S.toString().match(/^([+-]=)?([\d+-.]+)(.*)$/),T=R.cur(true)||0;if(Q){var N=parseFloat(Q[2]),P=Q[3]||"px";if(P!="px"){J.style[O]=(N||1)+P;T=((N||1)/R.cur(true))*T;J.style[O]=T+P}if(Q[1]){N=((Q[1]=="-="?-1:1)*N)+T}R.custom(T,N,P)}else{R.custom(T,S,"")}}});return true})},stop:function(F,E){var G=o.timers;if(F){this.queue([])}this.each(function(){for(var H=G.length-1;H>=0;H--){if(G[H].elem==this){if(E){G[H](true)}G.splice(H,1)}}});if(!E){this.dequeue()}return this}});o.each({slideDown:t("show",1),slideUp:t("hide",1),slideToggle:t("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"}},function(E,F){o.fn[E]=function(G,H){return this.animate(F,G,H)}});o.extend({speed:function(G,H,F){var E=typeof G==="object"?G:{complete:F||!F&&H||o.isFunction(G)&&G,duration:G,easing:F&&H||H&&!o.isFunction(H)&&H};E.duration=o.fx.off?0:typeof E.duration==="number"?E.duration:o.fx.speeds[E.duration]||o.fx.speeds._default;E.old=E.complete;E.complete=function(){if(E.queue!==false){o(this).dequeue()}if(o.isFunction(E.old)){E.old.call(this)}};return E},easing:{linear:function(G,H,E,F){return E+F*G},swing:function(G,H,E,F){return((-Math.cos(G*Math.PI)/2)+0.5)*F+E}},timers:[],fx:function(F,E,G){this.options=E;this.elem=F;this.prop=G;if(!E.orig){E.orig={}}}});o.fx.prototype={update:function(){if(this.options.step){this.options.step.call(this.elem,this.now,this)}(o.fx.step[this.prop]||o.fx.step._default)(this);if((this.prop=="height"||this.prop=="width")&&this.elem.style){this.elem.style.display="block"}},cur:function(F){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null)){return this.elem[this.prop]}var E=parseFloat(o.css(this.elem,this.prop,F));return E&&E>-10000?E:parseFloat(o.curCSS(this.elem,this.prop))||0},custom:function(I,H,G){this.startTime=e();this.start=I;this.end=H;this.unit=G||this.unit||"px";this.now=this.start;this.pos=this.state=0;var E=this;function F(J){return E.step(J)}F.elem=this.elem;if(F()&&o.timers.push(F)&&!n){n=setInterval(function(){var K=o.timers;for(var J=0;J<K.length;J++){if(!K[J]()){K.splice(J--,1)}}if(!K.length){clearInterval(n);n=g}},13)}},show:function(){this.options.orig[this.prop]=o.attr(this.elem.style,this.prop);this.options.show=true;this.custom(this.prop=="width"||this.prop=="height"?1:0,this.cur());o(this.elem).show()},hide:function(){this.options.orig[this.prop]=o.attr(this.elem.style,this.prop);this.options.hide=true;this.custom(this.cur(),0)},step:function(H){var G=e();if(H||G>=this.options.duration+this.startTime){this.now=this.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;var E=true;for(var F in this.options.curAnim){if(this.options.curAnim[F]!==true){E=false}}if(E){if(this.options.display!=null){this.elem.style.overflow=this.options.overflow;this.elem.style.display=this.options.display;if(o.css(this.elem,"display")=="none"){this.elem.style.display="block"}}if(this.options.hide){o(this.elem).hide()}if(this.options.hide||this.options.show){for(var I in this.options.curAnim){o.attr(this.elem.style,I,this.options.orig[I])}}this.options.complete.call(this.elem)}return false}else{var J=G-this.startTime;this.state=J/this.options.duration;this.pos=o.easing[this.options.easing||(o.easing.swing?"swing":"linear")](this.state,J,0,1,this.options.duration);this.now=this.start+((this.end-this.start)*this.pos);this.update()}return true}};o.extend(o.fx,{speeds:{slow:600,fast:200,_default:400},step:{opacity:function(E){o.attr(E.elem.style,"opacity",E.now)},_default:function(E){if(E.elem.style&&E.elem.style[E.prop]!=null){E.elem.style[E.prop]=E.now+E.unit}else{E.elem[E.prop]=E.now}}}});if(document.documentElement.getBoundingClientRect){o.fn.offset=function(){if(!this[0]){return{top:0,left:0}}if(this[0]===this[0].ownerDocument.body){return o.offset.bodyOffset(this[0])}var G=this[0].getBoundingClientRect(),J=this[0].ownerDocument,F=J.body,E=J.documentElement,L=E.clientTop||F.clientTop||0,K=E.clientLeft||F.clientLeft||0,I=G.top+(self.pageYOffset||o.boxModel&&E.scrollTop||F.scrollTop)-L,H=G.left+(self.pageXOffset||o.boxModel&&E.scrollLeft||F.scrollLeft)-K;return{top:I,left:H}}}else{o.fn.offset=function(){if(!this[0]){return{top:0,left:0}}if(this[0]===this[0].ownerDocument.body){return o.offset.bodyOffset(this[0])}o.offset.initialized||o.offset.initialize();var J=this[0],G=J.offsetParent,F=J,O=J.ownerDocument,M,H=O.documentElement,K=O.body,L=O.defaultView,E=L.getComputedStyle(J,null),N=J.offsetTop,I=J.offsetLeft;while((J=J.parentNode)&&J!==K&&J!==H){M=L.getComputedStyle(J,null);N-=J.scrollTop,I-=J.scrollLeft;if(J===G){N+=J.offsetTop,I+=J.offsetLeft;if(o.offset.doesNotAddBorder&&!(o.offset.doesAddBorderForTableAndCells&&/^t(able|d|h)$/i.test(J.tagName))){N+=parseInt(M.borderTopWidth,10)||0,I+=parseInt(M.borderLeftWidth,10)||0}F=G,G=J.offsetParent}if(o.offset.subtractsBorderForOverflowNotVisible&&M.overflow!=="visible"){N+=parseInt(M.borderTopWidth,10)||0,I+=parseInt(M.borderLeftWidth,10)||0}E=M}if(E.position==="relative"||E.position==="static"){N+=K.offsetTop,I+=K.offsetLeft}if(E.position==="fixed"){N+=Math.max(H.scrollTop,K.scrollTop),I+=Math.max(H.scrollLeft,K.scrollLeft)}return{top:N,left:I}}}o.offset={initialize:function(){if(this.initialized){return}var L=document.body,F=document.createElement("div"),H,G,N,I,M,E,J=L.style.marginTop,K='<div style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;"><div></div></div><table style="position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;" cellpadding="0" cellspacing="0"><tr><td></td></tr></table>';M={position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"};for(E in M){F.style[E]=M[E]}F.innerHTML=K;L.insertBefore(F,L.firstChild);H=F.firstChild,G=H.firstChild,I=H.nextSibling.firstChild.firstChild;this.doesNotAddBorder=(G.offsetTop!==5);this.doesAddBorderForTableAndCells=(I.offsetTop===5);H.style.overflow="hidden",H.style.position="relative";this.subtractsBorderForOverflowNotVisible=(G.offsetTop===-5);L.style.marginTop="1px";this.doesNotIncludeMarginInBodyOffset=(L.offsetTop===0);L.style.marginTop=J;L.removeChild(F);this.initialized=true},bodyOffset:function(E){o.offset.initialized||o.offset.initialize();var G=E.offsetTop,F=E.offsetLeft;if(o.offset.doesNotIncludeMarginInBodyOffset){G+=parseInt(o.curCSS(E,"marginTop",true),10)||0,F+=parseInt(o.curCSS(E,"marginLeft",true),10)||0}return{top:G,left:F}}};o.fn.extend({position:function(){var I=0,H=0,F;if(this[0]){var G=this.offsetParent(),J=this.offset(),E=/^body|html$/i.test(G[0].tagName)?{top:0,left:0}:G.offset();J.top-=j(this,"marginTop");J.left-=j(this,"marginLeft");E.top+=j(G,"borderTopWidth");E.left+=j(G,"borderLeftWidth");F={top:J.top-E.top,left:J.left-E.left}}return F},offsetParent:function(){var E=this[0].offsetParent||document.body;while(E&&(!/^body|html$/i.test(E.tagName)&&o.css(E,"position")=="static")){E=E.offsetParent}return o(E)}});o.each(["Left","Top"],function(F,E){var G="scroll"+E;o.fn[G]=function(H){if(!this[0]){return null}return H!==g?this.each(function(){this==l||this==document?l.scrollTo(!F?H:o(l).scrollLeft(),F?H:o(l).scrollTop()):this[G]=H}):this[0]==l||this[0]==document?self[F?"pageYOffset":"pageXOffset"]||o.boxModel&&document.documentElement[G]||document.body[G]:this[0][G]}});o.each(["Height","Width"],function(I,G){var E=I?"Left":"Top",H=I?"Right":"Bottom",F=G.toLowerCase();o.fn["inner"+G]=function(){return this[0]?o.css(this[0],F,false,"padding"):null};o.fn["outer"+G]=function(K){return this[0]?o.css(this[0],F,false,K?"margin":"border"):null};var J=G.toLowerCase();o.fn[J]=function(K){return this[0]==l?document.compatMode=="CSS1Compat"&&document.documentElement["client"+G]||document.body["client"+G]:this[0]==document?Math.max(document.documentElement["client"+G],document.body["scroll"+G],document.documentElement["scroll"+G],document.body["offset"+G],document.documentElement["offset"+G]):K===g?(this.length?o.css(this[0],J):null):this.css(J,typeof K==="string"?K:K+"px")}})})();

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/rdoc/generator/template/sdoc/resources/js/jquery-effect.js:
   59  			return element.parent();
   60  
   61: 		//Cache width,height and float properties of the element, and create a wrapper around it
   62  		var props = { width: element.outerWidth(true), height: element.outerHeight(true), 'float': element.css('float') };
   63  		element.wrap('<div class="ui-effects-wrapper" style="font-size:100%;background:transparent;border:none;margin:0;padding:0"></div>');

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/sdoc/generator.rb:
  154        @options.diagram = false
  155      end
  156:     @github_url_cache = {}
  157  
  158      @template_dir = Pathname.new(options.template_dir)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sdoc-0.3.20/lib/sdoc/github.rb:
    1  module SDoc::GitHub
    2    def github_url(path)
    3:     unless @github_url_cache.has_key? path
    4:       @github_url_cache[path] = false
    5        file = RDoc::TopLevel.find_file_named(path)
    6        if file
    .
   10            if sha1
   11              relative_url = path_relative_to_repository(path)
   12:             @github_url_cache[path] = "#{base_url}#{sha1}#{relative_url}"
   13            end
   14          end
   15        end
   16      end
   17:     @github_url_cache[path]
   18    end
   19    

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/select2-rails-3.5.2/app/assets/javascripts/select2.js:
  395       *
  396       * @param options object containing configuration paramters
  397:      * @param options.params parameter map for the transport ajax call, can contain such options as cache, jsonpCallback, etc. see $.ajax
  398       * @param options.transport function that will be used to execute the ajax request. must be compatible with parameters supported by $.ajax
  399       * @param options.url url for the data
  ...
  423                      deprecated = {
  424                          type: options.type || 'GET', // set type of request (GET or POST)
  425:                         cache: options.cache || false,
  426                          jsonpCallback: options.jsonpCallback||undefined,
  427                          dataType: options.dataType||"json"
  ...
  674              this.container.attr("id", this.containerId);
  675  
  676:             // cache the body so future lookups are cheap
  677              this.body = thunk(function() { return opts.element.closest("body"); });
  678  
  ...
 3230          params: {
 3231              type: "GET",
 3232:             cache: false,
 3233              dataType: "json"
 3234          }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/shoulda-matchers-2.1.0/Gemfile.lock:
   18        journey (~> 1.0.4)
   19        rack (~> 1.4.0)
   20:       rack-cache (~> 1.2)
   21        rack-test (~> 0.6.1)
   22        sprockets (~> 2.2.1)
   ..
   73      polyglot (0.3.3)
   74      rack (1.4.5)
   75:     rack-cache (1.2)
   76        rack (>= 0.4)
   77      rack-ssl (1.3.3)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/shoulda-matchers-2.1.0/gemfiles/3.1.gemfile.lock:
   18        i18n (~> 0.6)
   19        rack (~> 1.3.6)
   20:       rack-cache (~> 1.2)
   21        rack-mount (~> 0.8.2)
   22        rack-test (~> 0.6.1)
   ..
   76      polyglot (0.3.3)
   77      rack (1.3.10)
   78:     rack-cache (1.2)
   79        rack (>= 0.4)
   80      rack-mount (0.8.3)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/shoulda-matchers-2.1.0/gemfiles/3.2.gemfile.lock:
   18        journey (~> 1.0.4)
   19        rack (~> 1.4.5)
   20:       rack-cache (~> 1.2)
   21        rack-test (~> 0.6.1)
   22        sprockets (~> 2.2.1)
   ..
   76      polyglot (0.3.3)
   77      rack (1.4.5)
   78:     rack-cache (1.2)
   79        rack (>= 0.4)
   80      rack-ssl (1.3.3)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sidekiq-2.17.0/.gitignore:
    9  vendor/
   10  .bundle/
   11: .sass-cache/
   12  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sidekiq-2.17.0/Pro-Changes.md:
   87    by @jackrg [#1102]
   88  - Fix issue with reliable\_push where it didn't return the JID for a pushed
   89:   job when sending previously cached jobs to Redis.
   90  - Add fast Sidekiq::Queue#delete\_job(jid) API which leverages Lua so job lookup is
   91    100% server-side.  Benchmark vs Sidekiq's Job#delete API:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sidekiq-2.17.0/web/assets/javascripts/application.js:
    1  /*! jQuery v1.8.2 jquery.com | jquery.org/license */
    2: (function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window);
    3  
    4  /**

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/CHANGELOG.md:
  250  
  251    * The exceptions you used to get after removing some code and re-running your tests because SimpleCov
  252:     couldn't find the cached source lines should be resolved (thanks @goneflyin)
  253  
  254    * Coverage strength metric: Average hits/line per source file and result group (thanks @trans)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/lib/simplecov.rb:
   39      #
   40      # Returns the result for the current coverage run, merging it across test suites
   41:     # from cache using SimpleCov::ResultMerger if use_merging is activated (default)
   42      #
   43      def result

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/lib/simplecov/command_guesser.rb:
    7      # This has got to be stored as early as possible because i.e. rake and test/unit 2
    8      # have a habit of tampering with ARGV, which makes i.e. the automatic distinction
    9:     # between rails unit/functional/integration tests impossible without this cached
   10      # item.
   11      attr_accessor :original_run_command

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/lib/simplecov/configuration.rb:
   21  
   22    #
   23:   # The name of the output and cache directory. Defaults to 'coverage'
   24    #
   25    # Configure with SimpleCov.coverage_dir('cov')
   ..
  163    # i.e. If you run cucumber features, then later rake test, if the stored cucumber resultset is
  164    # more seconds ago than specified here, it won't be taken into account when merging (and is also
  165:   # purged from the resultset cache)
  166    #
  167    # Of course, this only applies when merging is active (e.g. SimpleCov.use_merging is not false!)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/lib/simplecov/result_merger.rb:
    6  module SimpleCov::ResultMerger
    7    class << self
    8:     # The path to the .resultset.json cache file
    9      def resultset_path
   10        File.join(SimpleCov.coverage_path, '.resultset.json')
   11      end
   12  
   13:     # Loads the cached resultset from YAML and returns it as a Hash
   14      def resultset
   15        if stored_data
   ..
   24      end
   25  
   26:     # Returns the contents of the resultset cache as a string or if the file is missing or empty nil
   27      def stored_data
   28        if File.exist?(resultset_path) and stored_data = File.read(resultset_path) and stored_data.length >= 2
   ..
   50  
   51      #
   52:     # Gets all SimpleCov::Results from cache, merges them and produces a new
   53      # SimpleCov::Result with merged coverage data and the command_name
   54      # for the result consisting of a join on all source result's names
   ..
   65      end
   66  
   67:     # Saves the given SimpleCov::Result in the resultset cache
   68      def store_result(result)
   69        new_set = resultset

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/README.md:
  157   <td>
  158    As of 0.8.0, SimpleCov should correctly recognize parallel_tests and supplement your test suite names
  159:   with their corresponding test env numbers. Locking of the resultset cache should ensure no race conditions
  160    occur when results are merged.
  161   </td>
  ...
  336  Normally, you want to have your coverage analyzed across ALL of your test suites, right?
  337  
  338: Simplecov automatically caches coverage results in your (coverage_path)/.resultset.json. Those results will then
  339  be automatically merged when generating the result, so when coverage is set up properly for cucumber and your
  340  unit / functional / integration tests, all of those test suites will be taken into account when building the
  ...
  378  ### Timeout for merge
  379  
  380: Of course, your cached coverage data is likely to become invalid at some point. Thus, result sets that are older than
  381  SimpleCov.merge_timeout will not be used any more. By default, the timeout is 600 seconds (10 minutes), and you can
  382  raise (or lower) it by specifying `SimpleCov.merge_timeout 3600` (1 hour), or, inside a configure/start block, with

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-0.8.2/test/test_merge_helpers.rb:
   43  
   44      # See Github issue #6
   45:     should "return an empty hash when the resultset cache file is empty" do
   46        File.open(SimpleCov::ResultMerger.resultset_path, "w+") {|f| f.puts ""}
   47        assert_equal Hash.new, SimpleCov::ResultMerger.resultset
   ..
   49  
   50      # See Github issue #6
   51:     should "return an empty hash when the resultset cache file is not present" do
   52        system "rm #{SimpleCov::ResultMerger.resultset_path}" if File.exist?(SimpleCov::ResultMerger.resultset_path)
   53        assert_equal Hash.new, SimpleCov::ResultMerger.resultset

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-html-0.8.0/.gitignore:
   22  rdoc
   23  pkg
   24: .sass-cache
   25  
   26  ## PROJECT::SPECIFIC

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-html-0.8.0/assets/javascripts/libraries/jquery-1.6.2.min.js:
   14   * Date: Thu Jun 30 14:16:56 2011 -0400
   15   */
   16: (function(a,b){function cv(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cs(a){if(!cg[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ch||(ch=c.createElement("iframe"),ch.frameBorder=ch.width=ch.height=0),b.appendChild(ch);if(!ci||!ch.createElement)ci=(ch.contentWindow||ch.contentDocument).document,ci.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),ci.close();d=ci.createElement(a),ci.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ch)}cg[a]=e}return cg[a]}function cr(a,b){var c={};f.each(cm.concat.apply([],cm.slice(0,b)),function(){c[this]=a});return c}function cq(){cn=b}function cp(){setTimeout(cq,0);return cn=f.now()}function cf(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ce(){try{return new a.XMLHttpRequest}catch(b){}}function b$(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bZ(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bY(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bC.test(a)?d(a,e):bY(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)bY(a+"["+e+"]",b[e],c,d);else d(a,b)}function bX(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bR,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bX(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bX(a,c,d,e,"*",g));return l}function bW(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bN),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bA(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bv:bw;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bx(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function bm(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(be,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bl(a){f.nodeName(a,"input")?bk(a):"getElementsByTagName"in a&&f.grep(a.getElementsByTagName("input"),bk)}function bk(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bj(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function bi(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bh(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c=f.expando,d=f.data(a),e=f.data(b,d);if(d=d[c]){var g=d.events;e=e[c]=f.extend({},d);if(g){delete e.handle,e.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)f.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function bg(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function W(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(R.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function V(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function N(a,b){return(a&&a!=="*"?a+".":"")+b.replace(z,"`").replace(A,"&")}function M(a){var b,c,d,e,g,h,i,j,k,l,m,n,o,p=[],q=[],r=f._data(this,"events");if(!(a.liveFired===this||!r||!r.live||a.target.disabled||a.button&&a.type==="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var s=r.live.slice(0);for(i=0;i<s.length;i++)g=s[i],g.origType.replace(x,"")===a.type?q.push(g.selector):s.splice(i--,1);e=f(a.target).closest(q,a.currentTarget);for(j=0,k=e.length;j<k;j++){m=e[j];for(i=0;i<s.length;i++){g=s[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,d=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,d=f(a.relatedTarget).closest(g.selector)[0],d&&f.contains(h,d)&&(d=h);(!d||d!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){e=p[j];if(c&&e.level>c)break;a.currentTarget=e.elem,a.data=e.handleObj.data,a.handleObj=e.handleObj,o=e.handleObj.origHandler.apply(e.elem,arguments);if(o===!1||a.isPropagationStopped()){c=e.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function K(a,c,d){var e=f.extend({},d[0]);e.type=a,e.originalEvent={},e.liveFired=b,f.event.handle.call(c,e),e.isDefaultPrevented()&&d[0].preventDefault()}function E(){return!0}function D(){return!1}function m(a,c,d){var e=c+"defer",g=c+"queue",h=c+"mark",i=f.data(a,e,b,!0);i&&(d==="queue"||!f.data(a,g,b,!0))&&(d==="mark"||!f.data(a,h,b,!0))&&setTimeout(function(){!f.data(a,g,b,!0)&&!f.data(a,h,b,!0)&&(f.removeData(a,e,!0),i.resolve())},0)}function l(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function k(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(j,"$1-$2").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNaN(d)?i.test(d)?f.parseJSON(d):d:parseFloat(d)}catch(g){}f.data(a,c,d)}else d=b}return d}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z])/ig,x=function(a,b){return b.toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.6.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.resolveWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!A){A=e._Deferred();if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNaN:function(a){return a==null||!m.test(a)||isNaN(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a);return c===b||D.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(b,c,d){a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),d=c.documentElement,(!d||!d.nodeName||d.nodeName==="parsererror")&&e.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b){if(H)return H.call(b,a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g="done fail isResolved isRejected promise then always pipe".split(" "),h=[].slice;f.extend({_Deferred:function(){var a=[],b,c,d,e={done:function(){if(!d){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=f.type(i),j==="array"?e.done.apply(e,i):j==="function"&&a.push(i);k&&e.resolveWith(k[0],k[1])}return this},resolveWith:function(e,f){if(!d&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(e,f)}finally{b=[e,f],c=0}}return this},resolve:function(){e.resolveWith(this,arguments);return this},isResolved:function(){return!!c||!!b},cancel:function(){d=1,a=[];return this}};return e},Deferred:function(a){var b=f._Deferred(),c=f._Deferred(),d;f.extend(b,{then:function(a,c){b.done(a).fail(c);return this},always:function(){return b.done.apply(b,arguments).fail.apply(this,arguments)},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,pipe:function(a,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[c,"reject"]},function(a,c){var e=c[0],g=c[1],h;f.isFunction(e)?b[a](function(){h=e.apply(this,arguments),h&&f.isFunction(h.promise)?h.promise().then(d.resolve,d.reject):d[g](h)}):b[a](d[g])})}).promise()},promise:function(a){if(a==null){if(d)return d;d=a={}}var c=g.length;while(c--)a[g[c]]=b[g[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?h.call(arguments,0):c,--e||g.resolveWith(g,h.call(b,0))}}var b=arguments,c=0,d=b.length,e=d,g=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred();if(d>1){for(;c<d;c++)b[c]&&f.isFunction(b[c].promise)?b[c].promise().then(i(c),g.reject):--e;e||g.resolveWith(g,b)}else g!==a&&g.resolveWith(g,d?[a]:[]);return g.promise()}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55$/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.firstChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0},m&&f.extend(p,{position:"absolute",left:-1e3,top:-1e3});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0),o.innerHTML="",n.removeChild(o);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var i=/^(?:\{.*\}|\[.*\])$/,j=/([a-z])([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!l(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g=f.expando,h=typeof c=="string",i,j=a.nodeType,k=j?f.cache:a,l=j?a[f.expando]:a[f.expando]&&f.expando;if((!l||e&&l&&!k[l][g])&&h&&d===b)return;l||(j?a[f.expando]=l=++f.uuid:l=f.expando),k[l]||(k[l]={},j||(k[l].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?k[l][g]=f.extend(k[l][g],c):k[l]=f.extend(k[l],c);i=k[l],e&&(i[g]||(i[g]={}),i=i[g]),d!==b&&(i[f.camelCase(c)]=d);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[f.camelCase(c)]||i[c]:i}},removeData:function(b,c,d){if(!!f.acceptData(b)){var e=f.expando,g=b.nodeType,h=g?f.cache:b,i=g?b[f.expando]:f.expando;if(!h[i])return;if(c){var j=d?h[i][e]:h[i];if(j){delete j[c];if(!l(j))return}}if(d){delete h[i][e];if(!l(h[i]))return}var k=h[i][e];f.support.deleteExpando||h!=a?delete h[i]:h[i]=null,k?(h[i]={},g||(h[i].toJSON=f.noop),h[i][e]=k):g&&(f.support.deleteExpando?delete b[f.expando]:b.removeAttribute?b.removeAttribute(f.expando):b[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d=null;if(typeof a=="undefined"){if(this.length){d=f.data(this[0]);if(this[0].nodeType===1){var e=this[0].attributes,g;for(var h=0,i=e.length;h<i;h++)g=e[h].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),k(this[0],g,d[g]))}}return d}if(typeof a=="object")return this.each(function(){f.data(this,a)});var j=a.split(".");j[1]=j[1]?"."+j[1]:"";if(c===b){d=this.triggerHandler("getData"+j[1]+"!",[j[0]]),d===b&&this.length&&(d=f.data(this[0],a),d=k(this[0],a,d));return d===b&&j[1]?this.data(j[0]):d}return this.each(function(){var b=f(this),d=[j[0],c];b.triggerHandler("setData"+j[1]+"!",d),f.data(this,a,c),b.triggerHandler("changeData"+j[1]+"!",d)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,c){a&&(c=(c||"fx")+"mark",f.data(a,c,(f.data(a,c,b,!0)||0)+1,!0))},_unmark:function(a,c,d){a!==!0&&(d=c,c=a,a=!1);if(c){d=d||"fx";var e=d+"mark",g=a?0:(f.data(c,e,b,!0)||1)-1;g?f.data(c,e,g,!0):(f.removeData(c,e,!0),m(c,d,"mark"))}},queue:function(a,c,d){if(a){c=(c||"fx")+"queue";var e=f.data(a,c,b,!0);d&&(!e||f.isArray(d)?e=f.data(a,c,f.makeArray(d),!0):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e;d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),d.call(a,function(){f.dequeue(a,b)})),c.length||(f.removeData(a,b+"queue",!0),m(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){f.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f._Deferred(),!0))h++,l.done(m);m();return d.promise()}});var n=/[\n\t\r]/g,o=/\s+/,p=/\r/g,q=/^(?:button|input)$/i,r=/^(?:button|input|object|select|textarea)$/i,s=/^a(?:rea)?$/i,t=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,u=/\:|^on/,v,w;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(o);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(o);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(n," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(o);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(n," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e=this[0];if(!arguments.length){if(e){c=f.valHooks[e.nodeName.toLowerCase()]||f.valHooks[e.type];if(c&&"get"in c&&(d=c.get(e,"value"))!==b)return d;d=e.value;return typeof d=="string"?d.replace(p,""):d==null?"":d}return b}var g=f.isFunction(a);return this.each(function(d){var e=f(this),h;if(this.nodeType===1){g?h=a.call(this,d,e.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c=a.selectedIndex,d=[],e=a.options,g=a.type==="select-one";if(c<0)return null;for(var h=g?c:0,i=g?c+1:e.length;h<i;h++){var j=e[h];if(j.selected&&(f.support.optDisabled?!j.disabled:j.getAttribute("disabled")===null)&&(!j.parentNode.disabled||!f.nodeName(j.parentNode,"optgroup"))){b=f(j).val();if(g)return b;d.push(b)}}if(g&&!d.length&&e.length)return f(e[c]).val();return d},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attrFix:{tabindex:"tabIndex"},attr:function(a,c,d,e){var g=a.nodeType;if(!a||g===3||g===8||g===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);var h,i,j=g!==1||!f.isXMLDoc(a);j&&(c=f.attrFix[c]||c,i=f.attrHooks[c],i||(t.test(c)?i=w:v&&c!=="className"&&(f.nodeName(a,"form")||u.test(c))&&(i=v)));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(i&&"set"in i&&j&&(h=i.set(a,d,c))!==b)return h;a.setAttribute(c,""+d);return d}if(i&&"get"in i&&j&&(h=i.get(a,c))!==null)return h;h=a.getAttribute(c);return h===null?b:h},removeAttr:function(a,b){var c;a.nodeType===1&&(b=f.attrFix[b]||b,f.support.getSetAttribute?a.removeAttribute(b):(f.attr(a,b,""),a.removeAttributeNode(a.getAttributeNode(b))),t.test(b)&&(c=f.propFix[b]||b)in a&&(a[c]=!1))},attrHooks:{type:{set:function(a,b){if(q.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},tabIndex:{get:function(a){var c=a.getAttributeNode("tabIndex");return c&&c.specified?parseInt(c.value,10):r.test(a.nodeName)||s.test(a.nodeName)&&a.href?0:b}},value:{get:function(a,b){if(v&&f.nodeName(a,"button"))return v.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(v&&f.nodeName(a,"button"))return v.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e=a.nodeType;if(!a||e===3||e===8||e===2)return b;var g,h,i=e!==1||!f.isXMLDoc(a);i&&(c=f.propFix[c]||c,h=f.propHooks[c]);return d!==b?h&&"set"in h&&(g=h.set(a,d,c))!==b?g:a[c]=d:h&&"get"in h&&(g=h.get(a,c))!==b?g:a[c]},propHooks:{}}),w={get:function(a,c){return f.prop(a,c)?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},f.support.getSetAttribute||(f.attrFix=f.propFix,v=f.attrHooks.name=f.attrHooks.title=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&d.nodeValue!==""?d.nodeValue:b},set:function(a,b,c){var d=a.getAttributeNode(c);if(d){d.nodeValue=b;return b}}},f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})})),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}})),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var x=/\.(.*)$/,y=/^(?:textarea|input|select)$/i,z=/\./g,A=/ /g,B=/[^\w\s.|`]/g,C=function(a){return a.replace(B,"\\$&")};f.event={add:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){if(d===!1)d=D;else if(!d)return;var g,h;d.handler&&(g=d,d=g.handler),d.guid||(d.guid=f.guid++);var i=f._data(a);if(!i)return;var j=i.events,k=i.handle;j||(i.events=j={}),k||(i.handle=k=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.handle.apply(k.elem,arguments):b}),k.elem=a,c=c.split(" ");var l,m=0,n;while(l=c[m++]){h=g?f.extend({},g):{handler:d,data:e},l.indexOf(".")>-1?(n=l.split("."),l=n.shift(),h.namespace=n.slice(0).sort().join(".")):(n=[],h.namespace=""),h.type=l,h.guid||(h.guid=d.guid);var o=j[l],p=f.event.special[l]||{};if(!o){o=j[l]=[];if(!p.setup||p.setup.call(a,e,n,k)===!1)a.addEventListener?a.addEventListener(l,k,!1):a.attachEvent&&a.attachEvent("on"+l,k)}p.add&&(p.add.call(a,h),h.handler.guid||(h.handler.guid=d.guid)),o.push(h),f.event.global[l]=!0}a=null}},global:{},remove:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){d===!1&&(d=D);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=f.hasData(a)&&f._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(d=c.handler,c=c.type);if(!c||typeof c=="string"&&c.charAt(0)==="."){c=c||"";for(h in t)f.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+f.map(m.slice(0).sort(),C).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!d){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))f.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=f.event.special[h]||{};for(j=e||0;j<p.length;j++){q=p[j];if(d.guid===q.guid){if(l||n.test(q.namespace))e==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(e!=null)break}}if(p.length===0||e!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&f.removeEvent(a,h,s.handle),g=null,delete t[h]}if(f.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,f.isEmptyObject(s)&&f.removeData(a,b,!0)}}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){var h=c.type||c,i=[],j;h.indexOf("!")>=0&&(h=h.slice(0,-1),j=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.
   17: shift(),i.sort());if(!!e&&!f.event.customEvent[h]||!!f.event.global[h]){c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.exclusive=j,c.namespace=i.join("."),c.namespace_re=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(g||!e)c.preventDefault(),c.stopPropagation();if(!e){f.each(f.cache,function(){var a=f.expando,b=this[a];b&&b.events&&b.events[h]&&f.event.trigger(c,d,b.handle.elem)});return}if(e.nodeType===3||e.nodeType===8)return;c.result=b,c.target=e,d=d!=null?f.makeArray(d):[],d.unshift(c);var k=e,l=h.indexOf(":")<0?"on"+h:"";do{var m=f._data(k,"handle");c.currentTarget=k,m&&m.apply(k,d),l&&f.acceptData(k)&&k[l]&&k[l].apply(k,d)===!1&&(c.result=!1,c.preventDefault()),k=k.parentNode||k.ownerDocument||k===c.target.ownerDocument&&a}while(k&&!c.isPropagationStopped());if(!c.isDefaultPrevented()){var n,o=f.event.special[h]||{};if((!o._default||o._default.call(e.ownerDocument,c)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)){try{l&&e[h]&&(n=e[l],n&&(e[l]=null),f.event.triggered=h,e[h]())}catch(p){}n&&(e[l]=n),f.event.triggered=b}}return c.result}},handle:function(c){c=f.event.fix(c||a.event);var d=((f._data(this,"events")||{})[c.type]||[]).slice(0),e=!c.exclusive&&!c.namespace,g=Array.prototype.slice.call(arguments,0);g[0]=c,c.currentTarget=this;for(var h=0,i=d.length;h<i;h++){var j=d[h];if(e||c.namespace_re.test(j.namespace)){c.handler=j.handler,c.data=j.data,c.handleObj=j;var k=j.handler.apply(this,g);k!==b&&(c.result=k,k===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[f.expando])return a;var d=a;a=f.Event(d);for(var e=this.props.length,g;e;)g=this.props[--e],a[g]=d[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=a.target.ownerDocument||c,i=h.documentElement,j=h.body;a.pageX=a.clientX+(i&&i.scrollLeft||j&&j.scrollLeft||0)-(i&&i.clientLeft||j&&j.clientLeft||0),a.pageY=a.clientY+(i&&i.scrollTop||j&&j.scrollTop||0)-(i&&i.clientTop||j&&j.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:f.proxy,special:{ready:{setup:f.bindReady,teardown:f.noop},live:{add:function(a){f.event.add(this,N(a.origType,a.selector),f.extend({},a,{handler:M,guid:a.handler.guid}))},remove:function(a){f.event.remove(this,N(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!this.preventDefault)return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?E:D):this.type=a,b&&f.extend(this,b),this.timeStamp=f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=E;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=E;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=E,this.stopPropagation()},isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D};var F=function(a){var b=a.relatedTarget,c=!1,d=a.type;a.type=a.data,b!==this&&(b&&(c=f.contains(this,b)),c||(f.event.handle.apply(this,arguments),a.type=d))},G=function(a){a.type=a.data,f.event.handle.apply(this,arguments)};f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={setup:function(c){f.event.add(this,b,c&&c.selector?G:F,a)},teardown:function(a){f.event.remove(this,b,a&&a.selector?G:F)}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(a,b){if(!f.nodeName(this,"form"))f.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&f(b).closest("form").length&&K("submit",this,arguments)}),f.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&f(b).closest("form").length&&a.keyCode===13&&K("submit",this,arguments)});else return!1},teardown:function(a){f.event.remove(this,".specialSubmit")}});if(!f.support.changeBubbles){var H,I=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?f.map(a.options,function(a){return a.selected}).join("-"):"":f.nodeName(a,"select")&&(c=a.selectedIndex);return c},J=function(c){var d=c.target,e,g;if(!!y.test(d.nodeName)&&!d.readOnly){e=f._data(d,"_change_data"),g=I(d),(c.type!=="focusout"||d.type!=="radio")&&f._data(d,"_change_data",g);if(e===b||g===e)return;if(e!=null||g)c.type="change",c.liveFired=b,f.event.trigger(c,arguments[1],d)}};f.event.special.change={filters:{focusout:J,beforedeactivate:J,click:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(c==="radio"||c==="checkbox"||f.nodeName(b,"select"))&&J.call(this,a)},keydown:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(a.keyCode===13&&!f.nodeName(b,"textarea")||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&J.call(this,a)},beforeactivate:function(a){var b=a.target;f._data(b,"_change_data",I(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in H)f.event.add(this,c+".specialChange",H[c]);return y.test(this.nodeName)},teardown:function(a){f.event.remove(this,".specialChange");return y.test(this.nodeName)}},H=f.event.special.change.filters,H.focus=H.beforeactivate}f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){function e(a){var c=f.event.fix(a);c.type=b,c.originalEvent={},f.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var d=0;f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.each(["bind","one"],function(a,c){f.fn[c]=function(a,d,e){var g;if(typeof a=="object"){for(var h in a)this[c](h,d,a[h],e);return this}if(arguments.length===2||d===!1)e=d,d=b;c==="one"?(g=function(a){f(this).unbind(a,g);return e.apply(this,arguments)},g.guid=e.guid||f.guid++):g=e;if(a==="unload"&&c!=="one")this.one(a,d,e);else for(var i=0,j=this.length;i<j;i++)f.event.add(this[i],a,g,d);return this}}),f.fn.extend({unbind:function(a,b){if(typeof a=="object"&&!a.preventDefault)for(var c in a)this.unbind(c,a[c]);else for(var d=0,e=this.length;d<e;d++)f.event.remove(this[d],a,b);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f.data(this,"lastToggle"+a.guid)||0)%d;f.data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var L={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};f.each(["live","die"],function(a,c){f.fn[c]=function(a,d,e,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:f(this.context);if(typeof a=="object"&&!a.preventDefault){for(var o in a)n[c](o,d,a[o],m);return this}if(c==="die"&&!a&&g&&g.charAt(0)==="."){n.unbind(g);return this}if(d===!1||f.isFunction(d))e=d||D,d=b;a=(a||"").split(" ");while((h=a[i++])!=null){j=x.exec(h),k="",j&&(k=j[0],h=h.replace(x,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,L[h]?(a.push(L[h]+k),h=h+k):h=(L[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)f.event.add(n[p],"live."+N(h,m),{data:d,selector:m,handler:e,origType:h,origHandler:e,preType:l});else n.unbind("live."+N(h,m),e)}return this}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=0,e=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,f,g){f=f||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return f;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(e.call(n)==="[object Array]")if(!u)f.push.apply(f,n);else if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&f.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&f.push(j[t]);else p(n,f);o&&(k(o,h,f,g),k.uniqueSort(f));return f};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(!f)g=o=!0;else if(f===!0)continue}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("parentNode",b,f,a,e,c)},"~":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("previousSibling",b,f,a,e,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=d++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(e.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var f=a.length;c<f;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){if(a===b){g=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};f.find=k,f.expr=k.selectors,f.expr[":"]=f.expr.filters,f.unique=k.uniqueSort,f.text=k.getText,f.isXMLDoc=k.isXML,f.contains=k.contains}();var O=/Until$/,P=/^(?:parents|prevUntil|prevAll)/,Q=/,/,R=/^.[^:#\[\.,]*$/,S=Array.prototype.slice,T=f.expr.match.POS,U={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(W(this,a,!1),"not",a)},filter:function(a){return this.pushStack(W(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(d=0,e=a.length;d<e;d++)i=a[d],j[i]||(j[i]=T.test(i)?f(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:f(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=T.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(l?l.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a=="string")return f.inArray(this[0],a?f(a):this.parent().children());return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(V(c[0])||V(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=S.call(arguments);O.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!U[a]?f.unique(e):e,(this.length>1||Q.test(d))&&P.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var X=/ jQuery\d+="(?:\d+|null)"/g,Y=/^\s+/,Z=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,$=/<([\w:]+)/,_=/<tbody/i,ba=/<|&#?\w+;/,bb=/<(?:script|object|embed|option|style)/i,bc=/checked\s*(?:[^=]|=\s*.checked.)/i,bd=/\/(java|ecma)script/i,be=/^\s*<!(?:\[CDATA\[|\-\-)/,bf={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};bf.optgroup=bf.option,bf.tbody=bf.tfoot=bf.colgroup=bf.caption=bf.thead,bf.th=bf.td,f.support.htmlSerialize||(bf._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(X,""):null;if(typeof a=="string"&&!bb.test(a)&&(f.support.leadingWhitespace||!Y.test(a))&&!bf[($.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Z,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bc.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bg(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bm)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i;b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof a[0]=="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!bb.test(a[0])&&(f.support.checkClone||!bc.test(a[0]))&&(g=!0,h=f.fragments[a[0]],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[a[0]]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j
   18: )}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bi(a,d),e=bj(a),g=bj(d);for(h=0;e[h];++h)bi(e[h],g[h])}if(b){bh(a,d);if(c){e=bj(a),g=bj(d);for(h=0;e[h];++h)bh(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!ba.test(k))k=b.createTextNode(k);else{k=k.replace(Z,"<$1></$2>");var l=($.exec(k)||["",""])[1].toLowerCase(),m=bf[l]||bf._default,n=m[0],o=b.createElement("div");o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=_.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&Y.test(k)&&o.insertBefore(b.createTextNode(Y.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bl(k[i]);else bl(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bd.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.expando,g=f.event.special,h=f.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&f.noData[j.nodeName.toLowerCase()])continue;c=j[f.expando];if(c){b=d[c]&&d[c][e];if(b&&b.events){for(var k in b.events)g[k]?f.event.remove(j,k):f.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[f.expando]:j.removeAttribute&&j.removeAttribute(f.expando),delete d[c]}}}});var bn=/alpha\([^)]*\)/i,bo=/opacity=([^)]*)/,bp=/([A-Z]|^ms)/g,bq=/^-?\d+(?:px)?$/i,br=/^-?\d/,bs=/^[+\-]=/,bt=/[^+\-\.\de]+/g,bu={position:"absolute",visibility:"hidden",display:"block"},bv=["Left","Right"],bw=["Top","Bottom"],bx,by,bz;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bx(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d;if(h==="number"&&isNaN(d)||d==null)return;h==="string"&&bs.test(d)&&(d=+d.replace(bt,"")+parseFloat(f.css(a,c)),h="number"),h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bx)return bx(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bA(a,b,d);f.swap(a,bu,function(){e=bA(a,b,d)});return e}},set:function(a,b){if(!bq.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bo.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle;c.zoom=1;var e=f.isNaN(b)?"":"alpha(opacity="+b*100+")",g=d&&d.filter||c.filter||"";c.filter=bn.test(g)?g.replace(bn,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bx(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(by=function(a,c){var d,e,g;c=c.replace(bp,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bz=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bq.test(d)&&br.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bx=by||bz,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bB=/%20/g,bC=/\[\]$/,bD=/\r?\n/g,bE=/#.*$/,bF=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bG=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bH=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,bI=/^(?:GET|HEAD)$/,bJ=/^\/\//,bK=/\?/,bL=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bM=/^(?:select|textarea)/i,bN=/\s+/,bO=/([?&])_=[^&]*/,bP=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bQ=f.fn.load,bR={},bS={},bT,bU;try{bT=e.href}catch(bV){bT=c.createElement("a"),bT.href="",bT=bT.href}bU=bP.exec(bT.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bQ)return bQ.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bL,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bM.test(this.nodeName)||bG.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bD,"\r\n")}}):{name:b.name,value:c.replace(bD,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?f.extend(!0,a,f.ajaxSettings,b):(b=a,a=f.extend(!0,f.ajaxSettings,b));for(var c in{context:1,url:1})c in b?a[c]=b[c]:c in f.ajaxSettings&&(a[c]=f.ajaxSettings[c]);return a},ajaxSettings:{url:bT,isLocal:bH.test(bU[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML}},ajaxPrefilter:bW(bR),ajaxTransport:bW(bS),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a?4:0;var o,r,u,w=l?bZ(d,v,l):b,x,y;if(a>=200&&a<300||a===304){if(d.ifModified){if(x=v.getResponseHeader("Last-Modified"))f.lastModified[k]=x;if(y=v.getResponseHeader("Etag"))f.etag[k]=y}if(a===304)c="notmodified",o=!0;else try{r=b$(d,w),c="success",o=!0}catch(z){c="parsererror",u=z}}else{u=c;if(!c||a)c="error",a<0&&(a=0)}v.status=a,v.statusText=c,o?h.resolveWith(e,[r,c,v]):h.rejectWith(e,[v,c,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.resolveWith(e,[v,c]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f._Deferred(),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bF.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.done,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bE,"").replace(bJ,bU[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bN),d.crossDomain==null&&(r=bP.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bU[1]&&r[2]==bU[2]&&(r[3]||(r[1]==="http:"?80:443))==(bU[3]||(bU[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bX(bR,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bI.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bK.test(d.url)?"&":"?")+d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bO,"$1_="+x);d.url=y+(y===d.url?(bK.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", */*; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bX(bS,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){status<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)bY(g,a[g],c,e);return d.join("&").replace(bB,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var b_=f.now(),ca=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+b_++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ca.test(b.url)||e&&ca.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ca,l),b.url===j&&(e&&(k=k.replace(ca,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cb=a.ActiveXObject?function(){for(var a in cd)cd[a](0,1)}:!1,cc=0,cd;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ce()||cf()}:ce,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cb&&delete cd[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cc,cb&&(cd||(cd={},f(a).unload(cb)),cd[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cg={},ch,ci,cj=/^(?:toggle|show|hide)$/,ck=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cl,cm=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cn,co=a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cr("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cs(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cr("hide",3),a,b,c);for(var d=0,e=this.length;d<e;d++)if(this[d].style){var g=f.css(this[d],"display");g!=="none"&&!f._data(this[d],"olddisplay")&&f._data(this[d],"olddisplay",g)}for(d=0;d<e;d++)this[d].style&&(this[d].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cr("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return this[e.queue===!1?"each":"queue"](function(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(f.support.inlineBlockNeedsLayout?(j=cs(this.nodeName),j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)):this.style.display="inline-block"))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)k=new f.fx(this,b,i),h=a[i],cj.test(h)?k[h==="toggle"?d?"show":"hide":h]():(l=ck.exec(h),m=k.cur(),l?(n=parseFloat(l[2]),o=l[3]||(f.cssNumber[i]?"":"px"),o!=="px"&&(f.style(this,i,(n||1)+o),m=(n||1)/k.cur()*m,f.style(this,i,m+o)),l[1]&&(n=(l[1]==="-="?-1:1)*n+m),k.custom(m,n,o)):k.custom(m,h,""));return!0})},stop:function(a,b){a&&this.queue([]),this.each(function(){var a=f.timers,c=a.length;b||f._unmark(!0,this);while(c--)a[c].elem===this&&(b&&a[c](!0),a.splice(c,1))}),b||this.dequeue();return this}}),f.each({slideDown:cr("show",1),slideUp:cr("hide",1),slideToggle:cr("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default,d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue!==!1?f.dequeue(this):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function h(a){return d.step(a)}var d=this,e=f.fx,g;this.startTime=cn||cp(),this.start=a,this.end=b,this.unit=c||this.unit||(f.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,h.elem=this.elem,h()&&f.timers.push(h)&&!cl&&(co?(cl=!0,g=function(){cl&&(co(g),e.tick())},co(g)):cl=setInterval(e.tick,e.interval))},show:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=cn||cp(),c=!0,d=this.elem,e=this.options,g,h;if(a||b>=e.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),e.animatedProperties[this.prop]=!0;for(g in e.animatedProperties)e.animatedProperties[g]!==!0&&(c=!1);if(c){e.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){d.style["overflow"+b]=e.overflow[a]}),e.hide&&f(d).hide();if(e.hide||e.show)for(var i in e.animatedProperties)f.style(d,i,e.orig[i]);e.complete.call(d)}return!1}e.duration==Infinity?this.now=b:(h=b-this.startTime,this.state=h/e.duration,this.pos=f.easing[e.animatedProperties[this.prop]](this.state,h,0,1,e.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){for(var a=f.timers,b=0;b<a.length;++b)a[b]()||a.splice(b--,1);a.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cl),cl=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var ct=/^t(?:able|d|h)$/i,cu=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cv(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);f.offset.initialize();var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.offset.doesNotAddBorder&&(!f.offset.doesAddBorderForTableAndCells||!ct.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={initialize:function(){var a=c.body,b=c.createElement("div"),d,e,g,h,i=parseFloat(f.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";f.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),d=b.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,this.doesNotAddBorder=e.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,e.style.position="fixed",e.style.top="20px",this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),f.offset.initialize=f.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.offset.initialize(),f.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cu.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cu.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cv(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cv(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a&&a.style?parseFloat(f.css(a,d,"padding")):null},f.fn["outer"+c]=function(a){var b=this[0];return b&&b.style?parseFloat(f.css(b,d,a?"margin":"border")):null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c];return e.document.compatMode==="CSS1Compat"&&g||e.document.body["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var h=f.css(e,d),i=parseFloat(h);return f.isNaN(i)?h:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-html-0.8.0/assets/javascripts/plugins/jquery.colorbox.js:
   80  	event_ie6 = prefix + '_IE6',
   81  
   82: 	// Cached jQuery Object Variables
   83  	$overlay,
   84  	$box,
   ..
  102  	$groupControls,
  103  	
  104: 	// Variables for cached values or use across multiple functions
  105  	settings,
  106  	interfaceHeight,
  ...
  374  				init = true;
  375  
  376: 				// Cache values needed for size calculations
  377  				interfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height();//Subtraction needed for IE6
  378  				interfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width();
  ...
  383  				$box.css({"padding-bottom": interfaceHeight, "padding-right": interfaceWidth});
  384  
  385: 				// Anonymous functions here keep the public method from being cached, thereby allowing them to be redefined on the fly.
  386  				$next.click(function () {
  387  					publicMethod.next();

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-html-0.8.0/assets/javascripts/plugins/jquery.dataTables.min.js:
   34  bSort:true,bInfo:true,bAutoWidth:true,bProcessing:false,bSortClasses:true,bStateSave:false,bServerSide:false};this.oScroll={sX:"",sXInner:"",sY:"",bCollapse:false,iBarWidth:0};this.aanFeatures=[];this.oLanguage={sProcessing:"Processing...",sLengthMenu:"Show _MENU_ entries",sZeroRecords:"No matching records found",sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",
   35  sInfoPostFix:"",sSearch:"Search:",sUrl:"",oPaginate:{sFirst:"First",sPrevious:"Previous",sNext:"Next",sLast:"Last"}};this.aoData=[];this.aiDisplay=[];this.aiDisplayMaster=[];this.aoColumns=[];this.iNextId=0;this.asDataSearch=[];this.oPreviousSearch={sSearch:"",bRegex:false,bSmart:true};this.aoPreSearchCols=[];this.aaSorting=[[0,"asc",0]];this.aaSortingFixed=null;this.asStripClasses=[];this.asDestoryStrips=[];this.fnFooterCallback=this.fnHeaderCallback=this.fnRowCallback=null;this.aoDrawCallback=[];
   36: this.fnInitComplete=null;this.sTableId="";this.nTableWrapper=this.nTBody=this.nTFoot=this.nTHead=this.nTable=null;this.iDefaultSortIndex=0;this.bInitialised=false;this.aoOpenRows=[];this.sDom="lfrtip";this.sPaginationType="two_button";this.iCookieDuration=7200;this.sCookiePrefix="SpryMedia_DataTables_";this.sAjaxSource=null;this.bAjaxDataGet=true;this.fnServerData=function(a,b,c){j.ajax({url:a,data:b,success:c,dataType:"json",cache:false,error:function(){alert("DataTables warning: JSON data from server failed to load or be parsed. This is most likely to be caused by a JSON formatting error.")}})};
   37  this.fnFormatNumber=function(a){if(a<1E3)return a;else{var b=a+"";a=b.split("");var c="";b=b.length;for(var d=0;d<b;d++){if(d%3===0&&d!==0)c=","+c;c=a[b-d-1]+c}}return c};this.aLengthMenu=[10,25,50,100];this.iDraw=0;this.iDrawError=-1;this._iDisplayLength=10;this._iDisplayStart=0;this._iDisplayEnd=10;this._iRecordsDisplay=this._iRecordsTotal=0;this.bJUI=false;this.oClasses=m.oStdClasses;this.bSorted=this.bFiltered=false;this.oInit=null}function q(a){return function(){var b=[B(this[m.iApiIndex])].concat(Array.prototype.slice.call(arguments));
   38  return m.oApi[a].apply(this,b)}}function r(a){if(a.bInitialised===false)setTimeout(function(){r(a)},200);else{na(a);z(a);if(a.oFeatures.bSort)O(a);else{a.aiDisplay=a.aiDisplayMaster.slice();F(a);D(a)}if(a.sAjaxSource!==null&&!a.oFeatures.bServerSide){K(a,true);a.fnServerData.call(a.oInstance,a.sAjaxSource,null,function(b){for(var c=0;c<b.aaData.length;c++)w(a,b.aaData[c]);a.iInitDisplayStart=a._iDisplayStart;if(a.oFeatures.bSort)O(a);else{a.aiDisplay=a.aiDisplayMaster.slice();F(a);D(a)}K(a,false);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/simplecov-html-0.8.0/public/application.js:
   15   */
   16  
   17: (function(a,b){function cv(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cs(a){if(!cg[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ch||(ch=c.createElement("iframe"),ch.frameBorder=ch.width=ch.height=0),b.appendChild(ch);if(!ci||!ch.createElement)ci=(ch.contentWindow||ch.contentDocument).document,ci.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),ci.close();d=ci.createElement(a),ci.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ch)}cg[a]=e}return cg[a]}function cr(a,b){var c={};f.each(cm.concat.apply([],cm.slice(0,b)),function(){c[this]=a});return c}function cq(){cn=b}function cp(){setTimeout(cq,0);return cn=f.now()}function cf(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ce(){try{return new a.XMLHttpRequest}catch(b){}}function b$(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bZ(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bY(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bC.test(a)?d(a,e):bY(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)bY(a+"["+e+"]",b[e],c,d);else d(a,b)}function bX(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bR,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bX(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bX(a,c,d,e,"*",g));return l}function bW(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bN),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bA(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bv:bw;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bx(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function bm(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(be,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bl(a){f.nodeName(a,"input")?bk(a):"getElementsByTagName"in a&&f.grep(a.getElementsByTagName("input"),bk)}function bk(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bj(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function bi(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bh(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c=f.expando,d=f.data(a),e=f.data(b,d);if(d=d[c]){var g=d.events;e=e[c]=f.extend({},d);if(g){delete e.handle,e.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)f.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function bg(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function W(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(R.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function V(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function N(a,b){return(a&&a!=="*"?a+".":"")+b.replace(z,"`").replace(A,"&")}function M(a){var b,c,d,e,g,h,i,j,k,l,m,n,o,p=[],q=[],r=f._data(this,"events");if(!(a.liveFired===this||!r||!r.live||a.target.disabled||a.button&&a.type==="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var s=r.live.slice(0);for(i=0;i<s.length;i++)g=s[i],g.origType.replace(x,"")===a.type?q.push(g.selector):s.splice(i--,1);e=f(a.target).closest(q,a.currentTarget);for(j=0,k=e.length;j<k;j++){m=e[j];for(i=0;i<s.length;i++){g=s[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,d=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,d=f(a.relatedTarget).closest(g.selector)[0],d&&f.contains(h,d)&&(d=h);(!d||d!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){e=p[j];if(c&&e.level>c)break;a.currentTarget=e.elem,a.data=e.handleObj.data,a.handleObj=e.handleObj,o=e.handleObj.origHandler.apply(e.elem,arguments);if(o===!1||a.isPropagationStopped()){c=e.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function K(a,c,d){var e=f.extend({},d[0]);e.type=a,e.originalEvent={},e.liveFired=b,f.event.handle.call(c,e),e.isDefaultPrevented()&&d[0].preventDefault()}function E(){return!0}function D(){return!1}function m(a,c,d){var e=c+"defer",g=c+"queue",h=c+"mark",i=f.data(a,e,b,!0);i&&(d==="queue"||!f.data(a,g,b,!0))&&(d==="mark"||!f.data(a,h,b,!0))&&setTimeout(function(){!f.data(a,g,b,!0)&&!f.data(a,h,b,!0)&&(f.removeData(a,e,!0),i.resolve())},0)}function l(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function k(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(j,"$1-$2").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNaN(d)?i.test(d)?f.parseJSON(d):d:parseFloat(d)}catch(g){}f.data(a,c,d)}else d=b}return d}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z])/ig,x=function(a,b){return b.toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.6.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.resolveWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!A){A=e._Deferred();if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNaN:function(a){return a==null||!m.test(a)||isNaN(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a);return c===b||D.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(b,c,d){a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),d=c.documentElement,(!d||!d.nodeName||d.nodeName==="parsererror")&&e.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b){if(H)return H.call(b,a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g="done fail isResolved isRejected promise then always pipe".split(" "),h=[].slice;f.extend({_Deferred:function(){var a=[],b,c,d,e={done:function(){if(!d){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=f.type(i),j==="array"?e.done.apply(e,i):j==="function"&&a.push(i);k&&e.resolveWith(k[0],k[1])}return this},resolveWith:function(e,f){if(!d&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(e,f)}finally{b=[e,f],c=0}}return this},resolve:function(){e.resolveWith(this,arguments);return this},isResolved:function(){return!!c||!!b},cancel:function(){d=1,a=[];return this}};return e},Deferred:function(a){var b=f._Deferred(),c=f._Deferred(),d;f.extend(b,{then:function(a,c){b.done(a).fail(c);return this},always:function(){return b.done.apply(b,arguments).fail.apply(this,arguments)},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,pipe:function(a,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[c,"reject"]},function(a,c){var e=c[0],g=c[1],h;f.isFunction(e)?b[a](function(){h=e.apply(this,arguments),h&&f.isFunction(h.promise)?h.promise().then(d.resolve,d.reject):d[g](h)}):b[a](d[g])})}).promise()},promise:function(a){if(a==null){if(d)return d;d=a={}}var c=g.length;while(c--)a[g[c]]=b[g[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?h.call(arguments,0):c,--e||g.resolveWith(g,h.call(b,0))}}var b=arguments,c=0,d=b.length,e=d,g=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred();if(d>1){for(;c<d;c++)b[c]&&f.isFunction(b[c].promise)?b[c].promise().then(i(c),g.reject):--e;e||g.resolveWith(g,b)}else g!==a&&g.resolveWith(g,d?[a]:[]);return g.promise()}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55$/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.firstChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0},m&&f.extend(p,{position:"absolute",left:-1e3,top:-1e3});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0),o.innerHTML="",n.removeChild(o);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var i=/^(?:\{.*\}|\[.*\])$/,j=/([a-z])([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!l(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g=f.expando,h=typeof c=="string",i,j=a.nodeType,k=j?f.cache:a,l=j?a[f.expando]:a[f.expando]&&f.expando;if((!l||e&&l&&!k[l][g])&&h&&d===b)return;l||(j?a[f.expando]=l=++f.uuid:l=f.expando),k[l]||(k[l]={},j||(k[l].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?k[l][g]=f.extend(k[l][g],c):k[l]=f.extend(k[l],c);i=k[l],e&&(i[g]||(i[g]={}),i=i[g]),d!==b&&(i[f.camelCase(c)]=d);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[f.camelCase(c)]||i[c]:i}},removeData:function(b,c,d){if(!!f.acceptData(b)){var e=f.expando,g=b.nodeType,h=g?f.cache:b,i=g?b[f.expando]:f.expando;if(!h[i])return;if(c){var j=d?h[i][e]:h[i];if(j){delete j[c];if(!l(j))return}}if(d){delete h[i][e];if(!l(h[i]))return}var k=h[i][e];f.support.deleteExpando||h!=a?delete h[i]:h[i]=null,k?(h[i]={},g||(h[i].toJSON=f.noop),h[i][e]=k):g&&(f.support.deleteExpando?delete b[f.expando]:b.removeAttribute?b.removeAttribute(f.expando):b[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d=null;if(typeof a=="undefined"){if(this.length){d=f.data(this[0]);if(this[0].nodeType===1){var e=this[0].attributes,g;for(var h=0,i=e.length;h<i;h++)g=e[h].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),k(this[0],g,d[g]))}}return d}if(typeof a=="object")return this.each(function(){f.data(this,a)});var j=a.split(".");j[1]=j[1]?"."+j[1]:"";if(c===b){d=this.triggerHandler("getData"+j[1]+"!",[j[0]]),d===b&&this.length&&(d=f.data(this[0],a),d=k(this[0],a,d));return d===b&&j[1]?this.data(j[0]):d}return this.each(function(){var b=f(this),d=[j[0],c];b.triggerHandler("setData"+j[1]+"!",d),f.data(this,a,c),b.triggerHandler("changeData"+j[1]+"!",d)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,c){a&&(c=(c||"fx")+"mark",f.data(a,c,(f.data(a,c,b,!0)||0)+1,!0))},_unmark:function(a,c,d){a!==!0&&(d=c,c=a,a=!1);if(c){d=d||"fx";var e=d+"mark",g=a?0:(f.data(c,e,b,!0)||1)-1;g?f.data(c,e,g,!0):(f.removeData(c,e,!0),m(c,d,"mark"))}},queue:function(a,c,d){if(a){c=(c||"fx")+"queue";var e=f.data(a,c,b,!0);d&&(!e||f.isArray(d)?e=f.data(a,c,f.makeArray(d),!0):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e;d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),d.call(a,function(){f.dequeue(a,b)})),c.length||(f.removeData(a,b+"queue",!0),m(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){f.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f._Deferred(),!0))h++,l.done(m);m();return d.promise()}});var n=/[\n\t\r]/g,o=/\s+/,p=/\r/g,q=/^(?:button|input)$/i,r=/^(?:button|input|object|select|textarea)$/i,s=/^a(?:rea)?$/i,t=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,u=/\:|^on/,v,w;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(o);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(o);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(n," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(o);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(n," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e=this[0];if(!arguments.length){if(e){c=f.valHooks[e.nodeName.toLowerCase()]||f.valHooks[e.type];if(c&&"get"in c&&(d=c.get(e,"value"))!==b)return d;d=e.value;return typeof d=="string"?d.replace(p,""):d==null?"":d}return b}var g=f.isFunction(a);return this.each(function(d){var e=f(this),h;if(this.nodeType===1){g?h=a.call(this,d,e.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c=a.selectedIndex,d=[],e=a.options,g=a.type==="select-one";if(c<0)return null;for(var h=g?c:0,i=g?c+1:e.length;h<i;h++){var j=e[h];if(j.selected&&(f.support.optDisabled?!j.disabled:j.getAttribute("disabled")===null)&&(!j.parentNode.disabled||!f.nodeName(j.parentNode,"optgroup"))){b=f(j).val();if(g)return b;d.push(b)}}if(g&&!d.length&&e.length)return f(e[c]).val();return d},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attrFix:{tabindex:"tabIndex"},attr:function(a,c,d,e){var g=a.nodeType;if(!a||g===3||g===8||g===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);var h,i,j=g!==1||!f.isXMLDoc(a);j&&(c=f.attrFix[c]||c,i=f.attrHooks[c],i||(t.test(c)?i=w:v&&c!=="className"&&(f.nodeName(a,"form")||u.test(c))&&(i=v)));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(i&&"set"in i&&j&&(h=i.set(a,d,c))!==b)return h;a.setAttribute(c,""+d);return d}if(i&&"get"in i&&j&&(h=i.get(a,c))!==null)return h;h=a.getAttribute(c);return h===null?b:h},removeAttr:function(a,b){var c;a.nodeType===1&&(b=f.attrFix[b]||b,f.support.getSetAttribute?a.removeAttribute(b):(f.attr(a,b,""),a.removeAttributeNode(a.getAttributeNode(b))),t.test(b)&&(c=f.propFix[b]||b)in a&&(a[c]=!1))},attrHooks:{type:{set:function(a,b){if(q.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},tabIndex:{get:function(a){var c=a.getAttributeNode("tabIndex");return c&&c.specified?parseInt(c.value,10):r.test(a.nodeName)||s.test(a.nodeName)&&a.href?0:b}},value:{get:function(a,b){if(v&&f.nodeName(a,"button"))return v.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(v&&f.nodeName(a,"button"))return v.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e=a.nodeType;if(!a||e===3||e===8||e===2)return b;var g,h,i=e!==1||!f.isXMLDoc(a);i&&(c=f.propFix[c]||c,h=f.propHooks[c]);return d!==b?h&&"set"in h&&(g=h.set(a,d,c))!==b?g:a[c]=d:h&&"get"in h&&(g=h.get(a,c))!==b?g:a[c]},propHooks:{}}),w={get:function(a,c){return f.prop(a,c)?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},f.support.getSetAttribute||(f.attrFix=f.propFix,v=f.attrHooks.name=f.attrHooks.title=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&d.nodeValue!==""?d.nodeValue:b},set:function(a,b,c){var d=a.getAttributeNode(c);if(d){d.nodeValue=b;return b}}},f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})})),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}})),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var x=/\.(.*)$/,y=/^(?:textarea|input|select)$/i,z=/\./g,A=/ /g,B=/[^\w\s.|`]/g,C=function(a){return a.replace(B,"\\$&")};f.event={add:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){if(d===!1)d=D;else if(!d)return;var g,h;d.handler&&(g=d,d=g.handler),d.guid||(d.guid=f.guid++);var i=f._data(a);if(!i)return;var j=i.events,k=i.handle;j||(i.events=j={}),k||(i.handle=k=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.handle.apply(k.elem,arguments):b}),k.elem=a,c=c.split(" ");var l,m=0,n;while(l=c[m++]){h=g?f.extend({},g):{handler:d,data:e},l.indexOf(".")>-1?(n=l.split("."),l=n.shift(),h.namespace=n.slice(0).sort().join(".")):(n=[],h.namespace=""),h.type=l,h.guid||(h.guid=d.guid);var o=j[l],p=f.event.special[l]||{};if(!o){o=j[l]=[];if(!p.setup||p.setup.call(a,e,n,k)===!1)a.addEventListener?a.addEventListener(l,k,!1):a.attachEvent&&a.attachEvent("on"+l,k)}p.add&&(p.add.call(a,h),h.handler.guid||(h.handler.guid=d.guid)),o.push(h),f.event.global[l]=!0}a=null}},global:{},remove:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){d===!1&&(d=D);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=f.hasData(a)&&f._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(d=c.handler,c=c.type);if(!c||typeof c=="string"&&c.charAt(0)==="."){c=c||"";for(h in t)f.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+f.map(m.slice(0).sort(),C).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!d){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))f.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=f.event.special[h]||{};for(j=e||0;j<p.length;j++){q=p[j];if(d.guid===q.guid){if(l||n.test(q.namespace))e==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(e!=null)break}}if(p.length===0||e!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&f.removeEvent(a,h,s.handle),g=null,delete t[h]}if(f.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,f.isEmptyObject(s)&&f.removeData(a,b,!0)}}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){var h=c.type||c,i=[],j;h.indexOf("!")>=0&&(h=h.slice(0,-1),j=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.
   18: shift(),i.sort());if(!!e&&!f.event.customEvent[h]||!!f.event.global[h]){c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.exclusive=j,c.namespace=i.join("."),c.namespace_re=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(g||!e)c.preventDefault(),c.stopPropagation();if(!e){f.each(f.cache,function(){var a=f.expando,b=this[a];b&&b.events&&b.events[h]&&f.event.trigger(c,d,b.handle.elem)});return}if(e.nodeType===3||e.nodeType===8)return;c.result=b,c.target=e,d=d!=null?f.makeArray(d):[],d.unshift(c);var k=e,l=h.indexOf(":")<0?"on"+h:"";do{var m=f._data(k,"handle");c.currentTarget=k,m&&m.apply(k,d),l&&f.acceptData(k)&&k[l]&&k[l].apply(k,d)===!1&&(c.result=!1,c.preventDefault()),k=k.parentNode||k.ownerDocument||k===c.target.ownerDocument&&a}while(k&&!c.isPropagationStopped());if(!c.isDefaultPrevented()){var n,o=f.event.special[h]||{};if((!o._default||o._default.call(e.ownerDocument,c)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)){try{l&&e[h]&&(n=e[l],n&&(e[l]=null),f.event.triggered=h,e[h]())}catch(p){}n&&(e[l]=n),f.event.triggered=b}}return c.result}},handle:function(c){c=f.event.fix(c||a.event);var d=((f._data(this,"events")||{})[c.type]||[]).slice(0),e=!c.exclusive&&!c.namespace,g=Array.prototype.slice.call(arguments,0);g[0]=c,c.currentTarget=this;for(var h=0,i=d.length;h<i;h++){var j=d[h];if(e||c.namespace_re.test(j.namespace)){c.handler=j.handler,c.data=j.data,c.handleObj=j;var k=j.handler.apply(this,g);k!==b&&(c.result=k,k===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[f.expando])return a;var d=a;a=f.Event(d);for(var e=this.props.length,g;e;)g=this.props[--e],a[g]=d[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=a.target.ownerDocument||c,i=h.documentElement,j=h.body;a.pageX=a.clientX+(i&&i.scrollLeft||j&&j.scrollLeft||0)-(i&&i.clientLeft||j&&j.clientLeft||0),a.pageY=a.clientY+(i&&i.scrollTop||j&&j.scrollTop||0)-(i&&i.clientTop||j&&j.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:f.proxy,special:{ready:{setup:f.bindReady,teardown:f.noop},live:{add:function(a){f.event.add(this,N(a.origType,a.selector),f.extend({},a,{handler:M,guid:a.handler.guid}))},remove:function(a){f.event.remove(this,N(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!this.preventDefault)return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?E:D):this.type=a,b&&f.extend(this,b),this.timeStamp=f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=E;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=E;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=E,this.stopPropagation()},isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D};var F=function(a){var b=a.relatedTarget,c=!1,d=a.type;a.type=a.data,b!==this&&(b&&(c=f.contains(this,b)),c||(f.event.handle.apply(this,arguments),a.type=d))},G=function(a){a.type=a.data,f.event.handle.apply(this,arguments)};f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={setup:function(c){f.event.add(this,b,c&&c.selector?G:F,a)},teardown:function(a){f.event.remove(this,b,a&&a.selector?G:F)}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(a,b){if(!f.nodeName(this,"form"))f.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&f(b).closest("form").length&&K("submit",this,arguments)}),f.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&f(b).closest("form").length&&a.keyCode===13&&K("submit",this,arguments)});else return!1},teardown:function(a){f.event.remove(this,".specialSubmit")}});if(!f.support.changeBubbles){var H,I=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?f.map(a.options,function(a){return a.selected}).join("-"):"":f.nodeName(a,"select")&&(c=a.selectedIndex);return c},J=function(c){var d=c.target,e,g;if(!!y.test(d.nodeName)&&!d.readOnly){e=f._data(d,"_change_data"),g=I(d),(c.type!=="focusout"||d.type!=="radio")&&f._data(d,"_change_data",g);if(e===b||g===e)return;if(e!=null||g)c.type="change",c.liveFired=b,f.event.trigger(c,arguments[1],d)}};f.event.special.change={filters:{focusout:J,beforedeactivate:J,click:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(c==="radio"||c==="checkbox"||f.nodeName(b,"select"))&&J.call(this,a)},keydown:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(a.keyCode===13&&!f.nodeName(b,"textarea")||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&J.call(this,a)},beforeactivate:function(a){var b=a.target;f._data(b,"_change_data",I(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in H)f.event.add(this,c+".specialChange",H[c]);return y.test(this.nodeName)},teardown:function(a){f.event.remove(this,".specialChange");return y.test(this.nodeName)}},H=f.event.special.change.filters,H.focus=H.beforeactivate}f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){function e(a){var c=f.event.fix(a);c.type=b,c.originalEvent={},f.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var d=0;f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.each(["bind","one"],function(a,c){f.fn[c]=function(a,d,e){var g;if(typeof a=="object"){for(var h in a)this[c](h,d,a[h],e);return this}if(arguments.length===2||d===!1)e=d,d=b;c==="one"?(g=function(a){f(this).unbind(a,g);return e.apply(this,arguments)},g.guid=e.guid||f.guid++):g=e;if(a==="unload"&&c!=="one")this.one(a,d,e);else for(var i=0,j=this.length;i<j;i++)f.event.add(this[i],a,g,d);return this}}),f.fn.extend({unbind:function(a,b){if(typeof a=="object"&&!a.preventDefault)for(var c in a)this.unbind(c,a[c]);else for(var d=0,e=this.length;d<e;d++)f.event.remove(this[d],a,b);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f.data(this,"lastToggle"+a.guid)||0)%d;f.data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var L={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};f.each(["live","die"],function(a,c){f.fn[c]=function(a,d,e,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:f(this.context);if(typeof a=="object"&&!a.preventDefault){for(var o in a)n[c](o,d,a[o],m);return this}if(c==="die"&&!a&&g&&g.charAt(0)==="."){n.unbind(g);return this}if(d===!1||f.isFunction(d))e=d||D,d=b;a=(a||"").split(" ");while((h=a[i++])!=null){j=x.exec(h),k="",j&&(k=j[0],h=h.replace(x,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,L[h]?(a.push(L[h]+k),h=h+k):h=(L[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)f.event.add(n[p],"live."+N(h,m),{data:d,selector:m,handler:e,origType:h,origHandler:e,preType:l});else n.unbind("live."+N(h,m),e)}return this}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=0,e=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,f,g){f=f||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return f;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(e.call(n)==="[object Array]")if(!u)f.push.apply(f,n);else if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&f.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&f.push(j[t]);else p(n,f);o&&(k(o,h,f,g),k.uniqueSort(f));return f};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(!f)g=o=!0;else if(f===!0)continue}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("parentNode",b,f,a,e,c)},"~":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("previousSibling",b,f,a,e,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=d++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(e.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var f=a.length;c<f;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){if(a===b){g=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};f.find=k,f.expr=k.selectors,f.expr[":"]=f.expr.filters,f.unique=k.uniqueSort,f.text=k.getText,f.isXMLDoc=k.isXML,f.contains=k.contains}();var O=/Until$/,P=/^(?:parents|prevUntil|prevAll)/,Q=/,/,R=/^.[^:#\[\.,]*$/,S=Array.prototype.slice,T=f.expr.match.POS,U={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(W(this,a,!1),"not",a)},filter:function(a){return this.pushStack(W(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(d=0,e=a.length;d<e;d++)i=a[d],j[i]||(j[i]=T.test(i)?f(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:f(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=T.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(l?l.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a=="string")return f.inArray(this[0],a?f(a):this.parent().children());return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(V(c[0])||V(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=S.call(arguments);O.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!U[a]?f.unique(e):e,(this.length>1||Q.test(d))&&P.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var X=/ jQuery\d+="(?:\d+|null)"/g,Y=/^\s+/,Z=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,$=/<([\w:]+)/,_=/<tbody/i,ba=/<|&#?\w+;/,bb=/<(?:script|object|embed|option|style)/i,bc=/checked\s*(?:[^=]|=\s*.checked.)/i,bd=/\/(java|ecma)script/i,be=/^\s*<!(?:\[CDATA\[|\-\-)/,bf={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};bf.optgroup=bf.option,bf.tbody=bf.tfoot=bf.colgroup=bf.caption=bf.thead,bf.th=bf.td,f.support.htmlSerialize||(bf._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(X,""):null;if(typeof a=="string"&&!bb.test(a)&&(f.support.leadingWhitespace||!Y.test(a))&&!bf[($.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Z,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bc.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bg(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bm)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i;b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof a[0]=="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!bb.test(a[0])&&(f.support.checkClone||!bc.test(a[0]))&&(g=!0,h=f.fragments[a[0]],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[a[0]]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j
   19: )}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bi(a,d),e=bj(a),g=bj(d);for(h=0;e[h];++h)bi(e[h],g[h])}if(b){bh(a,d);if(c){e=bj(a),g=bj(d);for(h=0;e[h];++h)bh(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!ba.test(k))k=b.createTextNode(k);else{k=k.replace(Z,"<$1></$2>");var l=($.exec(k)||["",""])[1].toLowerCase(),m=bf[l]||bf._default,n=m[0],o=b.createElement("div");o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=_.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&Y.test(k)&&o.insertBefore(b.createTextNode(Y.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bl(k[i]);else bl(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bd.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.expando,g=f.event.special,h=f.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&f.noData[j.nodeName.toLowerCase()])continue;c=j[f.expando];if(c){b=d[c]&&d[c][e];if(b&&b.events){for(var k in b.events)g[k]?f.event.remove(j,k):f.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[f.expando]:j.removeAttribute&&j.removeAttribute(f.expando),delete d[c]}}}});var bn=/alpha\([^)]*\)/i,bo=/opacity=([^)]*)/,bp=/([A-Z]|^ms)/g,bq=/^-?\d+(?:px)?$/i,br=/^-?\d/,bs=/^[+\-]=/,bt=/[^+\-\.\de]+/g,bu={position:"absolute",visibility:"hidden",display:"block"},bv=["Left","Right"],bw=["Top","Bottom"],bx,by,bz;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bx(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d;if(h==="number"&&isNaN(d)||d==null)return;h==="string"&&bs.test(d)&&(d=+d.replace(bt,"")+parseFloat(f.css(a,c)),h="number"),h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bx)return bx(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bA(a,b,d);f.swap(a,bu,function(){e=bA(a,b,d)});return e}},set:function(a,b){if(!bq.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bo.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle;c.zoom=1;var e=f.isNaN(b)?"":"alpha(opacity="+b*100+")",g=d&&d.filter||c.filter||"";c.filter=bn.test(g)?g.replace(bn,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bx(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(by=function(a,c){var d,e,g;c=c.replace(bp,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bz=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bq.test(d)&&br.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bx=by||bz,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bB=/%20/g,bC=/\[\]$/,bD=/\r?\n/g,bE=/#.*$/,bF=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bG=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bH=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,bI=/^(?:GET|HEAD)$/,bJ=/^\/\//,bK=/\?/,bL=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bM=/^(?:select|textarea)/i,bN=/\s+/,bO=/([?&])_=[^&]*/,bP=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bQ=f.fn.load,bR={},bS={},bT,bU;try{bT=e.href}catch(bV){bT=c.createElement("a"),bT.href="",bT=bT.href}bU=bP.exec(bT.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bQ)return bQ.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bL,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bM.test(this.nodeName)||bG.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bD,"\r\n")}}):{name:b.name,value:c.replace(bD,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?f.extend(!0,a,f.ajaxSettings,b):(b=a,a=f.extend(!0,f.ajaxSettings,b));for(var c in{context:1,url:1})c in b?a[c]=b[c]:c in f.ajaxSettings&&(a[c]=f.ajaxSettings[c]);return a},ajaxSettings:{url:bT,isLocal:bH.test(bU[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML}},ajaxPrefilter:bW(bR),ajaxTransport:bW(bS),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a?4:0;var o,r,u,w=l?bZ(d,v,l):b,x,y;if(a>=200&&a<300||a===304){if(d.ifModified){if(x=v.getResponseHeader("Last-Modified"))f.lastModified[k]=x;if(y=v.getResponseHeader("Etag"))f.etag[k]=y}if(a===304)c="notmodified",o=!0;else try{r=b$(d,w),c="success",o=!0}catch(z){c="parsererror",u=z}}else{u=c;if(!c||a)c="error",a<0&&(a=0)}v.status=a,v.statusText=c,o?h.resolveWith(e,[r,c,v]):h.rejectWith(e,[v,c,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.resolveWith(e,[v,c]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f._Deferred(),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bF.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.done,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bE,"").replace(bJ,bU[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bN),d.crossDomain==null&&(r=bP.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bU[1]&&r[2]==bU[2]&&(r[3]||(r[1]==="http:"?80:443))==(bU[3]||(bU[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bX(bR,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bI.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bK.test(d.url)?"&":"?")+d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bO,"$1_="+x);d.url=y+(y===d.url?(bK.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", */*; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bX(bS,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){status<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)bY(g,a[g],c,e);return d.join("&").replace(bB,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var b_=f.now(),ca=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+b_++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ca.test(b.url)||e&&ca.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ca,l),b.url===j&&(e&&(k=k.replace(ca,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cb=a.ActiveXObject?function(){for(var a in cd)cd[a](0,1)}:!1,cc=0,cd;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ce()||cf()}:ce,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cb&&delete cd[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cc,cb&&(cd||(cd={},f(a).unload(cb)),cd[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cg={},ch,ci,cj=/^(?:toggle|show|hide)$/,ck=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cl,cm=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cn,co=a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cr("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cs(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cr("hide",3),a,b,c);for(var d=0,e=this.length;d<e;d++)if(this[d].style){var g=f.css(this[d],"display");g!=="none"&&!f._data(this[d],"olddisplay")&&f._data(this[d],"olddisplay",g)}for(d=0;d<e;d++)this[d].style&&(this[d].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cr("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return this[e.queue===!1?"each":"queue"](function(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(f.support.inlineBlockNeedsLayout?(j=cs(this.nodeName),j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)):this.style.display="inline-block"))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)k=new f.fx(this,b,i),h=a[i],cj.test(h)?k[h==="toggle"?d?"show":"hide":h]():(l=ck.exec(h),m=k.cur(),l?(n=parseFloat(l[2]),o=l[3]||(f.cssNumber[i]?"":"px"),o!=="px"&&(f.style(this,i,(n||1)+o),m=(n||1)/k.cur()*m,f.style(this,i,m+o)),l[1]&&(n=(l[1]==="-="?-1:1)*n+m),k.custom(m,n,o)):k.custom(m,h,""));return!0})},stop:function(a,b){a&&this.queue([]),this.each(function(){var a=f.timers,c=a.length;b||f._unmark(!0,this);while(c--)a[c].elem===this&&(b&&a[c](!0),a.splice(c,1))}),b||this.dequeue();return this}}),f.each({slideDown:cr("show",1),slideUp:cr("hide",1),slideToggle:cr("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default,d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue!==!1?f.dequeue(this):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function h(a){return d.step(a)}var d=this,e=f.fx,g;this.startTime=cn||cp(),this.start=a,this.end=b,this.unit=c||this.unit||(f.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,h.elem=this.elem,h()&&f.timers.push(h)&&!cl&&(co?(cl=!0,g=function(){cl&&(co(g),e.tick())},co(g)):cl=setInterval(e.tick,e.interval))},show:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=cn||cp(),c=!0,d=this.elem,e=this.options,g,h;if(a||b>=e.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),e.animatedProperties[this.prop]=!0;for(g in e.animatedProperties)e.animatedProperties[g]!==!0&&(c=!1);if(c){e.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){d.style["overflow"+b]=e.overflow[a]}),e.hide&&f(d).hide();if(e.hide||e.show)for(var i in e.animatedProperties)f.style(d,i,e.orig[i]);e.complete.call(d)}return!1}e.duration==Infinity?this.now=b:(h=b-this.startTime,this.state=h/e.duration,this.pos=f.easing[e.animatedProperties[this.prop]](this.state,h,0,1,e.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){for(var a=f.timers,b=0;b<a.length;++b)a[b]()||a.splice(b--,1);a.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cl),cl=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var ct=/^t(?:able|d|h)$/i,cu=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cv(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);f.offset.initialize();var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.offset.doesNotAddBorder&&(!f.offset.doesAddBorderForTableAndCells||!ct.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={initialize:function(){var a=c.body,b=c.createElement("div"),d,e,g,h,i=parseFloat(f.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";f.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),d=b.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,this.doesNotAddBorder=e.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,e.style.position="fixed",e.style.top="20px",this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),f.offset.initialize=f.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.offset.initialize(),f.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cu.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cu.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cv(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cv(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a&&a.style?parseFloat(f.css(a,d,"padding")):null},f.fn["outer"+c]=function(a){var b=this[0];return b&&b.style?parseFloat(f.css(b,d,a?"margin":"border")):null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c];return e.document.compatMode==="CSS1Compat"&&g||e.document.body["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var h=f.css(e,d),i=parseFloat(h);return f.isNaN(i)?h:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);
   20  var hljs=new function(){function l(o){return o.replace(/&/gm,"&amp;").replace(/</gm,"&lt;")}function c(q,p,o){return RegExp(p,"m"+(q.cI?"i":"")+(o?"g":""))}function i(q){for(var o=0;o<q.childNodes.length;o++){var p=q.childNodes[o];if(p.nodeName=="CODE"){return p}if(!(p.nodeType==3&&p.nodeValue.match(/\s+/))){break}}}function g(s,r){var q="";for(var p=0;p<s.childNodes.length;p++){if(s.childNodes[p].nodeType==3){var o=s.childNodes[p].nodeValue;if(r){o=o.replace(/\n/g,"")}q+=o}else{if(s.childNodes[p].nodeName=="BR"){q+="\n"}else{q+=g(s.childNodes[p])}}}if(/MSIE [678]/.test(navigator.userAgent)){q=q.replace(/\r/g,"\n")}return q}function a(r){var p=r.className.split(/\s+/);p=p.concat(r.parentNode.className.split(/\s+/));for(var o=0;o<p.length;o++){var q=p[o].replace(/^language-/,"");if(d[q]||q=="no-highlight"){return q}}}function b(o){var p=[];(function(r,s){for(var q=0;q<r.childNodes.length;q++){if(r.childNodes[q].nodeType==3){s+=r.childNodes[q].nodeValue.length}else{if(r.childNodes[q].nodeName=="BR"){s+=1}else{p.push({event:"start",offset:s,node:r.childNodes[q]});s=arguments.callee(r.childNodes[q],s);p.push({event:"stop",offset:s,node:r.childNodes[q]})}}}return s})(o,0);return p}function k(x,y,w){var q=0;var v="";var s=[];function t(){if(x.length&&y.length){if(x[0].offset!=y[0].offset){return(x[0].offset<y[0].offset)?x:y}else{return y[0].event=="start"?x:y}}else{return x.length?x:y}}function r(B){var C="<"+B.nodeName.toLowerCase();for(var z=0;z<B.attributes.length;z++){var A=B.attributes[z];C+=" "+A.nodeName.toLowerCase();if(A.nodeValue!=undefined){C+='="'+l(A.nodeValue)+'"'}}return C+">"}while(x.length||y.length){var u=t().splice(0,1)[0];v+=l(w.substr(q,u.offset-q));q=u.offset;if(u.event=="start"){v+=r(u.node);s.push(u.node)}else{if(u.event=="stop"){var p=s.length;do{p--;var o=s[p];v+=("</"+o.nodeName.toLowerCase()+">")}while(o!=u.node);s.splice(p,1);while(p<s.length){v+=r(s[p]);p++}}}}v+=w.substr(q);return v}function f(I,C){function y(r,L){for(var K=0;K<L.c.length;K++){if(L.c[K].bR.test(r)){return L.c[K]}}}function v(K,r){if(B[K].e&&B[K].eR.test(r)){return 1}if(B[K].eW){var L=v(K-1,r);return L?L+1:0}return 0}function w(r,K){return K.iR&&K.iR.test(r)}function z(N,M){var L=[];for(var K=0;K<N.c.length;K++){L.push(N.c[K].b)}var r=B.length-1;do{if(B[r].e){L.push(B[r].e)}r--}while(B[r+1].eW);if(N.i){L.push(N.i)}return c(M,"("+L.join("|")+")",true)}function q(L,K){var M=B[B.length-1];if(!M.t){M.t=z(M,G)}M.t.lastIndex=K;var r=M.t.exec(L);if(r){return[L.substr(K,r.index-K),r[0],false]}else{return[L.substr(K),"",true]}}function o(N,r){var K=G.cI?r[0].toLowerCase():r[0];for(var M in N.kG){if(!N.kG.hasOwnProperty(M)){continue}var L=N.kG[M].hasOwnProperty(K);if(L){return[M,L]}}return false}function E(L,N){if(!N.k){return l(L)}var M="";var O=0;N.lR.lastIndex=0;var K=N.lR.exec(L);while(K){M+=l(L.substr(O,K.index-O));var r=o(N,K);if(r){s+=r[1];M+='<span class="'+r[0]+'">'+l(K[0])+"</span>"}else{M+=l(K[0])}O=N.lR.lastIndex;K=N.lR.exec(L)}M+=l(L.substr(O,L.length-O));return M}function J(r,L){if(L.sL&&d[L.sL]){var K=f(L.sL,r);s+=K.keyword_count;return K.value}else{return E(r,L)}}function H(L,r){var K=L.cN?'<span class="'+L.cN+'">':"";if(L.rB){p+=K;L.buffer=""}else{if(L.eB){p+=l(r)+K;L.buffer=""}else{p+=K;L.buffer=r}}B.push(L);A+=L.r}function D(N,K,P){var Q=B[B.length-1];if(P){p+=J(Q.buffer+N,Q);return false}var L=y(K,Q);if(L){p+=J(Q.buffer+N,Q);H(L,K);return L.rB}var r=v(B.length-1,K);if(r){var M=Q.cN?"</span>":"";if(Q.rE){p+=J(Q.buffer+N,Q)+M}else{if(Q.eE){p+=J(Q.buffer+N,Q)+M+l(K)}else{p+=J(Q.buffer+N+K,Q)+M}}while(r>1){M=B[B.length-2].cN?"</span>":"";p+=M;r--;B.length--}var O=B[B.length-1];B.length--;B[B.length-1].buffer="";if(O.starts){H(O.starts,"")}return Q.rE}if(w(K,Q)){throw"Illegal"}}var G=d[I];var B=[G.dM];var A=0;var s=0;var p="";try{var u=0;G.dM.buffer="";do{var x=q(C,u);var t=D(x[0],x[1],x[2]);u+=x[0].length;if(!t){u+=x[1].length}}while(!x[2]);if(B.length>1){throw"Illegal"}return{language:I,r:A,keyword_count:s,value:p}}catch(F){if(F=="Illegal"){return{language:null,r:0,keyword_count:0,value:l(C)}}else{throw F}}}function h(){function o(t,s,u){if(t.compiled){return}if(!u){t.bR=c(s,t.b?t.b:"\\B|\\b");if(!t.e&&!t.eW){t.e="\\B|\\b"}if(t.e){t.eR=c(s,t.e)}}if(t.i){t.iR=c(s,t.i)}if(t.r==undefined){t.r=1}if(t.k){t.lR=c(s,t.l||hljs.IR,true)}for(var r in t.k){if(!t.k.hasOwnProperty(r)){continue}if(t.k[r] instanceof Object){t.kG=t.k}else{t.kG={keyword:t.k}}break}if(!t.c){t.c=[]}t.compiled=true;for(var q=0;q<t.c.length;q++){o(t.c[q],s,false)}if(t.starts){o(t.starts,s,false)}}for(var p in d){if(!d.hasOwnProperty(p)){continue}o(d[p].dM,d[p],true)}}function e(){if(e.called){return}e.called=true;h()}function n(t,y,p){e();var A=g(t,p);var r=a(t);if(r=="no-highlight"){return}if(r){var w=f(r,A)}else{var w={language:"",keyword_count:0,r:0,value:l(A)};var x=w;for(var z in d){if(!d.hasOwnProperty(z)){continue}var u=f(z,A);if(u.keyword_count+u.r>x.keyword_count+x.r){x=u}if(u.keyword_count+u.r>w.keyword_count+w.r){x=w;w=u}}}var s=t.className;if(!s.match(w.language)){s=s?(s+" "+w.language):w.language}var o=b(t);if(o.length){var q=document.createElement("pre");q.innerHTML=w.value;w.value=k(o,b(q),A)}if(y){w.value=w.value.replace(/^((<[^>]+>|\t)+)/gm,function(B,E,D,C){return E.replace(/\t/g,y)})}if(p){w.value=w.value.replace(/\n/g,"<br>")}if(/MSIE [678]/.test(navigator.userAgent)&&t.tagName=="CODE"&&t.parentNode.tagName=="PRE"){var q=t.parentNode;var v=document.createElement("div");v.innerHTML="<pre><code>"+w.value+"</code></pre>";t=v.firstChild.firstChild;v.firstChild.cN=q.cN;q.parentNode.replaceChild(v.firstChild,q)}else{t.innerHTML=w.value}t.className=s;t.dataset={};t.dataset.result={language:w.language,kw:w.keyword_count,re:w.r};if(x&&x.language){t.dataset.second_best={language:x.language,kw:x.keyword_count,re:x.r}}}function j(){if(j.called){return}j.called=true;e();var q=document.getElementsByTagName("pre");for(var o=0;o<q.length;o++){var p=i(q[o]);if(p){n(p,hljs.tabReplace)}}}function m(){var o=arguments;var p=function(){j.apply(null,o)};if(window.addEventListener){window.addEventListener("DOMContentLoaded",p,false);window.addEventListener("load",p,false)}else{if(window.attachEvent){window.attachEvent("onload",p)}else{window.onload=p}}}var d={};this.LANGUAGES=d;this.initHighlightingOnLoad=m;this.highlightBlock=n;this.initHighlighting=j;this.IR="[a-zA-Z][a-zA-Z0-9_]*";this.UIR="[a-zA-Z_][a-zA-Z0-9_]*";this.NR="\\b\\d+(\\.\\d+)?";this.CNR="\\b(0x[A-Za-z0-9]+|\\d+(\\.\\d+)?)";this.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";this.BE={b:"\\\\.",r:0};this.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[this.BE],r:0};this.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[this.BE],r:0};this.CLCM={cN:"comment",b:"//",e:"$"};this.CBLCLM={cN:"comment",b:"/\\*",e:"\\*/"};this.HCM={cN:"comment",b:"#",e:"$"};this.NM={cN:"number",b:this.NR,r:0};this.CNM={cN:"number",b:this.CNR,r:0};this.inherit=function(o,r){var q={};for(var p in o){q[p]=o[p]}if(r){for(var p in r){q[p]=r[p]}}return q}}();hljs.LANGUAGES.ruby=function(){var g="[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?";var a="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?";var n={keyword:{and:1,"false":1,then:1,defined:1,module:1,"in":1,"return":1,redo:1,"if":1,BEGIN:1,retry:1,end:1,"for":1,"true":1,self:1,when:1,next:1,until:1,"do":1,begin:1,unless:1,END:1,rescue:1,nil:1,"else":1,"break":1,undef:1,not:1,"super":1,"class":1,"case":1,require:1,yield:1,alias:1,"while":1,ensure:1,elsif:1,or:1,def:1},keymethods:{__id__:1,__send__:1,abort:1,abs:1,"all?":1,allocate:1,ancestors:1,"any?":1,arity:1,assoc:1,at:1,at_exit:1,autoload:1,"autoload?":1,"between?":1,binding:1,binmode:1,"block_given?":1,call:1,callcc:1,caller:1,capitalize:1,"capitalize!":1,casecmp:1,"catch":1,ceil:1,center:1,chomp:1,"chomp!":1,chop:1,"chop!":1,chr:1,"class":1,class_eval:1,"class_variable_defined?":1,class_variables:1,clear:1,clone:1,close:1,close_read:1,close_write:1,"closed?":1,coerce:1,collect:1,"collect!":1,compact:1,"compact!":1,concat:1,"const_defined?":1,const_get:1,const_missing:1,const_set:1,constants:1,count:1,crypt:1,"default":1,default_proc:1,"delete":1,"delete!":1,delete_at:1,delete_if:1,detect:1,display:1,div:1,divmod:1,downcase:1,"downcase!":1,downto:1,dump:1,dup:1,each:1,each_byte:1,each_index:1,each_key:1,each_line:1,each_pair:1,each_value:1,each_with_index:1,"empty?":1,entries:1,eof:1,"eof?":1,"eql?":1,"equal?":1,"eval":1,exec:1,exit:1,"exit!":1,extend:1,fail:1,fcntl:1,fetch:1,fileno:1,fill:1,find:1,find_all:1,first:1,flatten:1,"flatten!":1,floor:1,flush:1,for_fd:1,foreach:1,fork:1,format:1,freeze:1,"frozen?":1,fsync:1,getc:1,gets:1,global_variables:1,grep:1,gsub:1,"gsub!":1,"has_key?":1,"has_value?":1,hash:1,hex:1,id:1,include:1,"include?":1,included_modules:1,index:1,indexes:1,indices:1,induced_from:1,inject:1,insert:1,inspect:1,instance_eval:1,instance_method:1,instance_methods:1,"instance_of?":1,"instance_variable_defined?":1,instance_variable_get:1,instance_variable_set:1,instance_variables:1,"integer?":1,intern:1,invert:1,ioctl:1,"is_a?":1,isatty:1,"iterator?":1,join:1,"key?":1,keys:1,"kind_of?":1,lambda:1,last:1,length:1,lineno:1,ljust:1,load:1,local_variables:1,loop:1,lstrip:1,"lstrip!":1,map:1,"map!":1,match:1,max:1,"member?":1,merge:1,"merge!":1,method:1,"method_defined?":1,method_missing:1,methods:1,min:1,module_eval:1,modulo:1,name:1,nesting:1,"new":1,next:1,"next!":1,"nil?":1,nitems:1,"nonzero?":1,object_id:1,oct:1,open:1,pack:1,partition:1,pid:1,pipe:1,pop:1,popen:1,pos:1,prec:1,prec_f:1,prec_i:1,print:1,printf:1,private_class_method:1,private_instance_methods:1,"private_method_defined?":1,private_methods:1,proc:1,protected_instance_methods:1,"protected_method_defined?":1,protected_methods:1,public_class_method:1,public_instance_methods:1,"public_method_defined?":1,public_methods:1,push:1,putc:1,puts:1,quo:1,raise:1,rand:1,rassoc:1,read:1,read_nonblock:1,readchar:1,readline:1,readlines:1,readpartial:1,rehash:1,reject:1,"reject!":1,remainder:1,reopen:1,replace:1,require:1,"respond_to?":1,reverse:1,"reverse!":1,reverse_each:1,rewind:1,rindex:1,rjust:1,round:1,rstrip:1,"rstrip!":1,scan:1,seek:1,select:1,send:1,set_trace_func:1,shift:1,singleton_method_added:1,singleton_methods:1,size:1,sleep:1,slice:1,"slice!":1,sort:1,"sort!":1,sort_by:1,split:1,sprintf:1,squeeze:1,"squeeze!":1,srand:1,stat:1,step:1,store:1,strip:1,"strip!":1,sub:1,"sub!":1,succ:1,"succ!":1,sum:1,superclass:1,swapcase:1,"swapcase!":1,sync:1,syscall:1,sysopen:1,sysread:1,sysseek:1,system:1,syswrite:1,taint:1,"tainted?":1,tell:1,test:1,"throw":1,times:1,to_a:1,to_ary:1,to_f:1,to_hash:1,to_i:1,to_int:1,to_io:1,to_proc:1,to_s:1,to_str:1,to_sym:1,tr:1,"tr!":1,tr_s:1,"tr_s!":1,trace_var:1,transpose:1,trap:1,truncate:1,"tty?":1,type:1,ungetc:1,uniq:1,"uniq!":1,unpack:1,unshift:1,untaint:1,untrace_var:1,upcase:1,"upcase!":1,update:1,upto:1,"value?":1,values:1,values_at:1,warn:1,write:1,write_nonblock:1,"zero?":1,zip:1}};var h={cN:"yardoctag",b:"@[A-Za-z]+"};var d={cN:"comment",b:"#",e:"$",c:[h]};var c={cN:"comment",b:"^\\=begin",e:"^\\=end",c:[h],r:10};var b={cN:"comment",b:"^__END__",e:"\\n$"};var u={cN:"subst",b:"#\\{",e:"}",l:g,k:n};var p=[hljs.BE,u];var s={cN:"string",b:"'",e:"'",c:p,r:0};var r={cN:"string",b:'"',e:'"',c:p,r:0};var q={cN:"string",b:"%[qw]?\\(",e:"\\)",c:p,r:10};var o={cN:"string",b:"%[qw]?\\[",e:"\\]",c:p,r:10};var m={cN:"string",b:"%[qw]?{",e:"}",c:p,r:10};var l={cN:"string",b:"%[qw]?<",e:">",c:p,r:10};var k={cN:"string",b:"%[qw]?/",e:"/",c:p,r:10};var j={cN:"string",b:"%[qw]?%",e:"%",c:p,r:10};var i={cN:"string",b:"%[qw]?-",e:"-",c:p,r:10};var t={cN:"string",b:"%[qw]?\\|",e:"\\|",c:p,r:10};var e={cN:"function",b:"\\bdef\\s+",e:" |$|;",l:g,k:n,c:[{cN:"title",b:a,l:g,k:n},{cN:"params",b:"\\(",e:"\\)",l:g,k:n},d,c,b]};var f={cN:"identifier",b:g,l:g,k:n,r:0};var v=[d,c,b,s,r,q,o,m,l,k,j,i,t,{cN:"class",b:"\\b(class|module)\\b",e:"$|;",k:{"class":1,module:1},c:[{cN:"title",b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?",r:0},{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+hljs.IR+"::)?"+hljs.IR}]},d,c,b]},e,{cN:"constant",b:"(::)?([A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:":",c:[s,r,q,o,m,l,k,j,i,t,f],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"number",b:"\\?\\w"},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},f,{b:"("+hljs.RSR+")\\s*",c:[d,c,b,{cN:"regexp",b:"/",e:"/[a-z]*",i:"\\n",c:[hljs.BE]}],r:0}];u.c=v;e.c[1].c=v;return{dM:{l:g,k:n,c:v}}}();
   21  // ColorBox v1.3.20.1 - jQuery lightbox plugin
   ..
  100  	event_ie6 = prefix + '_IE6',
  101  
  102: 	// Cached jQuery Object Variables
  103  	$overlay,
  104  	$box,
  ...
  122  	$groupControls,
  123  	
  124: 	// Variables for cached values or use across multiple functions
  125  	settings,
  126  	interfaceHeight,
  ...
  394  				init = true;
  395  
  396: 				// Cache values needed for size calculations
  397  				interfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height();//Subtraction needed for IE6
  398  				interfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width();
  ...
  403  				$box.css({"padding-bottom": interfaceHeight, "padding-right": interfaceWidth});
  404  
  405: 				// Anonymous functions here keep the public method from being cached, thereby allowing them to be redefined on the fly.
  406  				$next.click(function () {
  407  					publicMethod.next();
  ...
 1007  bSort:true,bInfo:true,bAutoWidth:true,bProcessing:false,bSortClasses:true,bStateSave:false,bServerSide:false};this.oScroll={sX:"",sXInner:"",sY:"",bCollapse:false,iBarWidth:0};this.aanFeatures=[];this.oLanguage={sProcessing:"Processing...",sLengthMenu:"Show _MENU_ entries",sZeroRecords:"No matching records found",sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",
 1008  sInfoPostFix:"",sSearch:"Search:",sUrl:"",oPaginate:{sFirst:"First",sPrevious:"Previous",sNext:"Next",sLast:"Last"}};this.aoData=[];this.aiDisplay=[];this.aiDisplayMaster=[];this.aoColumns=[];this.iNextId=0;this.asDataSearch=[];this.oPreviousSearch={sSearch:"",bRegex:false,bSmart:true};this.aoPreSearchCols=[];this.aaSorting=[[0,"asc",0]];this.aaSortingFixed=null;this.asStripClasses=[];this.asDestoryStrips=[];this.fnFooterCallback=this.fnHeaderCallback=this.fnRowCallback=null;this.aoDrawCallback=[];
 1009: this.fnInitComplete=null;this.sTableId="";this.nTableWrapper=this.nTBody=this.nTFoot=this.nTHead=this.nTable=null;this.iDefaultSortIndex=0;this.bInitialised=false;this.aoOpenRows=[];this.sDom="lfrtip";this.sPaginationType="two_button";this.iCookieDuration=7200;this.sCookiePrefix="SpryMedia_DataTables_";this.sAjaxSource=null;this.bAjaxDataGet=true;this.fnServerData=function(a,b,c){j.ajax({url:a,data:b,success:c,dataType:"json",cache:false,error:function(){alert("DataTables warning: JSON data from server failed to load or be parsed. This is most likely to be caused by a JSON formatting error.")}})};
 1010  this.fnFormatNumber=function(a){if(a<1E3)return a;else{var b=a+"";a=b.split("");var c="";b=b.length;for(var d=0;d<b;d++){if(d%3===0&&d!==0)c=","+c;c=a[b-d-1]+c}}return c};this.aLengthMenu=[10,25,50,100];this.iDraw=0;this.iDrawError=-1;this._iDisplayLength=10;this._iDisplayStart=0;this._iDisplayEnd=10;this._iRecordsDisplay=this._iRecordsTotal=0;this.bJUI=false;this.oClasses=m.oStdClasses;this.bSorted=this.bFiltered=false;this.oInit=null}function q(a){return function(){var b=[B(this[m.iApiIndex])].concat(Array.prototype.slice.call(arguments));
 1011  return m.oApi[a].apply(this,b)}}function r(a){if(a.bInitialised===false)setTimeout(function(){r(a)},200);else{na(a);z(a);if(a.oFeatures.bSort)O(a);else{a.aiDisplay=a.aiDisplayMaster.slice();F(a);D(a)}if(a.sAjaxSource!==null&&!a.oFeatures.bServerSide){K(a,true);a.fnServerData.call(a.oInstance,a.sAjaxSource,null,function(b){for(var c=0;c<b.aaData.length;c++)w(a,b.aaData[c]);a.iInitDisplayStart=a._iDisplayStart;if(a.oFeatures.bSort)O(a);else{a.aiDisplay=a.aiDisplayMaster.slice();F(a);D(a)}K(a,false);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/CHANGES:
  355     `Accept` headers. (Konstantin Haase)
  356  
  357:  * Added `:static_cache_control` setting to automatically set cache control
  358     headers to static files. (Kenichi Nakamura)
  359  
  ...
  647     explicitly (Konstantin Haase)
  648  
  649:  * Path is no longer cached if changed between handlers that do pattern
  650     matching. This means you can change `request.path_info` in a pattern
  651     matching before filter. (Konstantin Haase)
  652  
  653:  * Headers set by cache_control now always set max_age as an Integer, making
  654     sure it is compatible with RFC2616. (Konstantin Haase)
  655  
  ...
  700     README has been updated (Kouhei Yanagita).
  701  
  702:  * It is now possible to access Sinatra's template_cache from the outside.
  703     (Nick Sutterer)
  704  
  ...
  786   * New boolean 'reload_templates' setting controls whether template files
  787     are reread from disk and recompiled on each request. Template read/compile
  788:    is cached by default in all environments except development. (Ryan Tomayko)
  789  
  790   * New 'erubis' helper method for rendering ERB template with Erubis. The
  791     erubis gem is required. (Dylan Egan)
  792  
  793:  * New 'cache_control' helper method provides a convenient way of
  794:    setting the Cache-Control response header. Takes a variable number
  795     of boolean directives followed by a hash of value directives, like
  796:    this: cache_control :public, :must_revalidate, :max_age => 60
  797     (Ryan Tomayko)
  798  
  799:  * New 'expires' helper method is like cache_control but takes an
  800     integer number of seconds or Time object:
  801     expires 300, :public, :must_revalidate

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/lib/sinatra/base.rb:
  437      end
  438  
  439:     # Specify response freshness policy for HTTP caches (Cache-Control header).
  440:     # Any number of non-value directives (:public, :private, :no_cache,
  441      # :no_store, :must_revalidate, :proxy_revalidate) may be passed along with
  442      # a Hash of value directives (:max_age, :min_stale, :s_max_age).
  443      #
  444:     #   cache_control :public, :must_revalidate, :max_age => 60
  445:     #   => Cache-Control: public, must-revalidate, max-age=60
  446      #
  447:     # See RFC 2616 / 14.9 for more on standard cache control directives:
  448      # http://tools.ietf.org/html/rfc2616#section-14.9.1
  449:     def cache_control(*values)
  450        if values.last.kind_of?(Hash)
  451          hash = values.pop
  ...
  463        end
  464  
  465:       response['Cache-Control'] = values.join(', ') if values.any?
  466      end
  467  
  468:     # Set the Expires header and Cache-Control/max-age directive. Amount
  469      # can be an integer number of seconds in the future or a Time object
  470      # indicating when the response should be considered "stale". The remaining
  471:     # "values" arguments are passed to the #cache_control helper:
  472      #
  473      #   expires 500, :public, :must_revalidate
  474:     #   => Cache-Control: public, must-revalidate, max-age=60
  475      #   => Expires: Mon, 08 Jun 2009 08:50:17 GMT
  476      #
  ...
  487  
  488        values.last.merge!(:max_age => max_age)
  489:       cache_control(*values)
  490  
  491        response['Expires'] = time.httpdate
  ...
  524      # identifies the current version of the resource. The +kind+ argument
  525      # indicates whether the etag should be used as a :strong (default) or :weak
  526:     # cache validator.
  527      #
  528      # When the current request includes an 'If-None-Match' header with a
  ...
  821      def compile_template(engine, data, options, views)
  822        eat_errors = options.delete :eat_errors
  823:       template_cache.fetch engine, data, options, views do
  824          template = Tilt[engine]
  825          raise "Template engine not found: #{engine}" if template.nil?
  ...
  864  
  865      attr_accessor :app, :env, :request, :response, :params
  866:     attr_reader   :template_cache
  867  
  868      def initialize(app = nil)
  869        super()
  870        @app = app
  871:       @template_cache = Tilt::Cache.new
  872        yield self if block_given?
  873      end
  ...
  883        @response = Response.new
  884        @params   = indifferent_params(@request.params)
  885:       template_cache.clear if settings.reload_templates
  886        force_encoding(@params)
  887  
  ...
 1022  
 1023        env['sinatra.static_file'] = path
 1024:       cache_control(*settings.static_cache_control) if settings.static_cache_control?
 1025        send_file path, :disposition => nil
 1026      end
 ....
 1880      set :public_folder, Proc.new { root && File.join(root, 'public') }
 1881      set :static, Proc.new { public_folder && File.exist?(public_folder) }
 1882:     set :static_cache_control, false
 1883  
 1884      error ::Exception do

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.de.md:
   82          * [URLs generieren](#urls-generieren)
   83          * [Browser-Umleitung](#browser-umleitung)
   84:         * [Cache einsetzen](#cache-einsetzen)
   85          * [Dateien versenden](#dateien-versenden)
   86          * [Das Request-Objekt](#das-request-objekt)
   ..
  391  `./public/css/style.css` ist unter `http://example.com/css/style.css` zu finden.
  392  
  393: Um den `Cache-Control`-Header mit Informationen zu versorgen, verwendet man
  394: die `:static_cache_control`-Einstellung (s.u.).
  395  
  396  ## Views/Templates
  ...
 1614  ```
 1615  
 1616: ### Cache einsetzen
 1617  
 1618  Ein sinnvolles Einstellen von Header-Daten ist die Grundlage für ein
 1619  ordentliches HTTP-Caching.
 1620  
 1621: Der Cache-Control-Header lässt sich ganz einfach einstellen:
 1622  
 1623  ```ruby
 1624  get '/' do
 1625:   cache_control :public
 1626:   "schon gecached!"
 1627  end
 1628  ```
 ....
 1632  ```ruby
 1633  before do
 1634:   cache_control :public, :must_revalidate, :max_age => 60
 1635  end
 1636  ```
 1637  
 1638  Bei Verwendung der `expires`-Helfermethode zum Setzen des gleichnamigen Headers,
 1639: wird `Cache-Control` automatisch eigestellt:
 1640  
 1641  ```ruby
 ....
 1648  werden. Es wird empfohlen, dass diese Helfer aufgerufen werden **bevor** die
 1649  eigentliche Arbeit anfängt, da sie sofort eine Antwort senden, wenn der Client
 1650: eine aktuelle Version im Cache vorhält:
 1651  
 1652  ```ruby
 ....
 1667  
 1668  Diese Helfer führen nicht das eigentliche Caching aus, sondern geben die dafür
 1669: notwendigen Informationen an den Cache weiter. Für schnelle Reverse-Proxy
 1670: Cache-Lösungen bietet sich z.B.
 1671: [rack-cache](https://github.com/rtomayko/rack-cache) an:
 1672  
 1673  ```ruby
 1674: require "rack/cache"
 1675  require "sinatra"
 1676  
 1677: use Rack::Cache
 1678  
 1679  get '/' do
 1680:   cache_control :public, :max_age => 36000
 1681    sleep 5
 1682    "hello"
 ....
 1684  ```
 1685  
 1686: Um den `Cache-Control`-Header mit Informationen zu versorgen, verwendet man die
 1687: `:static_cache_control`-Einstellung (s.u.).
 1688  
 1689  Nach RFC 2616 sollte sich die Anwendung anders verhalten, wenn ein If-Match oder
 ....
 1914  Pfaden gesucht. Das ergibt kein Performance-Problem, da `render` `block`
 1915  verwendet, sobald eine Datei gefunden wurde. Ebenso werden Template-Pfade samt
 1916: Inhalt gecached, solange nicht im Entwicklungsmodus gearbeitet wird. Das sollte
 1917  im Hinterkopf behalten werden, wenn irgendwelche verrückten Methoden
 1918  zusammenbastelt werden.
 ....
 2114    erhöhen. Standardmäßig aktiviert.</dd>
 2115  
 2116:   <dt>static_cache_control</dt>
 2117    <dd>Wenn Sinatra statische Daten zur Verfügung stellt, können mit dieser
 2118:   Einstellung die <tt>Cache-Control</tt> Header zu den Responses hinzugefügt
 2119:   werden. Die Einstellung verwendet dazu die <tt>cache_control</tt>
 2120    Helfer-Methode. Standardmäßig deaktiviert. Ein Array wird verwendet, um
 2121:   mehrere Werte gleichzeitig zu übergeben: <tt>set :static_cache_control,
 2122    [:public, :max_age => 300]</tt></dd>
 2123  
 ....
 2142  In diesem Modus werden alle Templates zwischen Requests neu geladen. Dazu gibt
 2143  es besondere Fehlerseiten für 404 Stati und Fehlermeldungen. In `"production"`
 2144: und `"test"` werden Templates automatisch gecached.
 2145  
 2146  Um die Anwendung in einer anderen Umgebung auszuführen kann man die `-e`

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.es.md:
  294  `http://ejemplo.com/css/style.css`.
  295  
  296: Usá la configuración `:static_cache_control` para agregar el encabezado
  297: `Cache-Control` (ver la sección de configuración para más detalles).
  298  
  299  ### Vistas / Plantillas
  ...
 1473  ```
 1474  
 1475: ### Cache Control
 1476  
 1477: Asignar tus encabezados correctamente es el cimiento para realizar un cacheo
 1478  HTTP correcto.
 1479  
 1480: Podés asignar el encabezado Cache-Control fácilmente:
 1481  
 1482  ``` ruby
 1483  get '/' do
 1484:   cache_control :public
 1485:   "cachealo!"
 1486  end
 1487  ```
 1488  
 1489: Pro tip: configurar el cacheo en un filtro `before`:
 1490  
 1491  ``` ruby
 1492  before do
 1493:   cache_control :public, :must_revalidate, :max_age => 60
 1494  end
 1495  ```
 1496  
 1497  Si estás usando el helper `expires` para definir el encabezado correspondiente,
 1498: `Cache-Control` se va a definir automáticamente:
 1499  
 1500  ``` ruby
 ....
 1525  ```
 1526  
 1527: Estos helpers no van a cachear nada por vos, sino que van a facilitar la
 1528  información necesaria para poder hacerlo. Si estás buscando soluciones rápidas
 1529: de cacheo con proxys reversos, mirá
 1530: [rack-cache](https://github.com/rtomayko/rack-cache):
 1531  
 1532  ``` ruby
 1533: require "rack/cache"
 1534  require "sinatra"
 1535  
 1536: use Rack::Cache
 1537  
 1538  get '/' do
 1539:   cache_control :public, :max_age => 36000
 1540    sleep 5
 1541    "hola"
 ....
 1543  ```
 1544  
 1545: Usá la configuración `:static_cache_control` para agregar el encabezado
 1546: `Cache-Control` a archivos estáticos (ver la sección de configuración
 1547  para más detalles).
 1548  
 ....
 1775  problema de rendimiento debido a que `render` va a usar `break` ni bien
 1776  encuentre un archivo que exista. Además, las ubicaciones de las plantillas (y
 1777: su contenido) se cachean cuando no estás en el modo de desarrollo. Es bueno
 1778  tener en cuenta lo anteiror si escribís un método medio loco.
 1779  
 ....
 2043    </dd>
 2044  
 2045:   <dt>static_cache_control</dt>
 2046    <dd>
 2047      Cuando Sinatra está sirviendo archivos estáticos, y
 2048      está opción está habilitada, les va a agregar encabezados
 2049:     <tt>Cache-Control</tt> a las respuestas. Para esto
 2050:     utiliza el helper <tt>cache_control</tt>. Se encuentra
 2051      deshabilitada por defecto. Notar que es necesario
 2052      utilizar un array cuando se asignan múltiples valores:
 2053:     <tt>set :static_cache_control, [:public, :max_age => 300]</tt>.
 2054    </dd>
 2055  
 ....
 2068  
 2069  * Se recargan las plantillas entre una petición y la siguiente, a diferencia
 2070: de `production` y `test`, donde se cachean.
 2071  * Se instalan manejadores de errores `not_found` y `error`
 2072  especiales que muestran un stack trace en el navegador cuando son disparados.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.fr.md:
   82          * [Former des URLs](#former-des-urls)
   83          * [Redirection du navigateur](#redirection-du-navigateur)
   84:         * [Contrôle du cache](#contrôle-du-cache)
   85          * [Envoyer des fichiers](#envoyer-des-fichiers)
   86          * [Accéder à l'objet requête](#accéder-à-lobjet-requête)
   ..
  396  `http://exemple.com/css/style.css`.
  397  
  398: Utilisez le paramètre `:static_cache_control` pour ajouter l'information
  399: d'en-tête <tt>Cache-Control</tt> (voir plus loin).
  400  
  401  ## Vues / Templates
  ...
 1676  ```
 1677  
 1678: ### Contrôle du cache
 1679  
 1680: Définir correctement vos entêtes à la base pour un bon cache HTTP.
 1681  
 1682: Vous pouvez facilement définir l'entête Cache-Control de la manière suivante :
 1683  
 1684  ``` ruby
 1685  get '/' do
 1686:   cache_control :public
 1687:   "met le en cache !"
 1688  end
 1689  ```
 1690  
 1691: Conseil de pro : définir le cache dans un filtre before :
 1692  
 1693  ``` ruby
 1694  before do
 1695:   cache_control :public, :must_revalidate, :max_age => 60
 1696  end
 1697  ```
 1698  
 1699  Si vous utilisez la méthode `expires` pour définir l'entête correspondant,
 1700: `Cache-Control` sera alors défini automatiquement :
 1701  
 1702  ``` ruby
 ....
 1706  ```
 1707  
 1708: Pour utiliser correctement les caches, vous devriez utiliser `etag` ou
 1709  `last_modified`. Il est recommandé d'utiliser ces méthodes *avant* de faire
 1710  d'importantes modifications, car elles vont immédiatement déclencher la réponse
 1711: si le client a déjà la version courante dans son cache :
 1712  
 1713  ``` ruby
 ....
 1727  ```
 1728  
 1729: Ces méthodes ne sont pas chargées de mettre des données en cache, mais elles
 1730: fournissent les informations nécessaires pour votre cache. Si vous êtes à la
 1731: recherche de solutions rapides pour un reverse-proxy de cache, essayez
 1732: [rack-cache](https://github.com/rtomayko/rack-cache) :
 1733  
 1734  ``` ruby
 1735: require "rack/cache"
 1736  require "sinatra"
 1737  
 1738: use Rack::Cache
 1739  
 1740  get '/' do
 1741:   cache_control :public, :max_age => 36000
 1742    sleep 5
 1743    "hello"
 ....
 1745  ```
 1746  
 1747: Utilisez le paramètre `:static_cache_control` pour ajouter l'information
 1748: d'en-tête `Cache-Control` (voir plus loin).
 1749  
 1750  D'après la RFC 2616, votre application devrait se comporter différement lorsque
 ....
 1992  un problème de performance dans le sens où `render` va utiliser `break` dès
 1993  qu'un fichier est trouvé. De plus, l'emplacement des templates (et leur
 1994: contenu) est mis en cache si vous n'êtes pas en mode développement. Vous
 1995  devriez garder cela en tête si vous écrivez une méthode vraiment dingue.
 1996  
 ....
 2206    classique, désactivé pour le style modulaire.</dd>
 2207  
 2208:   <dt>static_cache_control</dt>
 2209    <dd>A définir quand Sinatra rend des fichiers statiques pour ajouter les
 2210:   en-têtes <tt>Cache-Control</tt>. Utilise le helper <tt>cache_control</tt>.
 2211    Désactivé par défaut. Utiliser un array explicite pour définir des
 2212:   plusieurs valeurs : <tt>set :static_cache_control, [:public, :max_age =>
 2213    300]</tt></dd>
 2214  
 ....
 2237  `error` sont installés pour vous permettre d'avoir une pile de trace
 2238  dans votre navigateur. En mode `"production"` et `"test"` les
 2239: templates sont mis en cache par défaut.
 2240  
 2241  Pour exécuter votre application dans un environnement différent, définissez la

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.ko.md:
  272  `./public/css/style.css` 파일은 `http://example.com/css/style.css` 로 접근할 수 있다.
  273  
  274: `Cache-Control` 헤더 정보를 추가하려면 `:static_cache_control` 설정(아래 참조)을 사용하면 된다.
  275  
  276  ## 뷰 / 템플릿(Views / Templates)
  ...
 1317  ```
 1318  
 1319: ### 캐시 컨트롤(Cache Control)
 1320  
 1321  헤더를 정확하게 설정하는 것은 적절한 HTTP 캐싱의 기본이다.
 1322  
 1323: Cache-Control 헤더를 다음과 같이 간단하게 설정할 수 있다:
 1324  
 1325  ```ruby
 1326  get '/' do
 1327:   cache_control :public
 1328:   "cache it!"
 1329  end
 1330  ```
 ....
 1334  ```ruby
 1335  before do
 1336:   cache_control :public, :must_revalidate, :max_age => 60
 1337  end
 1338  ```
 1339  
 1340  `expires` 헬퍼를 사용하여 그에 상응하는 헤더를 설정한다면,
 1341: `Cache-Control`이 자동으로 설정될 것이다:
 1342  
 1343  ```ruby
 ....
 1368  이들 헬퍼는 어떠한 캐싱도 하지 않으며, 대신 필요한 정보를 캐시에 제공한다.
 1369  여러분이 만약 손쉬운 리버스 프록시(reverse-proxy) 캐싱 솔루션을 찾고 있다면,
 1370: [rack-cache](https://github.com/rtomayko/rack-cache)를 써보라:
 1371  
 1372  ```ruby
 1373: require "rack/cache"
 1374  require "sinatra"
 1375  
 1376: use Rack::Cache
 1377  
 1378  get '/' do
 1379:   cache_control :public, :max_age => 36000
 1380    sleep 5
 1381    "hello"
 ....
 1383  ```
 1384  
 1385: 정적 파일에 `Cache-Control` 헤더 정보를 추가하려면 `:static_cache_control` 설정(아래 참조)을 사용하라:
 1386  
 1387  RFC 2616에 따르면 If-Match 또는 If-None-Match 헤더가 `*`로 설정된 경우 요청한 리소스(resource)가 이미 존재하느냐 여부에 따라 다르게 취급해야 한다고 되어 있다.
 ....
 1798     기본값은 전통적 방식에서는 활성, 모듈 앱에서는 비활성.</dd>
 1799  
 1800:   <dt>static_cache_control</dt>
 1801:   <dd>Sinatra가 정적 파일을 제공하는 경우, 응답에 <tt>Cache-Control</tt> 헤더를 추가할 때 설정.
 1802:    <tt>cache_control</tt> 헬퍼를 사용.
 1803     기본값은 비활성.
 1804     여러 값을 설정할 경우는 명시적으로 배열을 사용할 것:
 1805:    <tt>set :static_cache_control, [:public, :max_age => 300]</tt>
 1806    </dd>
 1807  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.md:
   80          * [Generating URLs](#generating-urls)
   81          * [Browser Redirect](#browser-redirect)
   82:         * [Cache Control](#cache-control)
   83          * [Sending Files](#sending-files)
   84          * [Accessing the Request Object](#accessing-the-request-object)
   ..
  386  `http://example.com/css/style.css`.
  387  
  388: Use the `:static_cache_control` setting (see below) to add
  389: `Cache-Control` header info.
  390  
  391  ## Views / Templates
  ...
 1612  ```
 1613  
 1614: ### Cache Control
 1615  
 1616  Setting your headers correctly is the foundation for proper HTTP caching.
 1617  
 1618: You can easily set the Cache-Control header like this:
 1619  
 1620  ``` ruby
 1621  get '/' do
 1622:   cache_control :public
 1623:   "cache it!"
 1624  end
 1625  ```
 ....
 1629  ``` ruby
 1630  before do
 1631:   cache_control :public, :must_revalidate, :max_age => 60
 1632  end
 1633  ```
 1634  
 1635  If you are using the `expires` helper to set the corresponding header,
 1636: `Cache-Control` will be set automatically for you:
 1637  
 1638  ``` ruby
 ....
 1642  ```
 1643  
 1644: To properly use caches, you should consider using `etag` or `last_modified`.
 1645  It is recommended to call those helpers *before* doing any heavy lifting, as they
 1646  will immediately flush a response if the client already has the current
 1647: version in its cache:
 1648  
 1649  ``` ruby
 ....
 1664  
 1665  These helpers will not do any caching for you, but rather feed the necessary
 1666: information to your cache. If you are looking for a quick reverse-proxy caching
 1667: solution, try [rack-cache](https://github.com/rtomayko/rack-cache):
 1668  
 1669  ``` ruby
 1670: require "rack/cache"
 1671  require "sinatra"
 1672  
 1673: use Rack::Cache
 1674  
 1675  get '/' do
 1676:   cache_control :public, :max_age => 36000
 1677    sleep 5
 1678    "hello"
 ....
 1680  ```
 1681  
 1682: Use the `:static_cache_control` setting (see below) to add
 1683: `Cache-Control` header info to static files.
 1684  
 1685  According to RFC 2616 your application should behave differently if the If-Match
 ....
 1909  rather calls the given block for all possible paths. This is not a performance
 1910  issue, since `render` will use `break` as soon as a file is found. Also,
 1911: template locations (and content) will be cached if you are not running in
 1912  development mode. You should keep that in mind if you write a really crazy
 1913  method.
 ....
 2140    </dd>
 2141  
 2142:   <dt>static_cache_control</dt>
 2143    <dd>
 2144      When Sinatra is serving static files, set this to add
 2145:     <tt>Cache-Control</tt> headers to the responses. Uses the
 2146:     <tt>cache_control</tt> helper. Disabled by default.
 2147    </dd>
 2148    <dd>
 2149      Use an explicit array when setting multiple values:
 2150:     <tt>set :static_cache_control, [:public, :max_age => 300]</tt>
 2151    </dd>
 2152  
 ....
 2178  requests, and special `not_found` and `error` handlers
 2179  display stack traces in your browser.
 2180: In the `"production"` and `"test"` environments, templates are cached by default.
 2181  
 2182  To run different environments, set the `RACK_ENV` environment variable:

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.ru.md:
  300  `http://example.com/css/style.css`.
  301  
  302: Используйте опцию `:static_cache_control` (см. ниже), чтобы добавить заголовок
  303: `Cache-Control`.
  304  
  305  ## Представления / Шаблоны
  ...
 1510  Установка корректных заголовков — основа правильного HTTP кэширования.
 1511  
 1512: Вы можете легко выставить заголовок Cache-Control таким образом:
 1513  
 1514  ```ruby
 1515  get '/' do
 1516:   cache_control :public
 1517:   "cache it!"
 1518  end
 1519  ```
 ....
 1523  ```ruby
 1524  before do
 1525:   cache_control :public, :must_revalidate, :max_age => 60
 1526  end
 1527  ```
 1528  
 1529  Если вы используете метод `expires` для задания соответствующего заголовка, то
 1530: `Cache-Control` будет выставлен автоматически:
 1531  
 1532  ```ruby
 ....
 1559  Эти методы-помощники не станут ничего кэшировать для вас, но они дадут
 1560  необходимую информацию для вашего кэша. Если вы ищете легкое решение для
 1561: кэширования, попробуйте [rack-cache](https://github.com/rtomayko/rack-cache):
 1562  
 1563  ```ruby
 1564: require 'rack/cache'
 1565  require 'sinatra'
 1566  
 1567: use Rack::Cache
 1568  
 1569  get '/' do
 1570:   cache_control :public, :max_age => 36000
 1571    sleep 5
 1572    "hello"
 ....
 1574  ```
 1575  
 1576: Используйте опцию `:static_cache_control` (см. ниже), чтобы добавить заголовок
 1577: `Cache-Control` к статическим файлам.
 1578  
 1579  В соответствии с RFC 2616 ваше приложение должно вести себя по-разному, когда
 ....
 2035    <dd>По умолчанию включено в классических и отключено в модульных приложениях.</dd>
 2036  
 2037:   <dt>static_cache_control</dt>
 2038    <dd>
 2039      когда Sinatra отдает статические файлы, используйте эту опцию, чтобы
 2040:     добавить им заголовок <tt>Cache-Control</tt>. Для этого используется
 2041:     метод-помощник <tt>cache_control</tt>. По умолчанию отключено.
 2042    </dd>
 2043    <dd>
 2044      Используйте массив, когда надо задать несколько значений:
 2045:     <tt>set :static_cache_control, [:public, :max_age => 300]</tt>
 2046    </dd>
 2047  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/README.zh.md:
 1142  正确地设定消息头是恰当的HTTP缓存的基础。
 1143  
 1144: 你可以方便的设定 Cache-Control 消息头，像这样:
 1145  
 1146  ~~~~ ruby
 1147  get '/' do
 1148:   cache_control :public
 1149:   "cache it!"
 1150  end
 1151  ~~~~
 ....
 1155  ~~~~ ruby
 1156  before do
 1157:   cache_control :public, :must_revalidate, :max_age => 60
 1158  end
 1159  ~~~~
 1160  
 1161: 如果你正在用 `expires` 辅助方法设定对应的消息头 `Cache-Control`
 1162  会自动设定：
 1163  
 ....
 1191  这些辅助方法并不会为你做任何缓存，而是将必要的信息传送给你的缓存
 1192  如果你在寻找缓存的快速解决方案，试试
 1193: [rack-cache](https://github.com/rtomayko/rack-cache):
 1194  
 1195  ~~~~ ruby
 1196: require "rack/cache"
 1197  require "sinatra"
 1198  
 1199: use Rack::Cache
 1200  
 1201  get '/' do
 1202:   cache_control :public, :max_age => 36000
 1203    sleep 5
 1204    "hello"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/test/helpers_test.rb:
  919    end
  920  
  921:   describe 'cache_control' do
  922      setup do
  923        mock_app do
  924          get('/foo') do
  925:           cache_control :public, :no_cache, :max_age => 60.0
  926            'Hello World'
  927          end
  928  
  929          get('/bar') do
  930:           cache_control :public, :no_cache
  931            'Hello World'
  932          end
  ...
  934      end
  935  
  936:     it 'sets the Cache-Control header' do
  937        get '/foo'
  938:       assert_equal ['public', 'no-cache', 'max-age=60'], response['Cache-Control'].split(', ')
  939      end
  940  
  941      it 'last argument does not have to be a hash' do
  942        get '/bar'
  943:       assert_equal ['public', 'no-cache'], response['Cache-Control'].split(', ')
  944      end
  945    end
  ...
  949        mock_app do
  950          get('/foo') do
  951:           expires 60, :public, :no_cache
  952            'Hello World'
  953          end
  ...
  961            def obj.method_missing(*a, &b) 60.send(*a, &b) end
  962            def obj.is_a?(thing) 60.is_a?(thing) end
  963:           expires obj, :public, :no_cache
  964            'Hello World'
  965          end
  ...
  969      end
  970  
  971:     it 'sets the Cache-Control header' do
  972        get '/foo'
  973:       assert_equal ['public', 'no-cache', 'max-age=60'], response['Cache-Control'].split(', ')
  974      end
  975  
  ...
  991      it 'accepts values pretending to be a Numeric (like ActiveSupport::Duration)' do
  992        get '/blah'
  993:       assert_equal ['public', 'no-cache', 'max-age=60'], response['Cache-Control'].split(', ')
  994      end
  995  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/test/sinatra_test.rb:
    7    end
    8  
    9:   it "responds to #template_cache" do
   10:     assert_kind_of Tilt::Cache, Sinatra::Base.new!.template_cache
   11    end
   12  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sinatra-1.4.4/test/static_test.rb:
  191    end
  192  
  193:   it 'does not include static cache control headers by default' do
  194      env = Rack::MockRequest.env_for("/#{File.basename(__FILE__)}")
  195      status, headers, body = @app.call(env)
  196:     assert !headers.has_key?('Cache-Control')
  197    end
  198  
  199:   it 'sets cache control headers on static files if set' do
  200:     @app.set :static_cache_control, :public
  201      env = Rack::MockRequest.env_for("/#{File.basename(__FILE__)}")
  202      status, headers, body = @app.call(env)
  203:     assert headers.has_key?('Cache-Control')
  204:     assert_equal headers['Cache-Control'], 'public'
  205  
  206      @app.set(
  207:       :static_cache_control,
  208        [:public, :must_revalidate, {:max_age => 300}]
  209      )
  210      env = Rack::MockRequest.env_for("/#{File.basename(__FILE__)}")
  211      status, headers, body = @app.call(env)
  212:     assert headers.has_key?('Cache-Control')
  213      assert_equal(
  214:       headers['Cache-Control'],
  215        'public, must-revalidate, max-age=300'
  216      )

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/slim-2.0.2/lib/slim/embedded.rb:
  154          text = tilt_engine.new(tilt_options.merge(
  155            :style => options[:pretty] ? :expanded : :compressed,
  156:           :cache => false)) { text }.render
  157          text.chomp!
  158          [:static, text]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/slim-2.0.2/README.md:
  675      end
  676  
  677: You have to be aware that the compiled engine code and the options are cached per template in Rails and you cannot change the option afterwards.
  678  
  679      # First render call
  ...
  684      # Second render call
  685      Slim::Engine.with_options(:pretty => false) do
  686:        render :page, :layout => true # :pretty is still true because it is cached
  687      end
  688  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/slim-2.0.2/test/rails/config/application.rb:
   23  
   24      # Activate observers that should always be running.
   25:     # config.active_record.observers = :cacher, :garbage_collector, :forum_observer
   26  
   27      # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/slim-2.0.2/test/rails/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs.  Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/spring-1.1.1/lib/spring/application.rb:
   82        require Spring.application_root_path.join("config", "application")
   83  
   84:       # config/environments/test.rb will have config.cache_classes = true. However
   85        # we want it to be false so that we can reload files. This is a hack to
   86:       # override the effect of config.cache_classes = true. We can then actually
   87:       # set config.cache_classes = false after loading the environment.
   88        Rails::Application.initializer :initialize_dependency_mechanism, group: :all do
   89          ActiveSupport::Dependencies.mechanism = :load
   ..
   92        require Spring.application_root_path.join("config", "environment")
   93  
   94:       Rails.application.config.cache_classes = false
   95        disconnect_database
   96  
   ..
  164          # requiring is faster, and we don't need constant reloading in this process
  165          ActiveSupport::Dependencies.mechanism = :require
  166:         Rails.application.config.cache_classes = true
  167  
  168          connect_database
  ...
  227  
  228      # The command might need to require some files in the
  229:     # main process so that they are cached. For example a test command wants to
  230:     # load the helper file once and have it cached.
  231      def setup(command)
  232        if command.setup

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/rake/sprocketstask.rb:
   38      attr_writer :environment
   39  
   40:     # Returns cached indexed environment
   41      def index
   42        @index ||= environment.index if environment

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets.rb:
   20    autoload :JstProcessor,            "sprockets/jst_processor"
   21    autoload :Processor,               "sprockets/processor"
   22:   autoload :SassCacheStore,          "sprockets/sass_cache_store"
   23    autoload :SassFunctions,           "sprockets/sass_functions"
   24    autoload :SassImporter,            "sprockets/sass_importer"
   ..
   36    autoload :Utils,                   "sprockets/utils"
   37  
   38:   module Cache
   39:     autoload :FileStore, "sprockets/cache/file_store"
   40    end
   41  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/asset.rb:
  123      # digest to the inmemory model.
  124      #
  125:     # Used to test if cached models need to be rebuilt.
  126      def fresh?(environment)
  127        # Check current mtime and digest

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/base.rb:
   31  
   32      # The `Environment#version` is a custom value used for manually
   33:     # expiring all asset caches.
   34      #
   35      # Sprockets is able to track most file and directory changes and
   36:     # will take care of expiring the cache for you. However, its
   37      # impossible to know when any custom helpers change that you mix
   38      # into the `Context`.
   ..
   57      # useful for comparing environment states between processes rather
   58      # than in the same. Two equal `Environment`s can share the same
   59:     # cached assets.
   60      #
   61      # The value also provides a seed digest for all `Asset`
   ..
   86      attr_reader :context_class
   87  
   88:     # Get persistent cache store
   89:     attr_reader :cache
   90  
   91:     # Set persistent cache store
   92      #
   93:     # The cache store must implement a pair of getters and
   94      # setters. Either `get(key)`/`set(key, value)`,
   95      # `[key]`/`[key]=value`, `read(key)`/`write(key, value)`.
   96:     def cache=(cache)
   97        expire_index!
   98:       @cache = cache
   99      end
  100  
  ...
  220      # Works like `Dir.entries`.
  221      #
  222:     # Subclasses may cache this method.
  223      def entries(pathname)
  224        @trail.entries(pathname)
  ...
  227      # Works like `File.stat`.
  228      #
  229:     # Subclasses may cache this method.
  230      def stat(path)
  231        @trail.stat(path)
  ...
  234      # Read and compute digest of filename.
  235      #
  236:     # Subclasses may cache this method.
  237      def file_digest(path)
  238        if stat = self.stat(path)
  ...
  382        end
  383  
  384:       def cache_key_for(path, options)
  385          "#{path}:#{options[:bundle] ? '1' : '0'}"
  386        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/cache/file_store.rb:
    4  
    5  module Sprockets
    6:   module Cache
    7:     # A simple file system cache store.
    8      #
    9:     #     environment.cache = Sprockets::Cache::FileStore.new("/tmp")
   10      #
   11      class FileStore
   ..
   14        end
   15  
   16:       # Lookup value in cache
   17        def [](key)
   18          pathname = @root.join(key)
   ..
   20        end
   21  
   22:       # Save value to cache
   23        def []=(key, value)
   24          # Ensure directory exists

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/caching.rb:
    3    # the `Environment` and `Index` classes.
    4    module Caching
    5:     # Low level cache getter for `key`. Checks a number of supported
    6:     # cache interfaces.
    7:     def cache_get(key)
    8:       # `Cache#get(key)` for Memcache
    9:       if cache.respond_to?(:get)
   10:         cache.get(key)
   11  
   12:       # `Cache#[key]` so `Hash` can be used
   13:       elsif cache.respond_to?(:[])
   14:         cache[key]
   15  
   16:       # `Cache#read(key)` for `ActiveSupport::Cache` support
   17:       elsif cache.respond_to?(:read)
   18:         cache.read(key)
   19  
   20        else
   ..
   23      end
   24  
   25:     # Low level cache setter for `key`. Checks a number of supported
   26:     # cache interfaces.
   27:     def cache_set(key, value)
   28:       # `Cache#set(key, value)` for Memcache
   29:       if cache.respond_to?(:set)
   30:         cache.set(key, value)
   31  
   32:       # `Cache#[key]=value` so `Hash` can be used
   33:       elsif cache.respond_to?(:[]=)
   34:         cache[key] = value
   35  
   36:       # `Cache#write(key, value)` for `ActiveSupport::Cache` support
   37:       elsif cache.respond_to?(:write)
   38:         cache.write(key, value)
   39        end
   40  
   ..
   43  
   44      protected
   45:       # Cache helper method. Takes a `path` argument which maybe a
   46        # logical path or fully expanded path. The `&block` is passed
   47:       # for finding and building the asset if its not in cache.
   48:       def cache_asset(path)
   49:         # If `cache` is not set, return fast
   50:         if cache.nil?
   51            yield
   52  
   53:         # Check cache for `path`
   54:         elsif (asset = Asset.from_hash(self, cache_get_hash(path.to_s))) && asset.fresh?(self)
   55            asset
   56  
   ..
   61  
   62            # Save the asset to its path
   63:           cache_set_hash(path.to_s, hash)
   64  
   65            # Since path maybe a logical or full pathname, save the
   66            # asset its its full path too
   67            if path.to_s != asset.pathname.to_s
   68:             cache_set_hash(asset.pathname.to_s, hash)
   69            end
   70  
   ..
   77        # consisently across different servers. The key is also hashed
   78        # so it does not exceed 250 characters.
   79:       def expand_cache_key(key)
   80          File.join('sprockets', digest_class.hexdigest(key.sub(root, '')))
   81        end
   82  
   83:       def cache_get_hash(key)
   84:         hash = cache_get(expand_cache_key(key))
   85          if hash.is_a?(Hash) && digest.hexdigest == hash['_version']
   86            hash
   ..
   88        end
   89  
   90:       def cache_set_hash(key, hash)
   91          hash['_version'] = digest.hexdigest
   92:         cache_set(expand_cache_key(key), hash)
   93          hash
   94        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/context.rb:
  114      #
  115      # This is used for caching purposes. Any changes made to
  116:     # the dependency file with invalidate the cache of the
  117      # source file.
  118      def depend_on(path)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/directive_processor.rb:
  316        #
  317        # This is used for caching purposes. Any changes made to
  318:       # the dependency file will invalidate the cache of the
  319        # source file.
  320        #
  ...
  332        #
  333        # This is used for caching purposes. Any changes that would
  334:       # invalid the asset dependency will invalidate the cache our the
  335        # source file.
  336        #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/environment.rb:
   57      end
   58  
   59:     # Returns a cached version of the environment.
   60      #
   61:     # All its file system calls are cached which makes `index` much
   62      # faster. This behavior is ideal in production since the file
   63      # system only changes between deploys.
   ..
   66      end
   67  
   68:     # Cache `find_asset` calls
   69      def find_asset(path, options = {})
   70        options[:bundle] = true unless options.key?(:bundle)
   71  
   72:       # Ensure inmemory cached assets are still fresh on every lookup
   73:       if (asset = @assets[cache_key_for(path, options)]) && asset.fresh?(self)
   74          asset
   75        elsif asset = index.find_asset(path, options)
   76:         # Cache is pushed upstream by Index#find_asset
   77          asset
   78        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/index.rb:
    2  
    3  module Sprockets
    4:   # `Index` is a special cached version of `Environment`.
    5    #
    6:   # The expection is that all of its file system methods are cached
    7    # for the instances lifetime. This makes `Index` much faster. This
    8    # behavior is ideal in production environments where the file system
    .
   22        @logger            = environment.logger
   23        @context_class     = environment.context_class
   24:       @cache             = environment.cache
   25        @trail             = environment.trail.index
   26        @digest            = environment.digest
   ..
   34        @compressors       = environment.compressors
   35  
   36:       # Initialize caches
   37        @assets  = {}
   38        @digests = {}
   ..
   44      end
   45  
   46:     # Cache calls to `file_digest`
   47      def file_digest(pathname)
   48        key = pathname.to_s
   ..
   54      end
   55  
   56:     # Cache `find_asset` calls
   57      def find_asset(path, options = {})
   58        options[:bundle] = true unless options.key?(:bundle)
   59:       if asset = @assets[cache_key_for(path, options)]
   60          asset
   61        elsif asset = super
   62:         logical_path_cache_key = cache_key_for(path, options)
   63:         full_path_cache_key    = cache_key_for(asset.pathname, options)
   64  
   65:         # Cache on Index
   66:         @assets[logical_path_cache_key] = @assets[full_path_cache_key] = asset
   67  
   68:         # Push cache upstream to Environment
   69          @environment.instance_eval do
   70:           @assets[logical_path_cache_key] = @assets[full_path_cache_key] = asset
   71          end
   72  
   ..
   76  
   77      protected
   78:       # Index is immutable, any methods that try to clear the cache
   79        # should bomb.
   80        def expire_index!
   ..
   82        end
   83  
   84:       # Cache asset building in memory and in persisted cache.
   85        def build_asset(path, pathname, options)
   86:         # Memory cache
   87:         key = cache_key_for(pathname, options)
   88          if @assets.key?(key)
   89            @assets[key]
   90          else
   91            @assets[key] = begin
   92:             # Persisted cache
   93:             cache_asset(key) do
   94                super
   95              end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/processed_asset.rb:
  101        def resolve_dependencies(environment, paths)
  102          assets = []
  103:         cache  = {}
  104  
  105          paths.each do |path|
  106            if path == self.pathname.to_s
  107:             unless cache[self]
  108:               cache[self] = true
  109                assets << self
  110              end
  111            elsif asset = environment.find_asset(path, :bundle => false)
  112              asset.required_assets.each do |asset_dependency|
  113:               unless cache[asset_dependency]
  114:                 cache[asset_dependency] = true
  115                  assets << asset_dependency
  116                end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/sass_cache_store.rb:
    2  
    3  module Sprockets
    4:   class SassCacheStore < ::Sass::CacheStores::Base
    5      attr_reader :environment
    6  
    .
   10  
   11      def _store(key, version, sha, contents)
   12:       environment.cache_set("sass/#{key}", {:version => version, :sha => sha, :contents => contents})
   13      end
   14  
   15      def _retrieve(key, version, sha)
   16:       if obj = environment.cache_get("sass/#{key}")
   17          return unless obj[:version] == version
   18          return unless obj[:sha] == sha

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/sass_compressor.rb:
   19        ::Sass::Engine.new(data, {
   20          :syntax => :scss,
   21:         :cache => false,
   22:         :read_cache => false,
   23          :style => :compressed
   24        }).render

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/sass_template.rb:
   36      def evaluate(context, locals, &block)
   37        # Use custom importer that knows about Sprockets Caching
   38:       cache_store = SassCacheStore.new(context.environment)
   39  
   40        options = {
   ..
   42          :line => line,
   43          :syntax => syntax,
   44:         :cache_store => cache_store,
   45          :importer => SassImporter.new(context, context.pathname),
   46          :load_paths => context.environment.paths.map { |path| SassImporter.new(context, path) },

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/lib/sprockets/server.rb:
  201  
  202            # Set caching headers
  203:           headers["Cache-Control"]  = "public"
  204            headers["Last-Modified"]  = asset.mtime.httpdate
  205            headers["ETag"]           = etag(asset)
  ...
  208            # expires on the response
  209            if path_fingerprint(env["PATH_INFO"])
  210:             headers["Cache-Control"] << ", max-age=31536000"
  211  
  212            # Otherwise set `must-revalidate` since the asset could be modified.
  213            else
  214:             headers["Cache-Control"] << ", must-revalidate"
  215            end
  216          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-2.10.1/README.md:
  335  `depend_on` *path* declares a dependency on the given *path* without
  336  including it in the bundle. This is useful when you need to expire an
  337: asset's cache in response to a change in another file.
  338  
  339  ### The `depend_on_asset` Directive ###
  ...
  491  **2.0.2** (October 4, 2011)
  492  
  493: * Fixed loading stale cache from bundler gems.
  494  
  495  **2.0.1** (September 30, 2011)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-rails-2.0.1/lib/sprockets/rails/task.rb:
   37        end
   38  
   39:       def cache_path
   40          if app
   41:           "#{app.config.root}/tmp/cache/assets"
   42          else
   43:           @cache_path
   44          end
   45        end
   46:       attr_writer :cache_path
   47  
   48        def define
   ..
   74              with_logger do
   75                manifest.clobber
   76:               rm_rf cache_path if cache_path
   77              end
   78            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-rails-2.0.1/lib/sprockets/railtie.rb:
   23          env.version = ::Rails.env
   24  
   25:         path = "#{config.root}/tmp/cache/assets/#{::Rails.env}"
   26:         env.cache = Sprockets::Cache::FileStore.new(path)
   27  
   28          env.context_class.class_eval do
   ..
  107  
  108        # No more configuration changes at this point.
  109:       # With cache classes on, Sprockets won't check the FS when files
  110        # change. Preferable in production when the FS only changes on
  111        # deploys when the app restarts.
  112:       if config.cache_classes
  113          app.assets = app.assets.index
  114        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sprockets-rails-2.0.1/README.md:
   28  **`rake assets:clobber`**
   29  
   30: Nuke `public/assets` and clear the Sprockets file system cache.
   31  
   32  #### Customize
   ..
   62  **`config.assets.version`**
   63  
   64: Set a custom cache buster string. Changing it will cause all assets to recompile on the next build.
   65  
   66  ``` ruby
   ..
  100    env.logger = Rails.logger
  101  
  102:   env.cache = ActiveSupport::Cache::FileStore.new("tmp/cache/assets")
  103  end
  104  ```
  ...
  121  * JS and CSS compressors must be explicitly set. Magic detection has been removed to avoid loading compressors in environments where you want to avoid loading any of the asset libraries. Assign `config.assets.js_compressor = :uglify` or `config.assets.css_compressor = :sass` for the standard compressors.
  122  * The manifest file is now in a JSON format. Since it lives in public/ by default, the initial filename is also randomized to obfuscate public access to the resource.
  123: * Two cleanup tasks. `rake assets:clean` is now a safe cleanup that only removes older assets that are no longer used. While `rake assets:clobber` nukes the entire `public/assets` directory and clears your filesystem cache. The clean task allows for rolling deploys that may still be linking to an old asset while the new assets are being built.
  124  
  125  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/CHANGELOG.md:
  231  * Fix callbacks, guards, and state-driven behaviors not always working on tainted classes [Brandon Dimcheff]
  232  * Use Ruby 1.9's built-in Object#instance_exec for bound callbacks when it's available
  233: * Improve performance of cached dynamic state lookups by 25%
  234  
  235  ## 0.7.5 / 2009-05-25

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/examples/doc/js/full_list.js:
    1  var inSearch = null;
    2  var searchIndex = 0;
    3: var searchCache = [];
    4  var searchString = '';
    5  var regexSearchString = '';
    .
   14  
   15  function fullListSearch() {
   16:   // generate cache
   17:   searchCache = [];
   18    $('#full_list li').each(function() {
   19      var link = $(this).find('.object_link a');
   20      var fullName = link.attr('title').split(' ')[0];
   21:     searchCache.push({name:link.text(), fullName:fullName, node:$(this), link:link});
   22    });
   23    
   ..
   67  var lastRowClass = '';
   68  function searchItem() {
   69:   for (var i = 0; i < searchCache.length / 50; i++) {
   70:     var item = searchCache[searchIndex];
   71      var searchName = (searchString.indexOf('::') != -1 ? item.fullName : item.name);
   72      var matchString = regexSearchString;
   ..
   83      }
   84  
   85:     if (searchCache.length === searchIndex + 1) {
   86        searchDone();
   87        return;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/examples/doc/js/jquery.js:
   14   * Date: Thu Mar 31 15:28:23 2011 -0400
   15   */
   16: (function(a,b){function ci(a){return d.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cf(a){if(!b_[a]){var b=d("<"+a+">").appendTo("body"),c=b.css("display");b.remove();if(c==="none"||c==="")c="block";b_[a]=c}return b_[a]}function ce(a,b){var c={};d.each(cd.concat.apply([],cd.slice(0,b)),function(){c[this]=a});return c}function b$(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function bZ(){try{return new a.XMLHttpRequest}catch(b){}}function bY(){d(a).unload(function(){for(var a in bW)bW[a](0,1)})}function bS(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var e=a.dataTypes,f={},g,h,i=e.length,j,k=e[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h==="string"&&(f[h.toLowerCase()]=a.converters[h]);l=k,k=e[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=f[m]||f["* "+k];if(!n){p=b;for(o in f){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=f[j[1]+" "+k];if(p){o=f[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&d.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bR(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bQ(a,b,c,e){if(d.isArray(b)&&b.length)d.each(b,function(b,f){c||bs.test(a)?e(a,f):bQ(a+"["+(typeof f==="object"||d.isArray(f)?b:"")+"]",f,c,e)});else if(c||b==null||typeof b!=="object")e(a,b);else if(d.isArray(b)||d.isEmptyObject(b))e(a,"");else for(var f in b)bQ(a+"["+f+"]",b[f],c,e)}function bP(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bJ,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l==="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bP(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bP(a,c,d,e,"*",g));return l}function bO(a){return function(b,c){typeof b!=="string"&&(c=b,b="*");if(d.isFunction(c)){var e=b.toLowerCase().split(bD),f=0,g=e.length,h,i,j;for(;f<g;f++)h=e[f],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bq(a,b,c){var e=b==="width"?bk:bl,f=b==="width"?a.offsetWidth:a.offsetHeight;if(c==="border")return f;d.each(e,function(){c||(f-=parseFloat(d.css(a,"padding"+this))||0),c==="margin"?f+=parseFloat(d.css(a,"margin"+this))||0:f-=parseFloat(d.css(a,"border"+this+"Width"))||0});return f}function bc(a,b){b.src?d.ajax({url:b.src,async:!1,dataType:"script"}):d.globalEval(b.text||b.textContent||b.innerHTML||""),b.parentNode&&b.parentNode.removeChild(b)}function bb(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function ba(a,b){if(b.nodeType===1){var c=b.nodeName.toLowerCase();b.clearAttributes(),b.mergeAttributes(a);if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(d.expando)}}function _(a,b){if(b.nodeType===1&&d.hasData(a)){var c=d.expando,e=d.data(a),f=d.data(b,e);if(e=e[c]){var g=e.events;f=f[c]=d.extend({},e);if(g){delete f.handle,f.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)d.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function $(a,b){return d.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Q(a,b,c){if(d.isFunction(b))return d.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return d.grep(a,function(a,d){return a===b===c});if(typeof b==="string"){var e=d.grep(a,function(a){return a.nodeType===1});if(L.test(b))return d.filter(b,e,!c);b=d.filter(b,e)}return d.grep(a,function(a,e){return d.inArray(a,b)>=0===c})}function P(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function H(a,b){return(a&&a!=="*"?a+".":"")+b.replace(t,"`").replace(u,"&")}function G(a){var b,c,e,f,g,h,i,j,k,l,m,n,o,p=[],q=[],s=d._data(this,"events");if(a.liveFired!==this&&s&&s.live&&!a.target.disabled&&(!a.button||a.type!=="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var t=s.live.slice(0);for(i=0;i<t.length;i++)g=t[i],g.origType.replace(r,"")===a.type?q.push(g.selector):t.splice(i--,1);f=d(a.target).closest(q,a.currentTarget);for(j=0,k=f.length;j<k;j++){m=f[j];for(i=0;i<t.length;i++){g=t[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,e=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,e=d(a.relatedTarget).closest(g.selector)[0];(!e||e!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){f=p[j];if(c&&f.level>c)break;a.currentTarget=f.elem,a.data=f.handleObj.data,a.handleObj=f.handleObj,o=f.handleObj.origHandler.apply(f.elem,arguments);if(o===!1||a.isPropagationStopped()){c=f.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function E(a,c,e){var f=d.extend({},e[0]);f.type=a,f.originalEvent={},f.liveFired=b,d.event.handle.call(c,f),f.isDefaultPrevented()&&e[0].preventDefault()}function y(){return!0}function x(){return!1}function i(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function h(a,c,e){if(e===b&&a.nodeType===1){e=a.getAttribute("data-"+c);if(typeof e==="string"){try{e=e==="true"?!0:e==="false"?!1:e==="null"?null:d.isNaN(e)?g.test(e)?d.parseJSON(e):e:parseFloat(e)}catch(f){}d.data(a,c,e)}else e=b}return e}var c=a.document,d=function(){function G(){if(!d.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(G,1);return}d.ready()}}var d=function(a,b){return new d.fn.init(a,b,g)},e=a.jQuery,f=a.$,g,h=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,i=/\S/,j=/^\s+/,k=/\s+$/,l=/\d/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=navigator.userAgent,w,x,y,z=Object.prototype.toString,A=Object.prototype.hasOwnProperty,B=Array.prototype.push,C=Array.prototype.slice,D=String.prototype.trim,E=Array.prototype.indexOf,F={};d.fn=d.prototype={constructor:d,init:function(a,e,f){var g,i,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!e&&c.body){this.context=c,this[0]=c.body,this.selector="body",this.length=1;return this}if(typeof a==="string"){g=h.exec(a);if(!g||!g[1]&&e)return!e||e.jquery?(e||f).find(a):this.constructor(e).find(a);if(g[1]){e=e instanceof d?e[0]:e,k=e?e.ownerDocument||e:c,j=m.exec(a),j?d.isPlainObject(e)?(a=[c.createElement(j[1])],d.fn.attr.call(a,e,!0)):a=[k.createElement(j[1])]:(j=d.buildFragment([g[1]],[k]),a=(j.cacheable?d.clone(j.fragment):j.fragment).childNodes);return d.merge(this,a)}i=c.getElementById(g[2]);if(i&&i.parentNode){if(i.id!==g[2])return f.find(a);this.length=1,this[0]=i}this.context=c,this.selector=a;return this}if(d.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return d.makeArray(a,this)},selector:"",jquery:"1.5.2",length:0,size:function(){return this.length},toArray:function(){return C.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var e=this.constructor();d.isArray(a)?B.apply(e,a):d.merge(e,a),e.prevObject=this,e.context=this.context,b==="find"?e.selector=this.selector+(this.selector?" ":"")+c:b&&(e.selector=this.selector+"."+b+"("+c+")");return e},each:function(a,b){return d.each(this,a,b)},ready:function(a){d.bindReady(),x.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(C.apply(this,arguments),"slice",C.call(arguments).join(","))},map:function(a){return this.pushStack(d.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:[].sort,splice:[].splice},d.fn.init.prototype=d.fn,d.extend=d.fn.extend=function(){var a,c,e,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i==="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!=="object"&&!d.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){e=i[c],f=a[c];if(i===f)continue;l&&f&&(d.isPlainObject(f)||(g=d.isArray(f)))?(g?(g=!1,h=e&&d.isArray(e)?e:[]):h=e&&d.isPlainObject(e)?e:{},i[c]=d.extend(l,h,f)):f!==b&&(i[c]=f)}return i},d.extend({noConflict:function(b){a.$=f,b&&(a.jQuery=e);return d},isReady:!1,readyWait:1,ready:function(a){a===!0&&d.readyWait--;if(!d.readyWait||a!==!0&&!d.isReady){if(!c.body)return setTimeout(d.ready,1);d.isReady=!0;if(a!==!0&&--d.readyWait>0)return;x.resolveWith(c,[d]),d.fn.trigger&&d(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!x){x=d._Deferred();if(c.readyState==="complete")return setTimeout(d.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",y,!1),a.addEventListener("load",d.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",y),a.attachEvent("onload",d.ready);var b=!1;try{b=a.frameElement==null}catch(e){}c.documentElement.doScroll&&b&&G()}}},isFunction:function(a){return d.type(a)==="function"},isArray:Array.isArray||function(a){return d.type(a)==="array"},isWindow:function(a){return a&&typeof a==="object"&&"setInterval"in a},isNaN:function(a){return a==null||!l.test(a)||isNaN(a)},type:function(a){return a==null?String(a):F[z.call(a)]||"object"},isPlainObject:function(a){if(!a||d.type(a)!=="object"||a.nodeType||d.isWindow(a))return!1;if(a.constructor&&!A.call(a,"constructor")&&!A.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a){}return c===b||A.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!=="string"||!b)return null;b=d.trim(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return a.JSON&&a.JSON.parse?a.JSON.parse(b):(new Function("return "+b))();d.error("Invalid JSON: "+b)},parseXML:function(b,c,e){a.DOMParser?(e=new DOMParser,c=e.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),e=c.documentElement,(!e||!e.nodeName||e.nodeName==="parsererror")&&d.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(a){if(a&&i.test(a)){var b=c.head||c.getElementsByTagName("head")[0]||c.documentElement,e=c.createElement("script");d.support.scriptEval()?e.appendChild(c.createTextNode(a)):e.text=a,b.insertBefore(e,b.firstChild),b.removeChild(e)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,e){var f,g=0,h=a.length,i=h===b||d.isFunction(a);if(e){if(i){for(f in a)if(c.apply(a[f],e)===!1)break}else for(;g<h;)if(c.apply(a[g++],e)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(var j=a[0];g<h&&c.call(j,g,j)!==!1;j=a[++g]){}return a},trim:D?function(a){return a==null?"":D.call(a)}:function(a){return a==null?"":(a+"").replace(j,"").replace(k,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var e=d.type(a);a.length==null||e==="string"||e==="function"||e==="regexp"||d.isWindow(a)?B.call(c,a):d.merge(c,a)}return c},inArray:function(a,b){if(b.indexOf)return b.indexOf(a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length==="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,b,c){var d=[],e;for(var f=0,g=a.length;f<g;f++)e=b(a[f],f,c),e!=null&&(d[d.length]=e);return d.concat.apply([],d)},guid:1,proxy:function(a,c,e){arguments.length===2&&(typeof c==="string"?(e=a,a=e[c],c=b):c&&!d.isFunction(c)&&(e=c,c=b)),!c&&a&&(c=function(){return a.apply(e||this,arguments)}),a&&(c.guid=a.guid=a.guid||c.guid||d.guid++);return c},access:function(a,c,e,f,g,h){var i=a.length;if(typeof c==="object"){for(var j in c)d.access(a,j,c[j],f,g,e);return a}if(e!==b){f=!h&&f&&d.isFunction(e);for(var k=0;k<i;k++)g(a[k],c,f?e.call(a[k],k,g(a[k],c)):e,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}d.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.subclass=this.subclass,a.fn.init=function b(b,c){c&&c instanceof d&&!(c instanceof a)&&(c=a(c));return d.fn.init.call(this,b,c,e)},a.fn.init.prototype=a.fn;var e=a(c);return a},browser:{}}),d.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){F["[object "+b+"]"]=b.toLowerCase()}),w=d.uaMatch(v),w.browser&&(d.browser[w.browser]=!0,d.browser.version=w.version),d.browser.webkit&&(d.browser.safari=!0),E&&(d.inArray=function(a,b){return E.call(b,a)}),i.test(" ")&&(j=/^[\s\xA0]+/,k=/[\s\xA0]+$/),g=d(c),c.addEventListener?y=function(){c.removeEventListener("DOMContentLoaded",y,!1),d.ready()}:c.attachEvent&&(y=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",y),d.ready())});return d}(),e="then done fail isResolved isRejected promise".split(" "),f=[].slice;d.extend({_Deferred:function(){var a=[],b,c,e,f={done:function(){if(!e){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=d.type(i),j==="array"?f.done.apply(f,i):j==="function"&&a.push(i);k&&f.resolveWith(k[0],k[1])}return this},resolveWith:function(d,f){if(!e&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(d,f)}finally{b=[d,f],c=0}}return this},resolve:function(){f.resolveWith(this,arguments);return this},isResolved:function(){return c||b},cancel:function(){e=1,a=[];return this}};return f},Deferred:function(a){var b=d._Deferred(),c=d._Deferred(),f;d.extend(b,{then:function(a,c){b.done(a).fail(c);return this},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,promise:function(a){if(a==null){if(f)return f;f=a={}}var c=e.length;while(c--)a[e[c]]=b[e[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?f.call(arguments,0):c,--g||h.resolveWith(h,f.call(b,0))}}var b=arguments,c=0,e=b.length,g=e,h=e<=1&&a&&d.isFunction(a.promise)?a:d.Deferred();if(e>1){for(;c<e;c++)b[c]&&d.isFunction(b[c].promise)?b[c].promise().then(i(c),h.reject):--g;g||h.resolveWith(h,b)}else h!==a&&h.resolveWith(h,e?[a]:[]);return h.promise()}}),function(){d.support={};var b=c.createElement("div");b.style.display="none",b.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var e=b.getElementsByTagName("*"),f=b.getElementsByTagName("a")[0],g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=b.getElementsByTagName("input")[0];if(e&&e.length&&f){d.support={leadingWhitespace:b.firstChild.nodeType===3,tbody:!b.getElementsByTagName("tbody").length,htmlSerialize:!!b.getElementsByTagName("link").length,style:/red/.test(f.getAttribute("style")),hrefNormalized:f.getAttribute("href")==="/a",opacity:/^0.55$/.test(f.style.opacity),cssFloat:!!f.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,deleteExpando:!0,optDisabled:!1,checkClone:!1,noCloneEvent:!0,noCloneChecked:!0,boxModel:null,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableHiddenOffsets:!0,reliableMarginRight:!0},i.checked=!0,d.support.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,d.support.optDisabled=!h.disabled;var j=null;d.support.scriptEval=function(){if(j===null){var b=c.documentElement,e=c.createElement("script"),f="script"+d.now();try{e.appendChild(c.createTextNode("window."+f+"=1;"))}catch(g){}b.insertBefore(e,b.firstChild),a[f]?(j=!0,delete a[f]):j=!1,b.removeChild(e)}return j};try{delete b.test}catch(k){d.support.deleteExpando=!1}!b.addEventListener&&b.attachEvent&&b.fireEvent&&(b.attachEvent("onclick",function l(){d.support.noCloneEvent=!1,b.detachEvent("onclick",l)}),b.cloneNode(!0).fireEvent("onclick")),b=c.createElement("div"),b.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";var m=c.createDocumentFragment();m.appendChild(b.firstChild),d.support.checkClone=m.cloneNode(!0).cloneNode(!0).lastChild.checked,d(function(){var a=c.createElement("div"),b=c.getElementsByTagName("body")[0];if(b){a.style.width=a.style.paddingLeft="1px",b.appendChild(a),d.boxModel=d.support.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,d.support.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",d.support.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";var e=a.getElementsByTagName("td");d.support.reliableHiddenOffsets=e[0].offsetHeight===0,e[0].style.display="",e[1].style.display="none",d.support.reliableHiddenOffsets=d.support.reliableHiddenOffsets&&e[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(a.style.width="1px",a.style.marginRight="0",d.support.reliableMarginRight=(parseInt(c.defaultView.getComputedStyle(a,null).marginRight,10)||0)===0),b.removeChild(a).style.display="none",a=e=null}});var n=function(a){var b=c.createElement("div");a="on"+a;if(!b.attachEvent)return!0;var d=a in b;d||(b.setAttribute(a,"return;"),d=typeof b[a]==="function");return d};d.support.submitBubbles=n("submit"),d.support.changeBubbles=n("change"),b=e=f=null}}();var g=/^(?:\{.*\}|\[.*\])$/;d.extend({cache:{},uuid:0,expando:"jQuery"+(d.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?d.cache[a[d.expando]]:a[d.expando];return!!a&&!i(a)},data:function(a,c,e,f){if(d.acceptData(a)){var g=d.expando,h=typeof c==="string",i,j=a.nodeType,k=j?d.cache:a,l=j?a[d.expando]:a[d.expando]&&d.expando;if((!l||f&&l&&!k[l][g])&&h&&e===b)return;l||(j?a[d.expando]=l=++d.uuid:l=d.expando),k[l]||(k[l]={},j||(k[l].toJSON=d.noop));if(typeof c==="object"||typeof c==="function")f?k[l][g]=d.extend(k[l][g],c):k[l]=d.extend(k[l],c);i=k[l],f&&(i[g]||(i[g]={}),i=i[g]),e!==b&&(i[c]=e);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[c]:i}},removeData:function(b,c,e){if(d.acceptData(b)){var f=d.expando,g=b.nodeType,h=g?d.cache:b,j=g?b[d.expando]:d.expando;if(!h[j])return;if(c){var k=e?h[j][f]:h[j];if(k){delete k[c];if(!i(k))return}}if(e){delete h[j][f];if(!i(h[j]))return}var l=h[j][f];d.support.deleteExpando||h!=a?delete h[j]:h[j]=null,l?(h[j]={},g||(h[j].toJSON=d.noop),h[j][f]=l):g&&(d.support.deleteExpando?delete b[d.expando]:b.removeAttribute?b.removeAttribute(d.expando):b[d.expando]=null)}},_data:function(a,b,c){return d.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=d.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),d.fn.extend({data:function(a,c){var e=null;if(typeof a==="undefined"){if(this.length){e=d.data(this[0]);if(this[0].nodeType===1){var f=this[0].attributes,g;for(var i=0,j=f.length;i<j;i++)g=f[i].name,g.indexOf("data-")===0&&(g=g.substr(5),h(this[0],g,e[g]))}}return e}if(typeof a==="object")return this.each(function(){d.data(this,a)});var k=a.split(".");k[1]=k[1]?"."+k[1]:"";if(c===b){e=this.triggerHandler("getData"+k[1]+"!",[k[0]]),e===b&&this.length&&(e=d.data(this[0],a),e=h(this[0],a,e));return e===b&&k[1]?this.data(k[0]):e}return this.each(function(){var b=d(this),e=[k[0],c];b.triggerHandler("setData"+k[1]+"!",e),d.data(this,a,c),b.triggerHandler("changeData"+k[1]+"!",e)})},removeData:function(a){return this.each(function(){d.removeData(this,a)})}}),d.extend({queue:function(a,b,c){if(a){b=(b||"fx")+"queue";var e=d._data(a,b);if(!c)return e||[];!e||d.isArray(c)?e=d._data(a,b,d.makeArray(c)):e.push(c);return e}},dequeue:function(a,b){b=b||"fx";var c=d.queue(a,b),e=c.shift();e==="inprogress"&&(e=c.shift()),e&&(b==="fx"&&c.unshift("inprogress"),e.call(a,function(){d.dequeue(a,b)})),c.length||d.removeData(a,b+"queue",!0)}}),d.fn.extend({queue:function(a,c){typeof a!=="string"&&(c=a,a="fx");if(c===b)return d.queue(this[0],a);return this.each(function(b){var e=d.queue(this,a,c);a==="fx"&&e[0]!=="inprogress"&&d.dequeue(this,a)})},dequeue:function(a){return this.each(function(){d.dequeue(this,a)})},delay:function(a,b){a=d.fx?d.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){d.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var j=/[\n\t\r]/g,k=/\s+/,l=/\r/g,m=/^(?:href|src|style)$/,n=/^(?:button|input)$/i,o=/^(?:button|input|object|select|textarea)$/i,p=/^a(?:rea)?$/i,q=/^(?:radio|checkbox)$/i;d.props={"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"},d.fn.extend({attr:function(a,b){return d.access(this,a,b,!0,d.attr)},removeAttr:function(a,b){return this.each(function(){d.attr(this,a,""),this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.addClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"){var b=(a||"").split(k);for(var c=0,e=this.length;c<e;c++){var f=this[c];if(f.nodeType===1)if(f.className){var g=" "+f.className+" ",h=f.className;for(var i=0,j=b.length;i<j;i++)g.indexOf(" "+b[i]+" ")<0&&(h+=" "+b[i]);f.className=d.trim(h)}else f.className=a}}return this},removeClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.removeClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"||a===b){var c=(a||"").split(k);for(var e=0,f=this.length;e<f;e++){var g=this[e];if(g.nodeType===1&&g.className)if(a){var h=(" "+g.className+" ").replace(j," ");for(var i=0,l=c.length;i<l;i++)h=h.replace(" "+c[i]+" "," ");g.className=d.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,e=typeof b==="boolean";if(d.isFunction(a))return this.each(function(c){var e=d(this);e.toggleClass(a.call(this,c,e.attr("class"),b),b)});return this.each(function(){if(c==="string"){var f,g=0,h=d(this),i=b,j=a.split(k);while(f=j[g++])i=e?i:!h.hasClass(f),h[i?"addClass":"removeClass"](f)}else if(c==="undefined"||c==="boolean")this.className&&d._data(this,"__className__",this.className),this.className=this.className||a===!1?"":d._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(j," ").indexOf(b)>-1)return!0;return!1},val:function(a){if(!arguments.length){var c=this[0];if(c){if(d.nodeName(c,"option")){var e=c.attributes.value;return!e||e.specified?c.value:c.text}if(d.nodeName(c,"select")){var f=c.selectedIndex,g=[],h=c.options,i=c.type==="select-one";if(f<0)return null;for(var j=i?f:0,k=i?f+1:h.length;j<k;j++){var m=h[j];if(m.selected&&(d.support.optDisabled?!m.disabled:m.getAttribute("disabled")===null)&&(!m.parentNode.disabled||!d.nodeName(m.parentNode,"optgroup"))){a=d(m).val();if(i)return a;g.push(a)}}if(i&&!g.length&&h.length)return d(h[f]).val();return g}if(q.test(c.type)&&!d.support.checkOn)return c.getAttribute("value")===null?"on":c.value;return(c.value||"").replace(l,"")}return b}var n=d.isFunction(a);return this.each(function(b){var c=d(this),e=a;if(this.nodeType===1){n&&(e=a.call(this,b,c.val())),e==null?e="":typeof e==="number"?e+="":d.isArray(e)&&(e=d.map(e,function(a){return a==null?"":a+""}));if(d.isArray(e)&&q.test(this.type))this.checked=d.inArray(c.val(),e)>=0;else if(d.nodeName(this,"select")){var f=d.makeArray(e);d("option",this).each(function(){this.selected=d.inArray(d(this).val(),f)>=0}),f.length||(this.selectedIndex=-1)}else this.value=e}})}}),d.extend({attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,e,f){if(!a||a.nodeType===3||a.nodeType===8||a.nodeType===2)return b;if(f&&c in d.attrFn)return d(a)[c](e);var g=a.nodeType!==1||!d.isXMLDoc(a),h=e!==b;c=g&&d.props[c]||c;if(a.nodeType===1){var i=m.test(c);if(c==="selected"&&!d.support.optSelected){var j=a.parentNode;j&&(j.selectedIndex,j.parentNode&&j.parentNode.selectedIndex)}if((c in a||a[c]!==b)&&g&&!i){h&&(c==="type"&&n.test(a.nodeName)&&a.parentNode&&d.error("type property can't be changed"),e===null?a.nodeType===1&&a.removeAttribute(c):a[c]=e);if(d.nodeName(a,"form")&&a.getAttributeNode(c))return a.getAttributeNode(c).nodeValue;if(c==="tabIndex"){var k=a.getAttributeNode("tabIndex");return k&&k.specified?k.value:o.test(a.nodeName)||p.test(a.nodeName)&&a.href?0:b}return a[c]}if(!d.support.style&&g&&c==="style"){h&&(a.style.cssText=""+e);return a.style.cssText}h&&a.setAttribute(c,""+e);if(!a.attributes[c]&&(a.hasAttribute&&!a.hasAttribute(c)))return b;var l=!d.support.hrefNormalized&&g&&i?a.getAttribute(c,2):a.getAttribute(c);return l===null?b:l}h&&(a[c]=e);return a[c]}});var r=/\.(.*)$/,s=/^(?:textarea|input|select)$/i,t=/\./g,u=/ /g,v=/[^\w\s.|`]/g,w=function(a){return a.replace(v,"\\$&")};d.event={add:function(c,e,f,g){if(c.nodeType!==3&&c.nodeType!==8){try{d.isWindow(c)&&(c!==a&&!c.frameElement)&&(c=a)}catch(h){}if(f===!1)f=x;else if(!f)return;var i,j;f.handler&&(i=f,f=i.handler),f.guid||(f.guid=d.guid++);var k=d._data(c);if(!k)return;var l=k.events,m=k.handle;l||(k.events=l={}),m||(k.handle=m=function(a){return typeof d!=="undefined"&&d.event.triggered!==a.type?d.event.handle.apply(m.elem,arguments):b}),m.elem=c,e=e.split(" ");var n,o=0,p;while(n=e[o++]){j=i?d.extend({},i):{handler:f,data:g},n.indexOf(".")>-1?(p=n.split("."),n=p.shift(),j.namespace=p.slice(0).sort().join(".")):(p=[],j.namespace=""),j.type=n,j.guid||(j.guid=f.guid);var q=l[n],r=d.event.special[n]||{};if(!q){q=l[n]=[];if(!r.setup||r.setup.call(c,g,p,m)===!1)c.addEventListener?c.addEventListener(n,m,!1):c.attachEvent&&c.attachEvent("on"+n,m)}r.add&&(r.add.call(c,j),j.handler.guid||(j.handler.guid=f.guid)),q.push(j),d.event.global[n]=!0}c=null}},global:{},remove:function(a,c,e,f){if(a.nodeType!==3&&a.nodeType!==8){e===!1&&(e=x);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=d.hasData(a)&&d._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(e=c.handler,c=c.type);if(!c||typeof c==="string"&&c.charAt(0)==="."){c=c||"";for(h in t)d.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+d.map(m.slice(0).sort(),w).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!e){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))d.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=d.event.special[h]||{};for(j=f||0;j<p.length;j++){q=p[j];if(e.guid===q.guid){if(l||n.test(q.namespace))f==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(f!=null)break}}if(p.length===0||f!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&d.removeEvent(a,h,s.handle),g=null,delete t[h]}if(d.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,d.isEmptyObject(s)&&d.removeData(a,b,!0)}}},trigger:function(a,c,e){var f=a.type||a,g=arguments[3];if(!g){a=typeof a==="object"?a[d.expando]?a:d.extend(d.Event(f),a):d.Event(f),f.indexOf("!")>=0&&(a.type=f=f.slice(0,-1),a.exclusive=!0),e||(a.stopPropagation(),d.event.global[f]&&d.each(d.cache,function(){var b=d.expando,e=this[b];e&&e.events&&e.events[f]&&d.event.trigger(a,c,e.handle.elem)}));if(!e||e.nodeType===3||e.nodeType===8)return b;a.result=b,a.target=e,c=d.makeArray(c),c.unshift(a)}a.currentTarget=e;var h=d._data(e,"handle");h&&h.apply(e,c);var i=e.parentNode||e.ownerDocument;try{e&&e.nodeName&&d.noData[e.nodeName.toLowerCase()]||e["on"+f]&&e["on"+f].apply(e,c)===!1&&(a.result=!1,a.preventDefault())}catch(j){}if(!a.isPropagationStopped()&&i)d.event.trigger(a,c,i,!0);else if(!a.isDefaultPrevented()){var k,l=a.target,m=f.replace(r,""),n=d.nodeName(l,"a")&&m==="click",o=d.event.special[m]||{};if((!o._default||o._default.call(e,a)===!1)&&!n&&!(l&&l.nodeName&&d.noData[l.nodeName.toLowerCase()])){try{l[m]&&(k=l["on"+m],k&&(l["on"+m]=null),d.event.triggered=a.type,l[m]())}catch(p){}k&&(l["on"+m]=k),d.event.triggered=b}}},handle:function(c){var e,f,g,h,i,j=[],k=d.makeArray(arguments);c=k[0]=d.event.fix(c||a.event),c.currentTarget=this,e=c.type.indexOf(".")<0&&!c.exclusive,e||(g=c.type.split("."),c.type=g.shift(),j=g.slice(0).sort(),h=new RegExp("(^|\\.)"+j.join("\\.(?:.*\\.)?")+"(\\.|$)")),c.namespace=c.namespace||j.join("."),i=d._data(this,"events"),f=(i||{})[c.type];if(i&&f){f=f.slice(0);for(var l=0,m=f.length;l<m;l++){var n=f[l];if(e||h.test(n.namespace)){c.handler=n.handler,c.data=n.data,c.handleObj=n;var o=n.handler.apply(this,k);o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[d.expando])return a;var e=a;a=d.Event(e);for(var f=this.props.length,g;f;)g=this.props[--f],a[g]=e[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=c.documentElement,i=c.body;a.pageX=a.clientX+(h&&h.scrollLeft||i&&i.scrollLeft||0)-(h&&h.clientLeft||i&&i.clientLeft||0),a.pageY=a.clientY+(h&&h.scrollTop||i&&i.scrollTop||0)-(h&&h.clientTop||i&&i.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:d.proxy,special:{ready:{setup:d.bindReady,teardown:d.noop},live:{add:function(a){d.event.add(this,H(a.origType,a.selector),d.extend({},a,{handler:G,guid:a.handler.guid}))},remove:function(a){d.event.remove(this,H(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){d.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},d.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},d.Event=function(a){if(!this.preventDefault)return new d.Event(a);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?y:x):this.type=a,this.timeStamp=d.now(),this[d.expando]=!0},d.Event.prototype={preventDefault:function(){this.isDefaultPrevented=y;var a=this.originalEvent;a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=y;var a=this.originalEvent;a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=y,this.stopPropagation()},isDefaultPrevented:x,isPropagationStopped:x,isImmediatePropagationStopped:x};var z=function(a){var b=a.relatedTarget;try{if(b&&b!==c&&!b.parentNode)return;while(b&&b!==this)b=b.parentNode;b!==this&&(a.type=a.data,d.event.handle.apply(this,arguments))}catch(e){}},A=function(a){a.type=a.data,d.event.handle.apply(this,arguments)};d.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){d.event.special[a]={setup:function(c){d.event.add(this,b,c&&c.selector?A:z,a)},teardown:function(a){d.event.remove(this,b,a&&a.selector?A:z)}}}),d.support.submitBubbles||(d.event.special.submit={setup:function(a,b){if(this.nodeName&&this.nodeName.toLowerCase()!=="form")d.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&d(b).closest("form").length&&E("submit",this,arguments)}),d.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&d(b).closest("form").length&&a.keyCode===13&&E("submit",this,arguments)});else return!1},teardown:function(a){d.event.remove(this,".specialSubmit")}});if(!d.support.changeBubbles){var B,C=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?d.map(a.options,function(a){return a.selected}).join("-"):"":a.nodeName.toLowerCase()==="select"&&(c=a.selectedIndex);return c},D=function D(a){var c=a.target,e,f;if(s.test(c.nodeName)&&!c.readOnly){e=d._data(c,"_change_data"),f=C(c),(a.type!=="focusout"||c.type!=="radio")&&d._data(c,"_change_data",f);if(e===b||f===e)return;if(e!=null||f)a.type="change",a.liveFired=b,d.event.trigger(a,arguments[1],c)}};d.event.special.change={filters:{focusout:D,beforedeactivate:D,click:function(a){var b=a.target,c=b.type;(c==="radio"||c==="checkbox"||b.nodeName.toLowerCase()==="select")&&D.call(this,a)},keydown:function(a){var b=a.target,c=b.type;(a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&D.call(this,a)},beforeactivate:function(a){var b=a.target;d._data(b,"_change_data",C(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in B)d.event.add(this,c+".specialChange",B[c]);return s.test(this.nodeName)},teardown:function(a){d.event.remove(this,".specialChange");return s.test(this.nodeName)}},B=d.event.special.change.filters,B.focus=B.beforeactivate}c.addEventListener&&d.each({focus:"focusin",blur:"focusout"},function(a,b){function f(a){var c=d.event.fix(a);c.type=b,c.originalEvent={},d.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var e=0;d.event.special[b]={setup:function(){e++===0&&c.addEventListener(a,f,!0)},teardown:function(){--e===0&&c.removeEventListener(a,f,!0)}}}),d.each(["bind","one"],function(a,c){d.fn[c]=function(a,e,f){if(typeof a==="object"){for(var g in a)this[c](g,e,a[g],f);return this}if(d.isFunction(e)||e===!1)f=e,e=b;var h=c==="one"?d.proxy(f,function(a){d(this).unbind(a,h);return f.apply(this,arguments)}):f;if(a==="unload"&&c!=="one")this.one(a,e,f);else for(var i=0,j=this.length;i<j;i++)d.event.add(this[i],a,h,e);return this}}),d.fn.extend({unbind:function(a,b){if(typeof a!=="object"||a.preventDefault)for(var e=0,f=this.length;e<f;e++)d.event.remove(this[e],a,b);else for(var c in a)this.unbind(c,a[c]);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){d.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){var c=d.Event(a);c.preventDefault(),c.stopPropagation(),d.event.trigger(c,b,this[0]);return c.result}},toggle:function(a){var b=arguments,c=1;while(c<b.length)d.proxy(a,b[c++]);return this.click(d.proxy(a,function(e){var f=(d._data(this,"lastToggle"+a.guid)||0)%c;d._data(this,"lastToggle"+a.guid,f+1),e.preventDefault();return b[f].apply(this,arguments)||!1}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var F={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};d.each(["live","die"],function(a,c){d.fn[c]=function(a,e,f,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:d(this.context);if(typeof a==="object"&&!a.preventDefault){for(var o in a)n[c](o,e,a[o],m);return this}d.isFunction(e)&&(f=e,e=b),a=(a||"").split(" ");while((h=a[i++])!=null){j=r.exec(h),k="",j&&(k=j[0],h=h.replace(r,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,h==="focus"||h==="blur"?(a.push(F[h]+k),h=h+k):h=(F[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)d.event.add(n[p],"live."+H(h,m),{data:e,selector:m,handler:f,origType:h,origHandler:f,preType:l});else n.unbind("live."+H(h,m),f)}return this}}),d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){d.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},d.attrFn&&(d.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!=="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,e=0,f=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,e,g){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!=="string")return e;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(f.call(n)==="[object Array]")if(u)if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&e.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&e.push(j[t]);else e.push.apply(e,n);else p(n,e);o&&(k(o,h,e,g),k.uniqueSort(e));return e};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!=="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(f){if(f===!0)continue}else g=o=!0}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b==="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1){}a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b==="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!=="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!=="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!=="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return"text"===c&&(b===c||b===null)},radio:function(a){return"radio"===a.type},checkbox:function(a){return"checkbox"===a.type},file:function(a){return"file"===a.type},password:function(a){return"password"===a.type},submit:function(a){return"submit"===a.type},image:function(a){return"image"===a.type},reset:function(a){return"reset"===a.type},button:function(a){return"button"===a.type||a.nodeName.toLowerCase()==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(f.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length==="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(a===b){g=!0;return 0}if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!=="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!=="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!=="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!=="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};d.find=k,d.expr=k.selectors,d.expr[":"]=d.expr.filters,d.unique=k.uniqueSort,d.text=k.getText,d.isXMLDoc=k.isXML,d.contains=k.contains}();var I=/Until$/,J=/^(?:parents|prevUntil|prevAll)/,K=/,/,L=/^.[^:#\[\.,]*$/,M=Array.prototype.slice,N=d.expr.match.POS,O={children:!0,contents:!0,next:!0,prev:!0};d.fn.extend({find:function(a){var b=this.pushStack("","find",a),c=0;for(var e=0,f=this.length;e<f;e++){c=b.length,d.find(a,this[e],b);if(e>0)for(var g=c;g<b.length;g++)for(var h=0;h<c;h++)if(b[h]===b[g]){b.splice(g--,1);break}}return b},has:function(a){var b=d(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(d.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(Q(this,a,!1),"not",a)},filter:function(a){return this.pushStack(Q(this,a,!0),"filter",a)},is:function(a){return!!a&&d.filter(a,this).length>0},closest:function(a,b){var c=[],e,f,g=this[0];if(d.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(e=0,f=a.length;e<f;e++)i=a[e],j[i]||(j[i]=d.expr.match.POS.test(i)?d(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:d(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=N.test(a)?d(a,b||this.context):null;for(e=0,f=this.length;e<f;e++){g=this[e];while(g){if(l?l.index(g)>-1:d.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b)break}}c=c.length>1?d.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a==="string")return d.inArray(this[0],a?d(a):this.parent().children());return d.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a==="string"?d(a,b):d.makeArray(a),e=d.merge(this.get(),c);return this.pushStack(P(c[0])||P(e[0])?e:d.unique(e))},andSelf:function(){return this.add(this.prevObject)}}),d.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return d.dir(a,"parentNode")},parentsUntil:function(a,b,c){return d.dir(a,"parentNode",c)},next:function(a){return d.nth(a,2,"nextSibling")},prev:function(a){return d.nth(a,2,"previousSibling")},nextAll:function(a){return d.dir(a,"nextSibling")},prevAll:function(a){return d.dir(a,"previousSibling")},nextUntil:function(a,b,c){return d.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return d.dir(a,"previousSibling",c)},siblings:function(a){return d.sibling(a.parentNode.firstChild,a)},children:function(a){return d.sibling(a.firstChild)},contents:function(a){return d.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:d.makeArray(a.childNodes)}},function(a,b){d.fn[a]=function(c,e){var f=d.map(this,b,c),g=M.call(arguments);I.test(a)||(e=c),e&&typeof e==="string"&&(f=d.filter(e,f)),f=this.length>1&&!O[a]?d.unique(f):f,(this.length>1||K.test(e))&&J.test(a)&&(f=f.reverse());return this.pushStack(f,a,g.join(","))}}),d.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?d.find.matchesSelector(b[0],a)?[b[0]]:[]:d.find.matches(a,b)},dir:function(a,c,e){var f=[],g=a[c];while(g&&g.nodeType!==9&&(e===b||g.nodeType!==1||!d(g).is(e)))g.nodeType===1&&f.push(g),g=g[c];return f},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var R=/ jQuery\d+="(?:\d+|null)"/g,S=/^\s+/,T=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,U=/<([\w:]+)/,V=/<tbody/i,W=/<|&#?\w+;/,X=/<(?:script|object|embed|option|style)/i,Y=/checked\s*(?:[^=]|=\s*.checked.)/i,Z={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};Z.optgroup=Z.option,Z.tbody=Z.tfoot=Z.colgroup=Z.caption=Z.thead,Z.th=Z.td,d.support.htmlSerialize||(Z._default=[1,"div<div>","</div>"]),d.fn.extend({text:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.text(a.call(this,b,c.text()))});if(typeof a!=="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return d.text(this)},wrapAll:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapAll(a.call(this,b))});if(this[0]){var b=d(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapInner(a.call(this,b))});return this.each(function(){var b=d(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){d(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){d.nodeName(this,"body")||d(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=d(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,d(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,e;(e=this[c])!=null;c++)if(!a||d.filter(a,[e]).length)!b&&e.nodeType===1&&(d.cleanData(e.getElementsByTagName("*")),d.cleanData([e])),e.parentNode&&e.parentNode.removeChild(e);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&d.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return d.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(R,""):null;if(typeof a!=="string"||X.test(a)||!d.support.leadingWhitespace&&S.test(a)||Z[(U.exec(a)||["",""])[1].toLowerCase()])d.isFunction(a)?this.each(function(b){var c=d(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);else{a=a.replace(T,"<$1></$2>");try{for(var c=0,e=this.length;c<e;c++)this[c].nodeType===1&&(d.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(f){this.empty().append(a)}}return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(d.isFunction(a))return this.each(function(b){var c=d(this),e=c.html();c.replaceWith(a.call(this,b,e))});typeof a!=="string"&&(a=d(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;d(this).remove(),b?d(b).before(a):d(c).append(a)})}return this.length?this.pushStack(d(d.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,e){var f,g,h,i,j=a[0],k=[];if(!d.support.checkClone&&arguments.length===3&&typeof j==="string"&&Y.test(j))return this.each(function(){d(this).domManip(a,c,e,!0)});if(d.isFunction(j))return this.each(function(f){var g=d(this);a[0]=j.call(this,f,c?g.html():b),g.domManip(a,c,e)});if(this[0]){i=j&&j.parentNode,d.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?f={fragment:i}:f=d.buildFragment(a,this,k),h=f.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&d.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)e.call(c?$(this[l],g):this[l],f.cacheable||m>1&&l<n?d.clone(h,!0,!0):h)}k.length&&d.each(k,bc)}return this}}),d.buildFragment=function(a,b,e){var f,g,h,i=b&&b[0]?b[0].ownerDocument||b[0]:c;a.length===1&&typeof a[0]==="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!X.test(a[0])&&(d.support.checkClone||!Y.test(a[0]))&&(g=!0,h=d.fragments[a[0]],h&&(h!==1&&(f=h))),f||(f=i.createDocumentFragment(),d.clean(a,i,f,e)),g&&(d.fragments[a[0]]=h?f:1);return{fragment:f,cacheable:g}},d.fragments={},d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){d.fn[a]=function(c){var e=[],f=d(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&f.length===1){f[b](this[0]);return this}for(var h=0,i=f.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();d(f[h])[b](j),e=e.concat(j)}return this.pushStack(e,a,f.selector)}}),d.extend({clone:function(a,b,c){var e=a.cloneNode(!0),f,g,h;if((!d.support.noCloneEvent||!d.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!d.isXMLDoc(a)){ba(a,e),f=bb(a),g=bb(e);for(h=0;f[h];++h)ba(f[h],g[h])}if(b){_(a,e);if(c){f=bb(a),g=bb(e);for(h=0;f[h];++h)_(f[h],g[h])}}return e},clean:function(a,b,e,f){b=b||c,typeof b.createElement==="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var g=[];for(var h=0,i;(i=a[h])!=null;h++){typeof i==="number"&&(i+="");if(!i)continue;if(typeof i!=="string"||W.test(i)){if(typeof i==="string"){i=i.replace(T,"<$1></$2>");var j=(U.exec(i)||["",""])[1].toLowerCase(),k=Z[j]||Z._default,l=k[0],m=b.createElement("div");m.innerHTML=k[1]+i+k[2];while(l--)m=m.lastChild;if(!d.support.tbody){var n=V.test(i),o=j==="table"&&!n?m.firstChild&&m.firstChild.childNodes:k[1]==="<table>"&&!n?m.childNodes:[];for(var p=o.length-1;p>=0;--p)d.nodeName(o[p],"tbody")&&!o[p].childNodes.length&&o[p].parentNode.removeChild(o[p])}!d.support.leadingWhitespace&&S.test(i)&&m.insertBefore(b.createTextNode(S.exec(i)[0]),m.firstChild),i=m.childNodes}}else i=b.createTextNode(i);i.nodeType?g.push(i):g=d.merge(g,i)}if(e)for(h=0;g[h];h++)!f||!d.nodeName(g[h],"script")||g[h].type&&g[h].type.toLowerCase()!=="text/javascript"?(g[h].nodeType===1&&g.splice.apply(g,[h+1,0].concat(d.makeArray(g[h].getElementsByTagName("script")))),e.appendChild(g[h])):f.push(g[h].parentNode?g[h].parentNode.removeChild(g[h]):g[h]);return g},cleanData:function(a){var b,c,e=d.cache,f=d.expando,g=d.event.special,h=d.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&d.noData[j.nodeName.toLowerCase()])continue;c=j[d.expando];if(c){b=e[c]&&e[c][f];if(b&&b.events){for(var k in b.events)g[k]?d.event.remove(j,k):d.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[d.expando]:j.removeAttribute&&j.removeAttribute(d.expando),delete e[c]}}}});var bd=/alpha\([^)]*\)/i,be=/opacity=([^)]*)/,bf=/-([a-z])/ig,bg=/([A-Z]|^ms)/g,bh=/^-?\d+(?:px)?$/i,bi=/^-?\d/,bj={position:"absolute",visibility:"hidden",display:"block"},bk=["Left","Right"],bl=["Top","Bottom"],bm,bn,bo,bp=function(a,b){return b.toUpperCase()};d.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return d.access(this,a,c,!0,function(a,c,e){return e!==b?d.style(a,c,e):d.css(a,c)})},d.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bm(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{zIndex:!0,fontWeight:!0,opacity:!0,zoom:!0,lineHeight:!0},cssProps:{"float":d.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,e,f){if(a&&a.nodeType!==3&&a.nodeType!==8&&a.style){var g,h=d.camelCase(c),i=a.style,j=d.cssHooks[h];c=d.cssProps[h]||h;if(e===b){if(j&&"get"in j&&(g=j.get(a,!1,f))!==b)return g;return i[c]}if(typeof e==="number"&&isNaN(e)||e==null)return;typeof e==="number"&&!d.cssNumber[h]&&(e+="px");if(!j||!("set"in j)||(e=j.set(a,e))!==b)try{i[c]=e}catch(k){}}},css:function(a,c,e){var f,g=d.camelCase(c),h=d.cssHooks[g];c=d.cssProps[g]||g;if(h&&"get"in h&&(f=h.get(a,!0,e))!==b)return f;if(bm)return bm(a,c,g)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]},camelCase:function(a){return a.replace(bf,bp)}}),d.curCSS=d.css,d.each(["height","width"],function(a,b){d.cssHooks[b]={get:function(a,c,e){var f;if(c){a.offsetWidth!==0?f=bq(a,b,e):d.swap(a,bj,function(){f=bq(a,b,e)});if(f<=0){f=bm(a,b,b),f==="0px"&&bo&&(f=bo(a,b,b));if(f!=null)return f===""||f==="auto"?"0px":f}if(f<0||f==null){f=a.style[b];return f===""||f==="auto"?"0px":f}return typeof f==="string"?f:f+"px"}},set:function(a,b){if(!bh.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),d.support.opacity||(d.cssHooks.opacity={get:function(a,b){return be.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style;c.zoom=1;var e=d.isNaN(b)?"":"alpha(opacity="+b*100+")",f=c.filter||"";c.filter=bd.test(f)?f.replace(bd,e):c.filter+" "+e}}),d(function(){d.support.reliableMarginRight||(d.cssHooks.marginRight={get:function(a,b){var c;d.swap(a,{display:"inline-block"},function(){b?c=bm(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bn=function(a,c,e){var f,g,h;e=e.replace(bg,"-$1").toLowerCase();if(!(g=a.ownerDocument.defaultView))return b;if(h=g.getComputedStyle(a,null))f=h.getPropertyValue(e),f===""&&!d.contains(a.ownerDocument.documentElement,a)&&(f=d.style(a,e));return f}),c.documentElement.currentStyle&&(bo=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bh.test(d)&&bi.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bm=bn||bo,d.expr&&d.expr.filters&&(d.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!d.support.reliableHiddenOffsets&&(a.style.display||d.css(a,"display"))==="none"},d.expr.filters.visible=function(a){return!d.expr.filters.hidden(a)});var br=/%20/g,bs=/\[\]$/,bt=/\r?\n/g,bu=/#.*$/,bv=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bw=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bx=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,by=/^(?:GET|HEAD)$/,bz=/^\/\//,bA=/\?/,bB=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bC=/^(?:select|textarea)/i,bD=/\s+/,bE=/([?&])_=[^&]*/,bF=/(^|\-)([a-z])/g,bG=function(a,b,c){return b+c.toUpperCase()},bH=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bI=d.fn.load,bJ={},bK={},bL,bM;try{bL=c.location.href}catch(bN){bL=c.createElement("a"),bL.href="",bL=bL.href}bM=bH.exec(bL.toLowerCase())||[],d.fn.extend({load:function(a,c,e){if(typeof a!=="string"&&bI)return bI.apply(this,arguments);if(!this.length)return this;var f=a.indexOf(" ");if(f>=0){var g=a.slice(f,a.length);a=a.slice(0,f)}var h="GET";c&&(d.isFunction(c)?(e=c,c=b):typeof c==="object"&&(c=d.param(c,d.ajaxSettings.traditional),h="POST"));var i=this;d.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?d("<div>").append(c.replace(bB,"")).find(g):c)),e&&i.each(e,[c,b,a])}});return this},serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?d.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bC.test(this.nodeName)||bw.test(this.type))}).map(function(a,b){var c=d(this).val();return c==null?null:d.isArray(c)?d.map(c,function(a,c){return{name:b.name,value:a.replace(bt,"\r\n")}}):{name:b.name,value:c.replace(bt,"\r\n")}}).get()}}),d.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){d.fn[b]=function(a){return this.bind(b,a)}}),d.each(["get","post"],function(a,c){d[c]=function(a,e,f,g){d.isFunction(e)&&(g=g||f,f=e,e=b);return d.ajax({type:c,url:a,data:e,success:f,dataType:g})}}),d.extend({getScript:function(a,c){return d.get(a,b,c,"script")},getJSON:function(a,b,c){return d.get(a,b,c,"json")},ajaxSetup:function(a,b){b?d.extend(!0,a,d.ajaxSettings,b):(b=a,a=d.extend(!0,d.ajaxSettings,b));for(var c in {context:1,url:1})c in b?a[c]=b[c]:c in d.ajaxSettings&&(a[c]=d.ajaxSettings[c]);return a},ajaxSettings:{url:bL,isLocal:bx.test(bM[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":d.parseJSON,"text xml":d.parseXML}},ajaxPrefilter:bO(bJ),ajaxTransport:bO(bK),ajax:function(a,c){function v(a,c,l,n){if(r!==2){r=2,p&&clearTimeout(p),o=b,m=n||"",u.readyState=a?4:0;var q,t,v,w=l?bR(e,u,l):b,x,y;if(a>=200&&a<300||a===304){if(e.ifModified){if(x=u.getResponseHeader("Last-Modified"))d.lastModified[k]=x;if(y=u.getResponseHeader("Etag"))d.etag[k]=y}if(a===304)c="notmodified",q=!0;else try{t=bS(e,w),c="success",q=!0}catch(z){c="parsererror",v=z}}else{v=c;if(!c||a)c="error",a<0&&(a=0)}u.status=a,u.statusText=c,q?h.resolveWith(f,[t,c,u]):h.rejectWith(f,[u,c,v]),u.statusCode(j),j=b,s&&g.trigger("ajax"+(q?"Success":"Error"),[u,e,q?t:v]),i.resolveWith(f,[u,c]),s&&(g.trigger("ajaxComplete",[u,e]),--d.active||d.event.trigger("ajaxStop"))}}typeof a==="object"&&(c=a,a=b),c=c||{};var e=d.ajaxSetup({},c),f=e.context||e,g=f!==e&&(f.nodeType||f instanceof d)?d(f):d.event,h=d.Deferred(),i=d._Deferred(),j=e.statusCode||{},k,l={},m,n,o,p,q,r=0,s,t,u={readyState:0,setRequestHeader:function(a,b){r||(l[a.toLowerCase().replace(bF,bG)]=b);return this},getAllResponseHeaders:function(){return r===2?m:null},getResponseHeader:function(a){var c;if(r===2){if(!n){n={};while(c=bv.exec(m))n[c[1].toLowerCase()]=c[2]}c=n[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){r||(e.mimeType=a);return this},abort:function(a){a=a||"abort",o&&o.abort(a),v(0,a);return this}};h.promise(u),u.success=u.done,u.error=u.fail,u.complete=i.done,u.statusCode=function(a){if(a){var b;if(r<2)for(b in a)j[b]=[j[b],a[b]];else b=a[u.status],u.then(b,b)}return this},e.url=((a||e.url)+"").replace(bu,"").replace(bz,bM[1]+"//"),e.dataTypes=d.trim(e.dataType||"*").toLowerCase().split(bD),e.crossDomain==null&&(q=bH.exec(e.url.toLowerCase()),e.crossDomain=q&&(q[1]!=bM[1]||q[2]!=bM[2]||(q[3]||(q[1]==="http:"?80:443))!=(bM[3]||(bM[1]==="http:"?80:443)))),e.data&&e.processData&&typeof e.data!=="string"&&(e.data=d.param(e.data,e.traditional)),bP(bJ,e,c,u);if(r===2)return!1;s=e.global,e.type=e.type.toUpperCase(),e.hasContent=!by.test(e.type),s&&d.active++===0&&d.event.trigger("ajaxStart");if(!e.hasContent){e.data&&(e.url+=(bA.test(e.url)?"&":"?")+e.data),k=e.url;if(e.cache===!1){var w=d.now(),x=e.url.replace(bE,"$1_="+w);e.url=x+(x===e.url?(bA.test(e.url)?"&":"?")+"_="+w:"")}}if(e.data&&e.hasContent&&e.contentType!==!1||c.contentType)l["Content-Type"]=e.contentType;e.ifModified&&(k=k||e.url,d.lastModified[k]&&(l["If-Modified-Since"]=d.lastModified[k]),d.etag[k]&&(l["If-None-Match"]=d.etag[k])),l.Accept=e.dataTypes[0]&&e.accepts[e.dataTypes[0]]?e.accepts[e.dataTypes[0]]+(e.dataTypes[0]!=="*"?", */*; q=0.01":""):e.accepts["*"];for(t in e.headers)u.setRequestHeader(t,e.headers[t]);if(e.beforeSend&&(e.beforeSend.call(f,u,e)===!1||r===2)){u.abort();return!1}for(t in {success:1,error:1,complete:1})u[t](e[t]);o=bP(bK,e,c,u);if(o){u.readyState=1,s&&g.trigger("ajaxSend",[u,e]),e.async&&e.timeout>0&&(p=setTimeout(function(){u.abort("timeout")},e.timeout));try{r=1,o.send(l,v)}catch(y){status<2?v(-1,y):d.error(y)}}else v(-1,"No Transport");return u},param:function(a,c){var e=[],f=function(a,b){b=d.isFunction(b)?b():b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=d.ajaxSettings.traditional);if(d.isArray(a)||a.jquery&&!d.isPlainObject(a))d.each(a,function(){f(this.name,this.value)});else for(var g in a)bQ(g,a[g],c,f);return e.join("&").replace(br,"+")}}),d.extend({active:0,lastModified:{},etag:{}});var bT=d.now(),bU=/(\=)\?(&|$)|\?\?/i;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return d.expando+"_"+bT++}}),d.ajaxPrefilter("json jsonp",function(b,c,e){var f=typeof b.data==="string";if(b.dataTypes[0]==="jsonp"||c.jsonpCallback||c.jsonp!=null||b.jsonp!==!1&&(bU.test(b.url)||f&&bU.test(b.data))){var g,h=b.jsonpCallback=d.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2",m=function(){a[h]=i,g&&d.isFunction(i)&&a[h](g[0])};b.jsonp!==!1&&(j=j.replace(bU,l),b.url===j&&(f&&(k=k.replace(bU,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},e.then(m,m),b.converters["script json"]=function(){g||d.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){d.globalEval(a);return a}}}),d.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),d.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var bV=d.now(),bW,bX;d.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&bZ()||b$()}:bZ,bX=d.ajaxSettings.xhr(),d.support.ajax=!!bX,d.support.cors=bX&&"withCredentials"in bX,bX=b,d.support.ajax&&d.ajaxTransport(function(a){if(!a.crossDomain||d.support.cors){var c;return{send:function(e,f){var g=a.xhr(),h,i;a.username?g.open(a.type,a.url,a.async,a.username,a.password):g.open(a.type,a.url,a.async);if(a.xhrFields)for(i in a.xhrFields)g[i]=a.xhrFields[i];a.mimeType&&g.overrideMimeType&&g.overrideMimeType(a.mimeType),!a.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(i in e)g.setRequestHeader(i,e[i])}catch(j){}g.send(a.hasContent&&a.data||null),c=function(e,i){var j,k,l,m,n;try{if(c&&(i||g.readyState===4)){c=b,h&&(g.onreadystatechange=d.noop,delete bW[h]);if(i)g.readyState!==4&&g.abort();else{j=g.status,l=g.getAllResponseHeaders(),m={},n=g.responseXML,n&&n.documentElement&&(m.xml=n),m.text=g.responseText;try{k=g.statusText}catch(o){k=""}j||!a.isLocal||a.crossDomain?j===1223&&(j=204):j=m.text?200:404}}}catch(p){i||f(-1,p)}m&&f(j,k,m,l)},a.async&&g.readyState!==4?(bW||(bW={},bY()),h=bV++,g.onreadystatechange=bW[h]=c):c()},abort:function(){c&&c(0,1)}}}});var b_={},ca=/^(?:toggle|show|hide)$/,cb=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cc,cd=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];d.fn.extend({show:function(a,b,c){var e,f;if(a||a===0)return this.animate(ce("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)e=this[g],f=e.style.display,!d._data(e,"olddisplay")&&f==="none"&&(f=e.style.display=""),f===""&&d.css(e,"display")==="none"&&d._data(e,"olddisplay",cf(e.nodeName));for(g=0;g<h;g++){e=this[g],f=e.style.display;if(f===""||f==="none")e.style.display=d._data(e,"olddisplay")||""}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ce("hide",3),a,b,c);for(var e=0,f=this.length;e<f;e++){var g=d.css(this[e],"display");g!=="none"&&!d._data(this[e],"olddisplay")&&d._data(this[e],"olddisplay",g)}for(e=0;e<f;e++)this[e].style.display="none";return this},_toggle:d.fn.toggle,toggle:function(a,b,c){var e=typeof a==="boolean";d.isFunction(a)&&d.isFunction(b)?this._toggle.apply(this,arguments):a==null||e?this.each(function(){var b=e?a:d(this).is(":hidden");d(this)[b?"show":"hide"]()}):this.animate(ce("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,e){var f=d.speed(b,c,e);if(d.isEmptyObject(a))return this.each(f.complete);return this[f.queue===!1?"each":"queue"](function(){var b=d.extend({},f),c,e=this.nodeType===1,g=e&&d(this).is(":hidden"),h=this;for(c in a){var i=d.camelCase(c);c!==i&&(a[i]=a[c],delete a[c],c=i);if(a[c]==="hide"&&g||a[c]==="show"&&!g)return b.complete.call(this);if(e&&(c==="height"||c==="width")){b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY];if(d.css(this,"display")==="inline"&&d.css(this,"float")==="none")if(d.support.inlineBlockNeedsLayout){var j=cf(this.nodeName);j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)}else this.style.display="inline-block"}d.isArray(a[c])&&((b.specialEasing=b.specialEasing||{})[c]=a[c][1],a[c]=a[c][0])}b.overflow!=null&&(this.style.overflow="hidden"),b.curAnim=d.extend({},a),d.each(a,function(c,e){var f=new d.fx(h,b,c);if(ca.test(e))f[e==="toggle"?g?"show":"hide":e](a);else{var i=cb.exec(e),j=f.cur();if(i){var k=parseFloat(i[2]),l=i[3]||(d.cssNumber[c]?"":"px");l!=="px"&&(d.style(h,c,(k||1)+l),j=(k||1)/f.cur()*j,d.style(h,c,j+l)),i[1]&&(k=(i[1]==="-="?-1:1)*k+j),f.custom(j,k,l)}else f.custom(j,e,"")}});return!0})},stop:function(a,b){var c=d.timers;a&&this.queue([]),this.each(function(){for(var a=c.length-1;a>=0;a--)c[a].elem===this&&(b&&c[a](!0),c.splice(a,1))}),b||this.dequeue();return this}}),d.each({slideDown:ce("show",1),slideUp:ce("hide",1),slideToggle:ce("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){d.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),d.extend({speed:function(a,b,c){var e=a&&typeof a==="object"?d.extend({},a):{complete:c||!c&&b||d.isFunction(a)&&a,duration:a,easing:c&&b||b&&!d.isFunction(b)&&b};e.duration=d.fx.off?0:typeof e.duration==="number"?e.duration:e.duration in d.fx.speeds?d.fx.speeds[e.duration]:d.fx.speeds._default,e.old=e.complete,e.complete=function(){e.queue!==!1&&d(this).dequeue(),d.isFunction(e.old)&&e.old.call(this)};return e},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig||(b.orig={})}}),d.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(d.fx.step[this.prop]||d.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=d.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function g(a){return e.step(a)}var e=this,f=d.fx;this.startTime=d.now(),this.start=a,this.end=b,this.unit=c||this.unit||(d.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,g.elem=this.elem,g()&&d.timers.push(g)&&!cc&&(cc=setInterval(f.tick,f.interval))},show:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),d(this.elem).show()},hide:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=d.now(),c=!0;if(a||b>=this.options.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),this.options.curAnim[this.prop]=!0;for(var e in this.options.curAnim)this.options.curAnim[e]!==!0&&(c=!1);if(c){if(this.options.overflow!=null&&!d.support.shrinkWrapBlocks){var f=this.elem,g=this.options;d.each(["","X","Y"],function(a,b){f.style["overflow"+b]=g.overflow[a]})}this.options.hide&&d(this.elem).hide();if(this.options.hide||this.options.show)for(var h in this.options.curAnim)d.style(this.elem,h,this.options.orig[h]);this.options.complete.call(this.elem)}return!1}var i=b-this.startTime;this.state=i/this.options.duration;var j=this.options.specialEasing&&this.options.specialEasing[this.prop],k=this.options.easing||(d.easing.swing?"swing":"linear");this.pos=d.easing[j||k](this.state,i,0,1,this.options.duration),this.now=this.start+(this.end-this.start)*this.pos,this.update();return!0}},d.extend(d.fx,{tick:function(){var a=d.timers;for(var b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||d.fx.stop()},interval:13,stop:function(){clearInterval(cc),cc=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){d.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),d.expr&&d.expr.filters&&(d.expr.filters.animated=function(a){return d.grep(d.timers,function(b){return a===b.elem}).length});var cg=/^t(?:able|d|h)$/i,ch=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?d.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(e){}var f=b.ownerDocument,g=f.documentElement;if(!c||!d.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=f.body,i=ci(f),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||d.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||d.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:d.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);d.offset.initialize();var c,e=b.offsetParent,f=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(d.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===e&&(l+=b.offsetTop,m+=b.offsetLeft,d.offset.doesNotAddBorder&&(!d.offset.doesAddBorderForTableAndCells||!cg.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),f=e,e=b.offsetParent),d.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;d.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},d.offset={initialize:function(){var a=c.body,b=c.createElement("div"),e,f,g,h,i=parseFloat(d.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";d.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),e=b.firstChild,f=e.firstChild,h=e.nextSibling.firstChild.firstChild,this.doesNotAddBorder=f.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,f.style.position="fixed",f.style.top="20px",this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15,f.style.position=f.style.top="",e.style.overflow="hidden",e.style.position="relative",this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),d.offset.initialize=d.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;d.offset.initialize(),d.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(d.css(a,"marginTop"))||0,c+=parseFloat(d.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var e=d.css(a,"position");e==="static"&&(a.style.position="relative");var f=d(a),g=f.offset(),h=d.css(a,"top"),i=d.css(a,"left"),j=(e==="absolute"||e==="fixed")&&d.inArray("auto",[h,i])>-1,k={},l={},m,n;j&&(l=f.position()),m=j?l.top:parseInt(h,10)||0,n=j?l.left:parseInt(i,10)||0,d.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):f.css(k)}},d.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),e=ch.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(d.css(a,"marginTop"))||0,c.left-=parseFloat(d.css(a,"marginLeft"))||0,e.top+=parseFloat(d.css(b[0],"borderTopWidth"))||0,e.left+=parseFloat(d.css(b[0],"borderLeftWidth"))||0;return{top:c.top-e.top,left:c.left-e.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&(!ch.test(a.nodeName)&&d.css(a,"position")==="static"))a=a.offsetParent;return a})}}),d.each(["Left","Top"],function(a,c){var e="scroll"+c;d.fn[e]=function(c){var f=this[0],g;if(!f)return null;if(c!==b)return this.each(function(){g=ci(this),g?g.scrollTo(a?d(g).scrollLeft():c,a?c:d(g).scrollTop()):this[e]=c});g=ci(f);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:d.support.boxModel&&g.document.documentElement[e]||g.document.body[e]:f[e]}}),d.each(["Height","Width"],function(a,c){var e=c.toLowerCase();d.fn["inner"+c]=function(){return this[0]?parseFloat(d.css(this[0],e,"padding")):null},d.fn["outer"+c]=function(a){return this[0]?parseFloat(d.css(this[0],e,a?"margin":"border")):null},d.fn[e]=function(a){var f=this[0];if(!f)return a==null?null:this;if(d.isFunction(a))return this.each(function(b){var c=d(this);c[e](a.call(this,b,c[e]()))});if(d.isWindow(f)){var g=f.document.documentElement["client"+c];return f.document.compatMode==="CSS1Compat"&&g||f.document.body["client"+c]||g}if(f.nodeType===9)return Math.max(f.documentElement["client"+c],f.body["scroll"+c],f.documentElement["scroll"+c],f.body["offset"+c],f.documentElement["offset"+c]);if(a===b){var h=d.css(f,e),i=parseFloat(h);return d.isNaN(i)?h:i}return this.css(e,typeof a==="string"?a:a+"px")}}),a.jQuery=a.$=d})(window);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/lib/state_machine/machine.rb:
  777      # * <tt>:value</tt> - The actual value to store when an object transitions
  778      #   to the state.  Default is the name (stringified).
  779:     # * <tt>:cache</tt> - If a dynamic value (via a lambda block) is being used,
  780:     #   then setting this to true will cache the evaluated result
  781      # * <tt>:if</tt> - Determines whether an object's value matches the state
  782      #   (e.g. :value => lambda {Time.now}, :if => lambda {|state| !state.nil?}).
  ...
  835      #       
  836      #       states.each do |state|
  837:     #         self.state(state.name, :value => lambda { VehicleState.find_by_name(state.name.to_s).id }, :cache => true)
  838      #       end
  839      #     end
  ...
  847      # 
  848      # One caveat to the above example is to keep performance in mind.  To avoid
  849:     # constant db hits for looking up the VehicleState ids, the value is cached
  850:     # by specifying the <tt>:cache</tt> option.  Alternatively, a custom
  851      # caching strategy can be used like so:
  852      # 
  853      #   class VehicleState < ActiveRecord::Base
  854:     #     cattr_accessor :cache_store
  855:     #     self.cache_store = ActiveSupport::Cache::MemoryStore.new
  856      #     
  857      #     def self.find_by_name(name)
  858:     #       cache_store.fetch(name) { find(:first, :conditions => {:name => name}) }
  859      #     end
  860      #   end
  ...
 1041      def state(*names, &block)
 1042        options = names.last.is_a?(Hash) ? names.pop : {}
 1043:       assert_valid_keys(options, :value, :cache, :if, :human_name)
 1044        
 1045        # Store the context so that it can be used for / matched against any state
 ....
 1063            
 1064            state.human_name = options[:human_name] if options.include?(:human_name)
 1065:           state.cache = options[:cache] if options.include?(:cache)
 1066            state.matcher = options[:if] if options.include?(:if)
 1067          end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/lib/state_machine/state.rb:
   31      attr_writer :value
   32      
   33:     # Whether this state's value should be cached after being evaluated
   34:     attr_accessor :cache
   35      
   36      # Whether or not this state is the initial state to use for new objects
   ..
   55      # * <tt>:value</tt> - The value to store when an object transitions to this
   56      #   state.  Default is the name (stringified).
   57:     # * <tt>:cache</tt> - If a dynamic value (via a lambda block) is being used,
   58:     #   then setting this to true will cache the evaluated result
   59      # * <tt>:if</tt> - Determines whether a value matches this state
   60      #   (e.g. :value => lambda {Time.now}, :if => lambda {|state| !state.nil?}).
   ..
   62      # * <tt>:human_name</tt> - The human-readable version of this state's name
   63      def initialize(machine, name, options = {}) #:nodoc:
   64:       assert_valid_keys(options, :initial, :value, :cache, :if, :human_name)
   65        
   66        @machine = machine
   ..
   69        @human_name = options[:human_name] || (@name ? @name.to_s.tr('_', ' ') : 'nil')
   70        @value = options.include?(:value) ? options[:value] : name && name.to_s
   71:       @cache = options[:cache]
   72        @matcher = options[:if]
   73        @methods = {}
   ..
  148      def value(eval = true)
  149        if @value.is_a?(Proc) && eval
  150:         if cache_value?
  151            @value = @value.call
  152            machine.states.update(self)
  ...
  262      
  263      private
  264:       # Should the value be cached after it's evaluated for the first time?
  265:       def cache_value?
  266:         @cache
  267        end
  268        

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/test/unit/event_collection_test.rb:
  246    end
  247    
  248:   def test_should_have_valid_transition_if_already_defined_in_transition_cache
  249      @ignite.transition :parked => :idling
  250      @object.state_event = nil
  ...
  254    end
  255    
  256:   def test_should_use_transition_cache_if_both_event_and_transition_are_present
  257      @ignite.transition :parked => :idling
  258      @object.state_event = 'ignite'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/test/unit/event_test.rb:
  123    end
  124    
  125:   def test_should_not_cache_value
  126      assert_not_same @event.human_name, @event.human_name
  127    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/test/unit/machine_test.rb:
 2184  end
 2185  
 2186: class MachineWithCachedStateTest < Test::Unit::TestCase
 2187    def setup
 2188      @klass = Class.new
 2189      @machine = StateMachine::Machine.new(@klass, :initial => :parked)
 2190:     @state = @machine.state :parked, :value => lambda {Object.new}, :cache => true
 2191      
 2192      @object = @klass.new

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/state_machine-1.2.0/test/unit/state_test.rb:
  296  end
  297  
  298: class StateWithCachedLambdaValueTest < Test::Unit::TestCase
  299    def setup
  300      @klass = Class.new
  301      @machine = StateMachine::Machine.new(@klass)
  302      @dynamic_value = lambda {'value'}
  303:     @machine.states << @state = StateMachine::State.new(@machine, :parked, :value => @dynamic_value, :cache => true)
  304    end
  305    
  306    def test_should_be_caching
  307:     assert @state.cache
  308    end
  309    
  ...
  324  end
  325  
  326: class StateWithoutCachedLambdaValueTest < Test::Unit::TestCase
  327    def setup
  328      @klass = Class.new
  ...
  333    
  334    def test_should_not_be_caching
  335:     assert !@state.cache
  336    end
  337    
  ...
  396    end
  397    
  398:   def test_should_not_cache_value
  399      assert_not_same @state.human_name, @state.human_name
  400    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/stringex-2.5.1/lib/stringex/acts_as_url/adapter/base.rb:
  108          end
  109  
  110:         # NOTE: The <tt>instance</tt> here is not the cached instance but a block variable
  111          # passed from <tt>klass_previous_instances</tt>, just to be clear
  112          def ensure_unique_url_for!(instance)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/stringex-2.5.1/lib/stringex/configuration/base.rb:
   11        end
   12  
   13:       # NOTE: This does not cache itself so that instance and class can be cached on the adapter
   14        # without worrying about thread safety or race conditions
   15        def adapter

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/stringex-2.5.1/lib/stringex/localization/backend/i18n.rb:
   28            def store_translations(locale, scope, data)
   29              ::I18n.backend.store_translations(locale, { :stringex => { scope => data } })
   30:             reset_translations_cache
   31            end
   32  
   ..
   45              ::I18n.load_path |= Dir[File.join(LOAD_PATH_BASE, "#{locale}.yml")]
   46              ::I18n.backend.load_translations
   47:             reset_translations_cache
   48            end
   49  
   ..
   53            end
   54  
   55:           def reset_translations_cache
   56              @translations = nil
   57            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/term-ansicolor-1.2.2/CHANGES:
   21  2013-03-08 - 1.1.1 * Avoid possible conflicts with other people's attributes
   22                       methods.
   23:                    * Cache attributes globally, also fix caching for frozen
   24                       strings.
   25  2013-03-07 - 1.1.0 * Cleanup documentation.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/therubyracer-0.12.0/ext/v8/constants.cc:
   21  
   22    VALUE Constants::Undefined(VALUE self) {
   23:     return cached<Primitive, v8::Primitive>(&_Undefined, v8::Undefined());
   24    }
   25    VALUE Constants::Null(VALUE self) {
   26:     return cached<Primitive, v8::Primitive>(&_Null, v8::Null());
   27    }
   28    VALUE Constants::True(VALUE self) {
   29:     return cached<Bool, v8::Boolean>(&_True, v8::True());
   30    }
   31    VALUE Constants::False(VALUE self) {
   32:     return cached<Bool, v8::Boolean>(&_False, v8::False());
   33    }
   34  }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/therubyracer-0.12.0/ext/v8/rr.h:
  865  
  866  private:
  867:   template <class R, class V> static VALUE cached(VALUE* storage, v8::Handle<V> value) {
  868      if (!RTEST(*storage)) {
  869        *storage = R(value);

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/therubyracer-0.12.0/lib/v8/conversion/method.rb:
    4  
    5      def to_v8
    6:       template = @@method_cache[self] ||= to_template
    7        template.GetFunction()
    8      end
    9  
   10:     class MethodCache
   11        def initialize
   12          @map = V8::Weak::WeakValueMap.new
   ..
   22      end
   23  
   24:     @@method_cache = MethodCache.new
   25    end
   26  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thin-1.6.1/lib/rack/adapter/rails.rb:
   55          path        = env['PATH_INFO'].chomp('/')
   56          method      = env['REQUEST_METHOD']
   57:         cached_path = (path.empty? ? 'index' : path) + ActionController::Base.page_cache_extension
   58          
   59          if FILE_METHODS.include?(method)
   60            if file_exist?(path)              # Serve the file if it's there
   61              return @file_app.call(env)
   62:           elsif file_exist?(cached_path)    # Serve the page cache if it's there
   63:             env['PATH_INFO'] = cached_path
   64              return @file_app.call(env)
   65            end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/.gitignore:
   11  doc/
   12  lib/bundler/man
   13: lib/thread_safe/jruby_cache_backend.jar
   14  pkg
   15  rdoc

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/examples/bench_cache.rb:
    5  
    6  hash  = {}
    7: cache = ThreadSafe::Cache.new
    8  
    9  ENTRIES = 10_000
   ..
   11  ENTRIES.times do |i|
   12    hash[i]  = i
   13:   cache[i] = i
   14  end
   15  
   ..
   22    end
   23  
   24:   results.report('Cache#[]') do
   25:     TESTS.times { cache[key] }
   26    end
   27  
   ..
   30    end
   31  
   32:   results.report('Cache#each_pair') do
   33:     (TESTS / ENTRIES).times { cache.each_pair {|k,v| v} }
   34    end
   35  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/org/jruby/ext/thread_safe/JRubyCacheBackendLibrary.java:
   23   * @author thedarkone
   24   */
   25: public class JRubyCacheBackendLibrary implements Library {
   26      public void load(Ruby runtime, boolean wrap) throws IOException {
   27:         RubyClass jrubyRefClass = runtime.defineClassUnder("JRubyCacheBackend", runtime.getObject(), BACKEND_ALLOCATOR, runtime.getModule("ThreadSafe"));
   28          jrubyRefClass.setAllocator(BACKEND_ALLOCATOR);
   29:         jrubyRefClass.defineAnnotatedMethods(JRubyCacheBackend.class);
   30      }
   31  
   32      private static final ObjectAllocator BACKEND_ALLOCATOR = new ObjectAllocator() {
   33          public IRubyObject allocate(Ruby runtime, RubyClass klazz) {
   34:             return new JRubyCacheBackend(runtime, klazz);
   35          }
   36      };
   37  
   38:     @JRubyClass(name="JRubyCacheBackend", parent="Object")
   39:     public static class JRubyCacheBackend extends RubyObject {
   40          // Defaults used by the CHM
   41          static final int DEFAULT_INITIAL_CAPACITY = 16;
   ..
   81          }
   82  
   83:         public JRubyCacheBackend(Ruby runtime, RubyClass klass) {
   84              super(runtime, klass);
   85          }
   ..
  238  
  239          @JRubyMethod(visibility = PRIVATE)
  240:         public JRubyCacheBackend initialize_copy(ThreadContext context, IRubyObject other) {
  241              map = newCHM();
  242              return this;

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/org/jruby/ext/thread_safe/jsr166e/ConcurrentHashMapV8.java:
  466       *
  467       * The element count is maintained using a LongAdder, which avoids
  468:      * contention on updates but can encounter cache thrashing if read
  469       * too frequently during concurrent access. To avoid reading so
  470       * often, resizing is attempted either when a bin lock is
  ...
 2431          final ConcurrentHashMapV8<K, V> map;
 2432          Node next;           // the next entry to use
 2433:         K nextKey;           // cached key field of next
 2434:         V nextVal;           // cached val field of next
 2435          Node[] tab;          // current table; updated if resized
 2436          int index;           // index of bin to use next

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/org/jruby/ext/thread_safe/jsr166e/nounsafe/ConcurrentHashMapV8.java:
  469       *
  470       * The element count is maintained using a LongAdder, which avoids
  471:      * contention on updates but can encounter cache thrashing if read
  472       * too frequently during concurrent access. To avoid reading so
  473       * often, resizing is attempted either when a bin lock is
  ...
 2423          final ConcurrentHashMapV8<K, V> map;
 2424          Node next;           // the next entry to use
 2425:         K nextKey;      // cached key field of next
 2426:         V nextVal;      // cached val field of next
 2427          AtomicReferenceArray<Node> tab;          // current table; updated if resized
 2428          int index;           // index of bin to use next

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/org/jruby/ext/thread_safe/jsr166e/nounsafe/Striped64.java:
   27       *
   28       * Table entries are of class Cell; a variant of AtomicLong padded
   29:      * to reduce cache contention on most processors. Padding is
   30       * overkill for most Atomics because they are usually irregularly
   31       * scattered in memory and thus don't interfere much with each
   32       * other. But Atomic objects residing in arrays will tend to be
   33       * placed adjacent to each other, and so will most often share
   34:      * cache lines (with a huge negative performance impact) without
   35       * this precaution.
   36       *

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/org/jruby/ext/thread_safe/jsr166e/Striped64.java:
   24       *
   25       * Table entries are of class Cell; a variant of AtomicLong padded
   26:      * to reduce cache contention on most processors. Padding is
   27       * overkill for most Atomics because they are usually irregularly
   28       * scattered in memory and thus don't interfere much with each
   29       * other. But Atomic objects residing in arrays will tend to be
   30       * placed adjacent to each other, and so will most often share
   31:      * cache lines (with a huge negative performance impact) without
   32       * this precaution.
   33       *

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/ext/thread_safe/JrubyCacheBackendService.java:
    4  
    5  import org.jruby.Ruby;
    6: import org.jruby.ext.thread_safe.JRubyCacheBackendLibrary;
    7  import org.jruby.runtime.load.BasicLibraryService;
    8  
    9: // can't name this JRubyCacheBackendService or else JRuby doesn't pick this up
   10: public class JrubyCacheBackendService implements BasicLibraryService {
   11      public boolean basicLoad(final Ruby runtime) throws IOException {
   12:         new JRubyCacheBackendLibrary().load(runtime, false);
   13          return true;
   14      }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe.rb:
    3  
    4  module ThreadSafe
    5:   autoload :Cache, 'thread_safe/cache'
    6    autoload :Util,  'thread_safe/util'
    7  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/atomic_reference_cache_backend.rb:
  176    #
  177    # The element count is maintained using a +ThreadSafe::Util::Adder+,
  178:   # which avoids contention on updates but can encounter cache thrashing
  179    # if read too frequently during concurrent access. To avoid reading so
  180    # often, resizing is attempted either when a bin lock is
  ...
  189    # contention by only committing count updates upon these size
  190    # checks.
  191:   class AtomicReferenceCacheBackend
  192      class Table < Util::PowerOfTwoTuple
  193        def cas_new_node(i, hash, key, value)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/cache.rb:
    2  
    3  module ThreadSafe
    4:   autoload :JRubyCacheBackend,           'thread_safe/jruby_cache_backend'
    5:   autoload :MriCacheBackend,             'thread_safe/mri_cache_backend'
    6:   autoload :NonConcurrentCacheBackend,   'thread_safe/non_concurrent_cache_backend'
    7:   autoload :AtomicReferenceCacheBackend, 'thread_safe/atomic_reference_cache_backend'
    8:   autoload :SynchronizedCacheBackend,    'thread_safe/synchronized_cache_backend'
    9  
   10:   ConcurrentCacheBackend = if defined?(RUBY_ENGINE)
   11      case RUBY_ENGINE
   12:     when 'jruby'; JRubyCacheBackend
   13:     when 'ruby';  MriCacheBackend
   14:     when 'rbx';   AtomicReferenceCacheBackend
   15      else
   16:       warn 'ThreadSafe: unsupported Ruby engine, using a fully synchronized ThreadSafe::Cache implementation' if $VERBOSE
   17:       SynchronizedCacheBackend
   18      end
   19    else
   20:     MriCacheBackend
   21    end
   22  
   23:   class Cache < ConcurrentCacheBackend
   24      KEY_ERROR = defined?(KeyError) ? KeyError : IndexError # there is no KeyError in 1.8 mode
   25  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/mri_cache_backend.rb:
    1  module ThreadSafe
    2:   class MriCacheBackend < NonConcurrentCacheBackend
    3      # We can get away with a single global write lock (instead of a per-instance one) because of the GVL/green threads.
    4      #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/non_concurrent_cache_backend.rb:
    1  module ThreadSafe
    2:   class NonConcurrentCacheBackend
    3      # WARNING: all public methods of the class must operate on the @backend directly without calling each other. This is important
    4:     # because of the SynchronizedCacheBackend which uses a non-reentrant mutex for perfomance reasons.
    5      def initialize(options = nil)
    6        @backend = {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/synchronized_cache_backend.rb:
    1  module ThreadSafe
    2:   class SynchronizedCacheBackend < NonConcurrentCacheBackend
    3      require 'mutex_m'
    4      include Mutex_m

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/lib/thread_safe/util/striped64.rb:
   13      #
   14      # Table entries are of class +Cell+; a variant of AtomicLong padded
   15:     # to reduce cache contention on most processors. Padding is
   16      # overkill for most Atomics because they are usually irregularly
   17      # scattered in memory and thus don't interfere much with each
   18      # other. But Atomic objects residing in arrays will tend to be
   19      # placed adjacent to each other, and so will most often share
   20:     # cache lines (with a huge negative performance impact) without
   21      # this precaution.
   22      #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/Rakefile:
   14      rm_rf "pkg/classes"
   15      rm_rf "pkg/tests"
   16:     rm_rf "lib/thread_safe/jruby_cache_backend.jar"
   17    end
   18  
   ..
   26    desc "Build the jar"
   27    task :jar => :compile do
   28:     ant.jar :basedir => "pkg/classes", :destfile => "lib/thread_safe/jruby_cache_backend.jar", :includes => "**/*.class"
   29    end
   30  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/README.md:
   28  ```
   29  
   30: `ThreadSafe::Cache` also exists, as a hash-like object, and should have
   31  much better performance characteristics esp. under high concurrency than
   32: `ThreadSafe::Hash`. However, `ThreadSafe::Cache` is not strictly semantically
   33  equivalent to a ruby `Hash` -- for instance, it does not necessarily retain
   34  ordering by insertion time as `Hash` does. For most uses it should do fine
   35: though, and we recommend you consider `ThreadSafe::Cache` instead of
   36  `ThreadSafe::Hash` for your concurrency-safe hash needs. It understands some
   37  options when created (depending on your ruby platform) that control some of the
   ..
   42  require 'thread_safe'
   43  
   44: cache = ThreadSafe::Cache.new
   45  ```
   46  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/test/test_cache.rb:
    6  Thread.abort_on_exception = true
    7  
    8: class TestCache < Test::Unit::TestCase
    9    def setup
   10:     @cache = ThreadSafe::Cache.new
   11    end
   12  
   13    def test_concurrency
   14:     cache = @cache
   15      assert_nothing_raised do
   16        (1..100).map do |i|
   ..
   18            1000.times do |j|
   19              key = i*1000+j
   20:             cache[key] = i
   21:             cache[key]
   22:             cache.delete(key)
   23            end
   24          end
   ..
   29    def test_retrieval
   30      assert_size_change 1 do
   31:       assert_equal nil, @cache[:a]
   32:       assert_equal nil, @cache.get(:a)
   33:       @cache[:a] = 1
   34:       assert_equal 1,   @cache[:a]
   35:       assert_equal 1,   @cache.get(:a)
   36      end
   37    end
   ..
   40      with_or_without_default_proc do
   41        assert_size_change 1 do
   42:         assert_equal nil, @cache.put_if_absent(:a, 1)
   43:         assert_equal 1,   @cache.put_if_absent(:a, 1)
   44:         assert_equal 1,   @cache.put_if_absent(:a, 2)
   45:         assert_equal 1,   @cache[:a]
   46        end
   47      end
   ..
   51      with_or_without_default_proc do
   52        assert_size_change 3 do
   53:         assert_equal(1,   (@cache.compute_if_absent(:a) {1}))
   54:         assert_equal(1,   (@cache.compute_if_absent(:a) {2}))
   55:         assert_equal 1,    @cache[:a]
   56:         @cache[:b] = nil
   57:         assert_equal(nil, (@cache.compute_if_absent(:b) {1}))
   58:         assert_equal(nil, (@cache.compute_if_absent(:c) {}))
   59:         assert_equal nil,  @cache[:c]
   60:         assert_equal true, @cache.key?(:c)
   61        end
   62      end
   ..
   78      compute_proceed = ThreadSafe::Test::Latch.new(late_compute_threads_count + late_put_if_absent_threads_count + getter_threads_count)
   79      block_until_compute_started = lambda do |name|
   80:       if (v = @cache[:a]) != nil
   81          assert_equal nil, v
   82        end
   ..
   89          Thread.new do
   90            block_until_compute_started.call('compute_if_absent')
   91:           assert_equal(1, (@cache.compute_if_absent(:a) { flunk }))
   92          end
   93        end
   ..
   96          Thread.new do
   97            block_until_compute_started.call('put_if_absent')
   98:           assert_equal(1, @cache.put_if_absent(:a, 2))
   99          end
  100        end
  ...
  103          Thread.new do
  104            block_until_compute_started.call('getter')
  105:           Thread.pass while @cache[:a].nil?
  106:           assert_equal 1, @cache[:a]
  107          end
  108        end
  109  
  110        Thread.new do
  111:         @cache.compute_if_absent(:a) do
  112            compute_started.release
  113            compute_proceed.await
  ...
  123      with_or_without_default_proc do
  124        assert_no_size_change do
  125:         assert_equal(nil,   @cache.compute_if_present(:a) {})
  126:         assert_equal(nil,   @cache.compute_if_present(:a) {1})
  127:         assert_equal(nil,   @cache.compute_if_present(:a) {flunk})
  128:         assert_equal false, @cache.key?(:a)
  129        end
  130  
  131:       @cache[:a] = 1
  132        assert_no_size_change do
  133:         assert_equal(1,     @cache.compute_if_present(:a) {1})
  134:         assert_equal(1,     @cache[:a])
  135:         assert_equal(2,     @cache.compute_if_present(:a) {2})
  136:         assert_equal(2,     @cache[:a])
  137:         assert_equal(false, @cache.compute_if_present(:a) {false})
  138:         assert_equal(false, @cache[:a])
  139  
  140:         @cache[:a] = 1
  141          yielded    = false
  142:         @cache.compute_if_present(:a) do |old_value|
  143            yielded = true
  144            assert_equal 1, old_value
  ...
  149  
  150        assert_size_change -1 do
  151:         assert_equal(nil,   @cache.compute_if_present(:a) {})
  152:         assert_equal(false, @cache.key?(:a))
  153:         assert_equal(nil,   @cache.compute_if_present(:a) {1})
  154:         assert_equal(false, @cache.key?(:a))
  155        end
  156      end
  ...
  159    def test_compute_if_present_with_return
  160      with_or_without_default_proc do
  161:       @cache[:a] = 1
  162        assert_handles_return_lambda(:compute_if_present, :a)
  163      end
  ...
  166    def test_compute_if_present_exception
  167      with_or_without_default_proc do
  168:       @cache[:a] = 1
  169        assert_handles_exception(:compute_if_present, :a)
  170      end
  ...
  181          assert_compute(:a, 1,   2)   {2}
  182          assert_compute(:a, 2, false) {false}
  183:         assert_equal false, @cache[:a]
  184        end
  185  
  ...
  193      with_or_without_default_proc do
  194        assert_handles_return_lambda(:compute, :a)
  195:       @cache[:a] = 1
  196        assert_handles_return_lambda(:compute, :a)
  197      end
  ...
  201      with_or_without_default_proc do
  202        assert_handles_exception(:compute, :a)
  203:       @cache[:a] = 1
  204        assert_handles_exception(:compute, :a)
  205      end
  ...
  209      with_or_without_default_proc do
  210        assert_size_change 1 do
  211:         assert_equal(nil,  @cache.merge_pair(:a, nil) {flunk})
  212:         assert_equal true, @cache.key?(:a)
  213:         assert_equal nil,  @cache[:a]
  214        end
  215  
  ...
  222        assert_size_change -1 do
  223          assert_merge_pair(:a, nil, 2, nil) {}
  224:         assert_equal false, @cache.key?(:a)
  225        end
  226      end
  ...
  229    def test_merge_pair_with_return
  230      with_or_without_default_proc do
  231:       @cache[:a] = 1
  232        assert_handles_return_lambda(:merge_pair, :a, 2)
  233      end
  ...
  236    def test_merge_pair_exception
  237      with_or_without_default_proc do
  238:       @cache[:a] = 1
  239        assert_handles_exception(:merge_pair, :a, 2)
  240      end
  ...
  255        computer_thread = Thread.new do
  256          getters_started.await
  257:         @cache.compute_if_absent(key) do
  258            compute_started.release
  259            getters_finished.await
  ...
  267            getters_started.release
  268            inserted_keys.each do |inserted_key|
  269:             assert_equal true, @cache.key?(inserted_key)
  270:             assert_equal 1,    @cache[inserted_key]
  271            end
  272:           assert_equal false, @cache.key?(key)
  273            compute_started.await
  274            inserted_keys.each do |inserted_key|
  275:             assert_equal true, @cache.key?(inserted_key)
  276:             assert_equal 1,    @cache[inserted_key]
  277            end
  278:           assert_equal false, @cache.key?(key)
  279:           assert_equal nil,   @cache[key]
  280            getters_finished.release
  281            compute_finished.await
  282:           assert_equal true,  @cache.key?(key)
  283:           assert_equal 1,     @cache[key]
  284          end
  285        end
  ...
  311      with_or_without_default_proc do
  312        assert_no_size_change do
  313:         assert_equal false, @cache.replace_pair(:a, 1, 2)
  314:         assert_equal false, @cache.replace_pair(:a, nil, nil)
  315:         assert_equal false, @cache.key?(:a)
  316        end
  317  
  318:       @cache[:a] = 1
  319        assert_no_size_change do
  320:         assert_equal true,  @cache.replace_pair(:a, 1, 2)
  321:         assert_equal false, @cache.replace_pair(:a, 1, 2)
  322:         assert_equal 2,     @cache[:a]
  323:         assert_equal true,  @cache.replace_pair(:a, 2, 2)
  324:         assert_equal 2,     @cache[:a]
  325:         assert_equal true,  @cache.replace_pair(:a, 2, nil)
  326:         assert_equal false, @cache.replace_pair(:a, 2, nil)
  327:         assert_equal nil,   @cache[:a]
  328:         assert_equal true,  @cache.key?(:a)
  329:         assert_equal true,  @cache.replace_pair(:a, nil, nil)
  330:         assert_equal true,  @cache.key?(:a)
  331:         assert_equal true,  @cache.replace_pair(:a, nil, 1)
  332:         assert_equal 1,     @cache[:a]
  333        end
  334      end
  ...
  338      with_or_without_default_proc do
  339        assert_no_size_change do
  340:         assert_equal nil,   @cache.replace_if_exists(:a, 1)
  341:         assert_equal false, @cache.key?(:a)
  342        end
  343  
  344:       @cache[:a] = 1
  345        assert_no_size_change do
  346:         assert_equal 1,     @cache.replace_if_exists(:a, 2)
  347:         assert_equal 2,     @cache[:a]
  348:         assert_equal 2,     @cache.replace_if_exists(:a, nil)
  349:         assert_equal nil,   @cache[:a]
  350:         assert_equal true,  @cache.key?(:a)
  351:         assert_equal nil,   @cache.replace_if_exists(:a, 1)
  352:         assert_equal 1,     @cache[:a]
  353        end
  354      end
  ...
  358      with_or_without_default_proc do
  359        assert_size_change 1 do
  360:         assert_equal nil,   @cache.get_and_set(:a, 1)
  361:         assert_equal true,  @cache.key?(:a)
  362:         assert_equal 1,     @cache[:a]
  363:         assert_equal 1,     @cache.get_and_set(:a, 2)
  364:         assert_equal 2,     @cache.get_and_set(:a, nil)
  365:         assert_equal nil,   @cache[:a]
  366:         assert_equal true,  @cache.key?(:a)
  367:         assert_equal nil,   @cache.get_and_set(:a, 1)
  368:         assert_equal 1,     @cache[:a]
  369        end
  370      end
  ...
  373    def test_key
  374      with_or_without_default_proc do
  375:       assert_equal nil, @cache.key(1)
  376:       @cache[:a] = 1
  377:       assert_equal :a,  @cache.key(1)
  378:       assert_equal nil,  @cache.key(0)
  379:       assert_equal :a,  @cache.index(1) if RUBY_VERSION =~ /1\.8/
  380      end
  381    end
  ...
  383    def test_key?
  384      with_or_without_default_proc do
  385:       assert_equal false, @cache.key?(:a)
  386:       @cache[:a] = 1
  387:       assert_equal true,  @cache.key?(:a)
  388      end
  389    end
  ...
  391    def test_value?
  392      with_or_without_default_proc do
  393:       assert_equal false, @cache.value?(1)
  394:       @cache[:a] = 1
  395:       assert_equal true,  @cache.value?(1)
  396      end
  397    end
  ...
  400      with_or_without_default_proc do |default_proc_set|
  401        assert_no_size_change do
  402:         assert_equal nil,   @cache.delete(:a)
  403        end
  404:       @cache[:a] = 1
  405        assert_size_change -1 do
  406:         assert_equal 1,     @cache.delete(:a)
  407        end
  408        assert_no_size_change do
  409:         assert_equal nil, @cache[:a] unless default_proc_set
  410  
  411:         assert_equal false, @cache.key?(:a)
  412:         assert_equal nil,   @cache.delete(:a)
  413        end
  414      end
  ...
  418      with_or_without_default_proc do
  419        assert_no_size_change do
  420:         assert_equal false, @cache.delete_pair(:a, 2)
  421:         assert_equal false, @cache.delete_pair(:a, nil)
  422        end
  423:       @cache[:a] = 1
  424        assert_no_size_change do
  425:         assert_equal false, @cache.delete_pair(:a, 2)
  426        end
  427        assert_size_change -1 do
  428:         assert_equal 1,     @cache[:a]
  429:         assert_equal true,  @cache.delete_pair(:a, 1)
  430:         assert_equal false, @cache.delete_pair(:a, 1)
  431:         assert_equal false, @cache.key?(:a)
  432        end
  433      end
  ...
  435  
  436    def test_default_proc
  437:     @cache = cache_with_default_proc(1)
  438      assert_no_size_change do
  439:       assert_equal false, @cache.key?(:a)
  440      end
  441      assert_size_change 1 do
  442:       assert_equal 1,     @cache[:a]
  443:       assert_equal true,  @cache.key?(:a)
  444      end
  445    end
  446  
  447    def test_falsy_default_proc
  448:     @cache = cache_with_default_proc(nil)
  449      assert_no_size_change do
  450:       assert_equal false, @cache.key?(:a)
  451      end
  452      assert_size_change 1 do
  453:       assert_equal nil,   @cache[:a]
  454:       assert_equal true,  @cache.key?(:a)
  455      end
  456    end
  ...
  459      with_or_without_default_proc do |default_proc_set|
  460        assert_no_size_change do
  461:         assert_equal 1,      @cache.fetch(:a, 1)
  462:         assert_equal(1,     (@cache.fetch(:a) {1}))
  463:         assert_equal false,  @cache.key?(:a)
  464  
  465:         assert_equal nil, @cache[:a] unless default_proc_set
  466        end
  467  
  468:       @cache[:a] = 1
  469        assert_no_size_change do
  470:         assert_equal(1, (@cache.fetch(:a) {flunk}))
  471        end
  472  
  473:       assert_raise(ThreadSafe::Cache::KEY_ERROR) do
  474:         @cache.fetch(:b)
  475        end
  476      end
  ...
  479    def test_falsy_fetch
  480      with_or_without_default_proc do
  481:       assert_equal false, @cache.key?(:a)
  482  
  483        assert_no_size_change do
  484:         assert_equal(nil,    @cache.fetch(:a, nil))
  485:         assert_equal(false,  @cache.fetch(:a, false))
  486:         assert_equal(nil,   (@cache.fetch(:a) {}))
  487:         assert_equal(false, (@cache.fetch(:a) {false}))
  488        end
  489  
  490:       @cache[:a] = nil
  491        assert_no_size_change do
  492:         assert_equal true, @cache.key?(:a)
  493:         assert_equal(nil, (@cache.fetch(:a) {flunk}))
  494        end
  495      end
  ...
  499      with_or_without_default_proc do
  500        r = lambda do
  501:         @cache.fetch(:a) { return 10 }
  502        end.call
  503  
  504        assert_no_size_change do
  505          assert_equal 10,    r
  506:         assert_equal false, @cache.key?(:a)
  507        end
  508      end
  ...
  510  
  511    def test_clear
  512:     @cache[:a] = 1
  513      assert_size_change -1 do
  514:       assert_equal @cache, @cache.clear
  515:       assert_equal false,  @cache.key?(:a)
  516:       assert_equal nil,    @cache[:a]
  517      end
  518    end
  519  
  520    def test_each_pair
  521:     @cache.each_pair {|k, v| flunk}
  522:     assert_equal(@cache, (@cache.each_pair {}))
  523:     @cache[:a] = 1
  524  
  525      h = {}
  526:     @cache.each_pair {|k, v| h[k] = v}
  527      assert_equal({:a => 1}, h)
  528  
  529:     @cache[:b] = 2
  530      h = {}
  531:     @cache.each_pair {|k, v| h[k] = v}
  532      assert_equal({:a => 1, :b => 2}, h)
  533    end
  534  
  535    def test_each_pair_iterator
  536:     @cache[:a] = 1
  537:     @cache[:b] = 2
  538      i = 0
  539:     r = @cache.each_pair do |k, v|
  540        if i == 0
  541          i += 1
  ...
  551  
  552    def test_each_pair_allows_modification
  553:     @cache[:a] = 1
  554:     @cache[:b] = 1
  555:     @cache[:c] = 1
  556  
  557      assert_nothing_raised do
  558        assert_size_change 1 do
  559:         @cache.each_pair do |k, v|
  560:           @cache[:z] = 1
  561          end
  562        end
  ...
  565  
  566    def test_keys
  567:     assert_equal [], @cache.keys
  568  
  569:     @cache[1] = 1
  570:     assert_equal [1], @cache.keys
  571  
  572:     @cache[2] = 2
  573:     assert_equal [1, 2], @cache.keys.sort
  574    end
  575  
  576    def test_values
  577:     assert_equal [], @cache.values
  578  
  579:     @cache[1] = 1
  580:     assert_equal [1], @cache.values
  581  
  582:     @cache[2] = 2
  583:     assert_equal [1, 2], @cache.values.sort
  584    end
  585  
  586    def test_each_key
  587:     assert_equal(@cache, (@cache.each_key {flunk}))
  588  
  589:     @cache[1] = 1
  590      arr = []
  591:     @cache.each_key {|k| arr << k}
  592      assert_equal [1], arr
  593  
  594:     @cache[2] = 2
  595      arr = []
  596:     @cache.each_key {|k| arr << k}
  597      assert_equal [1, 2], arr.sort
  598    end
  599  
  600    def test_each_value
  601:     assert_equal(@cache, (@cache.each_value {flunk}))
  602  
  603:     @cache[1] = 1
  604      arr = []
  605:     @cache.each_value {|k| arr << k}
  606      assert_equal [1], arr
  607  
  608:     @cache[2] = 2
  609      arr = []
  610:     @cache.each_value {|k| arr << k}
  611      assert_equal [1, 2], arr.sort
  612    end
  613  
  614    def test_empty
  615:     assert_equal true,  @cache.empty?
  616:     @cache[:a] = 1
  617:     assert_equal false, @cache.empty?
  618    end
  619  
  ...
  645  
  646    def test_size
  647:     assert_equal 0, @cache.size
  648:     @cache[:a] = 1
  649:     assert_equal 1, @cache.size
  650:     @cache[:b] = 1
  651:     assert_equal 2, @cache.size
  652:     @cache.delete(:a)
  653:     assert_equal 1, @cache.size
  654:     @cache.delete(:b)
  655:     assert_equal 0, @cache.size
  656    end
  657  
  658    def test_get_or_default
  659      with_or_without_default_proc do
  660:       assert_equal 1,     @cache.get_or_default(:a, 1)
  661:       assert_equal nil,   @cache.get_or_default(:a, nil)
  662:       assert_equal false, @cache.get_or_default(:a, false)
  663:       assert_equal false, @cache.key?(:a)
  664  
  665:       @cache[:a] = 1
  666:       assert_equal 1, @cache.get_or_default(:a, 2)
  667      end
  668    end
  ...
  670    def test_dup_clone
  671      [:dup, :clone].each do |meth|
  672:       cache = cache_with_default_proc(:default_value)
  673:       cache[:a] = 1
  674:       dupped = cache.send(meth)
  675        assert_equal 1, dupped[:a]
  676        assert_equal 1, dupped.size
  677:       assert_size_change 1, cache do
  678          assert_no_size_change dupped do
  679:           cache[:b] = 1
  680          end
  681        end
  682        assert_equal false, dupped.key?(:b)
  683:       assert_no_size_change cache do
  684          assert_size_change -1, dupped do
  685            dupped.delete(:a)
  ...
  687        end
  688        assert_equal false, dupped.key?(:a)
  689:       assert_equal true,  cache.key?(:a)
  690        # test default proc
  691:       assert_size_change 1, cache do
  692          assert_no_size_change dupped do
  693:           assert_equal :default_value, cache[:c]
  694            assert_equal false,          dupped.key?(:c)
  695          end
  696        end
  697:       assert_no_size_change cache do
  698          assert_size_change 1, dupped do
  699            assert_equal :default_value, dupped[:d]
  700:           assert_equal false,          cache.key?(:d)
  701          end
  702        end
  ...
  705  
  706    def test_is_unfreezable
  707:     assert_raise(NoMethodError) { @cache.freeze }
  708    end
  709  
  710    def test_marshal_dump_load
  711      assert_nothing_raised do
  712:       new_cache = Marshal.load(Marshal.dump(@cache))
  713:       assert_equal 0, new_cache.size
  714      end
  715:     @cache[:a] = 1
  716:     new_cache = Marshal.load(Marshal.dump(@cache))
  717:     assert_equal 1, @cache[:a]
  718:     assert_equal 1, new_cache.size
  719    end
  720  
  721    def test_marshal_dump_doesnt_work_with_default_proc
  722      assert_raise(TypeError) do
  723:       Marshal.dump(ThreadSafe::Cache.new {})
  724      end
  725    end
  ...
  728    def with_or_without_default_proc
  729      yield false
  730:     @cache = ThreadSafe::Cache.new {|h, k| h[k] = :default_value}
  731      yield true
  732    end
  733  
  734:   def cache_with_default_proc(default_value = 1)
  735:     ThreadSafe::Cache.new {|cache, k| cache[k] = default_value}
  736    end
  737  
  ...
  741  
  742    def assert_valid_options(options)
  743:     assert_nothing_raised { ThreadSafe::Cache.new(options) }
  744    end
  745  
  ...
  749  
  750    def assert_invalid_options(options)
  751:     assert_raise(ArgumentError) { ThreadSafe::Cache.new(options) }
  752    end
  753  
  754:   def assert_size_change(change, cache = @cache)
  755:     start = cache.size
  756      yield
  757:     assert_equal change, cache.size - start
  758    end
  759  
  760:   def assert_no_size_change(cache = @cache, &block)
  761:     assert_size_change(0, cache, &block)
  762    end
  763  
  764    def assert_handles_return_lambda(method, key, *args)
  765:     before_had_key   = @cache.key?(key)
  766:     before_had_value = before_had_key ? @cache[key] : nil
  767  
  768      returning_lambda = lambda do
  769:       @cache.send(method, key, *args) { return :direct_return }
  770      end
  771  
  772      assert_no_size_change do
  773        assert_equal(:direct_return,   returning_lambda.call)
  774:       assert_equal before_had_key,   @cache.key?(key)
  775:       assert_equal before_had_value, @cache[key] if before_had_value
  776      end
  777    end
  ...
  779    class TestException < Exception; end
  780    def assert_handles_exception(method, key, *args)
  781:     before_had_key   = @cache.key?(key)
  782:     before_had_value = before_had_key ? @cache[key] : nil
  783  
  784      assert_no_size_change do
  785        assert_raise(TestException) do
  786:         @cache.send(method, key, *args) { raise TestException, '' }
  787        end
  788:       assert_equal before_had_key,   @cache.key?(key)
  789:       assert_equal before_had_value, @cache[key] if before_had_value
  790      end
  791    end
  792  
  793    def assert_compute(key, expected_old_value, expected_result)
  794:     result = @cache.compute(:a) do |old_value|
  795        assert_equal expected_old_value, old_value
  796        yield
  ...
  800  
  801    def assert_merge_pair(key, value, expected_old_value, expected_result)
  802:     result = @cache.merge_pair(key, value) do |old_value|
  803        assert_equal expected_old_value, old_value
  804        yield
  ...
  808  
  809    def assert_collision_resistance(keys)
  810:     keys.each {|k| @cache[k] = k.key}
  811      10.times do |i|
  812        size = keys.size
  813        while i < size
  814          k = keys[i]
  815:         assert(k.key == @cache.delete(k) && !@cache.key?(k) && (@cache[k] = k.key; @cache[k] == k.key))
  816          i += 10
  817        end
  818      end
  819:     assert(keys.all? {|k| @cache[k] == k.key})
  820    end
  821  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/test/test_cache_loops.rb:
    6  Thread.abort_on_exception = true
    7  
    8: class TestCacheTorture < Test::Unit::TestCase # this is not run unless RUBY_VERSION =~ /1\.8/ || ENV['TRAVIS'] (see the end of the file)
    9    THREAD_COUNT  = 40
   10    KEY_COUNT     = (((2**13) - 2) * 0.75).to_i # get close to the doubling cliff
   11    LOW_KEY_COUNT = (((2**8 ) - 2) * 0.75).to_i # get close to the doubling cliff
   12  
   13:   INITIAL_VALUE_CACHE_SETUP = lambda do |options, keys|
   14:     cache         = ThreadSafe::Cache.new
   15      initial_value = options[:initial_value] || 0
   16:     keys.each {|key| cache[key] = initial_value}
   17:     cache
   18    end
   19:   ZERO_VALUE_CACHE_SETUP = lambda do |options, keys|
   20:     INITIAL_VALUE_CACHE_SETUP.call(options.merge(:initial_value => 0), keys)
   21    end
   22  
   ..
   26      :loop_count   => 1,
   27      :prelude      => '',
   28:     :cache_setup  => lambda {|options, keys| ThreadSafe::Cache.new}
   29    }
   30  
   ..
   34    def test_concurrency
   35      code = <<-RUBY_EVAL
   36:       cache[key]
   37:       cache[key] = key
   38:       cache[key]
   39:       cache.delete(key)
   40      RUBY_EVAL
   41      do_thread_loop(__method__, code)
   ..
   43  
   44    def test_put_if_absent
   45:     do_thread_loop(__method__, 'acc += 1 unless cache.put_if_absent(key, key)', :key_count => 100_000) do |result, cache, options, keys|
   46:       assert_standard_accumulator_test_result(result, cache, options, keys)
   47      end
   48    end
   49  
   50    def test_compute_if_absent
   51:     code = 'cache.compute_if_absent(key) { acc += 1; key }'
   52:     do_thread_loop(__method__, code) do |result, cache, options, keys|
   53:       assert_standard_accumulator_test_result(result, cache, options, keys)
   54      end
   55    end
   ..
   58      code = <<-RUBY_EVAL
   59        if key.even?
   60:         cache.compute_if_absent(key) { acc += 1; key }
   61        else
   62:         acc += 1 unless cache.put_if_absent(key, key)
   63        end
   64      RUBY_EVAL
   65:     do_thread_loop(__method__, code) do |result, cache, options, keys|
   66:       assert_standard_accumulator_test_result(result, cache, options, keys)
   67      end
   68    end
   ..
  131      prelude = 'change = (rand(2) == 1) ? 1 : -1'
  132      code = <<-RUBY_EVAL
  133:       v = cache[key]
  134:       acc += change if cache.replace_pair(key, v, v + change)
  135      RUBY_EVAL
  136:     do_thread_loop(__method__, code, :loop_count => 5, :prelude => prelude, :cache_setup => ZERO_VALUE_CACHE_SETUP) do |result, cache, options, keys|
  137        result_sum = sum(result)
  138:       assert_equal(sum(keys.map {|key| cache[key]}), result_sum)
  139:       assert_equal(sum(cache.values), result_sum)
  140:       assert_equal(options[:key_count], cache.size)
  141      end
  142    end
  143  
  144    def test_get_and_set_new
  145:     code = 'acc += 1 unless cache.get_and_set(key, key)'
  146:     do_thread_loop(__method__, code) do |result, cache, options, keys|
  147:       assert_standard_accumulator_test_result(result, cache, options, keys)
  148      end
  149    end
  150  
  151    def test_get_and_set_existing
  152:     code = 'acc += 1 if cache.get_and_set(key, key) == -1'
  153:     do_thread_loop(__method__, code, :cache_setup => INITIAL_VALUE_CACHE_SETUP, :initial_value => -1) do |result, cache, options, keys|
  154:       assert_standard_accumulator_test_result(result, cache, options, keys)
  155      end
  156    end
  ...
  161      code = <<-RUBY_EVAL
  162        if on_present
  163:         cache.compute_if_present(key) {|old_value| acc += 1; old_value + 1}
  164        else
  165:         cache.compute_if_absent(key)  { acc += 1; 1 }
  166        end
  167      RUBY_EVAL
  168:     do_thread_loop(__method__, code, {:loop_count => 5, :prelude => prelude}.merge(opts)) do |result, cache, options, keys|
  169        stored_sum       = 0
  170        stored_key_count = 0
  171        keys.each do |k|
  172:         if value = cache[k]
  173            stored_sum += value
  174            stored_key_count += 1
  ...
  176        end
  177        assert_equal(stored_sum, sum(result))
  178:       assert_equal(stored_key_count, cache.size)
  179      end
  180    end
  ...
  184      code = <<-RUBY_EVAL
  185        if do_add
  186:         acc += 1 unless cache.put_if_absent(key, key)
  187        else
  188:         acc -= 1 if cache.delete_pair(key, key)
  189        end
  190      RUBY_EVAL
  191:     do_thread_loop(__method__, code, {:loop_count => 5, :prelude => prelude}.merge(opts)) do |result, cache, options, keys|
  192:       assert_all_key_mappings_exist(cache, keys, false)
  193:       assert_equal(cache.size, sum(result))
  194      end
  195    end
  ...
  198      prelude = 'do_add = rand(2) == 1'
  199      code = <<-RUBY_EVAL
  200:       cache.compute(key) do |old_value|
  201          if do_add
  202            acc += 1 unless old_value
  ...
  208        end
  209      RUBY_EVAL
  210:     do_thread_loop(__method__, code, {:loop_count => 5, :prelude => prelude}.merge(opts)) do |result, cache, options, keys|
  211:       assert_all_key_mappings_exist(cache, keys, false)
  212:       assert_equal(cache.size, sum(result))
  213      end
  214    end
  ...
  218      code = <<-RUBY_EVAL
  219        if do_add
  220:         cache.compute_if_absent(key)  { acc += 1; key }
  221        else
  222:         cache.compute_if_present(key) { acc -= 1; nil }
  223        end
  224      RUBY_EVAL
  225:     do_thread_loop(__method__, code, {:loop_count => 5, :prelude => prelude}.merge(opts)) do |result, cache, options, keys|
  226:       assert_all_key_mappings_exist(cache, keys, false)
  227:       assert_equal(cache.size, sum(result))
  228      end
  229    end
  ...
  233      code = <<-RUBY_EVAL
  234        if do_add
  235:         acc += 1 unless cache.put_if_absent(key, key)
  236        else
  237:         acc -= 1 if cache.delete(key)
  238        end
  239      RUBY_EVAL
  240:     do_thread_loop(__method__, code, {:loop_count => 5, :prelude => prelude}.merge(opts)) do |result, cache, options, keys|
  241:       assert_all_key_mappings_exist(cache, keys, false)
  242:       assert_equal(cache.size, sum(result))
  243      end
  244    end
  ...
  246    def count_up(opts = {})
  247      code = <<-RUBY_EVAL
  248:       v = cache[key]
  249:       acc += 1 if cache.replace_pair(key, v, v + 1)
  250      RUBY_EVAL
  251:     do_thread_loop(__method__, code, {:loop_count => 5, :cache_setup => ZERO_VALUE_CACHE_SETUP}.merge(opts)) do |result, cache, options, keys|
  252:       assert_count_up(result, cache, options, keys)
  253      end
  254    end
  ...
  256    def count_up_via_compute(opts = {})
  257      code = <<-RUBY_EVAL
  258:       cache.compute(key) do |old_value|
  259          acc += 1
  260          old_value ? old_value + 1 : 1
  261        end
  262      RUBY_EVAL
  263:     do_thread_loop(__method__, code, {:loop_count => 5}.merge(opts)) do |result, cache, options, keys|
  264:       assert_count_up(result, cache, options, keys)
  265        result.inject(nil) do |previous_value, next_value| # since compute guarantees atomicity all count ups should be equal
  266          assert_equal previous_value, next_value if previous_value
  ...
  272    def count_up_via_merge_pair(opts = {})
  273      code = <<-RUBY_EVAL
  274:       cache.merge_pair(key, 1) {|old_value| old_value + 1}
  275      RUBY_EVAL
  276:     do_thread_loop(__method__, code, {:loop_count => 5}.merge(opts)) do |result, cache, options, keys|
  277        all_match      = true
  278        expected_value = options[:loop_count] * options[:thread_count]
  279        keys.each do |key|
  280:         if expected_value != (value = cache[key])
  281            all_match = false
  282            break
  ...
  289    def add_remove_to_zero(opts = {})
  290      code = <<-RUBY_EVAL
  291:       acc += 1 unless cache.put_if_absent(key, key)
  292:       acc -= 1 if cache.delete_pair(key, key)
  293      RUBY_EVAL
  294:     do_thread_loop(__method__, code, {:loop_count => 5}.merge(opts)) do |result, cache, options, keys|
  295:       assert_all_key_mappings_exist(cache, keys, false)
  296:       assert_equal(cache.size, sum(result))
  297      end
  298    end
  ...
  300    def add_remove_to_zero_via_merge_pair(opts = {})
  301      code = <<-RUBY_EVAL
  302:       acc += (cache.merge_pair(key, key) {}) ? 1 : -1
  303      RUBY_EVAL
  304:     do_thread_loop(__method__, code, {:loop_count => 5}.merge(opts)) do |result, cache, options, keys|
  305:       assert_all_key_mappings_exist(cache, keys, false)
  306:       assert_equal(cache.size, sum(result))
  307      end
  308    end
  ...
  324  
  325    def run_thread_loop(meth, keys, options)
  326:     cache   = options[:cache_setup].call(options, keys)
  327      barrier = ThreadSafe::Test::Barrier.new(options[:thread_count])
  328      result = (1..options[:thread_count]).map do
  329        Thread.new do
  330:         setup_sync_and_start_loop(meth, cache, keys, barrier, options[:loop_count])
  331        end
  332      end.map(&:value)
  333:     yield result, cache, options, keys if block_given?
  334    end
  335  
  336:   def setup_sync_and_start_loop(meth, cache, keys, barrier, loop_count)
  337      my_keys = keys.shuffle
  338      barrier.await
  339      if my_keys.size == 1
  340        key = my_keys.first
  341:       send("#{meth}_single_key", cache, key, loop_count)
  342      else
  343:       send("#{meth}_multiple_keys", cache, my_keys, loop_count)
  344      end
  345    end
  ...
  350      # looping is splitted into the "loop methods" to trigger the JIT
  351      self.class.class_eval <<-RUBY_EVAL, __FILE__, __LINE__ + 1
  352:       def #{inner_meth_name}_multiple_keys(cache, keys, i, length, acc)
  353          #{prelude}
  354          target = i + length
  ...
  363  
  364      self.class.class_eval <<-RUBY_EVAL, __FILE__, __LINE__ + 1
  365:       def #{inner_meth_name}_single_key(cache, key, i, length, acc)
  366          #{prelude}
  367          target = i + length
  ...
  375  
  376      self.class.class_eval <<-RUBY_EVAL, __FILE__, __LINE__ + 1
  377:       def #{outer_meth_name}_multiple_keys(cache, keys, loop_count)
  378          total_length = keys.size
  379          acc = 0
  ...
  382            i = 0
  383            pre_loop_inc = total_length % inc
  384:           acc = #{inner_meth_name}_multiple_keys(cache, keys, i, pre_loop_inc, acc)
  385            i += pre_loop_inc
  386            while i < total_length
  387:             acc = #{inner_meth_name}_multiple_keys(cache, keys, i, inc, acc)
  388              i += inc
  389            end
  ...
  394  
  395      self.class.class_eval <<-RUBY_EVAL, __FILE__, __LINE__ + 1
  396:       def #{outer_meth_name}_single_key(cache, key, loop_count)
  397          acc = 0
  398          i   = 0
  ...
  400  
  401          pre_loop_inc = loop_count % inc
  402:         acc          = #{inner_meth_name}_single_key(cache, key, i, pre_loop_inc, acc)
  403          i += pre_loop_inc
  404  
  405          while i < loop_count
  406:           acc = #{inner_meth_name}_single_key(cache, key, i, inc, acc)
  407            i += inc
  408          end
  ...
  427    end
  428  
  429:   def assert_standard_accumulator_test_result(result, cache, options, keys)
  430:     assert_all_key_mappings_exist(cache, keys)
  431      assert_equal(options[:key_count], sum(result))
  432:     assert_equal(options[:key_count], cache.size)
  433    end
  434  
  435:   def assert_all_key_mappings_exist(cache, keys, all_must_exist = true)
  436      keys.each do |key|
  437:       if (value = cache[key]) || all_must_exist
  438          assert_equal key, value unless key == value # don't do a bazzilion assertions unless necessary
  439        end
  ...
  441    end
  442  
  443:   def assert_count_up(result, cache, options, keys)
  444      keys.each do |key|
  445:       unless value = cache[key]
  446          assert value
  447        end
  448      end
  449:     assert_equal(sum(cache.values), sum(result))
  450:     assert_equal(options[:key_count], cache.size)
  451    end
  452  end unless RUBY_VERSION =~ /1\.8/ || ENV['TRAVIS']

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/test/test_helper.rb:
   21  
   22      def test_no_unsafe_version_of_chmv8_is_used
   23:       require 'thread_safe/jruby_cache_backend' # make sure the jar has been loaded
   24:       assert !Java::OrgJrubyExtThread_safe::JRubyCacheBackendLibrary::JRubyCacheBackend::CAN_USE_UNSAFE_CHM
   25      end
   26    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/thread_safe-0.3.3/thread_safe.gemspec:
   11  
   12    gem.files         = `git ls-files`.split($\)
   13:   gem.files        += ['lib/thread_safe/jruby_cache_backend.jar'] if defined?(JRUBY_VERSION)
   14    gem.platform      = 'java' if defined?(JRUBY_VERSION)
   15    gem.executables   = gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tilt-1.4.1/lib/tilt.rb:
  112    end
  113  
  114:   # Extremely simple template cache implementation. Calling applications
  115:   # create a Tilt::Cache instance and use #fetch with any set of hashable
  116    # arguments (such as those to Tilt.new):
  117:   #   cache = Tilt::Cache.new
  118:   #   cache.fetch(path, line, options) { Tilt.new(path, line, options) }
  119    #
  120    # Subsequent invocations return the already loaded template object.
  121:   class Cache
  122      def initialize
  123:       @cache = {}
  124      end
  125  
  126      def fetch(*key)
  127:       @cache[key] ||= yield
  128      end
  129  
  130      def clear
  131:       @cache = {}
  132      end
  133    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tilt-1.4.1/test/tilt_cache_test.rb:
    2  require 'tilt'
    3  
    4: class TiltCacheTest < Test::Unit::TestCase
    5:   setup { @cache = Tilt::Cache.new }
    6  
    7    test "caching with single simple argument to #fetch" do
    8      template = nil
    9:     result = @cache.fetch('hello') { template = Tilt::StringTemplate.new {''} }
   10      assert_same template, result
   11:     result = @cache.fetch('hello') { fail 'should be cached' }
   12      assert_same template, result
   13    end
   ..
   15    test "caching with multiple complex arguments to #fetch" do
   16      template = nil
   17:     result = @cache.fetch('hello', {:foo => 'bar', :baz => 'bizzle'}) { template = Tilt::StringTemplate.new {''} }
   18      assert_same template, result
   19:     result = @cache.fetch('hello', {:foo => 'bar', :baz => 'bizzle'}) { fail 'should be cached' }
   20      assert_same template, result
   21    end
   22  
   23:   test "clearing the cache with #clear" do
   24      template, other = nil
   25:     result = @cache.fetch('hello') { template = Tilt::StringTemplate.new {''} }
   26      assert_same template, result
   27  
   28:     @cache.clear
   29:     result = @cache.fetch('hello') { other = Tilt::StringTemplate.new {''} }
   30      assert_same other, result
   31    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tilt-1.4.1/tilt.gemspec:
   55      test/tilt_blueclothtemplate_test.rb
   56      test/tilt_buildertemplate_test.rb
   57:     test/tilt_cache_test.rb
   58      test/tilt_coffeescripttemplate_test.rb
   59      test/tilt_compilesite_test.rb

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tinder-1.9.3/lib/tinder/room.rb:
  103      end
  104  
  105:     # return the user with the given id; if it isn't in our room cache,
  106      # do a request to get it
  107      def user(id)
  108        if id
  109:         cached_user = users.detect {|u| u[:id] == id }
  110:         user = cached_user || fetch_user(id)
  111          self.users << user
  112          user

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tinder-1.9.3/spec/tinder/room_spec.rb:
  277      end
  278  
  279:     it "looks up user if not already in room's cache" do
  280        @room.should_receive(:fetch_user).with(3).
  281          and_return(@not_current_user)
  ...
  283      end
  284  
  285:     it "pulls user from room's cache if user in participant list" do
  286        @room.should_receive(:fetch_user).never
  287        user = @room.user(1)
  288      end
  289  
  290:     it "adds user to cache after first lookup" do
  291        @room.should_receive(:fetch_user).with(3).at_most(:once).
  292          and_return(@not_current_user)
  ...
  317  
  318    describe "users" do
  319:     it "returns current users if cache has not been initialized yet" do
  320        @room.should_receive(:current_users).and_return(:the_whole_spittoon)
  321        @room.users.should == :the_whole_spittoon
  322      end
  323  
  324:     it "returns current users plus any added cached users" do
  325        @room.should_receive(:current_users).and_return([:mia_cuttlefish])
  326        @room.users << :guy_wearing_new_mexico_as_a_hat

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tins-0.13.1/lib/tins/memoize.rb:
    3  module Tins
    4    module Memoize
    5:     module CacheMethods
    6:       # Return the cache object.
    7:       def __memoize_cache__
    8:         @__memoize_cache__ ||= {}
    9        end
   10  
   11:       # Clear cached values for all methods/functions.
   12:       def memoize_cache_clear
   13:          __memoize_cache__.clear
   14          self
   15        end
   ..
   23          method_ids.extend(ExtractLastArgumentOptions)
   24          method_ids, opts = method_ids.extract_last_argument_options
   25:         include CacheMethods
   26          method_ids.each do |method_id|
   27            method_id = method_id.to_s.to_sym
   28            orig_method = instance_method(method_id)
   29            __send__(:define_method, method_id) do |*args|
   30:             mc = __memoize_cache__
   31              if mc.key?(method_id) and result = mc[method_id][args]
   32                result
   33              else
   34                (mc[method_id] ||= {})[args] = result = orig_method.bind(self).call(*args)
   35:               $DEBUG and warn "#{self.class} cached method #{method_id}(#{args.inspect unless args.empty?}) = #{result.inspect} [#{__id__}]"
   36                opts[:freeze] and result.freeze
   37              end
   ..
   41        end
   42  
   43:       include CacheMethods
   44  
   45        # Automatically memoize calls of the functions +function_ids+. The
   ..
   49          function_ids.extend(ExtractLastArgumentOptions)
   50          function_ids, opts = function_ids.extract_last_argument_options
   51:         mc = __memoize_cache__
   52          function_ids.each do |method_id|
   53            method_id = method_id.to_s.to_sym
   ..
   59                (mc[method_id] ||= {})[args] = result = orig_method.bind(self).call(*args)
   60                opts[:freeze] and result.freeze
   61:               $DEBUG and warn "#{self.class} cached function #{method_id}(#{args.inspect unless args.empty?}) = #{result.inspect}"
   62              end
   63              result

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tins-0.13.1/tests/memoize_test.rb:
   18      end
   19  
   20:     def test_method_cache
   21        fb1 = FooBar.new
   22        fb2 = FooBar.new
   23:       assert_equal true, fb1.__memoize_cache__.empty?
   24:       assert_equal true, fb2.__memoize_cache__.empty?
   25        assert_equal 1, fb1.foo(1, 2)
   26        assert_equal 2, fb2.foo(1, 2)
   ..
   29        assert_equal 1, fb1.foo(1, 2)
   30        assert_equal 2, fb2.foo(1, 2)
   31:       fb1.memoize_cache_clear
   32:       fb2.memoize_cache_clear
   33:       assert_equal true, fb1.__memoize_cache__.empty?
   34:       assert_equal true, fb2.__memoize_cache__.empty?
   35        assert_equal 5, fb1.foo(1, 2)
   36        assert_equal 6, fb2.foo(1, 2)
   37        assert_equal 5, fb1.foo(1, 2)
   38        assert_equal 6, fb2.foo(1, 2)
   39:       assert_equal false, fb1.__memoize_cache__.empty?
   40:       assert_equal false, fb2.__memoize_cache__.empty?
   41      end
   42  
   43:     def test_function_cache
   44        fb1 = FooBar.new
   45        fb2 = FooBar.new
   ..
   50        assert_equal 1, fb1.bar(1, 2)
   51        assert_equal 1, fb2.bar(1, 2)
   52:       FooBar.memoize_cache_clear
   53        assert_equal 3, fb1.bar(1, 2)
   54        assert_equal 3, fb2.bar(1, 2)
   55:       assert_equal false, FooBar.__memoize_cache__.empty?
   56      end
   57    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/examples/lambda_calculus/arithmetic.rb:
    8    def _nt_expression
    9      start_index = index
   10:     cached = node_cache[:expression][index]
   11:     if cached
   12:       @index = cached.interval.end
   13:       return cached
   14      end
   15      
   ..
   28      end
   29      
   30:     node_cache[:expression][start_index] = r0
   31      
   32      return r0
   ..
   57    def _nt_comparative
   58      start_index = index
   59:     cached = node_cache[:comparative][index]
   60:     if cached
   61:       @index = cached.interval.end
   62:       return cached
   63      end
   64      
   ..
   90      end
   91      
   92:     node_cache[:comparative][start_index] = r0
   93      
   94      return r0
   ..
  103    def _nt_equality_op
  104      start_index = index
  105:     cached = node_cache[:equality_op][index]
  106:     if cached
  107:       @index = cached.interval.end
  108:       return cached
  109      end
  110      
  111      r0 = parse_terminal('==', SyntaxNode, EqualityOp0)
  112      
  113:     node_cache[:equality_op][start_index] = r0
  114      
  115      return r0
  ...
  140    def _nt_additive
  141      start_index = index
  142:     cached = node_cache[:additive][index]
  143:     if cached
  144:       @index = cached.interval.end
  145:       return cached
  146      end
  147      
  ...
  185      end
  186      
  187:     node_cache[:additive][start_index] = r0
  188      
  189      return r0
  ...
  204    def _nt_additive_op
  205      start_index = index
  206:     cached = node_cache[:additive_op][index]
  207:     if cached
  208:       @index = cached.interval.end
  209:       return cached
  210      end
  211      
  ...
  224      end
  225      
  226:     node_cache[:additive_op][start_index] = r0
  227      
  228      return r0
  ...
  253    def _nt_multitive
  254      start_index = index
  255:     cached = node_cache[:multitive][index]
  256:     if cached
  257:       @index = cached.interval.end
  258:       return cached
  259      end
  260      
  ...
  298      end
  299      
  300:     node_cache[:multitive][start_index] = r0
  301      
  302      return r0
  ...
  317    def _nt_multitive_op
  318      start_index = index
  319:     cached = node_cache[:multitive_op][index]
  320:     if cached
  321:       @index = cached.interval.end
  322:       return cached
  323      end
  324      
  ...
  337      end
  338      
  339:     node_cache[:multitive_op][start_index] = r0
  340      
  341      return r0
  ...
  365    def _nt_primary
  366      start_index = index
  367:     cached = node_cache[:primary][index]
  368:     if cached
  369:       @index = cached.interval.end
  370:       return cached
  371      end
  372      
  ...
  416      end
  417      
  418:     node_cache[:primary][start_index] = r0
  419      
  420      return r0
  ...
  433    def _nt_variable
  434      start_index = index
  435:     cached = node_cache[:variable][index]
  436:     if cached
  437:       @index = cached.interval.end
  438:       return cached
  439      end
  440      
  ...
  456      end
  457      
  458:     node_cache[:variable][start_index] = r0
  459      
  460      return r0
  ...
  472    def _nt_number
  473      start_index = index
  474:     cached = node_cache[:number][index]
  475:     if cached
  476:       @index = cached.interval.end
  477:       return cached
  478      end
  479      
  ...
  516      end
  517      
  518:     node_cache[:number][start_index] = r0
  519      
  520      return r0
  ...
  523    def _nt_space
  524      start_index = index
  525:     cached = node_cache[:space][index]
  526:     if cached
  527:       @index = cached.interval.end
  528:       return cached
  529      end
  530      
  ...
  540      r0 = SyntaxNode.new(input, i0...index, s0)
  541      
  542:     node_cache[:space][start_index] = r0
  543      
  544      return r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/examples/lambda_calculus/lambda_calculus.rb:
   45    def _nt_program
   46      start_index = index
   47:     cached = node_cache[:program][index]
   48:     if cached
   49:       @index = cached.interval.end
   50:       return cached
   51      end
   52      
   ..
   93      end
   94      
   95:     node_cache[:program][start_index] = r0
   96      
   97      return r0
   ..
  100    def _nt_expression
  101      start_index = index
  102:     cached = node_cache[:expression][index]
  103:     if cached
  104:       @index = cached.interval.end
  105:       return cached
  106      end
  107      
  ...
  135      end
  136      
  137:     node_cache[:expression][start_index] = r0
  138      
  139      return r0
  ...
  166    def _nt_definition
  167      start_index = index
  168:     cached = node_cache[:definition][index]
  169:     if cached
  170:       @index = cached.interval.end
  171:       return cached
  172      end
  173      
  ...
  200      end
  201      
  202:     node_cache[:definition][start_index] = r0
  203      
  204      return r0
  ...
  255    def _nt_conditional
  256      start_index = index
  257:     cached = node_cache[:conditional][index]
  258:     if cached
  259:       @index = cached.interval.end
  260:       return cached
  261      end
  262      
  ...
  321      end
  322      
  323:     node_cache[:conditional][start_index] = r0
  324      
  325      return r0
  ...
  328    def _nt_primary
  329      start_index = index
  330:     cached = node_cache[:primary][index]
  331:     if cached
  332:       @index = cached.interval.end
  333:       return cached
  334      end
  335      
  ...
  348      end
  349      
  350:     node_cache[:primary][start_index] = r0
  351      
  352      return r0
  ...
  387    def _nt_application
  388      start_index = index
  389:     cached = node_cache[:application][index]
  390:     if cached
  391:       @index = cached.interval.end
  392:       return cached
  393      end
  394      
  ...
  413      end
  414      
  415:     node_cache[:application][start_index] = r0
  416      
  417      return r0
  ...
  420    def _nt_operator
  421      start_index = index
  422:     cached = node_cache[:operator][index]
  423:     if cached
  424:       @index = cached.interval.end
  425:       return cached
  426      end
  427      
  ...
  440      end
  441      
  442:     node_cache[:operator][start_index] = r0
  443      
  444      return r0
  ...
  447    def _nt_non_application
  448      start_index = index
  449:     cached = node_cache[:non_application][index]
  450:     if cached
  451:       @index = cached.interval.end
  452:       return cached
  453      end
  454      
  ...
  467      end
  468      
  469:     node_cache[:non_application][start_index] = r0
  470      
  471      return r0
  ...
  512    def _nt_function
  513      start_index = index
  514:     cached = node_cache[:function][index]
  515:     if cached
  516:       @index = cached.interval.end
  517:       return cached
  518      end
  519      
  ...
  546      end
  547      
  548:     node_cache[:function][start_index] = r0
  549      
  550      return r0
  ...
  566    def _nt_variable
  567      start_index = index
  568:     cached = node_cache[:variable][index]
  569:     if cached
  570:       @index = cached.interval.end
  571:       return cached
  572      end
  573      
  ...
  595      end
  596      
  597:     node_cache[:variable][start_index] = r0
  598      
  599      return r0
  ...
  605    def _nt_keyword
  606      start_index = index
  607:     cached = node_cache[:keyword][index]
  608:     if cached
  609:       @index = cached.interval.end
  610:       return cached
  611      end
  612      
  ...
  645      end
  646      
  647:     node_cache[:keyword][start_index] = r0
  648      
  649      return r0
  ...
  655    def _nt_non_space_char
  656      start_index = index
  657:     cached = node_cache[:non_space_char][index]
  658:     if cached
  659:       @index = cached.interval.end
  660:       return cached
  661      end
  662      
  ...
  683      end
  684      
  685:     node_cache[:non_space_char][start_index] = r0
  686      
  687      return r0
  ...
  690    def _nt_space
  691      start_index = index
  692:     cached = node_cache[:space][index]
  693:     if cached
  694:       @index = cached.interval.end
  695:       return cached
  696      end
  697      
  ...
  707      r0 = SyntaxNode.new(input, i0...index, s0)
  708      
  709:     node_cache[:space][start_index] = r0
  710      
  711      return r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/lib/treetop/compiler/metagrammar.rb:
   43        def _nt_treetop_file
   44          start_index = index
   45:         if node_cache[:treetop_file].has_key?(index)
   46:           cached = node_cache[:treetop_file][index]
   47:           if cached
   48:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
   49:             @index = cached.interval.end
   50            end
   51:           return cached
   52          end
   53  
   ..
  113          end
  114  
  115:         node_cache[:treetop_file][start_index] = r0
  116  
  117          r0
  ...
  127        def _nt_require_statement
  128          start_index = index
  129:         if node_cache[:require_statement].has_key?(index)
  130:           cached = node_cache[:require_statement][index]
  131:           if cached
  132:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  133:             @index = cached.interval.end
  134            end
  135:           return cached
  136          end
  137  
  ...
  217          end
  218  
  219:         node_cache[:require_statement][start_index] = r0
  220  
  221          r0
  ...
  224        def _nt_module_or_grammar
  225          start_index = index
  226:         if node_cache[:module_or_grammar].has_key?(index)
  227:           cached = node_cache[:module_or_grammar][index]
  228:           if cached
  229:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  230:             @index = cached.interval.end
  231            end
  232:           return cached
  233          end
  234  
  ...
  247          end
  248  
  249:         node_cache[:module_or_grammar][start_index] = r0
  250  
  251          r0
  ...
  305        def _nt_module_declaration
  306          start_index = index
  307:         if node_cache[:module_declaration].has_key?(index)
  308:           cached = node_cache[:module_declaration][index]
  309:           if cached
  310:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  311:             @index = cached.interval.end
  312            end
  313:           return cached
  314          end
  315  
  ...
  469          end
  470  
  471:         node_cache[:module_declaration][start_index] = r0
  472  
  473          r0
  ...
  501        def _nt_grammar
  502          start_index = index
  503:         if node_cache[:grammar].has_key?(index)
  504:           cached = node_cache[:grammar][index]
  505:           if cached
  506:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  507:             @index = cached.interval.end
  508            end
  509:           return cached
  510          end
  511  
  ...
  590          end
  591  
  592:         node_cache[:grammar][start_index] = r0
  593  
  594          r0
  ...
  600        def _nt_grammar_name
  601          start_index = index
  602:         if node_cache[:grammar_name].has_key?(index)
  603:           cached = node_cache[:grammar_name][index]
  604:           if cached
  605:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  606:             @index = cached.interval.end
  607            end
  608:           return cached
  609          end
  610  
  ...
  638          end
  639  
  640:         node_cache[:grammar_name][start_index] = r0
  641  
  642          r0
  ...
  680        def _nt_declaration_sequence
  681          start_index = index
  682:         if node_cache[:declaration_sequence].has_key?(index)
  683:           cached = node_cache[:declaration_sequence][index]
  684:           if cached
  685:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  686:             @index = cached.interval.end
  687            end
  688:           return cached
  689          end
  690  
  ...
  746          end
  747  
  748:         node_cache[:declaration_sequence][start_index] = r0
  749  
  750          r0
  ...
  753        def _nt_declaration
  754          start_index = index
  755:         if node_cache[:declaration].has_key?(index)
  756:           cached = node_cache[:declaration][index]
  757:           if cached
  758:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  759:             @index = cached.interval.end
  760            end
  761:           return cached
  762          end
  763  
  ...
  776          end
  777  
  778:         node_cache[:declaration][start_index] = r0
  779  
  780          r0
  ...
  796        def _nt_include_declaration
  797          start_index = index
  798:         if node_cache[:include_declaration].has_key?(index)
  799:           cached = node_cache[:include_declaration][index]
  800:           if cached
  801:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  802:             @index = cached.interval.end
  803            end
  804:           return cached
  805          end
  806  
  ...
  867          end
  868  
  869:         node_cache[:include_declaration][start_index] = r0
  870  
  871          r0
  ...
  903        def _nt_parsing_rule
  904          start_index = index
  905:         if node_cache[:parsing_rule].has_key?(index)
  906:           cached = node_cache[:parsing_rule][index]
  907:           if cached
  908:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
  909:             @index = cached.interval.end
  910            end
  911:           return cached
  912          end
  913  
  ...
  987          end
  988  
  989:         node_cache[:parsing_rule][start_index] = r0
  990  
  991          r0
  ...
  994        def _nt_parsing_expression
  995          start_index = index
  996:         if node_cache[:parsing_expression].has_key?(index)
  997:           cached = node_cache[:parsing_expression][index]
  998:           if cached
  999:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1000:             @index = cached.interval.end
 1001            end
 1002:           return cached
 1003          end
 1004  
 ....
 1022          end
 1023  
 1024:         node_cache[:parsing_expression][start_index] = r0
 1025  
 1026          r0
 ....
 1059        def _nt_choice
 1060          start_index = index
 1061:         if node_cache[:choice].has_key?(index)
 1062:           cached = node_cache[:choice][index]
 1063:           if cached
 1064:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1065:             @index = cached.interval.end
 1066            end
 1067:           return cached
 1068          end
 1069  
 ....
 1135          end
 1136  
 1137:         node_cache[:choice][start_index] = r0
 1138  
 1139          r0
 ....
 1172        def _nt_sequence
 1173          start_index = index
 1174:         if node_cache[:sequence].has_key?(index)
 1175:           cached = node_cache[:sequence][index]
 1176:           if cached
 1177:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1178:             @index = cached.interval.end
 1179            end
 1180:           return cached
 1181          end
 1182  
 ....
 1197          end
 1198  
 1199:         node_cache[:sequence][start_index] = r0
 1200  
 1201          r0
 ....
 1204        def _nt_sequence_body
 1205          start_index = index
 1206:         if node_cache[:sequence_body].has_key?(index)
 1207:           cached = node_cache[:sequence_body][index]
 1208:           if cached
 1209:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1210:             @index = cached.interval.end
 1211            end
 1212:           return cached
 1213          end
 1214  
 ....
 1227          end
 1228  
 1229:         node_cache[:sequence_body][start_index] = r0
 1230  
 1231          r0
 ....
 1260        def _nt_variable_length_sequence_body
 1261          start_index = index
 1262:         if node_cache[:variable_length_sequence_body].has_key?(index)
 1263:           cached = node_cache[:variable_length_sequence_body][index]
 1264:           if cached
 1265:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1266:             @index = cached.interval.end
 1267            end
 1268:           return cached
 1269          end
 1270  
 ....
 1312          end
 1313  
 1314:         node_cache[:variable_length_sequence_body][start_index] = r0
 1315  
 1316          r0
 ....
 1329        def _nt_labeled_expression_sequence_body
 1330          start_index = index
 1331:         if node_cache[:labeled_expression_sequence_body].has_key?(index)
 1332:           cached = node_cache[:labeled_expression_sequence_body][index]
 1333:           if cached
 1334:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1335:             @index = cached.interval.end
 1336            end
 1337:           return cached
 1338          end
 1339  
 ....
 1341          r0.extend(LabeledExpressionSequenceBody0)
 1342  
 1343:         node_cache[:labeled_expression_sequence_body][start_index] = r0
 1344  
 1345          r0
 ....
 1348        def _nt_alternative
 1349          start_index = index
 1350:         if node_cache[:alternative].has_key?(index)
 1351:           cached = node_cache[:alternative][index]
 1352:           if cached
 1353:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1354:             @index = cached.interval.end
 1355            end
 1356:           return cached
 1357          end
 1358  
 ....
 1371          end
 1372  
 1373:         node_cache[:alternative][start_index] = r0
 1374  
 1375          r0
 ....
 1492        def _nt_primary
 1493          start_index = index
 1494:         if node_cache[:primary].has_key?(index)
 1495:           cached = node_cache[:primary][index]
 1496:           if cached
 1497:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1498:             @index = cached.interval.end
 1499            end
 1500:           return cached
 1501          end
 1502  
 ....
 1594          end
 1595  
 1596:         node_cache[:primary][start_index] = r0
 1597  
 1598          r0
 ....
 1601        def _nt_optionally_labeled_sequence_primary
 1602          start_index = index
 1603:         if node_cache[:optionally_labeled_sequence_primary].has_key?(index)
 1604:           cached = node_cache[:optionally_labeled_sequence_primary][index]
 1605:           if cached
 1606:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1607:             @index = cached.interval.end
 1608            end
 1609:           return cached
 1610          end
 1611  
 ....
 1624          end
 1625  
 1626:         node_cache[:optionally_labeled_sequence_primary][start_index] = r0
 1627  
 1628          r0
 ....
 1655        def _nt_labeled_sequence_primary
 1656          start_index = index
 1657:         if node_cache[:labeled_sequence_primary].has_key?(index)
 1658:           cached = node_cache[:labeled_sequence_primary][index]
 1659:           if cached
 1660:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1661:             @index = cached.interval.end
 1662            end
 1663:           return cached
 1664          end
 1665  
 ....
 1680          end
 1681  
 1682:         node_cache[:labeled_sequence_primary][start_index] = r0
 1683  
 1684          r0
 ....
 1715        def _nt_unlabeled_sequence_primary
 1716          start_index = index
 1717:         if node_cache[:unlabeled_sequence_primary].has_key?(index)
 1718:           cached = node_cache[:unlabeled_sequence_primary][index]
 1719:           if cached
 1720:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1721:             @index = cached.interval.end
 1722            end
 1723:           return cached
 1724          end
 1725  
 ....
 1740          end
 1741  
 1742:         node_cache[:unlabeled_sequence_primary][start_index] = r0
 1743  
 1744          r0
 ....
 1747        def _nt_label
 1748          start_index = index
 1749:         if node_cache[:label].has_key?(index)
 1750:           cached = node_cache[:label][index]
 1751:           if cached
 1752:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1753:             @index = cached.interval.end
 1754            end
 1755:           return cached
 1756          end
 1757  
 ....
 1770          end
 1771  
 1772:         node_cache[:label][start_index] = r0
 1773  
 1774          r0
 ....
 1793        def _nt_named_label
 1794          start_index = index
 1795:         if node_cache[:named_label].has_key?(index)
 1796:           cached = node_cache[:named_label][index]
 1797:           if cached
 1798:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1799:             @index = cached.interval.end
 1800            end
 1801:           return cached
 1802          end
 1803  
 ....
 1846          end
 1847  
 1848:         node_cache[:named_label][start_index] = r0
 1849  
 1850          r0
 ....
 1859        def _nt_null_label
 1860          start_index = index
 1861:         if node_cache[:null_label].has_key?(index)
 1862:           cached = node_cache[:null_label][index]
 1863:           if cached
 1864:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1865:             @index = cached.interval.end
 1866            end
 1867:           return cached
 1868          end
 1869  
 ....
 1877          end
 1878  
 1879:         node_cache[:null_label][start_index] = r0
 1880  
 1881          r0
 ....
 1962        def _nt_sequence_primary
 1963          start_index = index
 1964:         if node_cache[:sequence_primary].has_key?(index)
 1965:           cached = node_cache[:sequence_primary][index]
 1966:           if cached
 1967:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 1968:             @index = cached.interval.end
 1969            end
 1970:           return cached
 1971          end
 1972  
 ....
 2046          end
 2047  
 2048:         node_cache[:sequence_primary][start_index] = r0
 2049  
 2050          r0
 ....
 2053        def _nt_suffix
 2054          start_index = index
 2055:         if node_cache[:suffix].has_key?(index)
 2056:           cached = node_cache[:suffix][index]
 2057:           if cached
 2058:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2059:             @index = cached.interval.end
 2060            end
 2061:           return cached
 2062          end
 2063  
 ....
 2076          end
 2077  
 2078:         node_cache[:suffix][start_index] = r0
 2079  
 2080          r0
 ....
 2083        def _nt_optional_suffix
 2084          start_index = index
 2085:         if node_cache[:optional_suffix].has_key?(index)
 2086:           cached = node_cache[:optional_suffix][index]
 2087:           if cached
 2088:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2089:             @index = cached.interval.end
 2090            end
 2091:           return cached
 2092          end
 2093  
 ....
 2100          end
 2101  
 2102:         node_cache[:optional_suffix][start_index] = r0
 2103  
 2104          r0
 ....
 2135        def _nt_node_class_declarations
 2136          start_index = index
 2137:         if node_cache[:node_class_declarations].has_key?(index)
 2138:           cached = node_cache[:node_class_declarations][index]
 2139:           if cached
 2140:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2141:             @index = cached.interval.end
 2142            end
 2143:           return cached
 2144          end
 2145  
 ....
 2160          end
 2161  
 2162:         node_cache[:node_class_declarations][start_index] = r0
 2163  
 2164          r0
 ....
 2167        def _nt_repetition_suffix
 2168          start_index = index
 2169:         if node_cache[:repetition_suffix].has_key?(index)
 2170:           cached = node_cache[:repetition_suffix][index]
 2171:           if cached
 2172:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2173:             @index = cached.interval.end
 2174            end
 2175:           return cached
 2176          end
 2177  
 ....
 2207          end
 2208  
 2209:         node_cache[:repetition_suffix][start_index] = r0
 2210  
 2211          r0
 ....
 2224        def _nt_occurrence_range
 2225          start_index = index
 2226:         if node_cache[:occurrence_range].has_key?(index)
 2227:           cached = node_cache[:occurrence_range][index]
 2228:           if cached
 2229:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2230:             @index = cached.interval.end
 2231            end
 2232:           return cached
 2233          end
 2234  
 ....
 2295          end
 2296  
 2297:         node_cache[:occurrence_range][start_index] = r0
 2298  
 2299          r0
 ....
 2302        def _nt_prefix
 2303          start_index = index
 2304:         if node_cache[:prefix].has_key?(index)
 2305:           cached = node_cache[:prefix][index]
 2306:           if cached
 2307:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2308:             @index = cached.interval.end
 2309            end
 2310:           return cached
 2311          end
 2312  
 ....
 2348          end
 2349  
 2350:         node_cache[:prefix][start_index] = r0
 2351  
 2352          r0
 ....
 2355        def _nt_atomic
 2356          start_index = index
 2357:         if node_cache[:atomic].has_key?(index)
 2358:           cached = node_cache[:atomic][index]
 2359:           if cached
 2360:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2361:             @index = cached.interval.end
 2362            end
 2363:           return cached
 2364          end
 2365  
 ....
 2383          end
 2384  
 2385:         node_cache[:atomic][start_index] = r0
 2386  
 2387          r0
 ....
 2403        def _nt_parenthesized_expression
 2404          start_index = index
 2405:         if node_cache[:parenthesized_expression].has_key?(index)
 2406:           cached = node_cache[:parenthesized_expression][index]
 2407:           if cached
 2408:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2409:             @index = cached.interval.end
 2410            end
 2411:           return cached
 2412          end
 2413  
 ....
 2462          end
 2463  
 2464:         node_cache[:parenthesized_expression][start_index] = r0
 2465  
 2466          r0
 ....
 2479        def _nt_nonterminal
 2480          start_index = index
 2481:         if node_cache[:nonterminal].has_key?(index)
 2482:           cached = node_cache[:nonterminal][index]
 2483:           if cached
 2484:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2485:             @index = cached.interval.end
 2486            end
 2487:           return cached
 2488          end
 2489  
 ....
 2532          end
 2533  
 2534:         node_cache[:nonterminal][start_index] = r0
 2535  
 2536          r0
 ....
 2539        def _nt_terminal
 2540          start_index = index
 2541:         if node_cache[:terminal].has_key?(index)
 2542:           cached = node_cache[:terminal][index]
 2543:           if cached
 2544:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2545:             @index = cached.interval.end
 2546            end
 2547:           return cached
 2548          end
 2549  
 ....
 2567          end
 2568  
 2569:         node_cache[:terminal][start_index] = r0
 2570  
 2571          r0
 ....
 2580        def _nt_quoted_string
 2581          start_index = index
 2582:         if node_cache[:quoted_string].has_key?(index)
 2583:           cached = node_cache[:quoted_string][index]
 2584:           if cached
 2585:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2586:             @index = cached.interval.end
 2587            end
 2588:           return cached
 2589          end
 2590  
 ....
 2605          end
 2606  
 2607:         node_cache[:quoted_string][start_index] = r0
 2608  
 2609          r0
 ....
 2622        def _nt_double_quoted_string
 2623          start_index = index
 2624:         if node_cache[:double_quoted_string].has_key?(index)
 2625:           cached = node_cache[:double_quoted_string][index]
 2626:           if cached
 2627:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2628:             @index = cached.interval.end
 2629            end
 2630:           return cached
 2631          end
 2632  
 ....
 2732          end
 2733  
 2734:         node_cache[:double_quoted_string][start_index] = r0
 2735  
 2736          r0
 ....
 2749        def _nt_single_quoted_string
 2750          start_index = index
 2751:         if node_cache[:single_quoted_string].has_key?(index)
 2752:           cached = node_cache[:single_quoted_string][index]
 2753:           if cached
 2754:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2755:             @index = cached.interval.end
 2756            end
 2757:           return cached
 2758          end
 2759  
 ....
 2859          end
 2860  
 2861:         node_cache[:single_quoted_string][start_index] = r0
 2862  
 2863          r0
 ....
 2888        def _nt_character_class
 2889          start_index = index
 2890:         if node_cache[:character_class].has_key?(index)
 2891:           cached = node_cache[:character_class][index]
 2892:           if cached
 2893:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 2894:             @index = cached.interval.end
 2895            end
 2896:           return cached
 2897          end
 2898  
 ....
 3043          end
 3044  
 3045:         node_cache[:character_class][start_index] = r0
 3046  
 3047          r0
 ....
 3053        def _nt_bracket_expression
 3054          start_index = index
 3055:         if node_cache[:bracket_expression].has_key?(index)
 3056:           cached = node_cache[:bracket_expression][index]
 3057:           if cached
 3058:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3059:             @index = cached.interval.end
 3060            end
 3061:           return cached
 3062          end
 3063  
 ....
 3253          end
 3254  
 3255:         node_cache[:bracket_expression][start_index] = r0
 3256  
 3257          r0
 ....
 3260        def _nt_anything_symbol
 3261          start_index = index
 3262:         if node_cache[:anything_symbol].has_key?(index)
 3263:           cached = node_cache[:anything_symbol][index]
 3264:           if cached
 3265:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3266:             @index = cached.interval.end
 3267            end
 3268:           return cached
 3269          end
 3270  
 ....
 3277          end
 3278  
 3279:         node_cache[:anything_symbol][start_index] = r0
 3280  
 3281          r0
 ....
 3306        def _nt_node_class_expression
 3307          start_index = index
 3308:         if node_cache[:node_class_expression].has_key?(index)
 3309:           cached = node_cache[:node_class_expression][index]
 3310:           if cached
 3311:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3312:             @index = cached.interval.end
 3313            end
 3314:           return cached
 3315          end
 3316  
 ....
 3416          end
 3417  
 3418:         node_cache[:node_class_expression][start_index] = r0
 3419  
 3420          r0
 ....
 3457        def _nt_trailing_inline_module
 3458          start_index = index
 3459:         if node_cache[:trailing_inline_module].has_key?(index)
 3460:           cached = node_cache[:trailing_inline_module][index]
 3461:           if cached
 3462:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3463:             @index = cached.interval.end
 3464            end
 3465:           return cached
 3466          end
 3467  
 ....
 3501          end
 3502  
 3503:         node_cache[:trailing_inline_module][start_index] = r0
 3504  
 3505          r0
 ....
 3514        def _nt_predicate_block
 3515          start_index = index
 3516:         if node_cache[:predicate_block].has_key?(index)
 3517:           cached = node_cache[:predicate_block][index]
 3518:           if cached
 3519:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3520:             @index = cached.interval.end
 3521            end
 3522:           return cached
 3523          end
 3524  
 ....
 3544          end
 3545  
 3546:         node_cache[:predicate_block][start_index] = r0
 3547  
 3548          r0
 ....
 3557        def _nt_inline_module
 3558          start_index = index
 3559:         if node_cache[:inline_module].has_key?(index)
 3560:           cached = node_cache[:inline_module][index]
 3561:           if cached
 3562:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3563:             @index = cached.interval.end
 3564            end
 3565:           return cached
 3566          end
 3567  
 ....
 3649          end
 3650  
 3651:         node_cache[:inline_module][start_index] = r0
 3652  
 3653          r0
 ....
 3659        def _nt_keyword_inside_grammar
 3660          start_index = index
 3661:         if node_cache[:keyword_inside_grammar].has_key?(index)
 3662:           cached = node_cache[:keyword_inside_grammar][index]
 3663:           if cached
 3664:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3665:             @index = cached.interval.end
 3666            end
 3667:           return cached
 3668          end
 3669  
 ....
 3714          end
 3715  
 3716:         node_cache[:keyword_inside_grammar][start_index] = r0
 3717  
 3718          r0
 ....
 3724        def _nt_non_space_char
 3725          start_index = index
 3726:         if node_cache[:non_space_char].has_key?(index)
 3727:           cached = node_cache[:non_space_char][index]
 3728:           if cached
 3729:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3730:             @index = cached.interval.end
 3731            end
 3732:           return cached
 3733          end
 3734  
 ....
 3761          end
 3762  
 3763:         node_cache[:non_space_char][start_index] = r0
 3764  
 3765          r0
 ....
 3768        def _nt_alpha_char
 3769          start_index = index
 3770:         if node_cache[:alpha_char].has_key?(index)
 3771:           cached = node_cache[:alpha_char][index]
 3772:           if cached
 3773:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3774:             @index = cached.interval.end
 3775            end
 3776:           return cached
 3777          end
 3778  
 ....
 3784          end
 3785  
 3786:         node_cache[:alpha_char][start_index] = r0
 3787  
 3788          r0
 ....
 3791        def _nt_alphanumeric_char
 3792          start_index = index
 3793:         if node_cache[:alphanumeric_char].has_key?(index)
 3794:           cached = node_cache[:alphanumeric_char][index]
 3795:           if cached
 3796:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3797:             @index = cached.interval.end
 3798            end
 3799:           return cached
 3800          end
 3801  
 ....
 3819          end
 3820  
 3821:         node_cache[:alphanumeric_char][start_index] = r0
 3822  
 3823          r0
 ....
 3826        def _nt_space
 3827          start_index = index
 3828:         if node_cache[:space].has_key?(index)
 3829:           cached = node_cache[:space][index]
 3830:           if cached
 3831:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3832:             @index = cached.interval.end
 3833            end
 3834:           return cached
 3835          end
 3836  
 ....
 3863          end
 3864  
 3865:         node_cache[:space][start_index] = r0
 3866  
 3867          r0
 ....
 3876        def _nt_comment_to_eol
 3877          start_index = index
 3878:         if node_cache[:comment_to_eol].has_key?(index)
 3879:           cached = node_cache[:comment_to_eol][index]
 3880:           if cached
 3881:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3882:             @index = cached.interval.end
 3883            end
 3884:           return cached
 3885          end
 3886  
 ....
 3947          end
 3948  
 3949:         node_cache[:comment_to_eol][start_index] = r0
 3950  
 3951          r0
 ....
 3954        def _nt_white
 3955          start_index = index
 3956:         if node_cache[:white].has_key?(index)
 3957:           cached = node_cache[:white][index]
 3958:           if cached
 3959:             cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
 3960:             @index = cached.interval.end
 3961            end
 3962:           return cached
 3963          end
 3964  
 ....
 3970          end
 3971  
 3972:         node_cache[:white][start_index] = r0
 3973  
 3974          r0

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/lib/treetop/compiler/node_classes/parsing_rule.rb:
   22          builder.method_declaration(method_name) do
   23            builder.assign 'start_index', 'index'
   24:           generate_cache_lookup(builder)
   25            builder.newline
   26            parsing_expression.compile(expression_address, builder)
   27            builder.newline
   28:           generate_cache_storage(builder, result_var)
   29            builder.newline          
   30            builder << result_var
   ..
   32        end
   33        
   34:       def generate_cache_lookup(builder)
   35:         builder.if_ "node_cache[:#{name}].has_key?(index)" do
   36:           builder.assign 'cached', "node_cache[:#{name}][index]"
   37:           builder.if_ "cached" do
   38:             builder << 'cached = SyntaxNode.new(input, index...(index + 1)) if cached == true'
   39:             builder << '@index = cached.interval.end'
   40            end
   41:           builder << 'return cached'
   42          end
   43        end
   44        
   45:       def generate_cache_storage(builder, result_var)
   46:         builder.assign "node_cache[:#{name}][start_index]", result_var
   47        end
   48        

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/lib/treetop/runtime/compiled_parser.rb:
   57        protected
   58  
   59:       attr_reader :node_cache, :input_length
   60        attr_writer :index
   61  
   ..
   64          @input_length = input.length
   65          reset_index
   66:         @node_cache = Hash.new {|hash, key| hash[key] = Hash.new}
   67          @regexps = {}
   68          @terminal_failures = []

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/spec/compiler/character_class_spec.rb:
  289    end
  290    
  291:   describe "a character class that gets cached because of a choice" do
  292      testing_expression "[A-Z] 'a' / [A-Z]"
  293      

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/treetop-1.4.15/spec/compiler/parsing_rule_spec.rb:
   12      }
   13  
   14:     it "stores and retrieves nodes in its node cache" do
   15        parser = self.class.const_get(:FooParser).new
   16        parser.send(:prepare_to_parse, 'baz')
   17:       node_cache = parser.send(:node_cache)
   18      
   19:       node_cache[:bar][0].should be_nil
   20      
   21        parser._nt_bar
   22      
   23:       cached_node = node_cache[:bar][0]        
   24:       cached_node.should be_an_instance_of(Runtime::SyntaxNode)
   25:       cached_node.text_value.should == 'baz'
   26      
   27        parser.instance_eval { @index = 0 }
   28:       parser._nt_bar.should equal(cached_node)
   29:       parser.index.should == cached_node.interval.end
   30      end
   31    end
   32    
   33    
   34:   describe "a grammar with choice that uses the cache and has a subsequent expression" do    
   35      testing_grammar %{
   36        grammar Logic
   ..
   48            [a-z]
   49            /
   50:           "foobar" # the subsequent expression that needs cached.interval.end
   51          end
   52        end
   53      }
   54      
   55:     it "parses a single-character value and generates a node from the cache" do
   56        result = parse('a')
   57        result.should be_a(Treetop::Runtime::SyntaxNode)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/turbolinks-2.0.0/lib/assets/javascripts/turbolinks.js.coffee:
    1: pageCache      = {}
    2: cacheSize      = 10
    3  currentState   = null
    4  loadedAssets   = null
    .
   12  fetchReplacement = (url) ->  
   13    rememberReferer()
   14:   cacheCurrentPage()
   15    triggerEvent 'page:fetch', url: url
   16  
   ..
   39    xhr.send()
   40  
   41: fetchHistory = (cachedPage) ->
   42:   cacheCurrentPage()
   43    xhr?.abort()
   44:   changePage cachedPage.title, cachedPage.body
   45:   recallScrollPosition cachedPage
   46    triggerEvent 'page:restore'
   47  
   48  
   49: cacheCurrentPage = ->
   50:   pageCache[currentState.position] =
   51      url:       document.location.href,
   52      body:      document.body,
   ..
   55      positionX: window.pageXOffset
   56  
   57:   constrainPageCacheTo cacheSize
   58  
   59: pagesCached = (size = cacheSize) ->
   60:   cacheSize = parseInt(size) if /^[\d]+$/.test size
   61  
   62: constrainPageCacheTo = (limit) ->
   63:   for own key, value of pageCache
   64:     pageCache[key] = null if key <= currentState.position - limit
   65    return
   66  
   ..
  280  installHistoryChangeHandler = (event) ->
  281    if event.state?.turbolinks
  282:     if cachedPage = pageCache[event.state.position]
  283:       fetchHistory cachedPage
  284      else
  285        visit event.target.location.href
  ...
  315  # Public API
  316  #   Turbolinks.visit(url)
  317: #   Turbolinks.pagesCached()
  318: #   Turbolinks.pagesCached(20)
  319  #   Turbolinks.supported
  320: @Turbolinks = { visit, pagesCached, supported: browserSupportsTurbolinks }
  321  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/turbolinks-2.0.0/README.md:
   40  Handlers bound to the `page:before-change` event may return `false`, which will cancel the Turbolinks process.
   41  
   42: By default, Turbolinks caches 10 of these page loads. It listens to the [popstate](https://developer.mozilla.org/en-US/docs/DOM/Manipulating_the_browser_history#The_popstate_event) event and attempts to restore page state from the cache when it's triggered. When `popstate` is fired the following process happens:
   43  
   44: ***Restore* a cached page from the client-side cache:**
   45: * `page:change` page has changed to the cached page.
   46  * `page:restore` is fired at the end of restore process.
   47  
   48: The number of pages Turbolinks caches can be configured to suit your application's needs:
   49  
   50  ```javascript
   51: // View the current cache size
   52: Turbolinks.pagesCached();
   53  
   54: // Set the cache size
   55: Turbolinks.pagesCached(20);
   56  ```
   57  
   ..
   61      document.addEventListener("page:receive", stopSpinner);
   62  
   63: DOM transformations that are idempotent are best. If you have transformations that are not, hook them to happen only on `page:load` instead of `page:change` (as that would run them again on the cached pages).
   64  
   65  Initialization

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/turbolinks-2.0.0/test/index.html:
   32      <li><a href="/doesnotexist.html">A page with client error (4xx, rfc2616 sec. 10.4) should error out</a></li>
   33      <li><a href="/500">Also server errors (5xx, rfc2616 sec. 10.5) should error out</a></li>
   34:     <li><a href="/fallback.html">A page that has a fallback in appcache should fallback</a></li>
   35    </ul>
   36  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/turbolinks-2.0.0/test/manifest.appcache:
    1: CACHE MANIFEST
    2  
    3: CACHE:
    4  /offline.html
    5  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/turbolinks-2.0.0/test/offline.html:
    1  <!DOCTYPE html>
    2: <html lang="en" manifest="/manifest.appcache">
    3  <head>
    4    <meta charset="utf-8">

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/twitter-stream-0.1.16/lib/twitter/json_stream.rb:
  325  
  326        # The hash SimpleOAuth accepts is slightly different from that of
  327:       # ROAuth.  To preserve backward compatability, fix the cache here
  328        # so that the arguments passed in don't need to change.
  329        oauth = {

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tzinfo-0.3.39/CHANGES:
  350  * Fix a performance issue caused in 0.2.0 with Timezone.local_to_utc. 
  351    Conversions performed on TimeOrDateTime instances passed to <=> are now
  352:   cached as originally intended. Thanks to Michael Smedberg for spotting this.
  353  * Fix a performance issue with the local_to_utc period search algorithm 
  354    originally implemented in 0.1.0. The condition that was supposed to cause
  ...
  444  * Construct the Rational offset in TimezonePeriod once when the TimezonePeriod
  445    is constructed rather than each time it is needed.
  446: * Timezone and Country now keep a cache of loaded instances to avoid running
  447    require which can be slow on some platforms.
  448  * Updated to tzdata version 2005n.

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tzinfo-0.3.39/lib/tzinfo/offset_rationals.rb:
   31    # @private
   32    module OffsetRationals #:nodoc:
   33:     @@rational_cache = {
   34        -50400 => RubyCoreSupport.rational_new!(-7,12), 
   35        -48600 => RubyCoreSupport.rational_new!(-9,16),
   ..
   93      # seconds represents (i.e. equivalent to Rational(offset, 86400)). 
   94      def rational_for_offset(offset)
   95:       @@rational_cache[offset] || Rational(offset, 86400)      
   96      end
   97      module_function :rational_for_offset

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/tzinfo-0.3.39/lib/tzinfo/timezone.rb:
   62      include Comparable
   63      
   64:     # Cache of loaded zones by identifier to avoid using require if a zone
   65      # has already been loaded.
   66      #

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/Application_Timeouts:
   24  configurable timeouts.
   25  
   26: Even for things as fast as {memcached}[http://memcached.org/],
   27  {dalli}[http://rubygems.org/gems/dalli],
   28: {memcached}[http://rubygems.org/gems/memcached] and
   29: {memcache-client}[http://rubygems.org/gems/memcache-client] RubyGems all
   30  offer configurable timeouts.
   31  
   ..
   61  
   62  If your app relies on the filesystem, ensure all the data your
   63: application works with is small enough to fit in the kernel page cache.
   64  Otherwise increase the amount of physical memory you have to match, or
   65  employ a fast, low-latency storage system (solid state).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/bin/unicorn_rails:
  200  # ensure Rails standard tmp paths exist
  201  options[:after_reload] = lambda do
  202:   FileUtils.mkdir_p(%w(cache pids sessions sockets).map! { |d| "tmp/#{d}" })
  203  end
  204  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/ChangeLog:
 4316         tee_input: safer record separator ($/) handling
 4317         
 4318:        Different threads may change $/ during execution, so cache it at
 4319         function entry to a local variable for safety.  $/ may also be
 4320         of a non-binary encoding, so rely on Rack::Utils.bytesize to

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/examples/unicorn.conf.rb:
   10  
   11  # Use at least one worker per core if you're on a dedicated server,
   12: # more will usually help for _short_ waits on databases/caches.
   13  worker_processes 4
   14  
   ..
   96  
   97    # if preload_app is true, then you may also want to check and
   98:   # restart any other shared sockets/descriptors such as Memcached,
   99    # and Redis.  TokyoCabinet file handles are safe to reuse
  100    # between any number of forked children (assuming your kernel

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/ext/unicorn_http/common_field_optimization.h:
   23    f("ALLOW"),
   24    f("AUTHORIZATION"),
   25:   f("CACHE_CONTROL"),
   26    f("CONNECTION"),
   27    f("CONTENT_ENCODING"),

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/GNUmakefile:
   67  test-install: $(test_prefix)/.stamp
   68  $(test_prefix)/.stamp: $(inst_deps)
   69: 	mkdir -p $(test_prefix)/.ccache
   70  	tar cf - $(inst_deps) GIT-VERSION-GEN | \
   71  	  (cd $(test_prefix) && tar xf -)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/lib/unicorn/app/old_rails/static.rb:
   47      end
   48  
   49:     # then try the cached version:
   50:     path_info << ActionController::Base.page_cache_extension
   51  
   52      if File.file?("#{root}/#{::Rack::Utils.unescape(path_info)}")

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/lib/unicorn/ssl_server.rb:
   19          ctx = Flipper.ssl_context(ssl_opts)
   20          # FIXME: make configurable
   21:         ctx.session_cache_mode = OpenSSL::SSL::SSLContext::SESSION_CACHE_OFF
   22          ctx
   23        end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/setup.rb:
  793      @ardir = File.expand_path(ardir_root)
  794      @config = config
  795:     # cache
  796      @valid_task_re = nil
  797    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/unicorn-4.6.3/TUNING:
   50  * Having socket buffers too large can also be detrimental or have
   51    little effect.  Huge buffers can put more pressure on the allocator
   52:   and may also thrash CPU caches, cancelling out performance gains
   53    one would normally expect.
   54  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/virtus-1.0.1/lib/virtus/support/type_lookup.rb:
    6      TYPE_FORMAT = /\A[A-Z]\w*\z/.freeze
    7  
    8:     # Set cache ivar on the model
    9      #
   10      # @param [Class] model
   ..
   14      # @api private
   15      def self.extended(model)
   16:       model.instance_variable_set('@type_lookup_cache', {})
   17      end
   18  
   ..
   33      # @api public
   34      def determine_type(class_or_name)
   35:       @type_lookup_cache[class_or_name] ||= determine_type_and_cache(class_or_name)
   36      end
   37  
   ..
   48  
   49      # @api private
   50:     def determine_type_and_cache(class_or_name)
   51        type = case class_or_name
   52        when singleton_class

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/warden-1.2.3/History.rdoc:
   53  == Version 0.10.2 / 2010-03-26
   54  * Halt on fail!.  Add fail to allow cascading
   55: * cache the winning strategy
   56  * Make the config object Dupable
   57  
   ..
   92  == Version 0.9.0 / 2010-01-21
   93  
   94: * Remove serializers and make strategies more powerful, including cache behavior (josevalim)
   95  
   96  == Version 0.8.1 / 2010-01-06

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/proxy.rb:
   46      end
   47  
   48:     # Clear the cache of performed strategies so far. Warden runs each
   49      # strategy just once during the request lifecycle. You can clear the
   50:     # strategies cache if you want to allow a strategy to be run more than
   51      # once.
   52      #
   ..
   60      # Example:
   61      #   # Clear all strategies for the configured default_scope
   62:     #   env['warden'].clear_strategies_cache!
   63      #
   64      #   # Clear all strategies for the :admin scope
   65:     #   env['warden'].clear_strategies_cache!(:scope => :admin)
   66      #
   67      #   # Clear password strategy for the :admin scope
   68:     #   env['warden'].clear_strategies_cache!(:password, :scope => :admin)
   69      #
   70      # :api: public
   71:     def clear_strategies_cache!(*args)
   72        scope, opts = _retrieve_scope_and_opts(args)
   73  
   ..
  357      end
  358  
  359:     # Fetchs strategies and keep them in a hash cache.
  360      def _fetch_strategy(name, scope)
  361        @strategies[scope][name] ||= if klass = Warden::Strategies[name]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/session_serializer.rb:
   45      end
   46  
   47:     # We can't cache this result because the session can be lazy loaded
   48      def session
   49        env["rack.session"] || {}

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/warden-1.2.3/spec/warden/proxy_spec.rb:
  271    end
  272  
  273:   describe "authentication cache" do
  274      it "should run strategies just once for a given scope" do
  275        app = lambda do |env|
  ...
  284      end
  285  
  286:     it "should run strategies for a given scope several times if cache is cleaned" do
  287        app = lambda do |env|
  288          env['warden'].authenticate(:password, :pass, :scope => :failz)
  289:         env['warden'].clear_strategies_cache!(:scope => :failz)
  290          env['warden'].authenticate(:password, :pass, :scope => :failz)
  291          env['warden.spec.strategies'].should == [:password, :pass, :password, :pass]
  ...
  295      end
  296  
  297:     it "should clear the cache for a specified strategy" do
  298        app = lambda do |env|
  299          env['warden'].authenticate(:password, :pass, :scope => :failz)
  300:         env['warden'].clear_strategies_cache!(:password, :scope => :failz)
  301          env['warden'].authenticate(:password, :pass, :scope => :failz)
  302          env['warden.spec.strategies'].should == [:password, :pass, :password]
  ...
  318      end
  319  
  320:     it "should not run strategies until cache is cleaned if latest winning strategy halted" do
  321        app = lambda do |env|
  322          env['warden'].authenticate(:failz)
  ...
  447      end
  448  
  449:     it "should cache unfound user" do
  450        Warden::SessionSerializer.any_instance.should_receive(:fetch).once
  451        app = lambda do |env|
  ...
  471        end
  472  
  473:       it "should cache found user" do
  474          Warden::SessionSerializer.any_instance.should_receive(:fetch).once.and_return "A Previous User"
  475          app = lambda do |env|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/specifications/faraday_middleware-0.9.0.gemspec:
   26        s.add_development_dependency(%q<rspec>, ["~> 2.6"])
   27        s.add_development_dependency(%q<simple_oauth>, ["~> 0.1"])
   28:       s.add_development_dependency(%q<rack-cache>, ["~> 1.1"])
   29      else
   30        s.add_dependency(%q<faraday>, ["< 0.9", ">= 0.7.4"])
   ..
   35        s.add_dependency(%q<rspec>, ["~> 2.6"])
   36        s.add_dependency(%q<simple_oauth>, ["~> 0.1"])
   37:       s.add_dependency(%q<rack-cache>, ["~> 1.1"])
   38      end
   39    else
   ..
   45      s.add_dependency(%q<rspec>, ["~> 2.6"])
   46      s.add_dependency(%q<simple_oauth>, ["~> 0.1"])
   47:     s.add_dependency(%q<rack-cache>, ["~> 1.1"])
   48    end
   49  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/specifications/mime-types-1.25.1.gemspec:
    9    s.cert_chain = ["-----BEGIN CERTIFICATE-----\nMIIDNjCCAh6gAwIBAgIBADANBgkqhkiG9w0BAQUFADBBMQ8wDQYDVQQDDAZhdXN0\naW4xGTAXBgoJkiaJk/IsZAEZFglydWJ5Zm9yZ2UxEzARBgoJkiaJk/IsZAEZFgNv\ncmcwHhcNMTMwMjA0MDMzMzI3WhcNMTQwMjA0MDMzMzI3WjBBMQ8wDQYDVQQDDAZh\ndXN0aW4xGTAXBgoJkiaJk/IsZAEZFglydWJ5Zm9yZ2UxEzARBgoJkiaJk/IsZAEZ\nFgNvcmcwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2mPNf4L37GhKI\nSPCYsvYWXA2/R9u5+pyUnbJ2R1o2CiRq2ZA/AIzY6N3hGnsgoWnh5RzvgTN1Lt08\nDNIrsIG2VDYk/JVt6f9J6zZ8EQHbznWa3cWYoCFaaICdk7jV1n/42hg70jEDYXl9\ngDOl0k6JmyF/rtfFu/OIkFGWeFYIuFHvRuLyUbw66+QDTOzKb3t8o55Ihgy1GVwT\ni6pkDs8LhZWXdOD+921l2Z1NZGZa9KNbJIg6vtgYKU98jQ5qr9iY3ikBAspHrFas\nK6USvGgAg8fCD5YiotBEvCBMYtfqmfrhpdU2p+gvTgeLW1Kaevwqd7ngQmFUrFG1\neUJSURv5AgMBAAGjOTA3MAkGA1UdEwQCMAAwHQYDVR0OBBYEFAtJKMp6YYNqlgR3\n9TiZLWqvLagSMAsGA1UdDwQEAwIEsDANBgkqhkiG9w0BAQUFAAOCAQEApTPkvDm8\n7gJlUT4FfumXPvtuqP67LxUtGE8syvR0A4As+0P/wylLJFUOsGTTdZYtThhxCSJG\n+7KG2FfIcH4Zz2d97arZGAzBoi8iPht2/UtSl1fCcUI5vmJa1MiXZT2oqdW7Wydq\nrAZcBPlrYYuiwtGI0yqIOgBfXSZCWWsJsuyTKELep6mCLgz0YZUfmvKr8W/Ab3ax\nDuLzH92LSRjZJyjyAUpw/Vc2rM4giiP5jtByrb1Y1dGnQhHTMHf1GfucWm7Nw/V9\ntwEPVw8+0f88JQucxOTmTF1NbLFpiRwQUZ1zoZbNg2e7mShc/eexnVLWKFKxRoP6\nKPj3WoD+spB8fA==\n-----END CERTIFICATE-----\n"]
   10    s.date = "2013-11-24"
   11:   s.description = "This library allows for the identification of a file's likely MIME content\ntype. This is release 1.25.1, fixing an issue with priority comparison for\nmime-types 1.x. The current release is 2.0, which only supports Ruby 1.9 or\nlater.\n\nRelease 1.25.1 contains all features of 1.25, including the experimental\ncaching and lazy loading functionality. The caching and lazy loading features\nwere initially implemented by Greg Brockman (gdb). As these features are\nexperimental, they are disabled by default and must be enabled through the use\nof environment variables. The cache is invalidated on a per-version basis; the\ncache for version 1.25 will not be reused for any later version.\n\nTo use lazy loading, set the environment variable +RUBY_MIME_TYPES_LAZY_LOAD+\nto any value other than 'false'. When using lazy loading, the initial startup\nof MIME::Types is around 12\u{2013}25\u{d7} faster than normal startup (on my system,\nnormal startup is about 90 ms; lazy startup is about 4 ms). This isn't\ngenerally useful, however, as the MIME::Types database has not been loaded.\nLazy startup and load is just *slightly* faster\u{2014}around 1 ms. The real advantage\ncomes from using the cache.\n\nTo enable the cache, set the environment variable +RUBY_MIME_TYPES_CACHE+ to a\nfilename where MIME::Types will have read-write access. The first time a new\nversion of MIME::Types is run using this file, it will be created, taking a\nlittle longer than normal. Subsequent loads using the same cache file will be\napproximately 3\u{bd}\u{d7} faster (25 ms) than normal loads. This can be combined with\n+RUBY_MIME_TYPES_LAZY_LOAD+, but this is *not* recommended in a multithreaded\nor multiprocess environment where all threads or processes will be using the\nsame cache file.\n\nAs the caching interface is still experimental, the only values cached are the\ndefault MIME::Types database, not any custom MIME::Types added by users.\n\nMIME types are used in MIME-compliant communications, as in e-mail or HTTP\ntraffic, to indicate the type of content which is transmitted. MIME::Types\nprovides the ability for detailed information about MIME entities (provided as\na set of MIME::Type objects) to be determined and used programmatically. There\nare many types defined by RFCs and vendors, so the list is long but not\ncomplete; don't hesitate to ask to add additional information. This library\nfollows the IANA collection of MIME types (see below for reference).\n\nMIME::Types for Ruby was originally based on MIME::Types for Perl by Mark\nOvermeer, copyright 2001 - 2009.\n\nMIME::Types is built to conform to the MIME types of RFCs 2045 and 2231. It\ntracks the {IANA registry}[http://www.iana.org/assignments/media-types/]\n({ftp}[ftp://ftp.iana.org/assignments/media-types]) with some unofficial types\nadded from the {LTSW collection}[http://www.ltsw.se/knbase/internet/mime.htp]\nand added by the users of MIME::Types."
   12    s.email = ["austin@rubyforge.org"]
   13    s.extra_rdoc_files = ["Contributing.rdoc", "History.rdoc", "Licence.rdoc", "Manifest.txt", "README.rdoc", "docs/COPYING.txt", "docs/artistic.txt"]

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/specifications/redis-activesupport-4.0.0.gemspec:
    8    s.authors = ["Luca Guidi"]
    9    s.date = "2013-08-20"
   10:   s.description = "Redis store for ActiveSupport::Cache"
   11    s.email = ["me@lucaguidi.com"]
   12    s.homepage = "http://redis-store.org/redis-activesupport"
   ..
   14    s.rubyforge_project = "redis-activesupport"
   15    s.rubygems_version = "2.0.14"
   16:   s.summary = "Redis store for ActiveSupport::Cache"
   17  
   18    if s.respond_to? :specification_version then

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/specifications/redis-store-1.1.4.gemspec:
    8    s.authors = ["Luca Guidi"]
    9    s.date = "2013-08-20"
   10:   s.description = "Namespaced Rack::Session, Rack::Cache, I18n and cache Redis stores for Ruby web frameworks."
   11    s.email = ["me@lucaguidi.com"]
   12    s.homepage = "http://redis-store.org/redis-store"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.gitignore:
    5  log/*.log*
    6  tmp/
    7: .sass-cache/
    8  coverage/*
    9  backups/*

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/application_controller.rb:
  150    end
  151  
  152:   def no_cache_headers
  153:     response.headers["Cache-Control"] = "no-cache, no-store, max-age=0, must-revalidate"
  154:     response.headers["Pragma"] = "no-cache"
  155      response.headers["Expires"] = "Fri, 01 Jan 1990 00:00:00 GMT"
  156    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/profiles/avatars_controller.rb:
    7  
    8      @user.save
    9:     @user.reset_events_cache
   10  
   11      redirect_to profile_path

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/merge_requests_controller.rb:
  204  
  205      # Get commits from repository
  206:     # or from cache if already merged
  207      @commits = @merge_request.commits
  208  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/notes_controller.rb:
   32    def update
   33      note.update_attributes(params[:note])
   34:     note.reset_events_cache
   35  
   36      respond_to do |format|
   ..
   42    def destroy
   43      note.destroy
   44:     note.reset_events_cache
   45  
   46      respond_to do |format|

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/controllers/projects/tree_controller.rb:
    6      respond_to do |format|
    7        format.html
    8:       # Disable cache so browser history works
    9:       format.js { no_cache_headers }
   10      end
   11    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/issue.rb:
   58    end
   59  
   60:   # Reset issue events cache
   61    #
   62:   # Since we do cache @event we need to reset cache in special cases:
   63    # * when an issue is updated
   64:   # Events cache stored like  events/23-20130109142513.
   65:   # The cache key includes updated_at timestamp.
   66    # Thus it will automatically generate a new fragment
   67    # when the event is updated because the key changes.
   68:   def reset_events_cache
   69      Event.where(target_id: self.id, target_type: 'Issue').
   70        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/merge_request.rb:
  266    end
  267  
  268:   # Reset merge request events cache
  269    #
  270:   # Since we do cache @event we need to reset cache in special cases:
  271    # * when a merge request is updated
  272:   # Events cache stored like  events/23-20130109142513.
  273:   # The cache key includes updated_at timestamp.
  274    # Thus it will automatically generate a new fragment
  275    # when the event is updated because the key changes.
  276:   def reset_events_cache
  277      Event.where(target_id: self.id, target_type: 'MergeRequest').
  278          order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/note.rb:
  287    end
  288  
  289:   # Reset notes events cache
  290    #
  291:   # Since we do cache @event we need to reset cache in special cases:
  292    # * when a note is updated
  293    # * when a note is removed
  294:   # Events cache stored like  events/23-20130109142513.
  295:   # The cache key includes updated_at timestamp.
  296    # Thus it will automatically generate a new fragment
  297    # when the event is updated because the key changes.
  298:   def reset_events_cache
  299      Event.where(target_id: self.id, target_type: 'Note').
  300        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/project.rb:
  503          ensure_satellite_exists
  504          send_move_instructions
  505:         reset_events_cache
  506        rescue
  507          # Returning false does not rollback after_* transaction but gives
  ...
  516    end
  517  
  518:   # Reset events cache related to this project
  519    #
  520:   # Since we do cache @event we need to reset cache in special cases:
  521    # * when project was moved
  522    # * when project was renamed
  523:   # Events cache stored like  events/23-20130109142513.
  524:   # The cache key includes updated_at timestamp.
  525    # Thus it will automatically generate a new fragment
  526    # when the event is updated because the key changes.
  527:   def reset_events_cache
  528      Event.where(project_id: self.id).
  529        order('id DESC').limit(100).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/repository.rb:
   63  
   64    def add_branch(branch_name, ref)
   65:     Rails.cache.delete(cache_key(:branch_names))
   66  
   67      gitlab_shell.add_branch(path_with_namespace, branch_name, ref)
   ..
   69  
   70    def add_tag(tag_name, ref)
   71:     Rails.cache.delete(cache_key(:tag_names))
   72  
   73      gitlab_shell.add_tag(path_with_namespace, tag_name, ref)
   ..
   75  
   76    def rm_branch(branch_name)
   77:     Rails.cache.delete(cache_key(:branch_names))
   78  
   79      gitlab_shell.rm_branch(path_with_namespace, branch_name)
   ..
   81  
   82    def rm_tag(tag_name)
   83:     Rails.cache.delete(cache_key(:tag_names))
   84  
   85      gitlab_shell.rm_tag(path_with_namespace, tag_name)
   ..
   99  
  100    def branch_names
  101:     Rails.cache.fetch(cache_key(:branch_names)) do
  102        raw_repository.branch_names
  103      end
  ...
  105  
  106    def tag_names
  107:     Rails.cache.fetch(cache_key(:tag_names)) do
  108        raw_repository.tag_names
  109      end
  ...
  111  
  112    def commit_count
  113:     Rails.cache.fetch(cache_key(:commit_count)) do
  114        begin
  115          raw_repository.raw.commit_count
  ...
  121  
  122    # Return repo size in megabytes
  123:   # Cached in redis
  124    def size
  125:     Rails.cache.fetch(cache_key(:size)) do
  126        raw_repository.size
  127      end
  128    end
  129  
  130:   def expire_cache
  131:     Rails.cache.delete(cache_key(:size))
  132:     Rails.cache.delete(cache_key(:branch_names))
  133:     Rails.cache.delete(cache_key(:tag_names))
  134:     Rails.cache.delete(cache_key(:commit_count))
  135:     Rails.cache.delete(cache_key(:graph_log))
  136:     Rails.cache.delete(cache_key(:readme))
  137:     Rails.cache.delete(cache_key(:contribution_guide))
  138    end
  139  
  140    def graph_log
  141:     Rails.cache.fetch(cache_key(:graph_log)) do
  142        stats = Gitlab::Git::GitStats.new(raw, root_ref)
  143        stats.parsed_log
  ...
  146  
  147  
  148:   def cache_key(type)
  149      "#{type}:#{path_with_namespace}"
  150    end
  ...
  165  
  166    def readme
  167:     Rails.cache.fetch(cache_key(:readme)) do
  168        tree(:head).readme
  169      end
  ...
  171  
  172    def contribution_guide
  173:     Rails.cache.fetch(cache_key(:contribution_guide)) do
  174        tree(:head).contribution_guide
  175      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/user.rb:
  442    end
  443  
  444:   # Reset project events cache related to this user
  445    #
  446:   # Since we do cache @event we need to reset cache in special cases:
  447    # * when the user changes their avatar
  448:   # Events cache stored like  events/23-20130109142513.
  449:   # The cache key includes updated_at timestamp.
  450    # Thus it will automatically generate a new fragment
  451    # when the event is updated because the key changes.
  452:   def reset_events_cache
  453      Event.where(author_id: self.id).
  454        order('id DESC').limit(1000).

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/observers/project_activity_cache_observer.rb:
    1: class ProjectActivityCacheObserver < BaseObserver
    2    observe :event
    3  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/observers/project_observer.rb:
   10  
   11    def before_destroy(project)
   12:     project.repository.expire_cache unless project.empty_repo?
   13    end
   14  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/git_push_service.rb:
   25  
   26      project.ensure_satellite_exists
   27:     project.repository.expire_cache
   28      project.update_repository_size
   29  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/git_tag_push_service.rb:
    7  
    8      create_push_event
    9:     project.repository.expire_cache
   10      project.execute_hooks(@push_data.dup, :tag_push_hooks)
   11    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/issues/update_service.rb:
   12  
   13        if params.present? && issue.update_attributes(params)
   14:         issue.reset_events_cache
   15  
   16          if issue.previous_changes.include?('assignee_id')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/merge_requests/update_service.rb:
   21  
   22        if params.present? && merge_request.update_attributes(params)
   23:         merge_request.reset_events_cache
   24  
   25          if merge_request.previous_changes.include?('assignee_id')

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/services/project_transfer_service.rb:
   37        Project.find(project.id).ensure_satellite_exists
   38  
   39:       # clear project cached events
   40:       project.reset_events_cache
   41  
   42        true

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/uploaders/attachment_uploader.rb:
    4    storage :file
    5  
    6:   after :store, :reset_events_cache
    7  
    8    def store_dir
    .
   31    end
   32  
   33:   def reset_events_cache(file)
   34:     model.reset_events_cache if model.is_a?(User)
   35    end
   36  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/views/events/_event.html.haml:
    4        #{time_ago_with_tooltip(event.created_at)}
    5  
    6:     = cache event do
    7        = image_tag avatar_icon(event.author_email, 24), class: "avatar s24", alt:''
    8  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/CHANGELOG:
    1  v 6.9.0
    2:   - Store Rails cache data in the Redis `cache:gitlab` namespace
    3    - Adjust MySQL limits for existing installations
    4    - Add db index on project_id+iid column. This prevents duplicate on iid (During migration duplicates will be removed)
    5    - Markdown preview or diff during editing via web editor (Evgeniy Sokovikov)
    6:   - Give the Rails cache its own Redis namespace
    7    - Add ability to set different ssh host, if different from http/https
    8    - Fix syntax highlighting for code comments blocks
    .
  165    - Project web hooks now support issues and merge request events
  166    - Visiting project page while not logged in will redirect to sign-in instead of 404 (Jason Hollingsworth)
  167:   - Expire event cache on avatar creation/removal (Drew Blessing)
  168    - Archiving old projects (Steven Thonus)
  169    - Rails 4
  ...
  256    - Close issues automatically when pushing commits with a special message
  257    - Improve user removal from admin area
  258:   - Invalidate events cache when project was moved
  259    - Remove deprecated classes and rake tasks
  260    - Add event filter for group and project show pages
  ...
  288    - You can use arrows to navigate at tree view
  289    - Add project filter on dashboard
  290:   - Cache project graph
  291    - Drop support of root namespaces
  292    - Default theme is classic now
  293:   - Cache result of methods like authorize_projects, project.team.members etc
  294    - Remove $.ready events
  295    - Fix onclick events being double binded

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/application.rb:
   21      # Activate observers that should always be running.
   22      config.active_record.observers = :milestone_observer,
   23:                                      :project_activity_cache_observer,
   24                                       :note_observer,
   25                                       :project_observer,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/environments/development.rb:
    5    # every request. This slows down response time but is perfect for development
    6    # since you don't have to restart the web server when you make code changes.
    7:   config.cache_classes = false
    8  
    9    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/environments/production.rb:
    3  
    4    # Code is not reloaded between requests
    5:   config.cache_classes = true
    6  
    7    # Full error reports are disabled and caching is turned on
    .
   46    # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)
   47  
   48:   # Use a different cache store in production
   49    config_file = Rails.root.join('config', 'resque.yml')
   50  
   ..
   54                   "redis://localhost:6379"
   55                 end
   56:   config.cache_store = :redis_store, resque_url, {namespace: 'cache:gitlab'}
   57  
   58    # Enable serving of images, stylesheets, and JavaScripts from an asset server

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/environments/test.rb:
    6    # your test database is "scratch space" for the test suite and is wiped
    7    # and recreated between test runs. Don't rely on the data there!
    8:   config.cache_classes = true
    9  
   10:   # Configure static asset server for tests with Cache-Control for performance
   11    config.serve_static_assets = true
   12:   config.static_cache_control = "public, max-age=3600"
   13  
   14    # Show full error reports and disable caching

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/initializers/carrierwave.rb:
   15      config.fog_directory  = AWS_CONFIG['bucket']                    # required
   16      config.fog_public     = false                                   # optional, defaults to true
   17:     config.fog_attributes = {'Cache-Control'=>'max-age=315576000'}  # optional, defaults to {}
   18      config.fog_authenticated_url_expiration = 1 << 29               # optional time (in seconds) that authenticated urls will be valid.
   19                                                                      # when fog_public is false and provider is AWS or Google, defaults to 600

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/initializers/session_store.rb:
    3  Gitlab::Application.config.session_store(
    4    :redis_store, # Using the cookie_store would enable session replay attacks.
    5:   servers: Gitlab::Application.config.cache_store[1], # re-use the Redis config from the Rails cache store
    6    key: '_gitlab_session',
    7    secure: Gitlab.config.gitlab.https,

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/unicorn.rb:
   21  
   22  # Use at least one worker per core if you're on a dedicated server,
   23: # more will usually help for _short_ waits on databases/caches.
   24  worker_processes 2
   25  
   ..
  107  
  108    # if preload_app is true, then you may also want to check and
  109:   # restart any other shared sockets/descriptors such as Memcached,
  110    # and Redis.  TokyoCabinet file handles are safe to reuse
  111    # between any number of forked children (assuming your kernel

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/config/unicorn.rb.example:
   21  
   22  # Use at least one worker per core if you're on a dedicated server,
   23: # more will usually help for _short_ waits on databases/caches.
   24  worker_processes 2
   25  
   ..
  107  
  108    # if preload_app is true, then you may also want to check and
  109:   # restart any other shared sockets/descriptors such as Memcached,
  110    # and Redis.  TokyoCabinet file handles are safe to reuse
  111    # between any number of forked children (assuming your kernel

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/5.0-to-5.1.md:
    7  
    8  * `unicorn` replaced with `puma`
    9: * merge request cached diff will be truncated
   10  
   11  ### 1. Stop server

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/5.1-to-6.0.md:
   76  sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production
   77  
   78: # Clear redis cache
   79: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   80  
   81  # Clear and precompile assets

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/5.4-to-6.0.md:
   76  sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production
   77  
   78: # Clear redis cache
   79: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   80  
   81  # Clear and precompile assets

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.0-to-6.1.md:
   60  sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production
   61  sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production
   62: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   63  ```
   64  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.0-to-6.8.md:
   79  sudo -u git -H bundle exec rake migrate_iids RAILS_ENV=production
   80  
   81: # Clean up assets and cache
   82: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   83  
   84  # Close access to gitlab-satellites for others

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.1-to-6.2.md:
   56  sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production
   57  sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production
   58: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   59  ```
   60  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.2-to-6.3.md:
   51  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   52  
   53: # Clean up assets and cache
   54: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   55  ```
   56  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.3-to-6.4.md:
   46  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   47  
   48: # Clean up assets and cache
   49: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   50  
   51  # Update init.d script

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.4-to-6.5.md:
   56  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   57  
   58: # Clean up assets and cache
   59: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   60  
   61  # Update init.d script

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.5-to-6.6.md:
   56  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   57  
   58: # Clean up assets and cache
   59: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   60  
   61  # Update init.d script

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.6-to-6.7.md:
   56  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   57  
   58: # Clean up assets and cache
   59: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   60  
   61  # Update init.d script

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/6.7-to-6.8.md:
   58  sudo -u git -H bundle exec rake db:migrate RAILS_ENV=production
   59  
   60: # Clean up assets and cache
   61: sudo -u git -H bundle exec rake assets:clean assets:precompile cache:clear RAILS_ENV=production
   62  
   63  # Update init.d script

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/patch_versions.md:
   49  sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production
   50  sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production
   51: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   52  ```
   53  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/doc/update/ruby.md:
   28  ```bash
   29  cd /tmp
   30: curl --progress http://cache.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz
   31  cd ruby-2.0.0-p353
   32  ./configure --disable-install-rdoc

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/features/steps/profile/emails.rb:
   33      # there should only be one remove button at this time
   34      click_link "Remove"
   35:     # force these to reload as they have been cached
   36      @user.emails.reload
   37    end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/Gemfile:
  120  gem 'version_sorter'
  121  
  122: # Cache
  123  gem "redis-rails"
  124  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/lib/gitlab/upgrader.rb:
   58          "Migrate DB" => %W(bundle exec rake db:migrate),
   59          "Recompile assets" => %W(bundle exec rake assets:clean assets:precompile),
   60:         "Clear cache" => %W(bundle exec rake cache:clear)
   61        }
   62      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/lib/support/deploy/deploy.sh:
   34  sudo -u git -H bundle exec rake assets:clean RAILS_ENV=production
   35  sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production
   36: sudo -u git -H bundle exec rake cache:clear RAILS_ENV=production
   37  
   38  # return stashed changes (if necessary)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/lib/support/nginx/gitlab:
   64      gzip_static on; # to serve pre-gzipped version
   65      expires max;
   66:     add_header Cache-Control public;
   67    }
   68  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/lib/tasks/cache.rake:
    1: namespace :cache do
    2:   desc "GITLAB | Clear redis cache"
    3    task :clear => :environment do
    4:     Rails.cache.clear
    5    end
    6  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/log/sidekiq.log:
   20  /home/git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_handling.rb:53:in `connection'
   21  /home/git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/model_schema.rb:203:in `table_exists?'
   22: /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/acts_as_taggable_on/cache.rb:5:in `included'
   23  /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/taggable.rb:98:in `include'
   24  /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/taggable.rb:98:in `taggable_on'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/log/unicorn.stderr.log:
   19  	from /home/git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/connection_handling.rb:53:in `connection'
   20  	from /home/git/gitlab/.bundle/ruby/2.0.0/gems/activerecord-4.0.3/lib/active_record/model_schema.rb:203:in `table_exists?'
   21: 	from /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/acts_as_taggable_on/cache.rb:5:in `included'
   22  	from /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/taggable.rb:98:in `include'
   23  	from /home/git/gitlab/.bundle/ruby/2.0.0/gems/acts-as-taggable-on-2.4.1/lib/acts_as_taggable_on/taggable.rb:98:in `taggable_on'

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/spec/lib/gitlab/popen_spec.rb:
   15  
   16      it { @status.should be_zero }
   17:     it { @output.should include('cache') }
   18    end
   19  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/vendor/assets/javascripts/jquery.history.js:
    1: window.JSON||(window.JSON={}),function(){function f(a){return a<10?"0"+a:a}function quote(a){return escapable.lastIndex=0,escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="string"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.apply(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";return e=h.length===0?"[]":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g,e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)d=rep[c],typeof d=="string"&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in i)Object.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e));return e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=g,e}}"use strict",typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var JSON=window.JSON,cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e=="object")for(c in e)Object.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}(),function(a,b){"use strict";var c=a.History=a.History||{},d=a.jQuery;if(typeof c.Adapter!="undefined")throw new Error("History.js Adapter has already been loaded...");c.Adapter={bind:function(a,b,c){d(a).bind(b,c)},trigger:function(a,b,c){d(a).trigger(b,c)},extractEventData:function(a,c,d){var e=c&&c.originalEvent&&c.originalEvent[a]||d&&d[a]||b;return e},onDomLoad:function(a){d(a)}},typeof c.init!="undefined"&&c.init()}(window),function(a,b){"use strict";var c=a.document,d=a.setTimeout||d,e=a.clearTimeout||e,f=a.setInterval||f,g=a.History=a.History||{};if(typeof g.initHtml4!="undefined")throw new Error("History.js HTML4 Support has already been loaded...");g.initHtml4=function(){if(typeof g.initHtml4.initialized!="undefined")return!1;g.initHtml4.initialized=!0,g.enabled=!0,g.savedHashes=[],g.isLastHash=function(a){var b=g.getHashByIndex(),c;return c=a===b,c},g.saveHash=function(a){return g.isLastHash(a)?!1:(g.savedHashes.push(a),!0)},g.getHashByIndex=function(a){var b=null;return typeof a=="undefined"?b=g.savedHashes[g.savedHashes.length-1]:a<0?b=g.savedHashes[g.savedHashes.length+a]:b=g.savedHashes[a],b},g.discardedHashes={},g.discardedStates={},g.discardState=function(a,b,c){var d=g.getHashByState(a),e;return e={discardedState:a,backState:c,forwardState:b},g.discardedStates[d]=e,!0},g.discardHash=function(a,b,c){var d={discardedHash:a,backState:c,forwardState:b};return g.discardedHashes[a]=d,!0},g.discardedState=function(a){var b=g.getHashByState(a),c;return c=g.discardedStates[b]||!1,c},g.discardedHash=function(a){var b=g.discardedHashes[a]||!1;return b},g.recycleState=function(a){var b=g.getHashByState(a);return g.discardedState(a)&&delete g.discardedStates[b],!0},g.emulated.hashChange&&(g.hashChangeInit=function(){g.checkerFunction=null;var b="",d,e,h,i;return g.isInternetExplorer()?(d="historyjs-iframe",e=c.createElement("iframe"),e.setAttribute("id",d),e.style.display="none",c.body.appendChild(e),e.contentWindow.document.open(),e.contentWindow.document.close(),h="",i=!1,g.checkerFunction=function(){if(i)return!1;i=!0;var c=g.getHash()||"",d=g.unescapeHash(e.contentWindow.document.location.hash)||"";return c!==b?(b=c,d!==c&&(h=d=c,e.contentWindow.document.open(),e.contentWindow.document.close(),e.contentWindow.document.location.hash=g.escapeHash(c)),g.Adapter.trigger(a,"hashchange")):d!==h&&(h=d,g.setHash(d,!1)),i=!1,!0}):g.checkerFunction=function(){var c=g.getHash();return c!==b&&(b=c,g.Adapter.trigger(a,"hashchange")),!0},g.intervalList.push(f(g.checkerFunction,g.options.hashChangeInterval)),!0},g.Adapter.onDomLoad(g.hashChangeInit)),g.emulated.pushState&&(g.onHashChange=function(b){var d=b&&b.newURL||c.location.href,e=g.getHashByUrl(d),f=null,h=null,i=null,j;return g.isLastHash(e)?(g.busy(!1),!1):(g.doubleCheckComplete(),g.saveHash(e),e&&g.isTraditionalAnchor(e)?(g.Adapter.trigger(a,"anchorchange"),g.busy(!1),!1):(f=g.extractState(g.getFullUrl(e||c.location.href,!1),!0),g.isLastSavedState(f)?(g.busy(!1),!1):(h=g.getHashByState(f),j=g.discardedState(f),j?(g.getHashByIndex(-2)===g.getHashByState(j.forwardState)?g.back(!1):g.forward(!1),!1):(g.pushState(f.data,f.title,f.url,!1),!0))))},g.Adapter.bind(a,"hashchange",g.onHashChange),g.pushState=function(b,d,e,f){if(g.getHashByUrl(e))throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(f!==!1&&g.busy())return g.pushQueue({scope:g,callback:g.pushState,args:arguments,queue:f}),!1;g.busy(!0);var h=g.createStateObject(b,d,e),i=g.getHashByState(h),j=g.getState(!1),k=g.getHashByState(j),l=g.getHash();return g.storeState(h),g.expectedStateId=h.id,g.recycleState(h),g.setTitle(h),i===k?(g.busy(!1),!1):i!==l&&i!==g.getShortUrl(c.location.href)?(g.setHash(i,!1),!1):(g.saveState(h),g.Adapter.trigger(a,"statechange"),g.busy(!1),!0)},g.replaceState=function(a,b,c,d){if(g.getHashByUrl(c))throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(d!==!1&&g.busy())return g.pushQueue({scope:g,callback:g.replaceState,args:arguments,queue:d}),!1;g.busy(!0);var e=g.createStateObject(a,b,c),f=g.getState(!1),h=g.getStateByIndex(-2);return g.discardState(f,e,h),g.pushState(e.data,e.title,e.url,!1),!0}),g.emulated.pushState&&g.getHash()&&!g.emulated.hashChange&&g.Adapter.onDomLoad(function(){g.Adapter.trigger(a,"hashchange")})},typeof g.init!="undefined"&&g.init()}(window),function(a,b){"use strict";var c=a.console||b,d=a.document,e=a.navigator,f=a.sessionStorage||!1,g=a.setTimeout,h=a.clearTimeout,i=a.setInterval,j=a.clearInterval,k=a.JSON,l=a.alert,m=a.History=a.History||{},n=a.history;k.stringify=k.stringify||k.encode,k.parse=k.parse||k.decode;if(typeof m.init!="undefined")throw new Error("History.js Core has already been loaded...");m.init=function(){return typeof m.Adapter=="undefined"?!1:(typeof m.initCore!="undefined"&&m.initCore(),typeof m.initHtml4!="undefined"&&m.initHtml4(),!0)},m.initCore=function(){if(typeof m.initCore.initialized!="undefined")return!1;m.initCore.initialized=!0,m.options=m.options||{},m.options.hashChangeInterval=m.options.hashChangeInterval||100,m.options.safariPollInterval=m.options.safariPollInterval||500,m.options.doubleCheckInterval=m.options.doubleCheckInterval||500,m.options.storeInterval=m.options.storeInterval||1e3,m.options.busyDelay=m.options.busyDelay||250,m.options.debug=m.options.debug||!1,m.options.initialTitle=m.options.initialTitle||d.title,m.intervalList=[],m.clearAllIntervals=function(){var a,b=m.intervalList;if(typeof b!="undefined"&&b!==null){for(a=0;a<b.length;a++)j(b[a]);m.intervalList=null}},m.debug=function(){(m.options.debug||!1)&&m.log.apply(m,arguments)},m.log=function(){var a=typeof c!="undefined"&&typeof c.log!="undefined"&&typeof c.log.apply!="undefined",b=d.getElementById("log"),e,f,g,h,i;a?(h=Array.prototype.slice.call(arguments),e=h.shift(),typeof c.debug!="undefined"?c.debug.apply(c,[e,h]):c.log.apply(c,[e,h])):e="\n"+arguments[0]+"\n";for(f=1,g=arguments.length;f<g;++f){i=arguments[f];if(typeof i=="object"&&typeof k!="undefined")try{i=k.stringify(i)}catch(j){}e+="\n"+i+"\n"}return b?(b.value+=e+"\n-----\n",b.scrollTop=b.scrollHeight-b.clientHeight):a||l(e),!0},m.getInternetExplorerMajorVersion=function(){var a=m.getInternetExplorerMajorVersion.cached=typeof m.getInternetExplorerMajorVersion.cached!="undefined"?m.getInternetExplorerMajorVersion.cached:function(){var a=3,b=d.createElement("div"),c=b.getElementsByTagName("i");while((b.innerHTML="<!--[if gt IE "+ ++a+"]><i></i><![endif]-->")&&c[0]);return a>4?a:!1}();return a},m.isInternetExplorer=function(){var a=m.isInternetExplorer.cached=typeof m.isInternetExplorer.cached!="undefined"?m.isInternetExplorer.cached:Boolean(m.getInternetExplorerMajorVersion());return a},m.emulated={pushState:!Boolean(a.history&&a.history.pushState&&a.history.replaceState&&!/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(e.userAgent)&&!/AppleWebKit\/5([0-2]|3[0-2])/i.test(e.userAgent)),hashChange:Boolean(!("onhashchange"in a||"onhashchange"in d)||m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<8)},m.enabled=!m.emulated.pushState,m.bugs={setHash:Boolean(!m.emulated.pushState&&e.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(e.userAgent)),safariPoll:Boolean(!m.emulated.pushState&&e.vendor==="Apple Computer, Inc."&&/AppleWebKit\/5([0-2]|3[0-3])/.test(e.userAgent)),ieDoubleCheck:Boolean(m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<8),hashEscape:Boolean(m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<7)},m.isEmptyObject=function(a){for(var b in a)return!1;return!0},m.cloneObject=function(a){var b,c;return a?(b=k.stringify(a),c=k.parse(b)):c={},c},m.getRootUrl=function(){var a=d.location.protocol+"//"+(d.location.hostname||d.location.host);if(d.location.port||!1)a+=":"+d.location.port;return a+="/",a},m.getBaseHref=function(){var a=d.getElementsByTagName("base"),b=null,c="";return a.length===1&&(b=a[0],c=b.href.replace(/[^\/]+$/,"")),c=c.replace(/\/+$/,""),c&&(c+="/"),c},m.getBaseUrl=function(){var a=m.getBaseHref()||m.getBasePageUrl()||m.getRootUrl();return a},m.getPageUrl=function(){var a=m.getState(!1,!1),b=(a||{}).url||d.location.href,c;return c=b.replace(/\/+$/,"").replace(/[^\/]+$/,function(a,b,c){return/\./.test(a)?a:a+"/"}),c},m.getBasePageUrl=function(){var a=d.location.href.replace(/[#\?].*/,"").replace(/[^\/]+$/,function(a,b,c){return/[^\/]$/.test(a)?"":a}).replace(/\/+$/,"")+"/";return a},m.getFullUrl=function(a,b){var c=a,d=a.substring(0,1);return b=typeof b=="undefined"?!0:b,/[a-z]+\:\/\//.test(a)||(d==="/"?c=m.getRootUrl()+a.replace(/^\/+/,""):d==="#"?c=m.getPageUrl().replace(/#.*/,"")+a:d==="?"?c=m.getPageUrl().replace(/[\?#].*/,"")+a:b?c=m.getBaseUrl()+a.replace(/^(\.\/)+/,""):c=m.getBasePageUrl()+a.replace(/^(\.\/)+/,"")),c.replace(/\#$/,"")},m.getShortUrl=function(a){var b=a,c=m.getBaseUrl(),d=m.getRootUrl();return m.emulated.pushState&&(b=b.replace(c,"")),b=b.replace(d,"/"),m.isTraditionalAnchor(b)&&(b="./"+b),b=b.replace(/^(\.\/)+/g,"./").replace(/\#$/,""),b},m.store={},m.idToState=m.idToState||{},m.stateToId=m.stateToId||{},m.urlToId=m.urlToId||{},m.storedStates=m.storedStates||[],m.savedStates=m.savedStates||[],m.normalizeStore=function(){m.store.idToState=m.store.idToState||{},m.store.urlToId=m.store.urlToId||{},m.store.stateToId=m.store.stateToId||{}},m.getState=function(a,b){typeof a=="undefined"&&(a=!0),typeof b=="undefined"&&(b=!0);var c=m.getLastSavedState();return!c&&b&&(c=m.createStateObject()),a&&(c=m.cloneObject(c),c.url=c.cleanUrl||c.url),c},m.getIdByState=function(a){var b=m.extractId(a.url),c;if(!b){c=m.getStateString(a);if(typeof m.stateToId[c]!="undefined")b=m.stateToId[c];else if(typeof m.store.stateToId[c]!="undefined")b=m.store.stateToId[c];else{for(;;){b=(new Date).getTime()+String(Math.random()).replace(/\D/g,"");if(typeof m.idToState[b]=="undefined"&&typeof m.store.idToState[b]=="undefined")break}m.stateToId[c]=b,m.idToState[b]=a}}return b},m.normalizeState=function(a){var b,c;if(!a||typeof a!="object")a={};if(typeof a.normalized!="undefined")return a;if(!a.data||typeof a.data!="object")a.data={};b={},b.normalized=!0,b.title=a.title||"",b.url=m.getFullUrl(m.unescapeString(a.url||d.location.href)),b.hash=m.getShortUrl(b.url),b.data=m.cloneObject(a.data),b.id=m.getIdByState(b),b.cleanUrl=b.url.replace(/\??\&_suid.*/,""),b.url=b.cleanUrl,c=!m.isEmptyObject(b.data);if(b.title||c)b.hash=m.getShortUrl(b.url).replace(/\??\&_suid.*/,""),/\?/.test(b.hash)||(b.hash+="?"),b.hash+="&_suid="+b.id;return b.hashedUrl=m.getFullUrl(b.hash),(m.emulated.pushState||m.bugs.safariPoll)&&m.hasUrlDuplicate(b)&&(b.url=b.hashedUrl),b},m.createStateObject=function(a,b,c){var d={data:a,title:b,url:c};return d=m.normalizeState(d),d},m.getStateById=function(a){a=String(a);var c=m.idToState[a]||m.store.idToState[a]||b;return c},m.getStateString=function(a){var b,c,d;return b=m.normalizeState(a),c={data:b.data,title:a.title,url:a.url},d=k.stringify(c),d},m.getStateId=function(a){var b,c;return b=m.normalizeState(a),c=b.id,c},m.getHashByState=function(a){var b,c;return b=m.normalizeState(a),c=b.hash,c},m.extractId=function(a){var b,c,d;return c=/(.*)\&_suid=([0-9]+)$/.exec(a),d=c?c[1]||a:a,b=c?String(c[2]||""):"",b||!1},m.isTraditionalAnchor=function(a){var b=!/[\/\?\.]/.test(a);return b},m.extractState=function(a,b){var c=null,d,e;return b=b||!1,d=m.extractId(a),d&&(c=m.getStateById(d)),c||(e=m.getFullUrl(a),d=m.getIdByUrl(e)||!1,d&&(c=m.getStateById(d)),!c&&b&&!m.isTraditionalAnchor(a)&&(c=m.createStateObject(null,null,e))),c},m.getIdByUrl=function(a){var c=m.urlToId[a]||m.store.urlToId[a]||b;return c},m.getLastSavedState=function(){return m.savedStates[m.savedStates.length-1]||b},m.getLastStoredState=function(){return m.storedStates[m.storedStates.length-1]||b},m.hasUrlDuplicate=function(a){var b=!1,c;return c=m.extractState(a.url),b=c&&c.id!==a.id,b},m.storeState=function(a){return m.urlToId[a.url]=a.id,m.storedStates.push(m.cloneObject(a)),a},m.isLastSavedState=function(a){var b=!1,c,d,e;return m.savedStates.length&&(c=a.id,d=m.getLastSavedState(),e=d.id,b=c===e),b},m.saveState=function(a){return m.isLastSavedState(a)?!1:(m.savedStates.push(m.cloneObject(a)),!0)},m.getStateByIndex=function(a){var b=null;return typeof a=="undefined"?b=m.savedStates[m.savedStates.length-1]:a<0?b=m.savedStates[m.savedStates.length+a]:b=m.savedStates[a],b},m.getHash=function(){var a=m.unescapeHash(d.location.hash);return a},m.unescapeString=function(b){var c=b,d;for(;;){d=a.unescape(c);if(d===c)break;c=d}return c},m.unescapeHash=function(a){var b=m.normalizeHash(a);return b=m.unescapeString(b),b},m.normalizeHash=function(a){var b=a.replace(/[^#]*#/,"").replace(/#.*/,"");return b},m.setHash=function(a,b){var c,e,f;return b!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.setHash,args:arguments,queue:b}),!1):(c=m.escapeHash(a),m.busy(!0),e=m.extractState(a,!0),e&&!m.emulated.pushState?m.pushState(e.data,e.title,e.url,!1):d.location.hash!==c&&(m.bugs.setHash?(f=m.getPageUrl(),m.pushState(null,null,f+"#"+c,!1)):d.location.hash=c),m)},m.escapeHash=function(b){var c=m.normalizeHash(b);return c=a.escape(c),m.bugs.hashEscape||(c=c.replace(/\%21/g,"!").replace(/\%26/g,"&").replace(/\%3D/g,"=").replace(/\%3F/g,"?")),c},m.getHashByUrl=function(a){var b=String(a).replace(/([^#]*)#?([^#]*)#?(.*)/,"$2");return b=m.unescapeHash(b),b},m.setTitle=function(a){var b=a.title,c;b||(c=m.getStateByIndex(0),c&&c.url===a.url&&(b=c.title||m.options.initialTitle));try{d.getElementsByTagName("title")[0].innerHTML=b.replace("<","&lt;").replace(">","&gt;").replace(" & "," &amp; ")}catch(e){}return d.title=b,m},m.queues=[],m.busy=function(a){typeof a!="undefined"?m.busy.flag=a:typeof m.busy.flag=="undefined"&&(m.busy.flag=!1);if(!m.busy.flag){h(m.busy.timeout);var b=function(){var a,c,d;if(m.busy.flag)return;for(a=m.queues.length-1;a>=0;--a){c=m.queues[a];if(c.length===0)continue;d=c.shift(),m.fireQueueItem(d),m.busy.timeout=g(b,m.options.busyDelay)}};m.busy.timeout=g(b,m.options.busyDelay)}return m.busy.flag},m.busy.flag=!1,m.fireQueueItem=function(a){return a.callback.apply(a.scope||m,a.args||[])},m.pushQueue=function(a){return m.queues[a.queue||0]=m.queues[a.queue||0]||[],m.queues[a.queue||0].push(a),m},m.queue=function(a,b){return typeof a=="function"&&(a={callback:a}),typeof b!="undefined"&&(a.queue=b),m.busy()?m.pushQueue(a):m.fireQueueItem(a),m},m.clearQueue=function(){return m.busy.flag=!1,m.queues=[],m},m.stateChanged=!1,m.doubleChecker=!1,m.doubleCheckComplete=function(){return m.stateChanged=!0,m.doubleCheckClear(),m},m.doubleCheckClear=function(){return m.doubleChecker&&(h(m.doubleChecker),m.doubleChecker=!1),m},m.doubleCheck=function(a){return m.stateChanged=!1,m.doubleCheckClear(),m.bugs.ieDoubleCheck&&(m.doubleChecker=g(function(){return m.doubleCheckClear(),m.stateChanged||a(),!0},m.options.doubleCheckInterval)),m},m.safariStatePoll=function(){var b=m.extractState(d.location.href),c;if(!m.isLastSavedState(b))c=b;else return;return c||(c=m.createStateObject()),m.Adapter.trigger(a,"popstate"),m},m.back=function(a){return a!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.back,args:arguments,queue:a}),!1):(m.busy(!0),m.doubleCheck(function(){m.back(!1)}),n.go(-1),!0)},m.forward=function(a){return a!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.forward,args:arguments,queue:a}),!1):(m.busy(!0),m.doubleCheck(function(){m.forward(!1)}),n.go(1),!0)},m.go=function(a,b){var c;if(a>0)for(c=1;c<=a;++c)m.forward(b);else{if(!(a<0))throw new Error("History.go: History.go requires a positive or negative integer passed.");for(c=-1;c>=a;--c)m.back(b)}return m};if(m.emulated.pushState){var o=function(){};m.pushState=m.pushState||o,m.replaceState=m.replaceState||o}else m.onPopState=function(b,c){var e=!1,f=!1,g,h;return m.doubleCheckComplete(),g=m.getHash(),g?(h=m.extractState(g||d.location.href,!0),h?m.replaceState(h.data,h.title,h.url,!1):(m.Adapter.trigger(a,"anchorchange"),m.busy(!1)),m.expectedStateId=!1,!1):(e=m.Adapter.extractEventData("state",b,c)||!1,e?f=m.getStateById(e):m.expectedStateId?f=m.getStateById(m.expectedStateId):f=m.extractState(d.location.href),f||(f=m.createStateObject(null,null,d.location.href)),m.expectedStateId=!1,m.isLastSavedState(f)?(m.busy(!1),!1):(m.storeState(f),m.saveState(f),m.setTitle(f),m.Adapter.trigger(a,"statechange"),m.busy(!1),!0))},m.Adapter.bind(a,"popstate",m.onPopState),m.pushState=function(b,c,d,e){if(m.getHashByUrl(d)&&m.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(e!==!1&&m.busy())return m.pushQueue({scope:m,callback:m.pushState,args:arguments,queue:e}),!1;m.busy(!0);var f=m.createStateObject(b,c,d);return m.isLastSavedState(f)?m.busy(!1):(m.storeState(f),m.expectedStateId=f.id,n.pushState(f.id,f.title,f.url),m.Adapter.trigger(a,"popstate")),!0},m.replaceState=function(b,c,d,e){if(m.getHashByUrl(d)&&m.emulated.pushState)throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).");if(e!==!1&&m.busy())return m.pushQueue({scope:m,callback:m.replaceState,args:arguments,queue:e}),!1;m.busy(!0);var f=m.createStateObject(b,c,d);return m.isLastSavedState(f)?m.busy(!1):(m.storeState(f),m.expectedStateId=f.id,n.replaceState(f.id,f.title,f.url),m.Adapter.trigger(a,"popstate")),!0};if(f){try{m.store=k.parse(f.getItem("History.store"))||{}}catch(p){m.store={}}m.normalizeStore()}else m.store={},m.normalizeStore();m.Adapter.bind(a,"beforeunload",m.clearAllIntervals),m.Adapter.bind(a,"unload",m.clearAllIntervals),m.saveState(m.storeState(m.extractState(d.location.href,!0))),f&&(m.onUnload=function(){var a,b;try{a=k.parse(f.getItem("History.store"))||{}}catch(c){a={}}a.idToState=a.idToState||{},a.urlToId=a.urlToId||{},a.stateToId=a.stateToId||{};for(b in m.idToState){if(!m.idToState.hasOwnProperty(b))continue;a.idToState[b]=m.idToState[b]}for(b in m.urlToId){if(!m.urlToId.hasOwnProperty(b))continue;a.urlToId[b]=m.urlToId[b]}for(b in m.stateToId){if(!m.stateToId.hasOwnProperty(b))continue;a.stateToId[b]=m.stateToId[b]}m.store=a,m.normalizeStore(),f.setItem("History.store",k.stringify(a))},m.intervalList.push(i(m.onUnload,m.options.storeInterval)),m.Adapter.bind(a,"beforeunload",m.onUnload),m.Adapter.bind(a,"unload",m.onUnload));if(!m.emulated.pushState){m.bugs.safariPoll&&m.intervalList.push(i(m.safariStatePoll,m.options.safariPollInterval));if(e.vendor==="Apple Computer, Inc."||(e.appCodeName||"")==="Mozilla")m.Adapter.bind(a,"hashchange",function(){m.Adapter.trigger(a,"popstate")}),m.getHash()&&m.Adapter.onDomLoad(function(){m.Adapter.trigger(a,"hashchange")})}},m.init()}(window)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/vendor/assets/javascripts/jquery.waitforimages.js:
   27      
   28      // Custom selector to find `img` elements that have a valid `src` attribute and have not already loaded.
   29:     $.expr[':'].uncached = function(obj) {
   30          // Ensure we are dealing with an `img` element with a valid `src` attribute.
   31          if ( ! $(obj).is('img[src!=""]')) {
   ..
   76  
   77                      // If an `img` element, add it. But keep iterating in case it has a background image too.
   78:                     if (element.is('img:uncached')) {
   79                          allImgs.push({
   80                              src: element.attr('src'),
   ..
  103                  // For images only, the task is simpler.
  104                  obj
  105:                  .find('img:uncached')
  106                   .each(function() {
  107                      allImgs.push({

10718 matches across 1022 files


Searching 728 files for ":commit_count"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/repository.rb:
  111  
  112    def commit_count
  113:     Rails.cache.fetch(cache_key(:commit_count)) do
  114        begin
  115          raw_repository.raw.commit_count
  ...
  132      Rails.cache.delete(cache_key(:branch_names))
  133      Rails.cache.delete(cache_key(:tag_names))
  134:     Rails.cache.delete(cache_key(:commit_count))
  135      Rails.cache.delete(cache_key(:graph_log))
  136      Rails.cache.delete(cache_key(:readme))

2 matches in 1 file


Searching 26642 files for ":commit_count"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/repository.rb:
  111  
  112    def commit_count
  113:     Rails.cache.fetch(cache_key(:commit_count)) do
  114        begin
  115          raw_repository.raw.commit_count
  ...
  132      Rails.cache.delete(cache_key(:branch_names))
  133      Rails.cache.delete(cache_key(:tag_names))
  134:     Rails.cache.delete(cache_key(:commit_count))
  135      Rails.cache.delete(cache_key(:graph_log))
  136      Rails.cache.delete(cache_key(:readme))

2 matches in 1 file


Searching 26658 files for ":commit_count"



Searching 26658 files for "commit_count"

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab-grit-2.6.5/lib/grit/repo.rb:
  428      #
  429      # Returns Integer
  430:     def commit_count(start = 'master')
  431        Commit.count(self, start)
  432      end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/gitlab_git-5.8.0/lib/gitlab_git/stats.rb:
   13  
   14        def commits_count
   15:         @commits_count ||= repo.commit_count(ref)
   16        end
   17  

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/.bundle/ruby/2.0.0/gems/sass-3.2.12/Rakefile:
  157    return written_version unless version.size == 5 && version[3] == "alpha" # prerelease
  158  
  159:   return written_version if (commit_count = `git log --pretty=oneline HEAD ^stable | wc -l`).empty?
  160:   version[4] = commit_count.strip
  161    version.join('.')
  162  end

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/models/repository.rb:
   86    end
   87  
   88:   def round_commit_count
   89:     if commit_count > 10000
   90        '10000+'
   91:     elsif commit_count > 5000
   92        '5000+'
   93:     elsif commit_count > 1000
   94        '1000+'
   95      else
   96:       commit_count
   97      end
   98    end
   ..
  110    end
  111  
  112:   def commit_count
  113:     Rails.cache.fetch(cache_key(:commit_count)) do
  114        begin
  115:         raw_repository.raw.commit_count
  116        rescue
  117          0
  ...
  132      Rails.cache.delete(cache_key(:branch_names))
  133      Rails.cache.delete(cache_key(:tag_names))
  134:     Rails.cache.delete(cache_key(:commit_count))
  135      Rails.cache.delete(cache_key(:graph_log))
  136      Rails.cache.delete(cache_key(:readme))

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/views/projects/_home_panel.html.haml:
   26        .col-md-4
   27          .project-home-links
   28:           = link_to pluralize(number_with_delimiter(@repository.commit_count), 'commit'), project_commits_path(@project, @ref || @repository.root_ref)
   29            = link_to pluralize(number_with_delimiter(@repository.branch_names.count), 'branch'), project_branches_path(@project)
   30            = link_to pluralize(number_with_delimiter(@repository.tag_names.count), 'tag'), project_tags_path(@project)

/Users/denise/Documents/repos/cookbook-gitlab/home_git/gitlab/app/views/public/projects/index.html.haml:
   55          .repo-info
   56            - unless project.empty_repo?
   57:             = link_to pluralize(project.repository.round_commit_count, 'commit'), project_commits_path(project, project.default_branch)
   58              &middot;
   59              = link_to pluralize(project.repository.branch_names.count, 'branch'), project_branches_path(project)

15 matches across 6 files
